<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>精通ES的单节点和集群安装</title>
    <url>/posts/ES_single_and_cluster_installation.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有用到搜索引擎<code>Solr</code>, 当时我想上<code>ElasticSearch</code>的, 然后趁机学习下, 可是<code>Leader</code>要用<code>Solr</code>没说原因.<br>现在想来, 应该机器资源不够.<br>结果<code>Solr</code>的文章还没出来, 反而先出了<code>ElasticSearch</code>的.<br>于是现在就开始学习如何精通<code>ElasticSearch</code>, 工欲善其事必先利其器, 先来精通一下如何安装.</p>
<a id="more"></a>
<h1 id="选择-ES-版本"><a href="#选择-ES-版本" class="headerlink" title="选择 ES 版本"></a>选择 ES 版本</h1><p><a href="https://www.elastic.co/cn/support/matrix" target="_blank" rel="noopener">https://www.elastic.co/cn/support/matrix</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center"><code>JDK8</code></th>
<th style="text-align:center"><code>JDK9</code></th>
<th style="text-align:center"><code>JDK10</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>5.6.x</code></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✖</td>
<td style="text-align:center">✖</td>
</tr>
<tr>
<td style="text-align:center"><code>6.0.x</code></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✖</td>
<td style="text-align:center">✖</td>
</tr>
<tr>
<td style="text-align:center"><code>6.1.x</code></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✖</td>
<td style="text-align:center">✖</td>
</tr>
<tr>
<td style="text-align:center"><code>6.2.x</code></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✖</td>
</tr>
<tr>
<td style="text-align:center"><code>6.3.x</code></td>
<td style="text-align:center">✔</td>
<td style="text-align:center">✖</td>
<td style="text-align:center">✔</td>
</tr>
</tbody>
</table>
<p>从官方提供的表格, 可以看到<code>6.x</code>开始, 官方将<code>JDK</code>打包到<code>ElasticSearch</code>里面了.<br>并且, <code>6.2.x</code>开始同时支持<code>JDK8</code>和<code>JDK9</code>, <code>6.3.x</code>同时支持<code>JDK8</code>和<code>JDK10</code>, 支持的版本号一路突飞猛进.<br>目前生产环境最新也才<code>JDK8</code>, 所以我这里选择了最新的<code>5.x</code>版本<code>5.6.3</code>.</p>
<h1 id="安装-ES-并在单节点启动"><a href="#安装-ES-并在单节点启动" class="headerlink" title="安装 ES 并在单节点启动"></a>安装 ES 并在单节点启动</h1><p>直接在<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">官网下载</a>就好了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.tar.gz</span><br><span class="line">tar zxvf elasticsearch-5.6.3.tar.gz</span><br><span class="line">mv elasticsearch-5.6.3 elasticsearch</span><br><span class="line"><span class="built_in">cd</span> elasticsearch/</span><br><span class="line">./bin/elasticsearch</span><br><span class="line"><span class="comment"># ./bin/elasticsearch -d # 后台启动</span></span><br></pre></td></tr></table></figure></p>
<p>然后访问<code>http://虚拟机IP:9200</code>.<br>一般这样就可以启动了, 但是我在虚拟机里面启动的, 所以出现了各种各样的问题.</p>
<h2 id="修改-jvm-内存"><a href="#修改-jvm-内存" class="headerlink" title="修改 jvm 内存"></a>修改 jvm 内存</h2><blockquote>
<p>OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=’Cannot allocate memory’ (errno=12)</p>
<p>There is insufficient memory for the Java Runtime Environment to continue.<br>Native memory allocation (mmap) failed to map 2060255232 bytes for committing reserved memory.<br>An error report file with more information is saved as:<br>/opt/elasticsearch/hs_err_pid3215.log</p>
</blockquote>
<p>可以看到, <code>JVM</code>内存不足了, 有两个建议</p>
<ol>
<li>给虚拟机加内存.</li>
<li>修改<code>-Xms</code>和<code>-Xmx</code>配置, 改小一点, 如<code>512m</code>.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config/jvm.options</span><br><span class="line"></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure>
<p>如果改了<code>JVM</code>配置还是启动不了, 就直接加虚拟机内存吧. 我后来是加了内存.</p>
<h2 id="禁止-root-用户启动"><a href="#禁止-root-用户启动" class="headerlink" title="禁止 root 用户启动"></a>禁止 root 用户启动</h2><blockquote>
<p>Caused by: java.lang.RuntimeException: can not run elasticsearch as root<br>    at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:106) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:195) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:342) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:132) ~[elasticsearch-5.6.3.jar:5.6.3]</p>
</blockquote>
<p>那就新建一个<code>es</code>用户就好了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个 es 用户组</span></span><br><span class="line">groupadd es</span><br><span class="line"><span class="comment"># 添加一个 es 用户</span></span><br><span class="line">useradd es -g es -p es -m</span><br><span class="line"><span class="comment"># 修改 elasticsearch 目录的权限</span></span><br><span class="line">chown -R es:es /opt/elasticsearch</span><br><span class="line"><span class="comment"># 切换到 es 用户, 并启动应用</span></span><br><span class="line">sudo su es</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p>
<h2 id="虚拟内存区域太低-vm-max-map-count"><a href="#虚拟内存区域太低-vm-max-map-count" class="headerlink" title="虚拟内存区域太低 vm.max_map_count"></a>虚拟内存区域太低 vm.max_map_count</h2><blockquote>
<p>ERROR: [1] bootstrap checks failed<br>[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
</blockquote>
<p><code>vm.max_map_count</code>是<code>linux</code>系统的一个配置, 限制一个进程拥有的<code>VMA</code>(虚拟内存区域)的数量.<br>不懂也没关系. 这是运维做的事, 咱们只要能跑起来就好了.<br>临时解决方案(重启失效)执行以下命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p>
<p>永久配置当然是写入文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"vm.max_map_count=262144"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p>
<h2 id="绑定-IP-允许局域网访问"><a href="#绑定-IP-允许局域网访问" class="headerlink" title="绑定 IP 允许局域网访问"></a>绑定 IP 允许局域网访问</h2><p>启动起来后, 发现浏览器访问<code>http://虚拟机IP:9200</code>失败.<br>然后在虚拟机执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:9200</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   "name" : "oYRDx50",</span></span><br><span class="line"><span class="comment">#   "cluster_name" : "elasticsearch",</span></span><br><span class="line"><span class="comment">#   "cluster_uuid" : "kXiVFPyvSdO-_s3zY06L3A",</span></span><br><span class="line"><span class="comment">#   "version" : &#123;</span></span><br><span class="line"><span class="comment">#     "number" : "5.6.3",</span></span><br><span class="line"><span class="comment">#     "build_hash" : "1a2f265",</span></span><br><span class="line"><span class="comment">#     "build_date" : "2017-10-06T20:33:39.012Z",</span></span><br><span class="line"><span class="comment">#     "build_snapshot" : false,</span></span><br><span class="line"><span class="comment">#     "lucene_version" : "6.6.1"</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   "tagline" : "You Know, for Search"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">curl http://虚拟机IP:9200</span><br><span class="line"><span class="comment"># curl: (7) Failed to connect to 虚拟机IP port 9200: 拒绝连接</span></span><br></pre></td></tr></table></figure></p>
<p>修改配置文件, 注意这里是危险操作, 生产环境不能绑定<code>0.0.0.0</code>, 绑定内网<code>IP</code>就好了.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"network.host: 0.0.0.0"</span> &gt;&gt; config/elasticsearch.yml</span><br></pre></td></tr></table></figure></p>
<h1 id="安装可视化插件-elasticsearch-head"><a href="#安装可视化插件-elasticsearch-head" class="headerlink" title="安装可视化插件 elasticsearch-head"></a>安装可视化插件 elasticsearch-head</h1><p>在安装<code>ElasticSearch</code>集群前, 先来安装一下这个可视化插件.<br><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener"><code>elasticsearch-head</code></a>提供了一个可视化的操作页面.<br>不同<code>ElasticSearch</code>版本有不同的安装方法.<br>在<code>5.0.0</code>后, <code>ElasticSearch</code>不再支持直接安装<code>elasticsearch-head</code>插件, 所以只能单独启动<code>elasticsearch-head</code>服务器.</p>
<blockquote>
<p><a href="https://github.com/mobz/elasticsearch-head/issues/262#issuecomment-228927247" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head/issues/262#issuecomment-228927247</a></p>
</blockquote>
<p>因为要安装<code>npm</code>, 我就懒得弄了, 直接跑<code>docker</code>搞定.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 9100:9100 -d mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure></p>
<p>然后修改<code>config/elasticsearch.yml</code>, 追加<code>CORS</code>跨域配置.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></p>
<p>然后访问<code>http://虚拟机IP:9100</code>打开控制台, 输入<code>http://虚拟机IP:9200</code>, 点击连接即可.</p>
<h1 id="安装-ES-集群"><a href="#安装-ES-集群" class="headerlink" title="安装 ES 集群"></a>安装 ES 集群</h1><p>要弄一个集群, 我们得先弄几个节点, 我们复制<code>/opt/elasticsearch</code>文件夹到<code>/opt/elasticsearch2</code>和<code>/opt/elasticsearch3</code>.<br>记得先删除里面的<code>data</code>目录, 否则会出现错误<code>failed to send join request to master</code>.</p>
<p>先设置个<code>master</code>节点, 修改<code>/opt/elasticsearch/config/elasticsearch.yml</code>.<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 支持跨域访问, 供 head 使用</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">ahao-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置节点名, 以及确定主节点</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">ahao-master</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>然后设置两个<code>slave</code>节点, 同样修改<code>config/elasticsearch.yml</code>, 记得修改端口号, 避免端口冲突.<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 支持跨域访问, 供 head 使用</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">8200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">ahao-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置节点名, 以及确定主节点地址</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">ahao-node1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["127.0.0.1"]</span></span><br></pre></td></tr></table></figure></p>
<p>然后都启动起来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/elasticsearch/bin/elasticsearch -d</span><br><span class="line">/opt/elasticsearch2/bin/elasticsearch -d</span><br><span class="line">/opt/elasticsearch3/bin/elasticsearch -d</span><br></pre></td></tr></table></figure></p>
<p>过一段时间, 启动完毕, 访问<code>http://虚拟机IP:9100</code>打开<code>head</code>控制台, 连接到任意一个节点, 就可以获取整个集群的信息.</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign之重复出现的FeignClientSpecification</title>
    <url>/posts/Repeated_FeignClientSpecification_of_Feign.html</url>
    <content><![CDATA[<h1 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h1><p>依赖:</p>
<ol>
<li><code>Spring Boot 2.1.6.RELEASE</code></li>
<li><code>Eureka Client 2.1.0.RELEASE</code></li>
<li><code>OpenFeign 2.1.0.RELEASE</code></li>
</ol>
<p>我们创建两个项目, <code>ahao-server</code>服务提供方和<code>ahao-client</code>服务调用方.<br><code>Eureka</code>可以使用我弄的一个<a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka" target="_blank" rel="noopener">开箱即用<code>Eureka</code></a></p>
<a id="more"></a>
<p>在<code>ahao-server</code>创建一个显示当前时间的<code>controller</code>, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8080</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"现在日期是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>).format(<span class="keyword">new</span> Date()); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">time</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"现在时间是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"hh时mm分ss秒"</span>).format(<span class="keyword">new</span> Date()); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>ahao-client</code>创建一个<code>controller</code>和两个<code>feign</code>客户端, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8081</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> DateApi dateApi;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> dateApi.date(); &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">time</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> timeApi.time(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DateApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>) <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>) <span class="function">String <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行<code>ahao-client</code>报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line">The bean &apos;AHAO-SERVER.FeignClientSpecification&apos;, defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line">Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure></p>
<p>这个叫做<code>AHAO-SERVER.FeignClientSpecification</code>的<code>Bean</code>是从哪来的???</p>
<h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p><code>Spring</code>打印出了异常堆栈. 我们跟进去看一下.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerClientConfiguration</span><span class="params">(BeanDefinitionRegistry registry, Object name, Object configuration)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        registry.registerBeanDefinition(name + <span class="string">"."</span> + FeignClientSpecification<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(), <span class="title">builder</span>.<span class="title">getBeanDefinition</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到, 这里注册了一个<code>Bean</code>, 名字就是<code>AHAO-SERVER.FeignClientSpecification</code>.<br>这个<code>name</code>是从外部传进来的.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerFeignClients</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        Map&lt;String, Object&gt; attributes = annotationMetadata.getAnnotationAttributes(FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>())</span>;</span><br><span class="line">        </span><br><span class="line">        String name = getClientName(attributes);</span><br><span class="line">        registerClientConfiguration(registry, name, attributes.get(<span class="string">"configuration"</span>));</span><br><span class="line"></span><br><span class="line">        registerFeignClient(registry, annotationMetadata, attributes);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到, <code>name</code>应该是从注解中的属性取值来的, 再看看<code>getClientName()</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        String value = (String) client.get(<span class="string">"contextId"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"value"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"name"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"serviceId"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Either 'name' or 'value' must be provided in @"</span> + FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一目了然了, 我们声明<code>@FeignClient</code>注解时, 只使用了<code>value</code>属性, 所以产生了冲突, 只要加上<code>contextId</code>就好了.</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>加上<code>contextId</code>属性即可.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>, contextId = <span class="string">"AHAO-SERVER-DATE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DateApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>) <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>, contextId = <span class="string">"AHAO-SERVER-TIME"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>) <span class="function">String <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Spring-Boot-Cloud-2-0-x-版本"><a href="#Spring-Boot-Cloud-2-0-x-版本" class="headerlink" title="Spring Boot/Cloud 2.0.x 版本"></a>Spring Boot/Cloud 2.0.x 版本</h1><p>我们切换到<code>Spring Boot/Cloud 2.0.x</code>版本, 发现没有<code>contextId</code>属性, 但是启动的时候可以正常启动, 不会报错<code>Bean</code>冲突.<br>看下<code>Spring Boot/Cloud 2.0.x</code>版本的源码.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        String value = (String) client.get(<span class="string">"value"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"name"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"serviceId"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Either 'name' or 'value' must be provided in @"</span> + FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看下<code>getClientName()</code>方法, 里面也没有使用<code>contextId</code>. 也就是会创建两个同名<code>AHAO-SERVER.FeignClientSpecification</code>的<code>Bean</code>.<br>后来翻了下<code>issue</code>发现了答案.</p>
<blockquote>
<p>spring boot 2.0.x<br>spring.main.allow-bean-definition-overriding default value is “true”<br>spring boot 2.1.x default value changed to “false”</p>
</blockquote>
<p>原来是允许<code>Bean</code>重复定义所以才没有报错. 关键在<code>spring.main.allow-bean-definition-overriding</code>这个属性.</p>
<ul>
<li><code>Spring Boot 2.0.x</code> 默认是 <code>true</code>.</li>
<li><code>Spring Boot 2.1.x</code> 默认是 <code>false</code>.</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/90/commits/82fa5181fdd2e23e7414521f468ecea88e17d157" target="_blank" rel="noopener">Support Multiple Clients Using The Same Service</a></li>
<li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/81#issuecomment-447188550" target="_blank" rel="noopener">BeanDefinitionOverrideException in FeignClientsRegistrar in tests with customized Spring context</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Feign</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>FeignClient 出现 Ambiguous mapping 重复映射</title>
    <url>/posts/FeignClient_and_Ambiguous_mapping.html</url>
    <content><![CDATA[<h1 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h1><p>依赖:</p>
<ol>
<li><code>Spring Boot 2.1.6.RELEASE</code></li>
<li><code>Eureka Client 2.1.0.RELEASE</code></li>
<li><code>OpenFeign 2.1.0.RELEASE</code></li>
</ol>
<p>我们创建两个项目, <code>ahao-server</code>服务提供方和<code>ahao-client</code>服务调用方.<br><code>Eureka</code>可以使用我弄的一个<a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka" target="_blank" rel="noopener">开箱即用<code>Eureka</code></a></p>
<a id="more"></a>
<p>在<code>ahao-server</code>创建一个显示当前时间的<code>controller</code>, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8080</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nowTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"现在时间是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>ahao-client</code>创建一个<code>controller</code>和一个<code>feign</code>客户端, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8081</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeApi.nowTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行<code>ahao-client</code>报错<code>java.lang.IllegalStateException: Ambiguous mapping.</code><br>我们改一下<code>ahao-client</code>的<code>controller</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/my-now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeApi.nowTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再运行<code>ahao-client</code>就可以了.<br>我们访问<code>http://localhost:8081/ahao/my-now</code>可以得到<code>ahao-server</code>提供的时间服务, 但是访问<code>http://localhost:8081/ahao/now</code>就是<code>404</code>了.<br>那为什么会出现<code>java.lang.IllegalStateException: Ambiguous mapping.</code>呢?</p>
<h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>我们看下<code>RequestMappingHandlerMapping</code>映射注册器<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingInfoHandlerMapping</span> <span class="keyword">implements</span> <span class="title">MatchableHandlerMapping</span>, <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller<span class="class">.<span class="keyword">class</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">AnnotatedElementUtils</span>.<span class="title">hasAnnotation</span>(<span class="title">beanType</span>, <span class="title">RequestMapping</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也就是, 只要<code>Bean</code>类上有<code>@Controller</code>注解<strong>或者</strong><code>@RequestMapping</code>注解, 那就会解析<code>url</code>映射.<br>我们的<code>TimeApi</code>上刚好有一个<code>@RequestMapping</code>注解. 所以<code>TimeApi</code>和<code>TimeController</code>才会出现<code>url</code>映射冲突.</p>
<p>我们改造成<code>my-now</code>后, 就会有两个映射关系</p>
<ol>
<li><code>/ahao/my-now</code>: 正常的访问<code>ahao-server</code>服务</li>
<li><code>/ahao/now</code>: 访问失败<code>404</code></li>
</ol>
<p>看到这里肯定有疑问了, 为什么<code>/ahao/now</code>有<code>url</code>映射关系, 访问却<code>404</code>?<br>我们再改造下<code>TimeApi</code>. 加个<code>@ResponseBody</code>注解, 看到这里应该就知道<code>Spring MVC</code>做了多大的一件蠢事.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在两个<code>url</code>都可以正常访问了</p>
<ol>
<li><code>/ahao/my-now</code>: 正常的访问<code>ahao-server</code>服务</li>
<li><code>/ahao/now</code>: 正常的访问<code>ahao-server</code>服务</li>
</ol>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这是<code>Spring MVC</code>的锅, <code>Feign</code>是不可能改的了, 而且<code>Spring MVC</code>也不可能改, 因为要兼容以前版本的使用者.</p>
<h2 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h2><p>不要把<code>@RequestMapping</code>和<code>@FeignClient</code>一起用, 直接把链接拼接到方法级的<code>@RequestMapping</code>上<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/ahao/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者用<code>@FeignClient</code>的<code>path</code>属性<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="装逼用方法"><a href="#装逼用方法" class="headerlink" title="装逼用方法"></a>装逼用方法</h2><p>来源: <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631</a><br>但是失去了自动装配的一些特性, 不推荐使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Feign<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FeignMappingDefaultConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcRegistrations <span class="title">feignWebRegistrations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcRegistrationsAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FeignFilterRequestMappingHandlerMapping();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignFilterRequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.isHandler(beanType) &amp;&amp; (AnnotationUtils.findAnnotation(beanType, FeignClient<span class="class">.<span class="keyword">class</span>) </span>== <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631" target="_blank" rel="noopener">@FeignClient with top level @RequestMapping annotation is also registered as Spring MVC handler</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/issues/22154" target="_blank" rel="noopener">@RequestMapping without @Controller registered as handler SPR-17622</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Feign</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ延迟队列的两种实现方式</title>
    <url>/posts/Two_implementations_of_the_RabbitMQ_delay_queue.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RabbitMQ</code>是没有延迟队列, 但是我们可以通过<code>TTL</code>和死信队列间接来实现.</p>
<ol>
<li>将<code>Message</code>指定<code>TTL</code>后放入队列中.</li>
<li>等超时后, <code>Message</code>放入死信队列.</li>
<li>死信队列将<code>Message</code>转发到目标队列.</li>
</ol>
<p>很麻烦.<br>幸运的是, <code>RabbitMQ</code>官方提供了一个<code>rabbitmq-delayed-message-exchange</code>延迟消息插件.<br>本文基于<code>Spring Boot AMQP</code>来操作.<br><a id="more"></a></p>
<h1 id="使用官方延迟插件-rabbitmq-delayed-message-exchange"><a href="#使用官方延迟插件-rabbitmq-delayed-message-exchange" class="headerlink" title="使用官方延迟插件 rabbitmq-delayed-message-exchange"></a>使用官方延迟插件 rabbitmq-delayed-message-exchange</h1><p>要求版本 <code>&gt;= 3.5.8</code>.<br><code>GitHub</code>地址: <a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a><br>下载地址: <a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a></p>
<p>我这里用的是<code>3.6.x</code>的版本.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载 plugin</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://dl.bintray.com/rabbitmq/community-plugins/3.6.x/rabbitmq_delayed_message_exchange/rabbitmq_delayed_message_exchange-20171215-3.6.x.zip</span><br><span class="line">unzip rabbitmq_delayed_message_exchange-20171215-3.6.x.zip </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 移动到 plugins 文件夹内, 不同操作系统 plugins 位置不同</span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.10/plugins/</span><br><span class="line">cp /opt/rabbitmq_delayed_message_exchange-20171215-3.6.x.ez ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 启动延时插件</span></span><br><span class="line">rabbitmq-plugins list | grep delayed</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure></p>
<p>然后再声明一个延迟交换机<code>Exchange</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_EXCHANGE_NAME = <span class="string">"ahao_delayed_exchange"</span>;</span><br><span class="line">    <span class="meta">@Bean</span>(DELAY_EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE_NAME, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们需要将<code>Queue</code>队列绑定到交换机上<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"ahao_queue"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, CustomExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(QUEUE_NAME).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>绑定后, 就可以直接发送消息了.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_EXCHANGE_NAME = <span class="string">"ahao_delayed_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSendDelay</span><span class="params">(String queueName, Object data, <span class="keyword">long</span> delayMilliSeconds)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delayMilliSeconds &gt; <span class="number">0xffffffffL</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"超时过长, 只支持 &lt; 4294967296 的延时值"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        rabbitTemplate.convertAndSend(DELAY_EXCHANGE_NAME, queueName, data, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.getHeaders().put(<span class="string">"x-delay"</span>, delayMilliSeconds);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;, correlationId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="坑点1-延时最长为-2-32-1-毫秒"><a href="#坑点1-延时最长为-2-32-1-毫秒" class="headerlink" title="坑点1 延时最长为 2^32-1 毫秒"></a>坑点1 延时最长为 2^32-1 毫秒</h2><p>根据<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange#performance-impact" target="_blank" rel="noopener">官方文档</a>来看, 本插件的延时时长最长为<code>2^32-1</code>毫秒, 也就是<code>0xffffffff</code>毫秒.<br>换算一下, 大约是<code>49</code>天.<br>如果超过<code>2^32-1</code>毫秒, 那么延时值就会溢出, 也就是会立即消费.</p>
<p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/issues/122#issuecomment-486385307" target="_blank" rel="noopener"><code>Issue#122</code></a>也有提到.<br>这应该是<code>Erlang</code>本身的限制.</p>
<blockquote>
<p>In Erlang a timer can be set up to (2^32)-1 milliseconds in the future</p>
</blockquote>
<h2 id="坑点2-队列需要和延时-Exchange-绑定"><a href="#坑点2-队列需要和延时-Exchange-绑定" class="headerlink" title="坑点2 队列需要和延时 Exchange 绑定"></a>坑点2 队列需要和延时 Exchange 绑定</h2><p>之前以为指定了<code>x-delayed-type</code>为<code>direct</code>, 就可以不用绑定<code>Queue</code>到这个延时<code>Exchange</code>交换机上.<br>结果发的消息接收不到, 还是需要绑定一下.</p>
<h1 id="使用原生死信队列实现延时队列"><a href="#使用原生死信队列实现延时队列" class="headerlink" title="使用原生死信队列实现延时队列"></a>使用原生死信队列实现延时队列</h1><p>原生方法就是利用死信队列.</p>
<ol>
<li>将<code>Message</code>指定<code>TTL</code>后放入队列中.</li>
<li>等超时后, <code>Message</code>放入死信队列.</li>
<li>死信队列将<code>Message</code>转发到目标队列.</li>
</ol>
<p>我们先设计下消息流转流程图<br><img src="https://yuml.me/diagram/nofunky;dir:LR/activity/(start" alt="消息流转流程图">-Msg&gt;(delay_exchange)-fanout&gt;(delay_queue)-dead&gt;(biz_exchange)-&gt;<a>[key1]-&gt;(biz_queue1)-&gt;(consumer),<a>[key2]-&gt;(biz_queue2)-&gt;(consumer)-&gt;(end))</a></a></p>
<ol>
<li>用户发送带着<code>RoutingKey</code>为<code>biz_queue1</code>的一条消息到延时交换机<code>delay_exchange</code>上(注意, 这个延时交换机就是一个普通交换机).</li>
<li>延时交换机<code>delay_exchange</code>将消息<code>fanout</code>到队列<code>delay_queue</code>, 这个队列配置了一堆死信参数.</li>
<li>等待消息在<code>delay_queue</code>超时, 然后将消息转发到该队列的死信交换机<code>biz_exchange</code>上.</li>
<li>因为<code>delay_queue</code>没有指定<code>x-dead-letter-routing-key</code>, 所以使用的还是原来的<code>biz_queue1</code>. 路由到<code>biz_queue1</code>队列上.</li>
<li>延时消费成功.</li>
</ol>
<p>设计完毕开始编码实战. 我们需要初始化交换机<code>Exchange</code>和队列<code>Queue</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">"delay_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        args.put(<span class="string">"x-dead-letter-exchange"</span>, bizExchange().getName()); <span class="comment">// 声明死信交换机</span></span><br><span class="line"><span class="comment">//        args.put("x-dead-letter-routing-key", "");                 // 声明死信路由键</span></span><br><span class="line">        args.put(<span class="string">"x-message-ttl"</span>, <span class="number">10000</span>);                            <span class="comment">// 所有消息的默认超时时间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"delay_queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayQueue()).to(delayExchange()).with(delayQueue().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">bizExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"biz_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">bizQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"biz_queue1"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bizBinding1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(bizQueue1()).to(bizExchange()).with(bizQueue1().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">bizQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"biz_queue2"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bizBinding2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(bizQueue2()).to(bizExchange()).with(bizQueue2().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后写一个单元测试, 我用的<code>Junit5</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"biz_queue1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object value;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queuesToDeclare = <span class="meta">@Queue</span>(QUEUE_NAME))</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">directQueue</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息接收时间:"</span>+sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        System.out.println(<span class="string">"接收到的消息:"</span>+msg);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        value = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">webEnvironment</span> </span>= SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;RabbitMQConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RabbitAutoConfiguration</span>.<span class="title">class</span>, <span class="title">SpringContextHolder</span>.<span class="title">class</span>, <span class="title">DirectConsumer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DirectProducerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectConsumer consumer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertNotNull(rabbitTemplate);</span><br><span class="line">        Assert.assertNotNull(consumer);</span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息发送时间:"</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        String msg = <span class="string">"send()"</span>;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Assert.assertNull(DirectConsumer.value);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Assert.assertEquals(msg, DirectConsumer.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以给队列设置<code>x-message-ttl</code>, 也可以给每条消息设置<code>expiration</code>, <code>RabbitMQ</code>会取两者最小值作为消息过期时间.</p>
<p>用死信队列来实现延迟队列, 只要套多几个死信队列, 就可以绕过官方延时插件的只能延时<code>2^32-1</code>毫秒的<code>bug</code>.<br>但是和官方延时插件一样, 还是得每个队列都绑定到延时交换机上.</p>
<p>并且! 推荐给队列设置<code>x-message-ttl</code>, 而不是给消息设置<code>expiration</code>.</p>
<h2 id="坑点-同一队列的延时时长不一样导致消息阻塞"><a href="#坑点-同一队列的延时时长不一样导致消息阻塞" class="headerlink" title="坑点 同一队列的延时时长不一样导致消息阻塞"></a>坑点 同一队列的延时时长不一样导致消息阻塞</h2><p>我们先看下面这个单元测试, 比起上面那个单元测试, 就是连续发送了两条消息.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">webEnvironment</span> </span>= SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;RabbitMQConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RabbitAutoConfiguration</span>.<span class="title">class</span>, <span class="title">SpringContextHolder</span>.<span class="title">class</span>, <span class="title">DirectConsumer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DirectProducerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectConsumer consumer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFailure</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertNotNull(rabbitTemplate);</span><br><span class="line">        Assert.assertNotNull(consumer);</span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息发送时间:"</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        </span><br><span class="line">        String msg1 = <span class="string">"sendFailure(1)"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg1, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"1000000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">        String msg2 = <span class="string">"sendFailure(2)"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg2, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Assert.assertNull(DirectConsumer.value);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Assert.assertNull(msg, DirectConsumer.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行后可以发现, <code>5000</code>毫秒后, 消费者仍然不能接受到<code>sendFailure(2)</code>这条消息.<br>因为消息队列是先进先出的, 当第一条消息没有被消费, 后面的消息也会阻塞不能消费.</p>
<p>所以推荐还是使用给队列设置<code>x-message-ttl</code>的形式来设置延时时长. 当然, 官方延时插件就没这个问题了.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用官方插件</p>
<ul>
<li>优点: <ol>
<li>使用简单</li>
<li>不会出现因为前一条消息没有消费, 导致后面的消息阻塞的情况</li>
</ol>
</li>
<li>缺点:<ol>
<li>延时时长不能超过<code>2^32-1</code>毫秒, 大约<code>49</code>天.</li>
</ol>
</li>
</ul>
<p>使用原生死信队列</p>
<ul>
<li>优点:<ol>
<li>使用死信队列套死信队列, 可以突破<code>2^32-1</code>毫秒的官方插件限制.</li>
</ol>
</li>
<li>缺点:<ol>
<li>实现复杂.</li>
<li>如果给每条消息设置<code>expiration</code>, 则前一条消息会阻塞后一条消息.</li>
</ol>
</li>
</ul>
<p>然后我写了个工具类<a href="https://github.com/Ahaochan/ahao-common-utils/blob/master/src/main/java/com/ahao/util/spring/mq/RabbitMQHelper.java" target="_blank" rel="noopener"><code>RabbitMQHelper</code></a>可以拿来用下.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.lbanyan.com/rabbitmq_delay/" target="_blank" rel="noopener">RabbitMQ 延迟队列插件 x-delay Bug</a></li>
<li><a href="https://my.oschina.net/10000000000/blog/1626278" target="_blank" rel="noopener">springboot rabbitmq 之死信队列（延迟消费消息）</a></li>
<li><a href="https://blog.csdn.net/qq_15071263/article/details/89636161" target="_blank" rel="noopener">通过RabbitMQ 死信队列实现延迟MQ消息，消息延迟，MQ延迟队列</a></li>
</ul>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>使用copy事件添加版权信息</title>
    <url>/posts/Add_copyright_information_using_the_copy_event.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在慕课网遇到个比较降低用户体验的事情。其实在知乎、掘金也有碰到, 以及其他小网站也会碰到。<br>就是他们会拦截<code>copy</code>事件, 然后加上自己的<code>copyright</code>。<br>问题就在于, 我复制代码去执行, 还得手动去删除<code>copyright</code>, 太麻烦了。</p>
<a id="more"></a>
<h1 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h1><p>网上搜了下, 果然有代码, 遂复制一份。略微修改, 加了点注释<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addCopyright</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取 selection https://developer.mozilla.org/zh-CN/docs/Web/API/Selection</span></span><br><span class="line">        <span class="keyword">var</span> selection = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123; <span class="comment">// DOM,FF,Webkit,Chrome,IE10</span></span><br><span class="line">            selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getSelection) &#123; <span class="comment">// IE10</span></span><br><span class="line">            selection = <span class="built_in">document</span>.getSelection();</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123; <span class="comment">// IE6+10-</span></span><br><span class="line">            selection = <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            selection = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// alert("浏览器兼容问题导致复制失败！");</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 自定义版权信息</span></span><br><span class="line">        <span class="keyword">var</span> pagelink = <span class="string">"&lt;br /&gt;&lt;br /&gt; 转载请注明来源: &lt;a href='"</span> + <span class="built_in">document</span>.location.href + <span class="string">"'&gt;"</span> + <span class="built_in">document</span>.location.href + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 插入版权信息</span></span><br><span class="line">        <span class="keyword">var</span> copy_text = selection + pagelink;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 新建一个div, 插入 复制内容+版权信息</span></span><br><span class="line">        <span class="keyword">var</span> new_div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        new_div.style.left = <span class="string">'-99999px'</span>;</span><br><span class="line">        new_div.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">        body_element.appendChild(new_div);</span><br><span class="line">        new_div.innerHTML = copy_text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 选择新div中的内容</span></span><br><span class="line">        selection.selectAllChildren(new_div);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 删除div</span></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            body_element.removeChild(new_div);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 9. 浏览器复制选中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获得所有元素</span></span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 为所有元素添加copy事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = all.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = all[i];</span><br><span class="line">        element[<span class="string">'oncopy'</span>] = addCopyright;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<h1 id="Hack方案"><a href="#Hack方案" class="headerlink" title="Hack方案"></a>Hack方案</h1><p>明显这是可以通过<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreaseMonkey</a>解决的事情。<br>思路就是修改<code>copy</code>事件为空即可。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获得所有元素</span></span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 为所有元素添加copy事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = all.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = all[i];</span><br><span class="line">        element[<span class="string">'oncopy'</span>] = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>写完后才发现早有人实现了。<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified" target="_blank" rel="noopener">网页限制解除(改)</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://wangbaiyuan.cn/javascript-implementation-article-copy-plus-copyright-information.html" target="_blank" rel="noopener">JavaScript实现文章复制加版权信息</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro登录流程源码详解</title>
    <url>/posts/Shiro_login_process_source_code_explain.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文假设读者能正常使用<code>Shiro</code>, 并对知道相关类是做什么用的.<br>这里截取部分代码来追踪, 为了尽可能的简单, 这里没有使用<code>Spring</code>等其他框架, 纯粹的<code>Shiro</code>代码.<br>本文使用<code>ini</code>配置, 但不解析<code>IniRealm</code>内部逻辑.</p>
<a id="more"></a>
<h1 id="单元测试例子"><a href="#单元测试例子" class="headerlink" title="单元测试例子"></a>单元测试例子</h1><p>具体可以看<a href="https://github.com/Ahaochan/project/blob/master/ahao-spring-boot-shiro/src/test/java/com/ahao/spring/boot/shiro/IniRealmTest.java" target="_blank" rel="noopener"><code>IniRealmTest</code></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IniRealmTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 加载 ini 配置, 初始化 SecurityManager</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取 Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 使用帐号密码登录, 并创建 Session</span></span><br><span class="line">        UsernamePasswordToken trueToken = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(trueToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            Assertions.fail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 角色判断</span></span><br><span class="line">        Assertions.assertTrue(subject.hasRole(<span class="string">"role1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 权限判断</span></span><br><span class="line">        Assertions.assertTrue(subject.isPermitted(<span class="string">"permission1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 登出注销</span></span><br><span class="line">        subject.logout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">username</span> = password,role1,role2</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">role1</span>=permission1,permission2</span><br><span class="line"><span class="attr">role2</span>=permission3,permission4</span><br></pre></td></tr></table></figure>
<p>登录逻辑就分为上述的六个步骤, 接下来一个个拆解.</p>
<h1 id="获取安全管理器-SecurityManager"><a href="#获取安全管理器-SecurityManager" class="headerlink" title="获取安全管理器 SecurityManager"></a>获取安全管理器 SecurityManager</h1><p>首先我们看<code>SecurityManager</code>的获取方法<code>factory.getInstance();</code>.<br><img src="https://yuml.me/diagram/nofunky;dir:LR/class/[IniSecurityManagerFactory]-&gt;[IniFactorySupport],[IniFactorySupport]-&gt;[AbstractFactory],[AbstractFactory]-&gt;[&lt;&lt;Factory&gt;&gt;]" alt="IniSecurityManagerFactory继承树"></p>
<p>以下代码省略部分代码, 保留核心逻辑.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T singletonInstance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 交由子类实现代码</span></span><br><span class="line">        singletonInstance = createInstance();</span><br><span class="line">        <span class="keyword">return</span> singletonInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IniFactorySupport</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_INI_RESOURCE_PATH = <span class="string">"classpath:shiro.ini"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 从 classpath:shiro.ini 获取 ini 配置</span></span><br><span class="line">        Ini ini = resolveIni();</span><br><span class="line">        <span class="comment">// 2. 根据 ini 配置初始化 SecurityManager</span></span><br><span class="line">        T instance = createInstance(ini);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">(Ini ini)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IniSecurityManagerFactory</span> <span class="keyword">extends</span> <span class="title">IniFactorySupport</span>&lt;<span class="title">SecurityManager</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIN_SECTION_NAME = <span class="string">"main"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECURITY_MANAGER_NAME = <span class="string">"securityManager"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INI_REALM_NAME = <span class="string">"iniRealm"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SecurityManager <span class="title">createInstance</span><span class="params">(Ini ini)</span> </span>&#123;</span><br><span class="line">        SecurityManager securityManager = createSecurityManager(ini);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityManager <span class="title">createSecurityManager</span><span class="params">(Ini ini)</span> </span>&#123;</span><br><span class="line">        Ini.Section mainSection = ini.getSection(MAIN_SECTION_NAME);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(mainSection)) &#123;</span><br><span class="line">            mainSection = ini.getSection(Ini.DEFAULT_SECTION_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createSecurityManager(ini, mainSection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityManager <span class="title">createSecurityManager</span><span class="params">(Ini ini, Ini.Section mainSection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建默认的 DefaultSecurityManager 和 IniRealm, 保存到这个 Map 里</span></span><br><span class="line">        Map&lt;String, ?&gt; defaults = createDefaults(ini, mainSection);</span><br><span class="line">        <span class="comment">// 2. 初始化 ReflectionBuilder, 并往 Map 里塞了一个 DefaultEventBus</span></span><br><span class="line">        Map&lt;String, ?&gt; objects = buildInstances(mainSection, defaults);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 3. 获取上面创建的 DefaultSecurityManager</span></span><br><span class="line">        SecurityManager securityManager = getSecurityManagerBean();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 4. 获取上面的 IniRealm 注入到 DefaultSecurityManager 中</span></span><br><span class="line">        Collection&lt;Realm&gt; realms = getRealms(objects);</span><br><span class="line">        ((RealmSecurityManager) securityManager).setRealms(realms);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到, 创建<code>SecurityManager</code>的过程主要做了三件事</p>
<ol>
<li>创建默认的<code>DefaultSecurityManager</code></li>
<li>根据<code>shiro.ini</code>配置文件, 初始化<code>IniRealm</code></li>
<li>将<code>IniRealm</code>注入到<code>DefaultSecurityManager</code>中.</li>
</ol>
<h1 id="获取当前主体-Subject"><a href="#获取当前主体-Subject" class="headerlink" title="获取当前主体 Subject"></a>获取当前主体 Subject</h1><p>接下来获取<code>Subject</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SecurityManager securityManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Subject <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 从 ThreadLocal 获取 Subject, 第一次肯定获取不到, 需要去创建</span></span><br><span class="line">        Subject subject = ThreadContext.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 初始化 Subject</span></span><br><span class="line">            subject = (<span class="keyword">new</span> Subject.Builder()).buildSubject();</span><br><span class="line">            <span class="comment">// 3. 缓存到 ThreadLocal 中</span></span><br><span class="line">            ThreadContext.bind(subject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">         SubjectContext subjectContext = <span class="keyword">new</span> DefaultSubjectContext();</span><br><span class="line">         <span class="function"><span class="keyword">public</span> Subject <span class="title">buildSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> SecurityUtils.securityManager.createSubject(<span class="keyword">this</span>.subjectContext);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第一次我们肯定获取不到<code>Subject</code>, 所以需要创建, 跟踪源码可以看到调用了安全管理器<code>SecurityManager</code>的<code>createSubject</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">createSubject</span><span class="params">(SubjectContext subjectContext)</span> </span>&#123;</span><br><span class="line">        SubjectContext context = <span class="keyword">new</span> DefaultSubjectContext(subjectContext);</span><br><span class="line">        Subject subject = subjectFactory.createSubject(context);</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSubjectFactory</span> <span class="keyword">implements</span> <span class="title">SubjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">createSubject</span><span class="params">(SubjectContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return new DelegatingSubject(principals, authenticated, host, session, sessionCreationEnabled, securityManager);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatingSubject(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">true</span>, securityManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>找到最后, 是调用了一个<code>DefaultSubjectFactory</code>工厂, 来创建<code>DelegatingSubject</code>.<br>因为我们什么高大上的配置都没填, 所以就直接<code>null</code>和<code>false</code>来填充所需字段了.</p>
<h1 id="重头戏身份认证-login"><a href="#重头戏身份认证-login" class="headerlink" title="重头戏身份认证 login"></a>重头戏身份认证 login</h1><p>全部准备就绪了, 就开始登录吧<code>subject.login(trueToken)</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 SecurityManager</span></span><br><span class="line">        Subject subject = securityManager.login(<span class="keyword">this</span>, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Authenticator authenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">login</span><span class="params">(Subject subject, AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        AuthenticationInfo info = authenticate(token);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">return</span> loggedIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">authenticate</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 ModularRealmAuthenticator 认证器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authenticator.authenticate(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到<code>login()</code>方法实际上是调用了<code>ModularRealmAuthenticator</code>类的<code>authenticate()</code>方法.<br><code>ModularRealmAuthenticator</code>认证器默认内置了<code>AtLeastOneSuccessfulStrategy</code>的认证策略.<br>看名字可以猜到, 只要有一个<code>Realm</code>验证通过, 那就验证通过了. 我们目前只有一个<code>IniRealm</code>, 所以不用管这个认证策略.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticator</span> <span class="keyword">implements</span> <span class="title">Authenticator</span>, <span class="title">LogoutAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AuthenticationInfo <span class="title">authenticate</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 交由 ModularRealmAuthenticator 实现</span></span><br><span class="line">        AuthenticationInfo info = doAuthenticate(token);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModularRealmAuthenticator</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doAuthenticate</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        Collection&lt;Realm&gt; realms = getRealms();</span><br><span class="line">        <span class="keyword">if</span> (realms.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 我们目前只有一个 IniRealm </span></span><br><span class="line">            <span class="keyword">return</span> doSingleRealmAuthentication(realms.iterator().next(), authenticationToken);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doMultiRealmAuthentication(realms, authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm, AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!realm.supports(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTokenException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// !!!! 注意这里 !!!!</span></span><br><span class="line">        AuthenticationInfo info = realm.getAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到我们调用了<code>Realm</code>的<code>getAuthenticationInfo()</code>方法, 但是这个方法和我们平常开发时重写的<code>doGetAuthenticationInfo()</code>方法不同.<br><code>getAuthenticationInfo()</code>内部肯定是调用了<code>doGetAuthenticationInfo()</code>方法. 我们继续往里面.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">extends</span> <span class="title">CachingRealm</span> <span class="keyword">implements</span> <span class="title">Initializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取缓存中的 Authentication, 第一次肯定获取不到</span></span><br><span class="line">        AuthenticationInfo info = getCachedAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 自定义 Realm 的实现</span></span><br><span class="line">            info = doGetAuthenticationInfo(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 用户输入的密码和数据库中的密码进行比较, 可以在这里做加盐加密</span></span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            assertCredentialsMatch(token, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">assertCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认实现类 SimpleCredentialsMatcher</span></span><br><span class="line">        CredentialsMatcher cm = getCredentialsMatcher();</span><br><span class="line">        <span class="keyword">if</span> (!cm.doCredentialsMatch(token, info)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>doGetAuthenticationInfo()</code>就是我们自定义<code>Realm</code>要实现的方法.<br>至此, 整个身份验证流程就走通了.<br><img src="https://yuml.me/diagram/nofunky;dir:LR/class/[DelegatingSubject.login]-&gt;[DefaultSecurityManager.login],[DefaultSecurityManager.login]-&gt;[ModularRealmAuthenticator.authenticate],[ModularRealmAuthenticator.doAuthenticate]-&gt;[AuthenticatingRealm.doGetAuthenticationInfo]" alt="Subject.Login()调用链"></p>
<h1 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h1><p>我们重写<code>Realm</code>除了<code>doGetAuthenticationInfo()</code>还要重写<code>doGetAuthorizationInfo()</code>.<br>但是我们上面身份认证只执行了<code>doGetAuthenticationInfo()</code>. 可以很容易猜到, <code>Shiro</code>使用了懒加载的方式去加载角色权限.<br>还是老办法看源码, 看<code>subject.hasRole()</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 又是调用 SecurityManager</span></span><br><span class="line">        <span class="keyword">return</span> hasPrincipals() &amp;&amp; securityManager.hasRole(getPrincipals(), roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingSecurityManager</span> <span class="keyword">extends</span> <span class="title">AuthenticatingSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principals, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 又是调用 ModularRealmAuthenticator, 然后调用 AuthorizingRealm</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorizer.hasRole(principals, roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">implements</span> <span class="title">Authorizer</span>, <span class="title">Initializable</span>, <span class="title">PermissionResolverAware</span>, <span class="title">RolePermissionResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principal, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// !!!! 注意这里 !!!!</span></span><br><span class="line">        AuthorizationInfo info = getAuthorizationInfo(principal);</span><br><span class="line">        <span class="keyword">return</span> hasRole(roleIdentifier, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleIdentifier, AuthorizationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取权限完毕后, 就判断有没有所需权限</span></span><br><span class="line">        <span class="keyword">return</span> info != <span class="keyword">null</span> &amp;&amp; info.getRoles() != <span class="keyword">null</span> &amp;&amp; info.getRoles().contains(roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>鉴权就比较简单了, 我们直接一撸到底, 方法调来调去, 最后就是调用到<code>Realm</code>的<code>getAuthorizationInfo()</code>方法.<br>和之前一样, 内部肯定也是调用了<code>doGetAuthorizationInfo()</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">implements</span> <span class="title">Authorizer</span>, <span class="title">Initializable</span>, <span class="title">PermissionResolverAware</span>, <span class="title">RolePermissionResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">getAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        AuthorizationInfo info = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 从缓存中获取, 第一次肯定没有</span></span><br><span class="line">        Cache&lt;Object, AuthorizationInfo&gt; cache = getAvailableAuthorizationCache();</span><br><span class="line">        info = cache.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用 自定义 Realm 的 doGetAuthorizationInfo(), 然后缓存</span></span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            info = doGetAuthorizationInfo(principals);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="注销-logout"><a href="#注销-logout" class="headerlink" title="注销 logout"></a>注销 logout</h1><p>注销也很简单, 就是把之前初始化的数据都清空就好了. 调用<code>Subject.logout()</code>注销.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clearRunAsIdentitiesInternal();</span><br><span class="line">            <span class="keyword">this</span>.securityManager.logout(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.session = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.principals = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.authenticated = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//https://issues.apache.org/jira/browse/JSEC-22</span></span><br><span class="line">            <span class="comment">//this.securityManager = null;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 删除 remember me</span></span><br><span class="line">        beforeLogout(subject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 清除缓存</span></span><br><span class="line">        PrincipalCollection principals = subject.getPrincipals();</span><br><span class="line">        <span class="keyword">if</span> (principals != <span class="keyword">null</span> &amp;&amp; !principals.isEmpty()) &#123;</span><br><span class="line">            Authenticator authc = getAuthenticator();</span><br><span class="line">            <span class="keyword">if</span> (authc <span class="keyword">instanceof</span> LogoutAware) &#123;</span><br><span class="line">                ((LogoutAware) authc).onLogout(principals);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 从持久层删除 subject</span></span><br><span class="line">        delete(subject);</span><br><span class="line">        <span class="comment">// 4. 停止 session</span></span><br><span class="line">        stopSession(subject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还有一些高级特性, 比如多<code>Realm</code>登陆, 单点登录, <code>Redis</code>持久化<code>Session</code>. 这里就不说了.<br><code>Shrio</code>源码比起<code>Spring</code>的简单多了, 用久了其实都知道的七七八八, 阅读源码也就是个查缺补漏.</p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>上古卷轴5之寻找消失的Revus Sarvani</title>
    <url>/posts/How_to_find_Revus_Sarvani.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上古卷轴<code>5</code>天际龙裔<code>DLC</code>所在的索瑟海姆<code>Solstheim</code>, 有<code>3</code>个隐藏任务,</p>
<ol>
<li>召唤巨人卡斯塔<code>Karstaag</code></li>
<li>偷取<code>Falas Selvayn</code>的雄鹿王子之玻璃弓<code>Glass Bow of the Stag Prince</code></li>
<li>收集<code>5</code>个卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code></li>
</ol>
<p>我们的重点就是怎么拿到沙瓦尼<code>Revus Sarvani</code>的那颗卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>.</p>
<a id="more"></a>
<h1 id="Revus-Sarvani-的位置"><a href="#Revus-Sarvani-的位置" class="headerlink" title="Revus Sarvani 的位置"></a>Revus Sarvani 的位置</h1><p>沙瓦尼<code>Revus Sarvani</code>就在泰尔密希临<code>Tel Mithryn</code>左上角不远处, 有一个很显眼的阔步沙蚤<code>Dusty</code>, 旁边有一个营地, 沙瓦尼<code>Revus Sarvani</code>就在这里.<br>找他购买一个卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>即可.</p>
<h1 id="找不到Revus-Sarvani"><a href="#找不到Revus-Sarvani" class="headerlink" title="找不到Revus Sarvani"></a>找不到Revus Sarvani</h1><p>最大的可能就是他被杀了, 葬身荒郊野岭.<br>为什么呢?<br>首先米拉克<code>Miraak</code>没被打倒前, 营地对岸会有一个潜伏者维护者<code>Lurker Vindicator</code>, 这个几乎是陆地最强近战兵种.<br>另外, 营地附近会刷出几只灰烬魔<code>Ash Spawn</code>.<br>还有, 泰尔密希临<code>Tel Mithryn</code>的管家任务, 管家会被几只灰烬魔<code>Ash Spawn</code>杀死, 这个地点也在营地附近.</p>
<p>综上, 沙瓦尼<code>Revus Sarvani</code>基本不可能存活太久.<br>所以对于老手, 上岛第一件事, 就应该是去买卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>.</p>
<h1 id="复活Revus-Sarvani"><a href="#复活Revus-Sarvani" class="headerlink" title="复活Revus Sarvani"></a>复活Revus Sarvani</h1><p>怎么确定他死了呢?<br>网上有说, 在控制台输入<code>coc wideadbodycleanupcell</code>, 进入一个墓地空间, 可以看到死去<code>NPC</code>的尸体, 但是我没找到沙瓦尼<code>Revus Sarvani</code>的尸体.</p>
<p>我们换个思路, 在控制台输入<code>player.moveto xx02C1EA</code>, 将自己移动到<code>NPC</code>旁边.<br>沙瓦尼<code>Revus Sarvani</code>的代码就是<code>xx02C1EA</code>.<br>这个<code>xx</code>一般是<code>00</code>、<code>01</code>、<code>02</code>、<code>03</code>、<code>04</code>. 我这边是<code>04</code>, 也就是<code>player.moveto 0402C1EA</code>.<br>不想猜的话, 可以进泰尔密希临<code>Tel Mithryn</code>, 打开控制台, 点击任意一个<code>NPC</code>, 就可以看到<code>ID</code>的前缀了.</p>
<p>如果前缀猜错, 就会报错<code>Invalid</code>.</p>
<p>按剧本走, 我们会移动到阔步沙蚤<code>Dusty</code>的营地旁边.<br>接下来我们在控制台输入以下两条指令, 锁定该人物, 复活.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prid xx02C1EA</span><br><span class="line">resurrect</span><br></pre></td></tr></table></figure></p>
<p>这样沙瓦尼<code>Revus Sarvani</code>就复活了.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.uesp.net/wiki/Dragonborn:Revus_Sarvani" target="_blank" rel="noopener">Dragonborn: Revus Sarvani</a></li>
<li><a href="https://www.reddit.com/r/skyrim/comments/18xju7/someone_i_cant_find_in_dragonborn/" target="_blank" rel="noopener">someone_i_cant_find_in_dragonborn</a></li>
</ul>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>上古卷轴5</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Json Web Token</title>
    <url>/posts/What_is_Json_Web_Token?.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Jwt</code>全称<code>Json Web Token</code>, 是一种防篡改的数据格式, 可以明文, 可以加密. 我们可以用来存储简单的鉴权信息在<code>Jwt</code>之中.<br>现在主流的应用场景有单点登录, 替代<code>Session</code>, 一次性鉴权.</p>
<p>但是我发现了这篇文章<a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a>, 作者说不要用<code>Jwt</code>来进行身份认证.<br>建议看完本文后, 再深入阅读这篇文章.</p>
<a id="more"></a>
<p><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br>重要的话说<code>3</code>遍, 好了往下看.</p>
<h1 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</span><br></pre></td></tr></table></figure>
<p>上面是一个<code>JWT</code>, 分为<code>3</code>个部分, <code>header</code>和<code>claims</code>都是用<code>base64</code>编码, <code>3</code>个部分用<code>.</code>连接起来.</p>
<ol>
<li><code>header</code>: 头部, 最少包含了签名算法.</li>
<li><code>claims</code>: 内容, 包含了你想要放进去的数据.</li>
<li><code>signature</code>: 签名</li>
</ol>
<p>用<code>base64</code>解码<code>header</code>和<code>claims</code>可得<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9 ----&gt; &#123;&quot;alg&quot;:&quot;HS256&quot;&#125;</span><br><span class="line">eyJzdWIiOiJKb2UifQ   ----&gt; &#123;&quot;sub&quot;:&quot;Joe&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<p>后面的<code>gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</code>是签名, 是不可读的, 签名算法就是<code>header</code>的<code>alg</code>字段的值<code>HS256</code>.<br>可以在<a href="https://jwt.io/" target="_blank" rel="noopener"><code>Debugger</code>工具</a>测试.</p>
<p><code>Q1</code>: 为什么说<code>Jwt</code>是防篡改的?<br><code>A1</code>: 我们不知道签名的私钥, 不信你在<a href="https://jwt.io/" target="_blank" rel="noopener"><code>Debugger</code>工具</a>试试, 用上面的<code>header</code>和<code>claims</code>, 在不知道私钥的情况下, 你能得到<code>gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</code>吗? 我就告诉你私钥是<code>123456</code>了, 你猜的到吗?</p>
<p><code>Q2</code>: <code>Jwt</code>能用来替换<code>Session</code>吗?<br><code>A2</code>: 它们应该是组合使用, 而不是对立的. <a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a></p>
<p><code>Q3</code>: 那我到底要在什么地方用<code>Jwt</code>?<br><code>A3</code>: 一般移动端用的比较多, 移动端不像浏览器有一套透明的<code>Cookie</code>方案.</p>
<h1 id="JJWT-应用"><a href="#JJWT-应用" class="headerlink" title="JJWT 应用"></a>JJWT 应用</h1><p>我们先来看一个例子<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 生成 jwt</span></span><br><span class="line">        String key = Base64.getEncoder().encodeToString(<span class="string">"signKey"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        JwtBuilder builder = Jwts.builder()</span><br><span class="line">            .setId(<span class="string">"id"</span>)                <span class="comment">// JWT_ID</span></span><br><span class="line">            .setAudience(<span class="string">"audience"</span>)    <span class="comment">// 接受者</span></span><br><span class="line">            .setSubject(<span class="string">"subject"</span>)      <span class="comment">// 主题</span></span><br><span class="line">            .setIssuer(<span class="string">"issuer"</span>)        <span class="comment">// 签发者</span></span><br><span class="line">            .addClaims(<span class="keyword">null</span>)            <span class="comment">// 自定义属性</span></span><br><span class="line">            .setIssuedAt(<span class="keyword">new</span> Date(now))        <span class="comment">// 签发时间</span></span><br><span class="line">            .setNotBefore(<span class="keyword">new</span> Date(now - <span class="number">1</span>))   <span class="comment">// 生效时间</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> Date(now + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>))  <span class="comment">// 过期时间</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, key); <span class="comment">// 签名算法以及密匙</span></span><br><span class="line">        String token = builder.compact();</span><br><span class="line">        System.out.println(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解析 jwt</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jws&lt;Claims&gt; jws = Jwts.parser()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .parseClaimsJws(token);</span><br><span class="line">            JwsHeader header = jws.getHeader();</span><br><span class="line">            Claims claims = jws.getBody();</span><br><span class="line"></span><br><span class="line">            Assertions.assertEquals(SignatureAlgorithm.HS256.getValue(), header.getAlgorithm());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"id"</span>, claims.getId());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"audience"</span>, claims.getAudience());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"subject"</span>, claims.getSubject());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"issuer"</span>, claims.getIssuer());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>JwtBuilder</code>使用<code>Builder</code>模式, 构建<code>header</code>和<code>claims</code>, 最后再调用<code>signWith</code>方法添加<code>signature</code>签名.<br>之后我们使用<code>Jwts.parser()</code>来解析<code>token</code>, 在<code>parseClaimsJws(token)</code>会抛出一堆<code>RuntimeException</code>, 用来校验<code>token</code>是否有效.<br>得到的<code>Claims</code>其实就是一个<code>Map</code>, 我们从中获取需要的数据即可.</p>
<h1 id="整合-Spring-Boot"><a href="#整合-Spring-Boot" class="headerlink" title="整合 Spring Boot"></a>整合 Spring Boot</h1><p>查看我在<code>Github</code>上的一个示例工程.<br><a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-boot-jwt" target="_blank" rel="noopener">https://github.com/Ahaochan/project/tree/master/ahao-spring-boot-jwt</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Token</a></li>
<li><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a></li>
<li><a href="http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/" target="_blank" rel="noopener">Stop using JWT for sessions, part 2: Why your solution doesn’t work</a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>使用scan代替keys获取所有key</title>
    <url>/posts/Use_scan_instead_of_keys_to_get_all_the_keys.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Redis</code>的<code>keys</code>命令可以获取所有的<code>key</code>, 时间复杂度是<code>O(n)</code>, 一旦数据量大了, 因为<code>Redis</code>是单线程的, 就会导致<code>Redis</code>阻塞的情况.<br>为了解决阻塞问题, <code>Redis 2.8.0</code>推出了<code>scan</code>命令, <code>scan</code>可以返回默认大小为<code>10</code>的<code>key</code>, 并返回一个游标, 作为下次调用<code>scan</code>的参数.</p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 k4 v4 k5 v5 k6 v6 k7 v7 k8 v8 k9 v9 k10 v10 k11 v11 k12 v12 k13 v13 k14 v14</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) <span class="string">"k14"</span></span><br><span class="line"> 2) <span class="string">"k1"</span></span><br><span class="line"> 3) <span class="string">"k13"</span></span><br><span class="line"> 4) <span class="string">"k5"</span></span><br><span class="line"> 5) <span class="string">"k2"</span></span><br><span class="line"> 6) <span class="string">"k12"</span></span><br><span class="line"> 7) <span class="string">"k11"</span></span><br><span class="line"> 8) <span class="string">"k10"</span></span><br><span class="line"> 9) <span class="string">"k4"</span></span><br><span class="line">10) <span class="string">"k8"</span></span><br><span class="line">11) <span class="string">"k9"</span></span><br><span class="line">12) <span class="string">"k3"</span></span><br><span class="line">13) <span class="string">"k6"</span></span><br><span class="line">14) <span class="string">"k7"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"11"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k12"</span></span><br><span class="line">    9) <span class="string">"k2"</span></span><br><span class="line">   10) <span class="string">"k13"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 11 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k10"</span></span><br><span class="line">   2) <span class="string">"k4"</span></span><br><span class="line">   3) <span class="string">"k8"</span></span><br><span class="line">   4) <span class="string">"k9"</span></span><br></pre></td></tr></table></figure>
<p>初始化一堆<code>key</code></p>
<ol>
<li>用<code>keys</code>命令获取到所有的<code>key</code></li>
<li>用<code>scan</code>命令<strong>两次</strong>获取到所有的<code>key</code></li>
</ol>
<h1 id="多线程下原子性问题思考"><a href="#多线程下原子性问题思考" class="headerlink" title="多线程下原子性问题思考"></a>多线程下原子性问题思考</h1><p>我们在上面使用了两次<code>scan</code>命令, 就说明在这两次<code>scan</code>中, 可能会发生<code>set</code>或者<code>del</code>操作, 不是一个原子性操作.</p>
<blockquote>
<p>Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.</p>
</blockquote>
<p>根据<a href="https://redis.io/commands/scan" target="_blank" rel="noopener">官方文档</a>, 也就是说, 如果在<code>scan</code>过程中<code>set</code>或<code>del</code>了某个<code>key</code>, 那么这个<code>key</code>就变成了玄学状态. 可能被返回, 也可能不被返回.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"11"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k12"</span></span><br><span class="line">    9) <span class="string">"k2"</span></span><br><span class="line">   10) <span class="string">"k13"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k15 v15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; scan 11 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k10"</span></span><br><span class="line">   2) <span class="string">"k4"</span></span><br><span class="line">   3) <span class="string">"k8"</span></span><br><span class="line">   4) <span class="string">"k9"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"13"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k15"</span></span><br><span class="line">    9) <span class="string">"k12"</span></span><br><span class="line">   10) <span class="string">"k2"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 13 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k13"</span></span><br><span class="line">   2) <span class="string">"k10"</span></span><br><span class="line">   3) <span class="string">"k4"</span></span><br><span class="line">   4) <span class="string">"k8"</span></span><br><span class="line">   5) <span class="string">"k9"</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到, <code>k15</code>没有在第一次扫描时返回, 而在第二次扫描时返回.<br>所以这个玄学状态, 应该是取决于<code>set</code>或<code>del</code>的元素的位置.</p>
<h1 id="整合-Spring-Data-Redis"><a href="#整合-Spring-Data-Redis" class="headerlink" title="整合 Spring Data Redis"></a>整合 Spring Data Redis</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(String pattern, Consumer&lt;String&gt; consumer)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; keySerializer = (RedisSerializer&lt;String&gt;) stringRedisTemplate.getKeySerializer();</span><br><span class="line"></span><br><span class="line">        ScanOptions options = ScanOptions.scanOptions().match(pattern).count(<span class="number">10</span>).build();</span><br><span class="line">        <span class="keyword">try</span>(Cursor&lt;String&gt; cursor = getStringRedisTemplate().executeWithStickyConnection((RedisCallback&lt;Cursor&lt;String&gt;&gt;) connection -&gt;</span><br><span class="line">            <span class="keyword">new</span> ConvertingCursor&lt;&gt;(connection.scan(options), keySerializer::deserialize))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">                String key = cursor.next();</span><br><span class="line">                consumer.accept(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整合到<code>Spring Data Redis</code>中就是这样, 奇怪的是, 最新的<code>Spring Data Redis 2.1.6</code>实现了<code>hscan</code>命令, 但是却没有实现<code>scan</code>, 只能自己写<code>execute</code>实现了.<br>可以参考我的工具类集合<a href="https://github.com/Ahaochan/ahao-common-utils/blob/master/src/main/java/com/ahao/util/spring/redis/RedisHelper.java" target="_blank" rel="noopener"><code>RedisHelper</code></a>.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://redis.io/commands/scan" target="_blank" rel="noopener">scan 官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>海关跨境申报流程165号和179号文档</title>
    <url>/posts/Customs_Declaration_Documents_165_And_179.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>苦啊, 弄了快两个月了.<br>整个业务流程复杂的很, 但是走通过一次, 就懂了.<br>我要吐槽的就两个</p>
<ol>
<li>海关文档一言难尽.</li>
<li>微信群办公, 每天看海关人员发文档, 都觉得心累. 还不如弄个QQ群上传群文件呢.</li>
</ol>
<a id="more"></a>
<h1 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h1><p>说下我司背景, 我司是电商平台, 以前都是供应商进行海关申报的, 进行四单对碰, 订单、支付单、运单、清单.<br>现在由于海关出了两个文档</p>
<ol>
<li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a></li>
<li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2155884/index.html" target="_blank" rel="noopener">海关总署公告2018年第179号（关于实时获取跨境电子商务平台企业支付相关原始数据接入有关事宜的公告）</a></li>
</ol>
<p>所以必须由我司进行<strong>支付单</strong>的推送了.<br>我司使用的是微信支付, 所以调用微信支付的<a href="https://pay.weixin.qq.com/wiki/doc/api/external/declarecustom.php?chapter=18_1" target="_blank" rel="noopener">报关接口</a>来报支付单.</p>
<h1 id="开发前的准备"><a href="#开发前的准备" class="headerlink" title="开发前的准备"></a>开发前的准备</h1><ol>
<li>采购一台实体<code>Window Server 2012R2</code>主机, 并要求能访问外网.</li>
<li>阅读<a href="http://www.chinaport.gov.cn/kfzq/xyhdh/index.htm" target="_blank" rel="noopener">新用户导航</a>, 弄到一张<strong>法人卡</strong>和<strong>操作员卡</strong>, 实际上就是两个<code>U盘</code>.</li>
<li>获取海关技术人员<a href="http://www.chinaport.gov.cn/gg/zgdzkasjzx/18400.htm" target="_blank" rel="noopener">联系方式</a>, 要求加入微信联调群.</li>
<li>准备最长两个月的开发对接时间</li>
</ol>
<h1 id="改造支付接口"><a href="#改造支付接口" class="headerlink" title="改造支付接口"></a>改造支付接口</h1><p>根据<a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号.doc</a> 第<code>3.5</code>节, 我们需要保留微信支付的原始请求体<code>initalRequest</code>和原始响应体<code>initalResponse</code>.<br>微信支付的请求体和响应体是<code>xml</code>格式的, 那就直接塞进数据库保存起来就好了, 以后再根据订单号取出来.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id      订单id        请求体xml      响应体xml</span><br><span class="line">1       ORDER-1      &lt;xml&gt;&lt;/xml&gt;   &lt;xml&gt;&lt;/xml&gt;</span><br><span class="line">2       ORDER-2      &lt;xml&gt;&lt;/xml&gt;   &lt;xml&gt;&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="注册测试环境"><a href="#注册测试环境" class="headerlink" title="注册测试环境"></a>注册测试环境</h1><p>假设现在你已经拿到了<strong>操作员卡</strong>.</p>
<p>跟着<a href="https://www.cnblogs.com/whtydn/p/10220209.html" target="_blank" rel="noopener">海关 实时数据 企业联调接口 开发步骤与概要 第四步</a>做, 这是为了拿到证书.<br>要注意的有几点</p>
<ol>
<li>安装海关控件, 必须先安装<code>.net framework 3.5</code>.</li>
<li>初始密码一般是<code>88888888</code>, 密码错误多次会锁卡.</li>
<li>证书一定是<strong>读取证书</strong>那个方框里的, 不要把<strong>证书序列号</strong>也复制进去.</li>
<li>证书保存完毕后, 双击打开, 可以看到证书信息, 确认公司名和法人名没错后, 就可以了.</li>
</ol>
<p>得到证书和证书序列号后, 联系海关微信联调群里的陈书宾, 注册测试环境, 将相关信息提供给他.<br>目前需要以下资料</p>
<ol>
<li>证书</li>
<li>证书序列号</li>
<li>电商平台代码</li>
<li>电商企业名称</li>
<li>联系人</li>
<li>联系人电话</li>
</ol>
<h1 id="在测试环境进行验签"><a href="#在测试环境进行验签" class="headerlink" title="在测试环境进行验签"></a>在测试环境进行验签</h1><p>请务必在完成<strong>注册测试环境</strong>步骤后, 保持<strong>操作员卡</strong>插在自己电脑的状态.<br>我们可以在微信联调群拿到一个<code>html+js加签工具.rar</code>, 海关文档只提供了<code>js</code>版的<code>websocket</code>加签客户端. 这个<code>html</code>的应该是其他热心企业提供的.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">Content-Type</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">./json2.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">"./client.js?d=2018-12-19_16:00:00"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://unpkg.com/axios/dist/axios.min.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://cdn.jsdelivr.net/npm/vue@2.6.8/dist/vue.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span>&gt;</span><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">SignDataAsPem</span>(<span class="params"></span>)</span>&#123;EportClient.isInstalledTest(EportClient.cusSpcSignDataAsPEM,<span class="built_in">document</span>.getElementById(<span class="string">"txt1"</span>).value,<span class="string">"88888888"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(t)),<span class="built_in">document</span>.getElementById(<span class="string">"txt2"</span>).value=<span class="built_in">JSON</span>.stringify(t)&#125;)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">vue-app</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮询加签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">startReq()</span>&gt;</span>开始轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">stopReq()</span>&gt;</span>停止轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"list.length &gt; 0"</span>&gt;</span>数据加签中...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>空闲...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">index</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>加签记录:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in responseList"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>手动加签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">30</span> <span class="attr">cols</span>=<span class="string">60</span> <span class="attr">id</span>=<span class="string">txt1</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">30</span> <span class="attr">cols</span>=<span class="string">60</span> <span class="attr">id</span>=<span class="string">txt2</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">SignDataAsPem()</span>&gt;</span>加签<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=e.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">o,a</span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">var</span> s=t[o](a),u=s.value&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="keyword">void</span> n(e)&#125;<span class="keyword">if</span>(!s.done)<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(u).then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;r(<span class="string">"next"</span>,e)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;r(<span class="string">"throw"</span>,e)&#125;);e(u)&#125;<span class="keyword">return</span> r(<span class="string">"next"</span>)&#125;)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">SignDataToAsPem</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">console</span>.log(e),<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">n,r</span>)</span>&#123;EportClient.isInstalledTest(EportClient.cusSpcSignDataAsPEM,t,<span class="string">"88888888"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t,o</span>)</span>&#123;<span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="keyword">void</span> r(<span class="string">"error"</span>);doResponse(&#123;<span class="attr">asin</span>:t.Data[<span class="number">0</span>],<span class="attr">orderNo</span>:e&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;va.responseList.push(<span class="string">"订单"</span>+e+<span class="string">": "</span>+t.data),n()&#125;)&#125;)&#125;)&#125;<span class="keyword">var</span> timeout=<span class="number">4e3</span>,status=<span class="number">1</span>,doRequest=<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="keyword">this</span>;<span class="keyword">return</span> axios.post(<span class="string">"http://xxxxxxxx/oms/custom/lunxun"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=_asyncToGenerator(regeneratorRuntime.mark(<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r</span>)</span>&#123;<span class="keyword">var</span> o,a,s,u,i,c,f,p=r.data;<span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">for</span>(;;)<span class="keyword">switch</span>(t.prev=t.next)&#123;<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">if</span>(o=<span class="built_in">Object</span>.keys(p),!(o.length&gt;<span class="number">0</span>&amp;&amp;<span class="string">"error"</span>!==o[<span class="number">0</span>]))&#123;t.next=<span class="number">29</span>;<span class="keyword">break</span>&#125;o.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;va.list.push(&#123;<span class="attr">key</span>:e,<span class="attr">text</span>:p[e]&#125;)&#125;),a=!<span class="number">0</span>,s=!<span class="number">1</span>,u=<span class="keyword">void</span> <span class="number">0</span>,t.prev=<span class="number">6</span>,i=va.list[<span class="built_in">Symbol</span>.iterator]();<span class="keyword">case</span> <span class="number">8</span>:<span class="keyword">if</span>(a=(c=i.next()).done)&#123;t.next=<span class="number">15</span>;<span class="keyword">break</span>&#125;<span class="keyword">return</span> f=c.value,t.next=<span class="number">12</span>,SignDataToAsPem(f.key,f.text);<span class="keyword">case</span> <span class="number">12</span>:a=!<span class="number">0</span>,t.next=<span class="number">8</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">15</span>:t.next=<span class="number">21</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">17</span>:t.prev=<span class="number">17</span>,t.t0=t.catch(<span class="number">6</span>),s=!<span class="number">0</span>,u=t.t0;<span class="keyword">case</span> <span class="number">21</span>:t.prev=<span class="number">21</span>,t.prev=<span class="number">22</span>,!a&amp;&amp;i.return&amp;&amp;i.return();<span class="keyword">case</span> <span class="number">24</span>:<span class="keyword">if</span>(t.prev=<span class="number">24</span>,!s)&#123;t.next=<span class="number">27</span>;<span class="keyword">break</span>&#125;<span class="keyword">throw</span> u;<span class="keyword">case</span> <span class="number">27</span>:<span class="keyword">return</span> t.finish(<span class="number">24</span>);<span class="keyword">case</span> <span class="number">28</span>:<span class="keyword">return</span> t.finish(<span class="number">21</span>);<span class="keyword">case</span> <span class="number">29</span>:va.list=[],status&amp;&amp;setTimeout(e,timeout);<span class="keyword">case</span> <span class="number">31</span>:<span class="keyword">case</span><span class="string">"end"</span>:<span class="keyword">return</span> t.stop()&#125;&#125;,n,t,[[<span class="number">6</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">29</span>],[<span class="number">22</span>,,<span class="number">24</span>,<span class="number">28</span>]])&#125;));<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> n.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)&#125;&#125;())&#125;,doResponse=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> axios(&#123;<span class="attr">method</span>:<span class="string">"post"</span>,<span class="attr">url</span>:<span class="string">"http://xxxxxxx/oms/custom/callback"</span>,<span class="attr">data</span>:e,<span class="attr">transformRequest</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">""</span>;<span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> e)t+=<span class="built_in">encodeURIComponent</span>(n)+<span class="string">"="</span>+<span class="built_in">encodeURIComponent</span>(e[n])+<span class="string">"&amp;"</span>;<span class="keyword">return</span> t&#125;],<span class="attr">headers</span>:&#123;<span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;&#125;)&#125;,stopReq=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;status=<span class="number">0</span>&#125;,startReq=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;status=<span class="number">1</span>,doRequest()&#125;,va=<span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>:<span class="string">"#vue-app"</span>,<span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>&#123;<span class="attr">list</span>:[],<span class="attr">responseList</span>:[]&#125;&#125;&#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document,navigator</span>)</span>&#123;<span class="keyword">var</span> installlerUrl;<span class="keyword">var</span> swVersionScript=<span class="string">"https://app.singlewindow.cn/sat/swVersion.js"</span>;<span class="keyword">if</span>(!<span class="built_in">window</span>.SwVersion)&#123;<span class="keyword">var</span> onloadFunc=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> jsDom=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);jsDom.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);jsDom.setAttribute(<span class="string">"src"</span>,swVersionScript+<span class="string">"?d="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());<span class="built_in">document</span>.body.appendChild(jsDom);installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(!installlerUrl)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c installlerUrl地址为:"</span>+installlerUrl,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;&#125;,<span class="number">3000</span>)&#125;&#125;;<span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;<span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>,onloadFunc,<span class="literal">false</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;<span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>,onloadFunc)&#125;<span class="keyword">else</span>&#123;<span class="built_in">window</span>.onload=onloadFunc&#125;&#125;&#125;<span class="keyword">if</span>(!installlerUrl)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c installlerUrl地址为:"</span>+installlerUrl,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;&#125;,<span class="number">3000</span>)&#125;<span class="keyword">var</span> DefaultType=<span class="string">"iKey"</span>;<span class="keyword">var</span> toJson=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;<span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(obj)&#125;<span class="keyword">else</span>&#123;alert(<span class="string">"JSON转换错误!"</span>);<span class="keyword">return</span> <span class="literal">null</span>&#125;&#125;;<span class="keyword">var</span> jsonToObj=<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(text)&#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"("</span>+text+<span class="string">")"</span>)&#125;&#125;;<span class="keyword">var</span> getGuid=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> s4=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>(((<span class="number">1</span>+<span class="built_in">Math</span>.random())*<span class="number">65536</span>)|<span class="number">0</span>).toString(<span class="number">16</span>).substring(<span class="number">1</span>)&#125;;<span class="keyword">return</span>(s4()+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+s4()+s4())&#125;;<span class="keyword">var</span> splitStrData=<span class="function"><span class="keyword">function</span>(<span class="params">dataStr</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> dataStr!==<span class="string">"string"</span>)&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"数据类型错误"</span>)&#125;<span class="keyword">var</span> MaxLength=<span class="number">120</span>*<span class="number">1024</span>;<span class="keyword">var</span> byteCount=<span class="number">0</span>,p=<span class="number">0</span>;<span class="keyword">var</span> rst=[];<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;dataStr.length;i++)&#123;<span class="keyword">var</span> _escape=<span class="built_in">escape</span>(dataStr.charAt(i));byteCount=byteCount+((_escape.length&gt;=<span class="number">4</span>&amp;&amp;_escape.charAt(<span class="number">0</span>)===<span class="string">"%"</span>&amp;&amp;_escape.charAt(<span class="number">1</span>)===<span class="string">"u"</span>)?<span class="number">3</span>:<span class="number">1</span>);<span class="keyword">if</span>(byteCount&gt;MaxLength<span class="number">-3</span>)&#123;rst.push(dataStr.substring(p,i+<span class="number">1</span>));p=i+<span class="number">1</span>;byteCount=<span class="number">0</span>&#125;&#125;<span class="keyword">if</span>(p!==dataStr.length)&#123;rst.push(dataStr.substring(p))&#125;<span class="keyword">return</span> rst&#125;;<span class="keyword">var</span> getDataHeader=<span class="function"><span class="keyword">function</span>(<span class="params">checkCode,blockCheckCode,size,currsize,blockCount,blockGuid,blockNum</span>)</span>&#123;<span class="keyword">var</span> rst=<span class="string">"BLOCKTXT"</span>;rst+=equilongString(checkCode,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(blockCheckCode,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(size,<span class="number">16</span>,<span class="string">"0"</span>);rst+=equilongString(currsize,<span class="number">8</span>,<span class="string">"0"</span>);rst+=equilongString(blockCount,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(blockGuid,<span class="number">36</span>,<span class="string">"0"</span>);rst+=equilongString(blockNum,<span class="number">4</span>,<span class="string">"0"</span>);rst+=<span class="string">"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</span>;<span class="keyword">return</span> rst.substring(<span class="number">0</span>,<span class="number">128</span>)&#125;;<span class="keyword">var</span> equilongString=<span class="function"><span class="keyword">function</span>(<span class="params">str,length,prefix</span>)</span>&#123;<span class="keyword">if</span>(!str)&#123;str=<span class="string">""</span>&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> str!==<span class="string">"string"</span>)&#123;str=str+<span class="string">""</span>&#125;<span class="keyword">if</span>(!prefix)&#123;prefix=<span class="string">"0"</span>&#125;<span class="keyword">var</span> diff=length-str.length;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;diff;i++)&#123;str=prefix+str&#125;<span class="keyword">return</span> str&#125;;<span class="keyword">var</span> isIE6789=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> version=(!!navigator.appVersion)?navigator.appVersion.split(<span class="string">";"</span>):[];<span class="keyword">var</span> trim_Version=(version.length&gt;<span class="number">1</span>)?version[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>):<span class="string">""</span>;<span class="keyword">return</span> navigator.appName===<span class="string">"Microsoft Internet Explorer"</span>&amp;&amp;(trim_Version===<span class="string">"MSIE6.0"</span>||trim_Version===<span class="string">"MSIE7.0"</span>||trim_Version===<span class="string">"MSIE8.0"</span>||trim_Version===<span class="string">"MSIE9.0"</span>)&#125;;<span class="keyword">if</span>(!<span class="built_in">window</span>.WebSocket&amp;&amp;isIE6789())&#123;WebSocket=<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;<span class="keyword">this</span>.activeXObject=<span class="keyword">new</span> ActiveXObject(<span class="string">"snsoft.WebSocket"</span>);<span class="keyword">var</span> _self=<span class="keyword">this</span>,ax=<span class="keyword">this</span>.activeXObject;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ax.websocketOpen(_self,url)&#125;,<span class="number">0</span>)&#125;;WebSocket.prototype=&#123;<span class="attr">_callback</span>:<span class="function"><span class="keyword">function</span>(<span class="params">call,ev</span>)</span>&#123;<span class="keyword">var</span> f;<span class="keyword">if</span>(<span class="keyword">typeof</span>(f=<span class="keyword">this</span>[call])===<span class="string">"function"</span>)&#123;f.call(<span class="keyword">this</span>,ev)&#125;&#125;,<span class="attr">getReadyState</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.activeXObject.getReadyState((type||DefaultType))&#125;,<span class="attr">send</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="keyword">this</span>.activeXObject.websocketSendText(data)&#125;,<span class="attr">close</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.activeXObject.websocketClose()&#125;&#125;&#125;<span class="keyword">var</span> ws;<span class="keyword">var</span> conn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(!ws||getWebSocketReadyState(ws)===<span class="number">2</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;<span class="keyword">try</span>&#123;<span class="keyword">var</span> websocketurl=((!!<span class="built_in">window</span>.location)&amp;&amp;<span class="built_in">window</span>.location.protocol===<span class="string">"http:"</span>)?<span class="string">"ws://127.0.0.1:61232"</span>:<span class="string">"wss://wss.singlewindow.cn:61231"</span>;<span class="keyword">var</span> websocketurl=<span class="literal">true</span>?<span class="string">"ws://127.0.0.1:61232"</span>:<span class="string">"wss://wss.singlewindow.cn:61231"</span>;<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 使用"</span>+websocketurl+<span class="string">"连接控件服务"</span>,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;ws=<span class="keyword">new</span> WebSocket(websocketurl);ws.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">if</span>(e.data.charAt(<span class="number">0</span>)===<span class="string">"&#123;"</span>)&#123;<span class="keyword">var</span> msg=jsonToObj(e.data);<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="keyword">var</span> errMsg=<span class="string">"调用"</span>+msg[<span class="string">"_method"</span>]+<span class="string">"方法已返回, Result="</span>+(msg[<span class="string">"_args"</span>]&amp;&amp;msg[<span class="string">"_args"</span>].Result);<span class="keyword">var</span> errStyle=<span class="string">"color:#1941EC;font-size:12px"</span>;<span class="keyword">if</span>(!(msg[<span class="string">"_args"</span>]&amp;&amp;msg[<span class="string">"_args"</span>].Result))&#123;errMsg+=<span class="string">", CallbackInfos="</span>+e.data;errStyle=<span class="string">"color:#D94E34;font-size:14px"</span>&#125;<span class="built_in">window</span>.console.log(<span class="string">"%c "</span>+errMsg,errStyle)&#125;<span class="keyword">if</span>(callbacks[msg[<span class="string">"_method"</span>]])&#123;callbacks[msg[<span class="string">"_method"</span>]](msg[<span class="string">"_args"</span>],e.data)&#125;&#125;<span class="keyword">else</span>&#123;alert(<span class="string">"数据格式非法:"</span>+e.data)&#125;&#125;&#125;<span class="keyword">catch</span>(ex)&#123;<span class="keyword">if</span>(<span class="built_in">console</span>&amp;&amp;<span class="built_in">console</span>.log)&#123;<span class="built_in">console</span>.log(ex)&#125;&#125;&#125;<span class="keyword">return</span> ws&#125;;ws=conn();<span class="keyword">var</span> callbacks=&#123;&#125;;<span class="keyword">var</span> blockData=&#123;&#125;;<span class="keyword">var</span> sendMessage=<span class="function"><span class="keyword">function</span>(<span class="params">msg,callback</span>)</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">1</span>)&#123;ws.send(msg)&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> times=<span class="number">0</span>;<span class="keyword">var</span> waitForWebSocketConn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(times&gt;<span class="number">9</span>)&#123;callback(&#123;<span class="attr">Result</span>:<span class="literal">false</span>,<span class="attr">Data</span>:[],<span class="attr">Error</span>:[<span class="string">"连接客户端控件服务失败,请重试."</span>,<span class="string">"Err:Base60408"</span>]&#125;);</span><br><span class="line">conn()&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">1</span>)&#123;ws.send(msg)&#125;<span class="keyword">else</span>&#123;times++;waitForWebSocketConn()&#125;&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">2</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;times++;conn()&#125;&#125;&#125;&#125;;waitForWebSocketConn()&#125;&#125;;callbacks._nextBlock=<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;<span class="keyword">var</span> guid=args.Data[<span class="number">0</span>][<span class="string">"guid"</span>];<span class="keyword">if</span>(args.Data[<span class="number">0</span>][<span class="string">"finish"</span>])&#123;<span class="keyword">if</span>(blockData[guid])&#123;<span class="keyword">delete</span> blockData[guid]&#125;&#125;<span class="keyword">else</span>&#123;conn();<span class="keyword">var</span> next=args.Data[<span class="number">0</span>][<span class="string">"next"</span>];<span class="keyword">var</span> blockObj=blockData[guid];<span class="keyword">if</span>(!args.Result)&#123;<span class="keyword">var</span> retry=blockObj[<span class="string">"retry"</span>]||<span class="number">0</span>;retry=retry+<span class="number">1</span>;blockObj[<span class="string">"retry"</span>]=retry;<span class="keyword">if</span>(retry&gt;blockObj.block.length*<span class="number">3</span>)&#123;alert(<span class="string">"数据接收错误!"</span>)&#125;&#125;<span class="keyword">var</span> currData=blockObj.block[next];<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(currData);<span class="keyword">var</span> pakHeaser=getDataHeader(blockObj[<span class="string">"checkcode"</span>],blockCheckCode,blockObj[<span class="string">"totalLength"</span>],currData.length,blockObj.block.length,guid,next);<span class="keyword">var</span> msg=pakHeaser+currData;sendMessage(msg)&#125;&#125;;<span class="keyword">var</span> DIGEST=&#123;&#125;;DIGEST._auchCRCHi=[<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>];DIGEST._auchCRCLo=[<span class="number">0</span>,<span class="number">192</span>,<span class="number">193</span>,<span class="number">1</span>,<span class="number">195</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">194</span>,<span class="number">198</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">199</span>,<span class="number">5</span>,<span class="number">197</span>,<span class="number">196</span>,<span class="number">4</span>,<span class="number">204</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">205</span>,<span class="number">15</span>,<span class="number">207</span>,<span class="number">206</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">202</span>,<span class="number">203</span>,<span class="number">11</span>,<span class="number">201</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">200</span>,<span class="number">216</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">217</span>,<span class="number">27</span>,<span class="number">219</span>,<span class="number">218</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">222</span>,<span class="number">223</span>,<span class="number">31</span>,<span class="number">221</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">220</span>,<span class="number">20</span>,<span class="number">212</span>,<span class="number">213</span>,<span class="number">21</span>,<span class="number">215</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">214</span>,<span class="number">210</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">211</span>,<span class="number">17</span>,<span class="number">209</span>,<span class="number">208</span>,<span class="number">16</span>,<span class="number">240</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">241</span>,<span class="number">51</span>,<span class="number">243</span>,<span class="number">242</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">246</span>,<span class="number">247</span>,<span class="number">55</span>,<span class="number">245</span>,<span class="number">53</span>,<span class="number">52</span>,<span class="number">244</span>,<span class="number">60</span>,<span class="number">252</span>,<span class="number">253</span>,<span class="number">61</span>,<span class="number">255</span>,<span class="number">63</span>,<span class="number">62</span>,<span class="number">254</span>,<span class="number">250</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">251</span>,<span class="number">57</span>,<span class="number">249</span>,<span class="number">248</span>,<span class="number">56</span>,<span class="number">40</span>,<span class="number">232</span>,<span class="number">233</span>,<span class="number">41</span>,<span class="number">235</span>,<span class="number">43</span>,<span class="number">42</span>,<span class="number">234</span>,<span class="number">238</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">239</span>,<span class="number">45</span>,<span class="number">237</span>,<span class="number">236</span>,<span class="number">44</span>,<span class="number">228</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">229</span>,<span class="number">39</span>,<span class="number">231</span>,<span class="number">230</span>,<span class="number">38</span>,<span class="number">34</span>,<span class="number">226</span>,<span class="number">227</span>,<span class="number">35</span>,<span class="number">225</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">224</span>,<span class="number">160</span>,<span class="number">96</span>,<span class="number">97</span>,<span class="number">161</span>,<span class="number">99</span>,<span class="number">163</span>,<span class="number">162</span>,<span class="number">98</span>,<span class="number">102</span>,<span class="number">166</span>,<span class="number">167</span>,<span class="number">103</span>,<span class="number">165</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">164</span>,<span class="number">108</span>,<span class="number">172</span>,<span class="number">173</span>,<span class="number">109</span>,<span class="number">175</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">174</span>,<span class="number">170</span>,<span class="number">106</span>,<span class="number">107</span>,<span class="number">171</span>,<span class="number">105</span>,<span class="number">169</span>,<span class="number">168</span>,<span class="number">104</span>,<span class="number">120</span>,<span class="number">184</span>,<span class="number">185</span>,<span class="number">121</span>,<span class="number">187</span>,<span class="number">123</span>,<span class="number">122</span>,<span class="number">186</span>,<span class="number">190</span>,<span class="number">126</span>,<span class="number">127</span>,<span class="number">191</span>,<span class="number">125</span>,<span class="number">189</span>,<span class="number">188</span>,<span class="number">124</span>,<span class="number">180</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">181</span>,<span class="number">119</span>,<span class="number">183</span>,<span class="number">182</span>,<span class="number">118</span>,<span class="number">114</span>,<span class="number">178</span>,<span class="number">179</span>,<span class="number">115</span>,<span class="number">177</span>,<span class="number">113</span>,<span class="number">112</span>,<span class="number">176</span>,<span class="number">80</span>,<span class="number">144</span>,<span class="number">145</span>,<span class="number">81</span>,<span class="number">147</span>,<span class="number">83</span>,<span class="number">82</span>,<span class="number">146</span>,<span class="number">150</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">151</span>,<span class="number">85</span>,<span class="number">149</span>,<span class="number">148</span>,<span class="number">84</span>,<span class="number">156</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">157</span>,<span class="number">95</span>,<span class="number">159</span>,<span class="number">158</span>,<span class="number">94</span>,<span class="number">90</span>,<span class="number">154</span>,<span class="number">155</span>,<span class="number">91</span>,<span class="number">153</span>,<span class="number">89</span>,<span class="number">88</span>,<span class="number">152</span>,<span class="number">136</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">137</span>,<span class="number">75</span>,<span class="number">139</span>,<span class="number">138</span>,<span class="number">74</span>,<span class="number">78</span>,<span class="number">142</span>,<span class="number">143</span>,<span class="number">79</span>,<span class="number">141</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">140</span>,<span class="number">68</span>,<span class="number">132</span>,<span class="number">133</span>,<span class="number">69</span>,<span class="number">135</span>,<span class="number">71</span>,<span class="number">70</span>,<span class="number">134</span>,<span class="number">130</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">131</span>,<span class="number">65</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">64</span>];DIGEST.CheckCode=<span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>)</span>&#123;<span class="keyword">var</span> hi=<span class="number">255</span>;<span class="keyword">var</span> lo=<span class="number">255</span>;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;buffer.length;i++)&#123;<span class="keyword">var</span> idx=<span class="number">255</span>&amp;(hi^buffer.charCodeAt(i));hi=(lo^DIGEST._auchCRCHi[idx]);lo=DIGEST._auchCRCLo[idx]&#125;<span class="keyword">return</span> DIGEST.padLeft((hi&lt;&lt;<span class="number">8</span>|lo).toString(<span class="number">16</span>).toUpperCase(),<span class="number">4</span>,<span class="string">"0"</span>)&#125;;DIGEST.padLeft=<span class="function"><span class="keyword">function</span>(<span class="params">s,w,pc</span>)</span>&#123;<span class="keyword">if</span>(pc===<span class="literal">undefined</span>)&#123;pc=<span class="string">"0"</span>&#125;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,c=w-s.length;i&lt;c;i++)&#123;s=pc+s&#125;<span class="keyword">return</span> s&#125;;<span class="keyword">var</span> id=<span class="number">0</span>;<span class="keyword">var</span> baseInvoke=<span class="function"><span class="keyword">function</span>(<span class="params">method,args,callback</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> args===<span class="string">"function"</span>)&#123;callback=args;args=&#123;&#125;&#125;conn();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 调用方法"</span>+method,<span class="string">"color:#95F065;font-size:12px"</span>)&#125;callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;args=args||&#123;&#125;;_data[<span class="string">"args"</span>]=args;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;sendMessage(s,callback)&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;sendMessage(s,callback)&#125;&#125;;<span class="keyword">var</span> baseInvokeByFrames=<span class="function"><span class="keyword">function</span>(<span class="params">method,args,callback</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> args===<span class="string">"function"</span>)&#123;callback=args;args=&#123;&#125;&#125;conn();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 调用方法"</span>+method,<span class="string">"color:#95F065;font-size:12px"</span>)&#125;callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;args=args||&#123;&#125;;_data[<span class="string">"args"</span>]=args;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;sendFrames(s,callback)&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;sendFrames(s,callback)&#125;&#125;;<span class="keyword">var</span> sendFrames=<span class="function"><span class="keyword">function</span>(<span class="params">s,callback</span>)</span>&#123;<span class="keyword">var</span> checkCode=DIGEST.CheckCode(s);<span class="keyword">var</span> guid=getGuid();<span class="keyword">while</span>(blockData[guid])&#123;guid=getGuid()&#125;<span class="keyword">var</span> splitData=splitStrData(s);blockData[guid]=&#123;<span class="attr">checkcode</span>:checkCode,<span class="attr">totalLength</span>:s.length,<span class="attr">retry</span>:<span class="number">0</span>,<span class="attr">block</span>:splitData&#125;;<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(splitData[<span class="number">0</span>]);<span class="keyword">var</span> pakHeaser=getDataHeader(checkCode,blockCheckCode,s.length,splitData[<span class="number">0</span>].length,splitData.length,guid,<span class="number">0</span>);<span class="keyword">var</span> msg=pakHeaser+splitData[<span class="number">0</span>];sendMessage(msg,callback)&#125;;<span class="keyword">var</span> getWebSocketReadyState=<span class="function"><span class="keyword">function</span>(<span class="params">thisWs</span>)</span>&#123;<span class="keyword">var</span> currWs=thisWs||conn();<span class="keyword">if</span>(!currWs)&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;<span class="keyword">if</span>(currWs.readyState!==<span class="literal">undefined</span>)&#123;<span class="keyword">return</span> currWs.readyState&#125;<span class="keyword">if</span>(currWs.getReadyState)&#123;<span class="keyword">return</span> currWs.getReadyState()&#125;<span class="keyword">return</span> <span class="number">0</span>&#125;;<span class="built_in">window</span>.EportClient=&#123;<span class="attr">isInstalled</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,callback,currInstalllerUrl</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> type===<span class="string">"function"</span>)&#123;<span class="keyword">if</span>(callback)&#123;currInstalllerUrl=callback&#125;callback=type;type=DefaultType&#125;ws=conn();<span class="keyword">var</span> bInstalled=getWebSocketReadyState(ws)===<span class="number">1</span>;<span class="keyword">var</span> retryConut=<span class="number">0</span>;<span class="function"><span class="keyword">function</span> <span class="title">retry</span>(<span class="params"></span>)</span>&#123;retryConut++;ws=conn();bInstalled=getWebSocketReadyState(ws)===<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!bInstalled)&#123;<span class="keyword">if</span>(retryConut&lt;<span class="number">3</span>)&#123;setTimeout(retry,<span class="number">1500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(retryConut===<span class="number">3</span>)&#123;<span class="keyword">var</span> iframeDom=<span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);iframeDom.style.cssText=<span class="string">"width:1px;height:1px;position:fixed;top:0;left:0;display:none;"</span>;iframeDom.src=<span class="string">"singlewindow://Restart"</span>;<span class="built_in">document</span>.body.appendChild(iframeDom);setTimeout(retry,<span class="number">2500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> errMsg=<span class="string">"检测到您未安装"</span>+type+<span class="string">"客户端! "</span>+type+<span class="string">"下载地址为:"</span>+currInstalllerUrl||installlerUrl||<span class="built_in">window</span>.installlerUrl;<span class="keyword">if</span>(callback)&#123;callback(&#123;<span class="string">"Result"</span>:<span class="literal">false</span>,<span class="string">"Data"</span>:[],<span class="string">"Error"</span>:[errMsg]&#125;)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.console)&#123;<span class="built_in">window</span>.console.log(errMsg)&#125;&#125;&#125;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> okMsg=<span class="string">"已经安装了"</span>+type+<span class="string">"客户端."</span>;<span class="keyword">if</span>(callback)&#123;callback(&#123;<span class="string">"Result"</span>:<span class="literal">true</span>,<span class="string">"Data"</span>:[okMsg],<span class="string">"Error"</span>:[]&#125;)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.console)&#123;<span class="built_in">window</span>.console.log(okMsg)&#125;&#125;&#125;&#125;retry()&#125;,<span class="attr">isInstalledTest</span>:<span class="function"><span class="keyword">function</span>(<span class="params">func,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10</span>)</span>&#123;<span class="keyword">if</span>(!func)&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"未知的JS的function,请检查调用isInstalledTest传入的第一个参数是否存在该函数."</span>)&#125;EportClient.isInstalled(DefaultType,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;<span class="keyword">if</span>(msg.Result)&#123;<span class="keyword">if</span>(func&amp;&amp;(<span class="keyword">typeof</span> func)===<span class="string">"function"</span>)&#123;func.call(<span class="literal">null</span>,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)&#125;<span class="keyword">else</span>&#123;alert(msg.Data[<span class="number">0</span>])&#125;&#125;<span class="keyword">else</span>&#123;alertErrMsg(msg)&#125;&#125;,installlerUrl||<span class="built_in">window</span>.installlerUrl)&#125;,<span class="attr">cusSpcSignDataAsPEM</span>:<span class="function"><span class="keyword">function</span>(<span class="params">inData,passwd,callback</span>)</span>&#123;baseInvoke(<span class="string">"cus-sec_SpcSignDataAsPEM"</span>,(!!passwd)?&#123;<span class="string">"inData"</span>:inData,<span class="string">"passwd"</span>:passwd&#125;:&#123;<span class="string">"inData"</span>:inData&#125;,callback)&#125;,<span class="attr">swcLogin</span>:<span class="function"><span class="keyword">function</span>(<span class="params">passwd,callback</span>)</span>&#123;baseInvoke(<span class="string">"swc_security_login"</span>,&#123;<span class="string">"passwd"</span>:passwd&#125;,callback)&#125;,<span class="attr">swcPostData</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data,callback,method</span>)</span>&#123;conn();method=(method||<span class="string">"swc_postdata"</span>);callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;<span class="keyword">if</span>(<span class="keyword">typeof</span> data===<span class="string">"object"</span>)&#123;_data[<span class="string">"args"</span>]=toJson(data)&#125;<span class="keyword">else</span>&#123;_data[<span class="string">"args"</span>]=data&#125;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">var</span> checkCode=DIGEST.CheckCode(s);<span class="keyword">var</span> guid=getGuid();<span class="keyword">while</span>(blockData[guid])&#123;guid=getGuid()&#125;<span class="keyword">var</span> splitData=splitStrData(s);<span class="keyword">if</span>(splitData.length&gt;<span class="number">1</span>)&#123;blockData[guid]=&#123;<span class="attr">checkcode</span>:checkCode,<span class="attr">totalLength</span>:s.length,<span class="attr">retry</span>:<span class="number">0</span>,<span class="attr">block</span>:splitData&#125;&#125;<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(splitData[<span class="number">0</span>]);<span class="keyword">var</span> pakHeaser=getDataHeader(checkCode,blockCheckCode,s.length,splitData[<span class="number">0</span>].length,splitData.length,guid,<span class="number">0</span>);<span class="keyword">var</span> msg=pakHeaser+splitData[<span class="number">0</span>];sendMessage(msg)&#125;,<span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;;EportClient.data.prototype=&#123;<span class="attr">Execute</span>:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;<span class="keyword">var</span> d=toJson(<span class="keyword">this</span>);EportClient.swcPostData(d,callback)&#125;&#125;&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,navigator);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json2.js</span></span><br><span class="line"><span class="keyword">if</span>(navigator.appName==<span class="string">"Microsoft Internet Explorer"</span>&amp;&amp;(navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE6.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE7.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE8.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE9.0"</span>))&#123;<span class="built_in">JSON</span>=&#123;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>!==<span class="string">"object"</span>)&#123;<span class="built_in">JSON</span>=&#123;&#125;&#125;&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> rx_one=<span class="regexp">/^[\],:&#123;&#125;\s]*$/</span>;<span class="keyword">var</span> rx_two=<span class="regexp">/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)/g</span>;<span class="keyword">var</span> rx_three=<span class="regexp">/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span>;<span class="keyword">var</span> rx_four=<span class="regexp">/(?:^|:|,)(?:\s*\[)+/g</span>;<span class="keyword">var</span> rx_escapable=<span class="regexp">/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span>;<span class="keyword">var</span> rx_dangerous=<span class="regexp">/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span>;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span>(n&lt;<span class="number">10</span>)?<span class="string">"0"</span>+n:n&#125;<span class="function"><span class="keyword">function</span> <span class="title">this_value</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.valueOf()&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Date</span>.prototype.toJSON!==<span class="string">"function"</span>)&#123;<span class="built_in">Date</span>.prototype.toJSON=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">isFinite</span>(<span class="keyword">this</span>.valueOf())?(<span class="keyword">this</span>.getUTCFullYear()+<span class="string">"-"</span>+f(<span class="keyword">this</span>.getUTCMonth()+<span class="number">1</span>)+<span class="string">"-"</span>+f(<span class="keyword">this</span>.getUTCDate())+<span class="string">"T"</span>+f(<span class="keyword">this</span>.getUTCHours())+<span class="string">":"</span>+f(<span class="keyword">this</span>.getUTCMinutes())+<span class="string">":"</span>+f(<span class="keyword">this</span>.getUTCSeconds())+<span class="string">"Z"</span>):<span class="literal">null</span>&#125;;<span class="built_in">Boolean</span>.prototype.toJSON=this_value;<span class="built_in">Number</span>.prototype.toJSON=this_value;<span class="built_in">String</span>.prototype.toJSON=this_value&#125;<span class="keyword">var</span> gap;<span class="keyword">var</span> indent;<span class="keyword">var</span> meta;<span class="keyword">var</span> rep;<span class="function"><span class="keyword">function</span> <span class="title">quote</span>(<span class="params">string</span>)</span>&#123;rx_escapable.lastIndex=<span class="number">0</span>;<span class="keyword">return</span> rx_escapable.test(string)?<span class="string">'"'</span>+string.replace(rx_escapable,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">var</span> c=meta[a];<span class="keyword">return</span> <span class="keyword">typeof</span> c===<span class="string">"string"</span>?c:<span class="string">"\\u"</span>+(<span class="string">"0000"</span>+a.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-4</span>)&#125;)+<span class="string">'"'</span>:<span class="string">'"'</span>+string+<span class="string">'"'</span>&#125;<span class="function"><span class="keyword">function</span> <span class="title">str</span>(<span class="params">key,holder</span>)</span>&#123;<span class="keyword">var</span> i;<span class="keyword">var</span> k;<span class="keyword">var</span> v;<span class="keyword">var</span> length;<span class="keyword">var</span> mind=gap;<span class="keyword">var</span> partial;<span class="keyword">var</span> value=holder[key];<span class="keyword">if</span>(value&amp;&amp;<span class="keyword">typeof</span> value===<span class="string">"object"</span>&amp;&amp;<span class="keyword">typeof</span> value.toJSON===<span class="string">"function"</span>)&#123;value=value.toJSON(key)&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> rep===<span class="string">"function"</span>)&#123;value=rep.call(holder,key,value)&#125;<span class="keyword">switch</span>(<span class="keyword">typeof</span> value)&#123;<span class="keyword">case</span><span class="string">"string"</span>:<span class="keyword">return</span> quote(value);<span class="keyword">case</span><span class="string">"number"</span>:<span class="keyword">return</span>(<span class="built_in">isFinite</span>(value))?<span class="built_in">String</span>(value):<span class="string">"null"</span>;<span class="keyword">case</span><span class="string">"boolean"</span>:<span class="keyword">case</span><span class="string">"null"</span>:<span class="keyword">return</span> <span class="built_in">String</span>(value);<span class="keyword">case</span><span class="string">"object"</span>:<span class="keyword">if</span>(!value)&#123;<span class="keyword">return</span><span class="string">"null"</span>&#125;gap+=indent;partial=[];<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(value)===<span class="string">"[object Array]"</span>)&#123;length=value.length;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i+=<span class="number">1</span>)&#123;partial[i]=str(i,value)||<span class="string">"null"</span>&#125;v=partial.length===<span class="number">0</span>?<span class="string">"[]"</span>:gap?(<span class="string">"[\n"</span>+gap+partial.join(<span class="string">",\n"</span>+gap)+<span class="string">"\n"</span>+mind+<span class="string">"]"</span>):<span class="string">"["</span>+partial.join(<span class="string">","</span>)+<span class="string">"]"</span>;gap=mind;<span class="keyword">return</span> v&#125;<span class="keyword">if</span>(rep&amp;&amp;<span class="keyword">typeof</span> rep===<span class="string">"object"</span>)&#123;length=rep.length;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i+=<span class="number">1</span>)&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> rep[i]===<span class="string">"string"</span>)&#123;k=rep[i];v=str(k,value);<span class="keyword">if</span>(v)&#123;partial.push(quote(k)+((gap)?<span class="string">": "</span>:<span class="string">":"</span>)+v)&#125;&#125;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">for</span>(k <span class="keyword">in</span> value)&#123;<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(value,k))&#123;v=str(k,value);<span class="keyword">if</span>(v)&#123;partial.push(quote(k)+((gap)?<span class="string">": "</span>:<span class="string">":"</span>)+v)&#125;&#125;&#125;&#125;v=partial.length===<span class="number">0</span>?<span class="string">"&#123;&#125;"</span>:gap?<span class="string">"&#123;\n"</span>+gap+partial.join(<span class="string">",\n"</span>+gap)+<span class="string">"\n"</span>+mind+<span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>+partial.join(<span class="string">","</span>)+<span class="string">"&#125;"</span>;gap=mind;<span class="keyword">return</span> v&#125;&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.stringify!==<span class="string">"function"</span>)&#123;meta=&#123;<span class="string">"\b"</span>:<span class="string">"\\b"</span>,<span class="string">"\t"</span>:<span class="string">"\\t"</span>,<span class="string">"\n"</span>:<span class="string">"\\n"</span>,<span class="string">"\f"</span>:<span class="string">"\\f"</span>,<span class="string">"\r"</span>:<span class="string">"\\r"</span>,<span class="string">'"'</span>:<span class="string">'\\"'</span>,<span class="string">"\\"</span>:<span class="string">"\\\\"</span>&#125;;<span class="built_in">JSON</span>.stringify=<span class="function"><span class="keyword">function</span>(<span class="params">value,replacer,space</span>)</span>&#123;<span class="keyword">var</span> i;gap=<span class="string">""</span>;indent=<span class="string">""</span>;<span class="keyword">if</span>(<span class="keyword">typeof</span> space===<span class="string">"number"</span>)&#123;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;space;i+=<span class="number">1</span>)&#123;indent+=<span class="string">" "</span>&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> space===<span class="string">"string"</span>)&#123;indent=space&#125;&#125;rep=replacer;<span class="keyword">if</span>(replacer&amp;&amp;<span class="keyword">typeof</span> replacer!==<span class="string">"function"</span>&amp;&amp;(<span class="keyword">typeof</span> replacer!==<span class="string">"object"</span>||<span class="keyword">typeof</span> replacer.length!==<span class="string">"number"</span>))&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"JSON.stringify"</span>)&#125;<span class="keyword">return</span> str(<span class="string">""</span>,&#123;<span class="string">""</span>:value&#125;)&#125;&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.parse!==<span class="string">"function"</span>)&#123;<span class="built_in">JSON</span>.parse=<span class="function"><span class="keyword">function</span>(<span class="params">text,reviver</span>)</span>&#123;<span class="keyword">var</span> j;<span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">holder,key</span>)</span>&#123;<span class="keyword">var</span> k;<span class="keyword">var</span> v;<span class="keyword">var</span> value=holder[key];<span class="keyword">if</span>(value&amp;&amp;<span class="keyword">typeof</span> value===<span class="string">"object"</span>)&#123;<span class="keyword">for</span>(k <span class="keyword">in</span> value)&#123;<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(value,k))&#123;v=walk(value,k);<span class="keyword">if</span>(v!==<span class="literal">undefined</span>)&#123;value[k]=v&#125;<span class="keyword">else</span>&#123;<span class="keyword">delete</span> value[k]&#125;&#125;&#125;&#125;<span class="keyword">return</span> reviver.call(holder,key,value)&#125;text=<span class="built_in">String</span>(text);rx_dangerous.lastIndex=<span class="number">0</span>;<span class="keyword">if</span>(rx_dangerous.test(text))&#123;text=text.replace(rx_dangerous,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span>(<span class="string">"\\u"</span>+(<span class="string">"0000"</span>+a.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-4</span>))&#125;)&#125;<span class="keyword">if</span>(rx_one.test(text.replace(rx_two,<span class="string">"@"</span>).replace(rx_three,<span class="string">"]"</span>).replace(rx_four,<span class="string">""</span>)))&#123;j=<span class="built_in">eval</span>(<span class="string">"("</span>+text+<span class="string">")"</span>);<span class="keyword">return</span>(<span class="keyword">typeof</span> reviver===<span class="string">"function"</span>)?walk(&#123;<span class="string">""</span>:j&#125;,<span class="string">""</span>):j&#125;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"JSON.parse"</span>)&#125;&#125;&#125;());</span><br></pre></td></tr></table></figure>
<p>复制下面的加签原文, 应该就是将几个<code>json</code>字符串, 用<code>||</code>连接起来.<br>这些字段在<a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a>文件中有详细说明, 但是我们做测试随便填数据就行了.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;sessionID&quot;:&quot;ad2254-8hewyf32-556162449&quot;||&quot;payExchangeInfoHead&quot;:&quot;&#123;&quot;guid&quot;:&quot;9D55BA71-22DE-41F4-8B50-C36C83B3B530&quot;,&quot;initalRequest&quot;:&quot;原始请求&quot;,&quot;initalResponse&quot;:&quot;原始响应&quot;,&quot;ebpCode&quot;:&quot;4403169BVN&quot;,&quot;payCode&quot;:&quot;4403169D3W&quot;,&quot;payTransactionId&quot;:&quot;2018121222001354081010726129&quot;,&quot;totalAmount&quot;:100,&quot;currency&quot;:&quot;CNY&quot;,&quot;verDept&quot;:&quot;3&quot;,&quot;payType&quot;:&quot;1&quot;,&quot;tradingTime&quot;:&quot;20181212041803&quot;,&quot;note&quot;:&quot;批量订单，测试订单优化,生成多个so订单&quot;&#125;&quot;||&quot;payExchangeInfoLists&quot;:&quot;[&#123;&quot;orderNo&quot;:&quot;SO1710301150602574003&quot;,&quot;goodsInfo&quot;:[&#123;&quot;gname&quot;:&quot;lhy-gnsku2&quot;,&quot;itemLink&quot;:&quot;http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453&quot;&#125;],&quot;recpAccount&quot;:&quot;1234567&quot;,&quot;recpCode&quot;:&quot;7654321&quot;,&quot;recpName&quot;:&quot;我的公司&quot;&#125;]&quot;||&quot;serviceTime&quot;:&quot;1544519952469&quot;</span><br></pre></td></tr></table></figure></p>
<p>修改部分字段.</p>
<ol>
<li><code>ebpCode</code>: 你司的电商平台代码</li>
<li><code>payCode</code>: 支付企业的海关注册码, 如<a href="https://pay.weixin.qq.com/wiki/doc/api/external/declarecustom.php?chapter=18_1" target="_blank" rel="noopener">微信支付</a>的<code>4403169D3W</code></li>
</ol>
<p>然后粘贴到上面<code>html</code>进行<strong>手动加签</strong>, 得到以下数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;Result&quot;:true,&quot;Data&quot;:[&quot;BsA3cCpwsaYrFlwgkjccUGpPBNGni7CiP6F5SmCY8OWxw4xd1kwLWKwR69tSQHSmHmT2O07KYvzj5/N0NkWvoTvyNolQ822/jDTAMcrBPmv5xtu3FHEDYgdkB4sfdeu7EdyVeDWyMEPkT1n/7h80kxKerJzjQAB6HrxPSgLJ+MQ=&quot;,&quot;01304235&quot;],&quot;Error&quot;:[]&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Data</code>字段里第一个就是签名, 第二个是证书编号<br>然后将签名和证书编号复制, 拼接成以下<code>JSON</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;sessionID&quot;:&quot;ad2254-8hewyf32-556162449&quot;,&quot;payExchangeInfoHead&quot;:&#123;&quot;guid&quot;:&quot;9D55BA71-22DE-41F4-8B50-C36C83B3B530&quot;,&quot;initalRequest&quot;:&quot;原始请求&quot;,&quot;initalResponse&quot;:&quot;原始响应&quot;,&quot;ebpCode&quot;:&quot;4403169BVN&quot;,&quot;payCode&quot;:&quot;4403169D3W&quot;,&quot;payTransactionId&quot;:&quot;2018121222001354081010726129&quot;,&quot;totalAmount&quot;:100,&quot;currency&quot;:&quot;CNY&quot;,&quot;verDept&quot;:&quot;3&quot;,&quot;payType&quot;:&quot;1&quot;,&quot;tradingTime&quot;:&quot;20181212041803&quot;,&quot;note&quot;:&quot;批量订单，测试订单优化,生成多个so订单&quot;&#125;,&quot;payExchangeInfoLists&quot;:[&#123;&quot;orderNo&quot;:&quot;SO1710301150602574003&quot;,&quot;goodsInfo&quot;:[&#123;&quot;gname&quot;:&quot;lhy-gnsku2&quot;,&quot;itemLink&quot;:&quot;http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453&quot;&#125;],&quot;recpAccount&quot;:&quot;1234567&quot;,&quot;recpCode&quot;:&quot;7654321&quot;,&quot;recpName&quot;:&quot;我的公司&quot;&#125;],&quot;serviceTime&quot;:&quot;1544519952469&quot;,&quot;certNo&quot;:&quot;01304235&quot;,&quot;signValue&quot;:&quot;VRx4eIXfQWItQNiJEkINMWKXMrjVGDFP/HkzqzZ7r+7IJcFK+pcHqZf+IS0PiIz29I2IsXXhV1Tg+3Tlq0fz4UjfsyPE1vEgqA51q3S/fGv4B1MlzS5KG1ETyB+FZaZegUQchK4vl4QGuSJqyi4QJ8b/eCa75KOyyNRm+wUsQtg=&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后发送给海关测试接口, 这里使用<code>OKHttp</code>做客户端.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String json = <span class="string">"&#123;\"sessionID\":\"ad2254-8hewyf32-556162449\",\"payExchangeInfoHead\":&#123;\"guid\":\"9D55BA71-22DE-41F4-8B50-C36C83B3B530\",\"initalRequest\":\"原始请求\",\"initalResponse\":\"原始响应\",\"ebpCode\":\"4403169BVN\",\"payCode\":\"4403169D3W\",\"payTransactionId\":\"2018121222001354081010726129\",\"totalAmount\":100,\"currency\":\"CNY\",\"verDept\":\"3\",\"payType\":\"1\",\"tradingTime\":\"20181212041803\",\"note\":\"批量订单，测试订单优化,生成多个so订单\"&#125;,\"payExchangeInfoLists\":[&#123;\"orderNo\":\"SO1710301150602574003\",\"goodsInfo\":[&#123;\"gname\":\"lhy-gnsku2\",\"itemLink\":\"http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453\"&#125;],\"recpAccount\":\"1234567\",\"recpCode\":\"7654321\",\"recpName\":\"我的公司\"&#125;],\"serviceTime\":\"1544519952469\",\"certNo\":\"01304235\",\"signValue\":\"VRx4eIXfQWItQNiJEkINMWKXMrjVGDFP/HkzqzZ7r+7IJcFK+pcHqZf+IS0PiIz29I2IsXXhV1Tg+3Tlq0fz4UjfsyPE1vEgqA51q3S/fGv4B1MlzS5KG1ETyB+FZaZegUQchK4vl4QGuSJqyi4QJ8b/eCa75KOyyNRm+wUsQtg=\"&#125;\n"</span>;</span><br><span class="line">        String encode = URLEncoder.encode(json, <span class="string">"UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        </span><br><span class="line">        MediaType mediaType = MediaType.parse(<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        RequestBody body = RequestBody.create(mediaType, <span class="string">"payExInfoStr="</span>+encode);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">              .url(<span class="string">"https://swapptest.singlewindow.cn/ceb2grab/grab/realTimeDataUpload"</span>)</span><br><span class="line">              .post(body)</span><br><span class="line">              .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">              .build();</span><br><span class="line">        </span><br><span class="line">        Response response = client.newCall(request).execute();</span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果返回<strong>上传成功</strong>, 那就说明验签通过了.</p>
<h2 id="上传失败-入库失败-java-sql-SQLException-ORA-00001-违反唯一约束条件-sessionID重复"><a href="#上传失败-入库失败-java-sql-SQLException-ORA-00001-违反唯一约束条件-sessionID重复" class="headerlink" title="上传失败,入库失败 java.sql.SQLException: ORA-00001: 违反唯一约束条件 (sessionID重复)"></a>上传失败,入库失败 java.sql.SQLException: ORA-00001: 违反唯一约束条件 (sessionID重复)</h2><p>这个只需要把<code>sessionID</code>随便改一下, 比如改成<code>ad2254-8hewyf32-556162450</code>, 然后重新加签即可.<br>海关没做校验, 应该就是给数据库加了个唯一索引.</p>
<h2 id="企业实时数据获取验签证书未在服务系统注册"><a href="#企业实时数据获取验签证书未在服务系统注册" class="headerlink" title="企业实时数据获取验签证书未在服务系统注册"></a>企业实时数据获取验签证书未在服务系统注册</h2><p>修改上面提到的<code>ebpCode</code>和<code>payCode</code>以及<strong>证书编号</strong>.<br>并确保<strong>证书编号</strong>小写.<br>再不行, 在海关微信联调群问.</p>
<h2 id="验签失败"><a href="#验签失败" class="headerlink" title="验签失败"></a>验签失败</h2><p>海关的验签规则很严格, 每个字段顺序都有要求, 错一个字符, 多一个<code>\n</code>都会导致验签失败.<br>因为加签原文和上传<code>JSON</code>是两种不同的数据类型, 所以耐心一个字符一个字符地对比.<br>特别是换行符<code>\n</code>这种不可见字符, 卡了我几个钟.</p>
<p>这种问题就不用去海关微信联调群问了, 肯定是自己问题.</p>
<h1 id="注册线上环境"><a href="#注册线上环境" class="headerlink" title="注册线上环境"></a>注册线上环境</h1><p>插入<strong>操作员卡</strong>后, 注意, 一定要<strong>操作员卡</strong>.<br>打开<a href="https://swapp.singlewindow.cn/deskserver/sw/deskIndex?menu_id=swcebimp" target="_blank" rel="noopener">中国国际贸易单一窗口</a><br><img src="/images/海关跨境申报流程165号和179号文档_01.png"><br>需要确保电商平台代码和电商平台名称这两个灰色的框框是有值的, 没有则去找海关企管科注册电商平台权限, 具体打海关电话<code>010-65194114</code>咨询.</p>
<p>还记得我们之前提供给海关的证书吗? 点击选择证书, 上传了. 证书编号记得小写.<br>之后就是注册服务地址, 填入<code>http://你的域名/项目前缀/platDataOpen</code>, 点击注册地址, 然后肯定注册失败的. 这个之后处理.</p>
<p>值得注意的是, 这个服务注册地址可以注册多个, 审核通过多个, 但是最终<strong>启用</strong>的只能有一个. </p>
<h1 id="配置实体加签主机"><a href="#配置实体加签主机" class="headerlink" title="配置实体加签主机"></a>配置实体加签主机</h1><p>有的企业是全部云主机, 会问能不能不要这个实体主机, 不可以, 因为我司现在也是全部云主机, 还是妥协弄了个实体主机.<br>我司用的是<code>Windows Server 2012 R2</code>.</p>
<p>和注册测试环境的步骤一样<br>值得注意的是, 一定要先手动安装<code>.net framework 3.5</code>, 一定要先手动安装<code>.net framework 3.5</code>.<br>否则海关提供的客户端安装程序可能会出现打不开的情况.</p>
<p>主要步骤就是</p>
<ol>
<li>安装<code>.net framework 3.5</code></li>
<li>安装海关提供的客户端</li>
<li>开放实体加签主机的<code>61231</code>和<code>61232</code>端口.</li>
<li>修改上面提供的<code>client.js</code>中的<code>ws://127.0.0.1:61232</code>为实体加签主机的外网<code>IP</code>.</li>
<li>在外网使用<code>html</code>进行加签.</li>
</ol>
<h1 id="编写-platDataOpen-逻辑"><a href="#编写-platDataOpen-逻辑" class="headerlink" title="编写 /platDataOpen 逻辑"></a>编写 /platDataOpen 逻辑</h1><p>我们之前注册了<code>http://你的域名/项目前缀/platDataOpen</code>地址, 但是没有实现这个接口.<br>下面是一个简单的例子<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value=<span class="string">"/platDataOpen"</span> , headers=<span class="string">"content-type=application/x-www-form-urlencoded"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">platDataOpen</span><span class="params">(@RequestParam String openReq)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        openReq = StringUtils.replace(openReq, <span class="string">"&amp;quot;"</span>, <span class="string">"\""</span>);</span><br><span class="line">        JSONObject json = JSONObject.parseObject(openReq);</span><br><span class="line">        String orderNo = json.getString(<span class="string">"orderNo"</span>);</span><br><span class="line">        String sessionID = json.getString(<span class="string">"sessionID"</span>);</span><br><span class="line">        Long serviceTime = json.getLong(<span class="string">"serviceTime"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 海关调用此接口, 返回特定格式的json数据</span></span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 上报海关, 这里是异步操作 @Async</span></span><br><span class="line">        String testUrl      = <span class="string">"https://swapptest.singlewindow.cn/ceb2grab/grab/realTimeDataUpload"</span>;</span><br><span class="line"><span class="comment">//        String onlineUrl    = "https://customs.chinaport.gov.cn/ceb2grab/grab/realTimeDataUpload";</span></span><br><span class="line">        String websocketUrl = <span class="string">"ws://127.0.0.1:61232"</span>;</span><br><span class="line">        myservice.uploadCustomsDeclare(testUrl, websocketUrl, orderNo, sessionID, serviceTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 返回数据</span></span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>, <span class="string">""</span>);</span><br><span class="line">        result.put(<span class="string">"serviceTime"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里是一个简单的例子, 具体的业务逻辑在<code>uploadCustomsDeclare</code>方法里, 不同公司的底层业务逻辑不同.<br>反正关键点就是</p>
<ol>
<li>异步, 用线程池或者队列都行, 但是必须要在<strong>两分钟</strong>内上传完毕.</li>
<li>根据海关传过来的订单, 查询海关需要的数据, 然后写个<code>WebSocket</code>客户端加签, 再上传数据到海关的接口.</li>
<li>海关加签<code>WebSocket</code>客户端的接收的数据和发送的数据的<strong>数据格式</strong>是固定的<code>JSON</code>格式.</li>
</ol>
<p>这里提供一个简单的依赖于<a href="https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket" target="_blank" rel="noopener"><code>Java-WebSocket</code></a>的<code>WebSocket</code>客户端.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务代码() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 WebSocket 客户端, 注意这里是异步回调</span></span><br><span class="line">        WebSocketClient client = getWebSocketClient(<span class="keyword">new</span> URI(<span class="string">"ws://127.0.0.1:61232"</span>), message -&gt; &#123;</span><br><span class="line">            <span class="comment">// 3. 异步回调, 解析响应体</span></span><br><span class="line">            <span class="comment">//    &#123;"_id":0,"_method":"cus-sec_SpcSignDataAsPEM","_status":"00","_args":&#123;"Result":true,"Data":["rgTtbpFAmxQ+3mMEaIcztj4zV3SMJ0Jo09HnAE8b+GwxuHYqgcfqEGj/DB+Vb6A8ETXtLMsHGEvsItSm+fDlwOXPPjvpoG5sDeiQXBV4qcGPnLUaDZmdSTJdhRHUn1xFMBCvzP77h2x8RRow8l2ZIyVujY/H0hxZ/flUVERsD8I=","01304235"],"Error":[]&#125;&#125;</span></span><br><span class="line">            JSONObject responseJSON = JSONObject.parseObject(message);</span><br><span class="line">            String method = responseJSON.getString(<span class="string">"_method"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"cus-sec_SpcSignDataAsPEM"</span>.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 如果不是加签代码, 不处理</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONObject args = responseJSON.getJSONObject(<span class="string">"_args"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> result = args.getBooleanValue(<span class="string">"Result"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!result) &#123;</span><br><span class="line">                String error = args.getJSONArray(<span class="string">"Error"</span>).toJSONString();</span><br><span class="line">                logger.info(<span class="string">"==============WebSocket连接错误:&#123;&#125;=============="</span>, error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 获取签名和证书编号</span></span><br><span class="line">            JSONArray wsData = args.getJSONArray(<span class="string">"Data"</span>);</span><br><span class="line">            String signValue = wsData.getString(<span class="number">0</span>);</span><br><span class="line">            String certNo = wsData.getString(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 初始化请求体上报海关</span></span><br><span class="line">            <span class="comment">// doPost(...);</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Websocket客户端获取失败!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 连接上后, 发送 Websocket 请求</span></span><br><span class="line"><span class="comment">//            String json = "&#123;\"_method\":\"cus-sec_SpcSignDataAsPEM\",\"_id\":0,\"args\":&#123;\"inData\":\"123\",\"passwd\":\"88888888\"&#125;&#125;";</span></span><br><span class="line">        JSONObject websocketRequest = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        websocketRequest.put(<span class="string">"_method"</span>, <span class="string">"cus-sec_SpcSignDataAsPEM"</span>); <span class="comment">// 加签方法</span></span><br><span class="line">        websocketRequest.put(<span class="string">"_id"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        JSONObject websocketRequestArgs = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        String inData = <span class="string">"\"sessionID\":\""</span> + sessionID + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"payExchangeInfoHead\":\""</span> + JSONObject.toJSONString(payExchangeInfoHead) + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"payExchangeInfoLists\":\""</span> + JSONArray.toJSONString(payExchangeInfoList) + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"serviceTime\":\""</span> + JSONObject.toJSONString(serviceTime) + <span class="string">"\""</span>;</span><br><span class="line">        websocketRequestArgs.put(<span class="string">"inData"</span>, inData);</span><br><span class="line">        websocketRequestArgs.put(<span class="string">"passwd"</span>, <span class="string">"88888888"</span>);</span><br><span class="line">        websocketRequest.put(<span class="string">"args"</span>, websocketRequestArgs);</span><br><span class="line"></span><br><span class="line">        client.send(websocketRequest.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Websocket 客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> websocketUrl Websocket 连接地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback     回调函数接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> WebSocketClient <span class="title">getWebSocketClient</span><span class="params">(URI websocketUrl, WebsocketCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 双重锁保证, 检查是否超时关闭</span></span><br><span class="line">        <span class="keyword">if</span>(webSocketClient == <span class="keyword">null</span> || webSocketClient.isClosed() || webSocketClient.isClosing()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CustomsDeclareServiceImpl<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(webSocketClient == <span class="keyword">null</span> || webSocketClient.isClosed() || webSocketClient.isClosing()) &#123;</span><br><span class="line">                    <span class="comment">// 2. 初始化 Websocket 客户端, 调用 callback</span></span><br><span class="line">                    webSocketClient = <span class="keyword">new</span> WebSocketClient(websocketUrl) &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(ServerHandshake handshakedata)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============打开WebSocket连接:&#123;&#125;=============="</span>, websocketUrl.toString());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                            callback.onMessage(message); <span class="comment">// 调用回调函数</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ByteBuffer bytes)</span> </span>&#123;</span><br><span class="line">                            String message = <span class="keyword">new</span> String(bytes.array(), StandardCharsets.UTF_8);</span><br><span class="line">                            onMessage(message);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="keyword">int</span> code, String reason, <span class="keyword">boolean</span> remote)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============关闭WebSocket连接:&#123;&#125;=============="</span>, reason);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============WebSocket连接错误:&#123;&#125;=============="</span>, ex.getMessage());</span><br><span class="line">                            logger.error(<span class="string">"==============WebSocket连接错误!=============="</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="comment">// 3. 阻塞等待连接</span></span><br><span class="line">                    webSocketClient.connect();</span><br><span class="line">                    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!Objects.equal(webSocketClient.getReadyState(), ReadyState.OPEN)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            count += <span class="number">10</span>;</span><br><span class="line">                            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                            <span class="keyword">if</span> (count &gt;= <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">                                logger.info(<span class="string">"WebSocket服务器连接超时或服务器已经关闭"</span>);</span><br><span class="line">                                webSocketClient.close();</span><br><span class="line">                                webSocketClient = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            logger.error(<span class="string">"发送信息异常"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> webSocketClient;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebsocketCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>写完后, 我们可以用<a href="https://www.getpostman.com/" target="_blank" rel="noopener"><code>Postman</code></a>模拟海关调用我们写的接口, 看是否上传成功.</p>
<h1 id="审核服务注册地址"><a href="#审核服务注册地址" class="headerlink" title="审核服务注册地址"></a>审核服务注册地址</h1><p>既然接口写好了, 那就可以让海关人员审核了, 在海关微信联调群呼叫下海关人员审核即可.<br>在审核之前, 要确保几件事</p>
<ol>
<li>三天内有订单, 订单需要在<a href="https://swapp.singlewindow.cn/deskserver/sw/deskIndex?menu_id=swcebimp" target="_blank" rel="noopener">中国国际贸易单一窗口</a>的订单查询里可以查到.</li>
<li>返回正确格式, 状态值是否为<code>10000</code>, 返回的json数据格式是否正确.</li>
<li>审核接口和企业上传原始支付数据没有直接联系, 接口审核是测试接口的连通性和返回格式是否正确.</li>
<li>端口必须是<code>80</code>, 不过多解释.</li>
<li>是否配置白名单, 企业的防火墙是否把海关的请求拒绝了.</li>
</ol>
<p>注意, 我司是电商平台, 所以是不能提交订单的, 调用微信报关接口上报的是支付单.<br>要买了境外商品后, 联系供应商申报运单、清单、订单. 有一个订单, 然后才能审核服务注册地址.</p>
<p>还有就是, 海关这个订单查询系统, 必须填订单号, 才能查询到订单, 我之前没填订单号, 想查出所有订单, 结果一个订单都查不到.</p>
<h1 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h1><p>因为<strong>操作员卡</strong>现在在机房了, 但是我们有登录海关网站配置注册地址, 或者查看订单等需求.<br>这时候有两种方案</p>
<ol>
<li>给实体加签主机开远程, 但是这样会有安全风险</li>
<li>用<strong>法人卡</strong>登录</li>
</ol>
<p>我尝试使用账号密码登录, 登录成功了, 但是海关网站会隐藏掉一些菜单, 导致你不能配置注册地址, 查看订单.</p>
<h1 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h1><p>看完前面的步骤, 最后再来梳理下业务流程, 为什么最后放流程, 因为没走完流程, 看了也是一脸懵逼.<br>其中支付宝(微信)和海关的业务是我猜的, 估计应该八九不离十.</p>
<ol>
<li>我司: 用户下单, 支付, 后端保存和支付宝(微信)对接的支付请求体和支付响应体.</li>
<li>我司: 后端调用支付宝(微信)的报关接口进行报关.</li>
<li>支付宝(微信): 异步提交企业发送过来的报关信息给海关方.</li>
<li>海关: 接受到支付宝(微信)提交的报关信息, 海关不信任支付宝(微信)的报关信息, 将订单号发给电商平台(我司), 要求将必要数据交给海关进行对比校验.</li>
<li>我司: 接收到海关的订单号, 告诉海关接收到查询请求了, <strong>异步</strong>查询相关订单数据, 发送给加签主机.</li>
<li>加签主机: 将数据加签, 回传给我司.</li>
<li>我司: 接收到加签后的数据, 拼接<code>JSON</code>, 上传给海关.</li>
<li>海关: 接收到电商平台上传的数据, 和支付宝(微信)的数据做对比, 对比无误后, 告诉支付宝(微信)报关成功,</li>
<li>我司: 调用支付宝(微信)查询接口, 查询报关是否成功.</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/whtydn/p/10220209.html" target="_blank" rel="noopener">海关 实时数据 企业联调接口 开发步骤与概要</a></li>
<li><a href="https://blog.csdn.net/ccbox_net/article/details/89031736" target="_blank" rel="noopener">记录海关165号、179号实时数据联调接口中需要注意的细节</a></li>
<li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a></li>
<li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2155884/index.html" target="_blank" rel="noopener">海关总署公告2018年第179号（关于实时获取跨境电子商务平台企业支付相关原始数据接入有关事宜的公告）</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>业务设计</tag>
      </tags>
  </entry>
  <entry>
    <title>从i++到CAS操作</title>
    <url>/posts/From_i++_to_CAS_operation.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>i++</code>不是一个原子操作, 原子操作的意思是, 执行代码的时候, 不会发生线程的切换.<br>即使<code>i++</code>只有一行代码, 但是也不是一个原子操作, 主要就是三件事情, 很惭愧, 就做了一点微小的工作(</p>
<ol>
<li>取值: 从内存中取值到寄存器.</li>
<li>自增: 寄存器进行<code>i+1</code>.</li>
<li>回写: 将自增后的值回写到内存中.</li>
</ol>
<a id="more"></a>
<h1 id="多线程下的问题"><a href="#多线程下的问题" class="headerlink" title="多线程下的问题"></a>多线程下的问题</h1><p><code>i++</code>不是一个原子操作, 那么就可能在多线程下出现问题.<br>比如发生以下操作.</p>
<ol>
<li><code>Thread 1</code>从内存中取值<code>i = 0</code>, 在寄存器中自增<code>i = 1</code>.</li>
<li><code>Thread 1</code>在回写到内存前, 时间片结束, 切换到<code>Thread 2</code>.</li>
<li><code>Thread 2</code>从内存中取值<code>i = 0</code>, 在寄存器中自增<code>i = 1</code>.</li>
<li><code>Thread 2</code>在回写到内存前, 时间片结束, 切换到<code>Thread 1</code>.</li>
<li><code>Thread 1</code>将寄存器中的<code>i = 1</code>回写到内存中, 内存中<code>i = 1</code>, 执行结束, 切换到<code>Thread 2</code>.</li>
<li><code>Thread 1</code>将寄存器中的<code>i = 1</code>回写到内存中, 内存中<code>i = 1</code>, 执行结束.</li>
</ol>
<p>最终结果, <code>i = 1</code>, 但是我们期望的是两个线程执行了<code>i++</code>, 最终结果应该是<code>i = 2</code>.<br>这时就轮到<code>java.util.concurrent</code>包出场了, 下面是一个简单的例子.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 加上 volatile 也没用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger j = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1_000_000</span>; i++) &#123;</span><br><span class="line">            threadPool.execute(() -&gt; Main.i++);</span><br><span class="line">            threadPool.execute(() -&gt; Main.j.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);</span><br><span class="line">        System.out.println(Main.i); <span class="comment">// 999063</span></span><br><span class="line">        System.out.println(Main.j); <span class="comment">// 1000000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>AtomicInteger</code>类可以在多线程下, 输出我们预期的结果, 而普通的<code>i++</code>, 则与预期结果不符.</p>
<h1 id="Unsafe-类的存在"><a href="#Unsafe-类的存在" class="headerlink" title="Unsafe 类的存在"></a>Unsafe 类的存在</h1><p>主要的代码就是<code>incrementAndGet</code>这个方法. 我们可以进去看看.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Unsafe"</span>); <span class="comment">// 判断调用 Unsafe 的类是否是 BootstrapClassLoader 加载的类</span></span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/bpupadhyaya/openjdk-8/blob/master/jdk/src/share/classes/sun/misc/Unsafe.java#L87-L92" target="_blank" rel="noopener">源码<code>#L87-L92</code></a><br>可以看到, 里面借助了<code>sun.misc.Unsafe</code>这个类, 它是一个不安全的类, 可以绕过<code>JVM</code>直接操作本地内存.<br>所以为了不让人滥用, 调用<code>getUnsafe()</code>时会判断调用<code>Unsafe</code>的类是否是<code>BootstrapClassLoader</code>加载的类.<br>我们自己写的类是由<code>sun.misc.Launcher$AppClassLoader</code>加载的, 所以如果我们自己去调用<code>getUnsafe()</code>, 肯定会抛出<code>SecurityException</code>.<br>当然我们也可以通过反射获取.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[0];</span><br><span class="line">        unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="深入-getAndAddInt"><a href="#深入-getAndAddInt" class="headerlink" title="深入 getAndAddInt"></a>深入 getAndAddInt</h1><p><a href="https://github.com/bpupadhyaya/openjdk-8/blob/master/jdk/src/share/classes/sun/misc/Unsafe.java#L1028-L1034" target="_blank" rel="noopener">源码<code>#L1028-L1034</code></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="comment">// unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = getIntVolatile(o, offset);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntVolatile</span><span class="params">(Object o, <span class="keyword">long</span> offset)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> expected, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>整个核心就是<code>compareAndSwapInt</code>这个<code>CAS</code>操作. 整个方法的逻辑就是</p>
<ol>
<li>读取<code>Object</code>的<code>value</code>属性在内存中的偏移量地址<code>offset</code>, 写入变量<code>v</code>.</li>
<li><code>compareAndSwapInt</code>方法, 判断<code>Object</code>的地址<code>offset</code>的值, 是否为<code>v</code>, 是则将<code>v + delta</code>写入地址<code>offset</code>.</li>
<li>如果地址<code>offset</code>的值和变量<code>v</code>不相等, 说明有其他线程修改了, 那么就再循环一次, 回到步骤<code>1</code>.</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>再深入就是<code>c++</code>和汇编层次的代码了, 技术有限就不细说了<del>(太菜)</del>, 建议查看参考资料.<br>总的来说, <code>CAS</code>就是一个比较操作, 直接操作内存地址, 就不会发生寄存器的值来不及回写到内存中的问题.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.cnblogs.com/noKing/p/9094983.html" target="_blank" rel="noopener">Java原子类中CAS的底层实现</a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java导出Excel出现emoji乱码</title>
    <url>/posts/Java_export_Excel_appears_emoji_garbled.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做后端开发经常需要导出<code>Excel</code>, 一般有两种选择<code>POI</code>、<code>JXLS</code>和<code>easyexcel</code>.<br>其实底层都是使用<code>POI</code>来做的.</p>
<a id="more"></a>
<h1 id="三种框架分析"><a href="#三种框架分析" class="headerlink" title="三种框架分析"></a>三种框架分析</h1><ol>
<li><code>Apache</code>名下的<code>POI</code><ul>
<li>优点: 微软全家桶基本都可以做, 什么<code>Word</code>、<code>Excel</code>、<code>PPT</code>.</li>
<li>缺点: 所有格式都要通过代码完成, 代码又长又臭.</li>
</ul>
</li>
<li><code>JXLS</code>专门用来操作<code>Excel</code>, 使用<code>JXLS</code>模板语法可以书写<code>Excel</code>模板, 底层使用<code>org.jxls.transform.poi.PoiTransformer</code>和<code>POI</code>做对接.<ul>
<li>优点: 使用<code>JXLS</code>模板语法, 可以将格式和代码解耦, 快速开发, 代码精简.</li>
<li>缺点: 需要额外的学习成本学习<code>JXLS</code>模板语法(学什么不是学</li>
</ul>
</li>
<li><code>easyexcel</code>是阿里基于<code>POI</code>开发的<code>Excel</code>解析工具.<ul>
<li>优点: 据<a href="https://github.com/alibaba/easyexcel/blob/master/README.md" target="_blank" rel="noopener"><code>README</code></a>说, 解决<code>POI</code>内存溢出问题.</li>
<li>缺点: 没用过不评价</li>
</ul>
</li>
</ol>
<h1 id="emoji乱码代码单元测试"><a href="#emoji乱码代码单元测试" class="headerlink" title="emoji乱码代码单元测试"></a>emoji乱码代码单元测试</h1><p>复现下测试环境, 依赖<code>pom.xml</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- poi-ooxml 依赖 poi-ooxml-schemas, 依赖 xmlbeans 2.6.0 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.xmlbeans&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;xmlbeans&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.6.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>生成<code>Excel</code>的代码.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 𤆕🔝biu～	better me人🌝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNICODE = <span class="string">"\uD850\uDD95\uD83D\uDD1Dbiu～\t\uE110better me\uE110人\uD83C\uDF1D"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        createXLSX(<span class="string">"C:/test.xlsx"</span>);</span><br><span class="line">        createXLS(<span class="string">"C:/test.xls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXLSX</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">            FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(filename)) &#123;</span><br><span class="line"></span><br><span class="line">            XSSFSheet sheet = workbook.createSheet(<span class="string">"TestSheet"</span>);</span><br><span class="line">            XSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            XSSFCell cell1 = row.createCell(<span class="number">0</span>);</span><br><span class="line">            cell1.setCellValue(UNICODE);</span><br><span class="line"></span><br><span class="line">            workbook.write(fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXLS</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(filename)) &#123;</span><br><span class="line"></span><br><span class="line">            HSSFSheet sheet = workbook.createSheet(<span class="string">"TestSheet"</span>);</span><br><span class="line">            HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            HSSFCell cell1 = row.createCell(<span class="number">0</span>);</span><br><span class="line">            cell1.setCellValue(UNICODE);</span><br><span class="line"></span><br><span class="line">            workbook.write(fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行完毕, 可以看到<code>xls</code>能正常输出<code>𤆕🔝biu～    better me人🌝</code>, 而<code>xlsx</code>只能输出<code>????biu～    better me人??</code>.<br><code>emoji</code>表情不能输出.</p>
<h1 id="解决方案-简单版"><a href="#解决方案-简单版" class="headerlink" title="解决方案(简单版)"></a>解决方案(简单版)</h1><p>解决方案有两种.</p>
<ol>
<li>升级<code>POI</code>为<code>4.0.0</code>以上.</li>
<li>替换<code>xmlbeans</code>为<code>3.0.0</code>以上.</li>
</ol>
<p>本质都是替换<code>xmlbeans</code>.</p>
<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>为什么<code>xls</code>没问题, <code>xlsx</code>有问题?<br>因为<code>xls</code>的<code>HSSFRichTextString</code>使用了<code>UnicodeString</code>进行编码, 内联字符串, 没有重用字符串.<br>而<code>xlsx</code>为了解决内存问题, 将相同字符串先写入<code>sharedStrings.xml</code>, 重用字符串. </p>
<p>我们可以将一个<code>xlsx</code>改为<code>zip</code>解压, 在里面可以找到一个<code>sharedStrings.xml</code>文件, 里面就存储着我们的字符串.<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sst</span> <span class="attr">count</span>=<span class="string">"1"</span> <span class="attr">uniqueCount</span>=<span class="string">"1"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.openxmlformats.org/spreadsheetml/2006/main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">si</span>&gt;</span><span class="tag">&lt;<span class="name">t</span>&gt;</span>????biu～	better me人??<span class="tag">&lt;/<span class="name">t</span>&gt;</span><span class="tag">&lt;/<span class="name">si</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sst</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>那很明显就是写入<code>xml</code>的时候出了问题.</p>
<p><a href="https://stackoverflow.com/a/38039869" target="_blank" rel="noopener">Write 16 bits character to .xlsx file using Apache POI in Java</a>提到了<code>org.apache.xmlbeans.impl.store.Saver</code>的<code>isBadChar</code>方法.<br><a href="https://github.com/apache/xmlbeans/blob/2.6.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L1559-L1567" target="_blank" rel="noopener">点击查看源码<code>L1559</code></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBadChar</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! (</span><br><span class="line">            (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt;= <span class="number">0xD7FF</span> ) ||</span><br><span class="line">            (ch &gt;= <span class="number">0xE000</span> &amp;&amp; ch &lt;= <span class="number">0xFFFD</span>) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x10000</span> &amp;&amp; ch &lt;= <span class="number">0x10FFFF</span>) ||</span><br><span class="line">            (ch == <span class="number">0x9</span>) || (ch == <span class="number">0xA</span>) || (ch == <span class="number">0xD</span>)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以<code>🌝</code>这个字符为例, 它的<code>Unicode</code>编码为<code>\uD83C\uDF1D</code>, 一个<code>char</code>是存不下的, 要用两个<code>char</code>.<br>那么第一个<code>char</code>传入<code>isBadChar</code>, 得到<code>true</code>. 第二个<code>char</code>传入也得到<code>true</code>.<br>那么我们看下哪里有调用到这个<code>isBadChar</code>方法.<br><a href="https://github.com/apache/xmlbeans/blob/2.6.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L2310" target="_blank" rel="noopener">点击查看源码<code>L2310</code></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">entitizeAndWriteCommentText</span><span class="params">(<span class="keyword">int</span> bufLimit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufLimit; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = _buf[ i ];</span><br><span class="line">            <span class="keyword">if</span> (isBadChar(ch))</span><br><span class="line">                _buf[i] = <span class="string">'?'</span>;</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有很多地方都有调用, 但是基本都是一个逻辑, 如果是<code>true</code>, 则替换为<code>?</code>, 所以我们才在<code>sharedStrings.xml</code>看到一堆<code>??</code>.<br>那这就是<code>xmlbeans</code>这个库的问题了, 不是我们代码的锅(甩锅大成功!</p>
<h1 id="xmlbeans-3-0-0-解决方案"><a href="#xmlbeans-3-0-0-解决方案" class="headerlink" title="xmlbeans 3.0.0 解决方案"></a>xmlbeans 3.0.0 解决方案</h1><p>再看看<code>xmlbeans 3.0.0</code>怎么解决的.<br><a href="https://github.com/apache/xmlbeans/blob/3.0.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L286-L287" target="_blank" rel="noopener">点击查看源码<code>L286</code></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBadChar</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! (</span><br><span class="line">            Character.isHighSurrogate(ch) ||</span><br><span class="line">            Character.isLowSurrogate(ch) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt;= <span class="number">0xD7FF</span> ) ||</span><br><span class="line">            (ch &gt;= <span class="number">0xE000</span> &amp;&amp; ch &lt;= <span class="number">0xFFFD</span>) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x10000</span> &amp;&amp; ch &lt;= <span class="number">0x10FFFF</span>) ||</span><br><span class="line">            (ch == <span class="number">0x9</span>) || (ch == <span class="number">0xA</span>) || (ch == <span class="number">0xD</span>)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以<code>🌝</code>这个字符为例, 它的<code>Unicode</code>编码为<code>\uD83C\uDF1D</code>, 一个<code>char</code>是存不下的, 要用两个<code>char</code>.<br>那么第一个<code>char</code>传入<code>isBadChar</code>, 得到<code>false</code>. 第二个<code>char</code>传入也得到<code>false</code>.<br>所以也就不会被替换成<code>?</code>, <code>bug</code> 解决.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/a/51852614" target="_blank" rel="noopener">Writing Unicode plane 1 characters with Apache POI</a></li>
<li><a href="https://stackoverflow.com/a/38039869" target="_blank" rel="noopener">Write 16 bits character to .xlsx file using Apache POI in Java</a></li>
<li><a href="https://www.yanghuandy.cn/2018/08/15/Java%E5%AF%BC%E5%87%BAExcel/" target="_blank" rel="noopener">Java导出Excel</a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro用户登陆后会话标识未更新漏洞</title>
    <url>/posts/Shiro_not_update_session_id_after_login.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是我在以前遇到的问题了, 当时做的是政府项目, 对<code>Web</code>安全要求比较高.<br>使用<code>Shiro</code>的项目被安全准入检测出<strong>用户登陆后会话标识未更新漏洞</strong>.<br>意思是登录前的<code>Session</code>和登录后的<code>Session</code>一样。</p>
<a id="more"></a>
<h1 id="官方修复无望-自己打补丁"><a href="#官方修复无望-自己打补丁" class="headerlink" title="官方修复无望, 自己打补丁"></a>官方修复无望, 自己打补丁</h1><p><code>2010-05-24</code>提出的<a href="https://issues.apache.org/jira/browse/SHIRO-170" target="_blank" rel="noopener">SHIRO-170</a>, 至今<code>2019-03-27</code>仍然未解决.<br>看来修复无望了, 但是勤劳的人民给出了临时性的解决方案.<br>那就是在登录时, 先销毁<code>session</code>, 再<code>login</code>.<br>主要步骤如下:</p>
<ol>
<li>获取<code>session</code>, 保存<code>session</code>中的属性<code>Map</code></li>
<li><code>session.stop()</code>销毁</li>
<li>进行登录<code>subject.login(token)</code></li>
<li>将之前保存的属性<code>Map</code>, 重新注入新的<code>session</code></li>
</ol>
<p>具体代码可以查看我的个人代码库<a href="https://github.com/Ahaochan/project/blob/master/ahao-web/src/main/java/com/ahao/rbac/shiro/LoginController.java#L91-L113" target="_blank" rel="noopener">LoginController.java#L91-L113</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://issues.apache.org/jira/browse/SHIRO-170" target="_blank" rel="noopener">Force New Session ID on Authentication</a></li>
<li><a href="https://blog.csdn.net/yycdaizi/article/details/45013397" target="_blank" rel="noopener">解决shiro会话标识未更新问题</a></li>
<li><a href="https://stackoverflow.com/a/30672822/6335926" target="_blank" rel="noopener">Shiro complaining “There is no session with id xxx” with DefaultSecurityManager</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>业务设计</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>文件特殊权限SUID和SGID和SBIT</title>
    <url>/posts/File_permissions_SUID_and_SGID_and_SBIT.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>特殊权限尽量少修改! 不安全!<br>(很久以前写的一篇学习笔记, 一直没有整理</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>给执行该文件的用户临时赋予另一个用户(组)的权限。</p>
<a id="more"></a>
<p>比如<strong>设置密码</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /etc/shadow /usr/bin/passwd </span><br><span class="line">----------. 1 root root  1232 10月  6 05:47 /etc/shadow</span><br><span class="line">-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure></p>
<p><code>/etc/shadow</code>文件只能被<code>root</code>用户修改。<br>但是借助<code>passwd</code>命令, 普通用户可以临时变成<code>root</code>来执行这个<code>passwd</code>命令,<br>进而修改<code>/etc/shadow</code>文件。</p>
<h1 id="切换用户-SUID"><a href="#切换用户-SUID" class="headerlink" title="切换用户 SUID"></a>切换用户 SUID</h1><p>只有可以执行的二进制程序才能设定<code>SUID</code>权限。<br><code>SUID</code>可以看成是<code>Switch User ID</code><del>(一个瞎猜）</del>, 就是切换用户<code>ID</code>.</p>
<ol>
<li>创建两个文件<code>file1</code>和<code>file2</code></li>
<li>添加<code>SUID</code>权限, 或者<code>chmod u+s file</code></li>
<li>取消<code>SUID</code>权限, 或者<code>chmod u-s file</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建两个文件</span></span><br><span class="line">touch file1 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加SUID权限, 或者chmod u+s  file</span></span><br><span class="line">chmod 4755 file1 &amp;&amp; chmod 4655 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rwsr-xr-x. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rwSr-xr-x. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 取消SUID权限, 或者chmod u-s  file</span></span><br><span class="line">chmod 0755 file1 &amp;&amp; chmod 0655 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rwxr-xr-x. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rw-r-xr-x. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br></pre></td></tr></table></figure>
<p>可以看到<code>x</code>执行权限的位置被<code>s</code>替换了。<br><code>4755</code>和<code>4655</code>的区别在于文件本身有没有<code>x</code>执行权限。<br>并且可以得知<code>s=S+x</code>, 并且注意!!! 大写<code>S</code>是没有意义的。<br>只有小写<code>s</code>才能被执行, 才能正确设定<code>SUID</code>权限。</p>
<h1 id="切换用户组-SGID"><a href="#切换用户组-SGID" class="headerlink" title="切换用户组 SGID"></a>切换用户组 SGID</h1><p>和<code>SUID</code>一样, 区别在于用户会临时赋予文件所属用户组<code>group</code>的身份, 而不是用户<code>user</code>身份。<del>Switch Group ID</del></p>
<p>比如<strong><code>locate</code>命令</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /usr/bin/locate /var/lib/mlocate/mlocate.db </span><br><span class="line"><span class="comment"># -rwx--s--x. 1 root slocate   40512 11月 21 23:21 /usr/bin/locate</span></span><br><span class="line"><span class="comment"># -rw-r-----. 1 root slocate 3678432 11月 21 23:21 /var/lib/mlocate/mlocate.db</span></span><br></pre></td></tr></table></figure></p>
<p><code>/var/lib/mlocate/mlocate.db</code>文件只能被<code>slocate</code>组查看。<br>但是借助<code>locate</code>命令, 普通用户可以临时变成<code>slocate</code>来执行这个<code>locate</code>命令,<br>进而查看<code>/var/lib/mlocate/mlocate.db</code>文件。</p>
<p>除了和<code>SUID</code>差不多的功能外。<br><code>SGID</code>对目录还有另一个功能。<br>就是<strong>进入该目录后</strong>, 用户的用户组会变成<strong>SGID对应的用户组</strong>。</p>
<ol>
<li><code>root</code>用户创建<code>test</code>目录并赋予<code>777</code>权限</li>
<li><code>ahao</code>用户在<code>test</code>目录下创建<code>file1</code></li>
<li><code>root</code>用户为<code>test</code>目录赋予<code>SGID</code>权限</li>
<li><code>ahao</code>用户在赋予<code>SGID</code>的<code>test</code>目录下创建<code>file2</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">mkdir ~ahao/<span class="built_in">test</span> &amp;&amp; chmod 777 ~ahao/<span class="built_in">test</span> &amp;&amp; ll -d ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># drwxrwxrwx. 2 root root 6 11月 21 23:39 /home/ahao/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ahao用户在test目录下创建file1</span></span><br><span class="line">su - ahao</span><br><span class="line">touch ~ahao/<span class="built_in">test</span>/file1 &amp;&amp; ll ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. root用户为test目录赋予SGID权限, 或者chmod g+s  file</span></span><br><span class="line">su -</span><br><span class="line">chmod 2777 ~ahao/<span class="built_in">test</span> &amp;&amp; ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># drwxrwsrwx. 2 root root 19 11月 21 23:43 /home/ahao/test/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. ahao用户在赋予SGID的test目录下创建file2</span></span><br><span class="line">su - ahao</span><br><span class="line">touch ~ahao/<span class="built_in">test</span>/file2 &amp;&amp; ll ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao root 0 11月 21 23:45 file2</span></span><br></pre></td></tr></table></figure>
<p>可以看到赋予<code>SGID</code>后, <code>ahao</code>用户创建的<code>file2</code>的所属组是<code>root</code>。</p>
<h1 id="防止被删除-sticky-bit-SBIT"><a href="#防止被删除-sticky-bit-SBIT" class="headerlink" title="防止被删除 sticky bit ( SBIT )"></a>防止被删除 sticky bit ( SBIT )</h1><p>除了<code>user</code>的<code>SUID</code>、<code>group</code>的<code>SGID</code>外, 还有<code>other</code>的<code>sticky bit</code>。</p>
<p><code>sticky bit</code>有两个要求</p>
<ol>
<li>只对目录有效。</li>
<li>文件权限为<code>rwxrwxrwx</code>, 也就是<code>777</code>的权限。<br>比如<code>/tmp</code>目录。</li>
</ol>
<p>那么任何用户都能对目录下的文件进行读写执行操作, 这是很不安全的。<br>比如一个目录, 允许用户(<code>other</code>)创建文件(写权限), 拥有了写权限的用户也同样拥有了删除权限。<br>也就是说在<code>777</code>权限的目录下, <code>A</code>用户创建的文件可能被<code>B</code>用户删除。<br><code>sticky bit</code>就是为了解决这个问题。<br>赋予目录<code>sticky bit</code>后。</p>
<ol>
<li>只有<code>root</code>有删除权限。</li>
<li>其他用户只能删除自己创建的文件。</li>
<li>其他用户拥有写权限。</li>
</ol>
<p>下面举个例子</p>
<ol>
<li><code>root</code>用户创建<code>test</code>目录并赋予<code>777</code>权限。</li>
<li><code>root</code>用户创建<code>file</code>文件。</li>
<li><code>ahao</code>用户删除<code>file</code>文件成功, 因为<code>ahao</code>用户对<code>test</code>目录有w写权限。</li>
<li><code>root</code>用户对<code>test</code>目录赋予<code>sticky bit</code>权限。</li>
<li><code>root</code>用户创建<code>file</code>文件。</li>
<li><code>ahao</code>用户删除<code>file</code>文件失败, 即使<code>ahao</code>用户对<code>test</code>目录有w写权限。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">mkdir ~ahao/<span class="built_in">test</span> &amp;&amp; chmod 777 ~ahao/<span class="built_in">test</span>/ &amp;&amp; ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># drwxrwxrwx. 2 root root 6 11月 22 23:23 /home/ahao/test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. root用户创建file文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># -rw-r--r--. 1 root root 6 11月 22 23:26 file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ahao用户删除file文件成功, 因为ahao用户对test目录有w写权限</span></span><br><span class="line">su - ahao &amp;&amp; rm -rf ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. root用户对test目录赋予sticky bit权限</span></span><br><span class="line">su -</span><br><span class="line"><span class="comment"># chmod 0777 ~ahao/test/ # 取消sticky bit, 或chmod o-t ~ahao/test/</span></span><br><span class="line">chmod 1777 ~ahao/<span class="built_in">test</span>/ <span class="comment"># 赋予sticky bit, 或chmod o+t ~ahao/test/</span></span><br><span class="line">ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line">drwxrwxrwt. 2 root root 6 11月 22 23:27 /home/ahao/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. root用户创建file文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># -rw-r--r--. 1 root root 6 11月 22 23:32 file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. ahao用户删除file文件失败, 即使ahao用户对test目录有w写权限</span></span><br><span class="line">su - ahao</span><br><span class="line">rm -rf ~ahao/<span class="built_in">test</span>/file</span><br><span class="line"><span class="comment"># rm: 无法删除"/home/ahao/test/file": 不允许的操作</span></span><br></pre></td></tr></table></figure>
<p>如果不能删除, 那我能不能覆盖掉呢? <code>echo &#39;&#39; &gt; file</code><br>我在<code>Ubuntu</code>尝试了不能, 但是以前在<code>CentOS</code>试过好像可以.</p>
<h1 id="检查系统新增的SUID和SGID文件"><a href="#检查系统新增的SUID和SGID文件" class="headerlink" title="检查系统新增的SUID和SGID文件"></a>检查系统新增的SUID和SGID文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先查找所有拥有SUID(4)和SGID(2)的文件</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编写Shell脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 2.1 查找所有拥有SUID(4)或SGID(2)的文件, 并保存到临时文件suid.check中</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.check</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> $(cat /tmp/suid.check)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 2.3 遍历临时文件suid.check中的记录, 和最初查找到的文件/tmp/suid.list进行比较。</span></span><br><span class="line">    grep <span class="variable">$line</span> /tmp/suid.list &gt; /dev/null</span><br><span class="line">    <span class="comment"># 2.4 不存在则写入log文件中</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"$?"</span> != <span class="string">"0"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span> isn't in listfile! "</span> &gt;&gt; /tmp/suid_log_$(date +%F)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rm -rf /tmp/suid.check</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/tmp/suid_log_<span class="variable">$(date +%F)</span>"</span></span><br><span class="line">cat /tmp/suid_log_$(date +%F)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>为GitHub博客添加域名并允许百度收录</title>
    <url>/posts/Add_domain_and_allow_Baidu.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前写了一篇文章, <a href="https://ahao.moe/posts/TravisCI_encrypts_configuration_files_and_automatically_deploys_Hexo.html" target="_blank" rel="noopener">TravisCI 加密配置文件并自动部署 Hexo</a><br>迫于囊中羞涩, 没有域名, 于是也绕不过<code>GitHub</code>对<code>Baidu</code>的封锁.<br>现在买了个域名<code>ahao.moe</code>, 终于让<code>Baidu</code>访问到我的博客了.</p>
<a id="more"></a>
<h1 id="GoDaddy-购买域名"><a href="#GoDaddy-购买域名" class="headerlink" title="GoDaddy 购买域名"></a>GoDaddy 购买域名</h1><p>注意, 有些域名是不能备案的, 比如<code>moe</code>域名.</p>
<h1 id="为-GitHub-博客添加-DNS-解析"><a href="#为-GitHub-博客添加-DNS-解析" class="headerlink" title="为 GitHub 博客添加 DNS 解析"></a>为 GitHub 博客添加 DNS 解析</h1><h2 id="更换-DNS-解析服务器"><a href="#更换-DNS-解析服务器" class="headerlink" title="更换 DNS 解析服务器"></a>更换 DNS 解析服务器</h2><p>因为阿里云提供了免费的<code>SSL</code>证书, 所以使用阿里云做域名解析.<br>在<code>GoDaddy</code>配置阿里云的<code>DNS</code>解析服务器.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ns1.alidns.com</span><br><span class="line">ns2.alidns.com</span><br></pre></td></tr></table></figure></p>
<h2 id="阿里云添加-A-记录"><a href="#阿里云添加-A-记录" class="headerlink" title="阿里云添加 A 记录"></a>阿里云添加 A 记录</h2><p>然后回到阿里云, 在<a href="https://dns.console.aliyun.com/#/dns/domainList" target="_blank" rel="noopener">管理界面</a>新增一个域名<code>ahao.moe</code>.<br>进入<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p>
<p>先去看下<a href="https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider" target="_blank" rel="noopener">GitHub文档</a><br>根据这几个<code>IP</code>地址, 设置<code>A记录</code>, 这里列举要修改的值, 其他没列出的默认即可.</p>
<table>
<thead>
<tr>
<th style="text-align:center">记录类型</th>
<th style="text-align:center">主机记录</th>
<th style="text-align:center">解析线路</th>
<th style="text-align:center">记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>185.199.108.153</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>185.199.109.153</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>185.199.110.153</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>185.199.111.153</code></td>
</tr>
</tbody>
</table>
<h2 id="阿里云添加-SSL-证书"><a href="#阿里云添加-SSL-证书" class="headerlink" title="阿里云添加 SSL 证书"></a>阿里云添加 SSL 证书</h2><p>进入<a href="https://common-buy.aliyun.com/?commodityCode=cas#/buy" target="_blank" rel="noopener">云盾证书服务</a>, 选择<code>免费型DV SSL</code>.<br>之后填上自己的域名<code>ahao.moe</code>即可, 注意此证书只能针对一个域名, 不包括子域名.</p>
<p>然后我们回到阿里云<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p>
<p>添加验证的记录</p>
<table>
<thead>
<tr>
<th style="text-align:center">记录类型</th>
<th style="text-align:center">主机记录</th>
<th style="text-align:center">解析线路</th>
<th style="text-align:center">记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>TXT</code></td>
<td style="text-align:center"><code>_dnsauth</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>123456789abcdefg</code></td>
</tr>
</tbody>
</table>
<h2 id="GitHub-博客项目配置"><a href="#GitHub-博客项目配置" class="headerlink" title="GitHub 博客项目配置"></a>GitHub 博客项目配置</h2><p>进入<code>GitHub</code>的<a href="https://github.com/Ahaochan/Ahaochan.github.io" target="_blank" rel="noopener">博客项目</a>.<br>在<code>Setting</code>里的<code>GitHub Pages</code>标签, 看到<code>Custom domain</code>, 在里面配置<code>ahao.moe</code>, 并勾选<code>Enforce HTTPS</code>.</p>
<p>同时, 我们还要在<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/source" target="_blank" rel="noopener"><code>source</code></a>添加一个<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/source/CNAME" target="_blank" rel="noopener"><code>CNAME</code></a>文件.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ahao.moe</span><br></pre></td></tr></table></figure></p>
<p>至此, 等待几分钟, 就可以在<code>ahao.moe</code>访问到自己的<code>GitHub</code>博客了.</p>
<h1 id="部署到-Coding-Pages"><a href="#部署到-Coding-Pages" class="headerlink" title="部署到 Coding Pages"></a>部署到 Coding Pages</h1><h2 id="腾讯云项目配置"><a href="#腾讯云项目配置" class="headerlink" title="腾讯云项目配置"></a>腾讯云项目配置</h2><p><code>Coding Pages</code>现在已经迁移到<a href="https://dev.tencent.com/u/Ahaochan" target="_blank" rel="noopener">腾讯云开发者平台</a>了<br>我们先<a href="https://dev.tencent.com/user/projects/create" target="_blank" rel="noopener">新建</a>一个<code>Ahaochan.coding.me</code>的项目.</p>
<p>和<code>GitHub</code>一样, 我们也要指定<code>ahao.moe</code>.<br>在<code>https://dev.tencent.com/u/Ahaochan/p/Ahaochan.coding.me/git/pages/settings</code>里绑定新域名<code>ahao.moe</code><br>然后在阿里云配置<code>A</code>记录即可, 注意<code>IP</code>地址我们需要自己手动查询, 还有解析线路要改为<strong>百度</strong>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. windows 查询 IP</span></span><br><span class="line">nslookup Ahaochan.coding.me</span><br><span class="line"><span class="comment"># 2. linux 查询 IP</span></span><br><span class="line">host -a Ahaochan.coding.me</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">记录类型</th>
<th style="text-align:center">主机记录</th>
<th style="text-align:center">解析线路</th>
<th style="text-align:center">记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">百度</td>
<td style="text-align:center"><code>128.1.133.223</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">百度</td>
<td style="text-align:center"><code>128.1.138.212</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">百度</td>
<td style="text-align:center"><code>128.1.138.154</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">百度</td>
<td style="text-align:center"><code>128.1.138.163</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">百度</td>
<td style="text-align:center"><code>128.1.138.9</code></td>
</tr>
</tbody>
</table>
<h2 id="Travis-CI-配置"><a href="#Travis-CI-配置" class="headerlink" title="Travis CI 配置"></a>Travis CI 配置</h2><p>注意, 此时<code>Ahaochan.coding.me</code>仍然是一个空项目, 我们需要在<code>Travis CI</code>中配置<code>push</code>到腾讯云平台.</p>
<p>先在<code>https://dev.tencent.com/user/account/setting/tokens/new</code>新建一个<code>Token</code>令牌, 配置所需权限.<br>和<code>GitHub</code>一样, 在<code>Travis CI</code>的<code>Environment Variables</code>配置加密变量<code>CODING_TOKEN</code>.<br>之后的步骤就和<code>GitHub</code>一样了, 参考我开头的那篇文章.<br>这里放下<code>next.yml</code>和<code>.travis.yml</code><br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># next.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://REPO_TOKEN@github.com/Ahaochan/Ahaochan.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://Ahaochan:CODING_TOKEN@git.dev.tencent.com/Ahaochan/Ahaochan.coding.me.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="comment"># - 解密 next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/REPO_TOKEN/$&#123;REPO_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/CODING_TOKEN/$&#123;CODING_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure></p>
<h1 id="添加百度和谷歌收录"><a href="#添加百度和谷歌收录" class="headerlink" title="添加百度和谷歌收录"></a>添加百度和谷歌收录</h1><h2 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h2><p>进入谷歌站长工具, 点击左边的<strong>添加资源</strong>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://search.google.com/search-console?resource_id=sc-domain%3Aahao.moe</span><br></pre></td></tr></table></figure></p>
<p>选择<strong>添加网域</strong>, 输入<code>ahao.moe</code>.<br>谷歌会提示你将<code>google-site-verification=123456789</code>这段代码在<code>DNS</code>配置为<code>TXT</code>记录.<br>我们回到阿里云<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">记录类型</th>
<th style="text-align:center">主机记录</th>
<th style="text-align:center">解析线路</th>
<th style="text-align:center">记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>TXT</code></td>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>google-site-verification=123456789</code></td>
</tr>
</tbody>
</table>
<p>然后为<code>hexo</code>添加<code>hexo-generator-sitemap</code>插件(<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/.travis.yml#L30" target="_blank" rel="noopener">.travis.yml#L30</a>), 它会生成一个<code>sitemap.xml</code>.<br>回到谷歌站长工具, 添加一个<code>sitemap</code>地址<code>https://ahao.moe/sitemap.xml</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://search.google.com/search-console/sitemaps?resource_id=sc-domain%3Aahao.moe</span><br></pre></td></tr></table></figure></p>
<h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>进入<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站点管理</a>, 添加<code>https://ahao.moe</code>, 选择<code>CNAME</code>验证.</p>
<table>
<thead>
<tr>
<th style="text-align:center">记录类型</th>
<th style="text-align:center">主机记录</th>
<th style="text-align:center">解析线路</th>
<th style="text-align:center">记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>CNAME</code></td>
<td style="text-align:center"><code>abcdefg</code></td>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>ziyuan.baidu.com</code></td>
</tr>
</tbody>
</table>
<p>同理, 为<code>hexo</code>添加<code>hexo-generator-baidu-sitemap</code>插件(<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/.travis.yml#L31" target="_blank" rel="noopener">.travis.yml#L31</a>), 它会生成一个<code>baidusitemap.xml</code>.<br>回到百度站长工具, 添加一个<code>sitemap</code>地址<code>https://ahao.moe/baidusitemap.xml</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://ziyuan.baidu.com/linksubmit/index?site=https%3A%2F%2Fahao.moe/</span><br></pre></td></tr></table></figure></p>
<p>因为之前在阿里云<code>DNS</code>解析将百度的爬虫指向了<code>Coding Me</code>, 所以绕开了<code>GitHub</code>的封锁.</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Travis-CI</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化RDB和AOF</title>
    <url>/posts/Redis_RDB_and_AOF.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Redis</code>的高速建立在数据存储在内存中, 但是断电的话, 就会导致数据丢失的问题.<br>为此我们需要对数据进行持久化到硬盘中.<br><code>Redis</code>提供了两种持久化存储方案, <code>Redis</code>在启动时会优先加载<code>AOF</code>文件恢复数据.</p>
<ol>
<li><code>AOF(Append Only File)</code>: 记录每次执行的命令到日志中, 恢复数据时重新执行一次日志文件中的命令.</li>
<li><code>RDB(Redis Database Backup)</code>: 将数据库的所有数据直接写入磁盘</li>
</ol>
<a id="more"></a>
<h1 id="RDB-Redis-Database-Backup"><a href="#RDB-Redis-Database-Backup" class="headerlink" title="RDB ( Redis Database Backup )"></a>RDB ( Redis Database Backup )</h1><p><code>RDB</code>会将当前<code>Redis</code>中所有存储的数据持久化到<code>dump.rdb</code>文件中.</p>
<h2 id="save-持久化-阻塞"><a href="#save-持久化-阻塞" class="headerlink" title="save 持久化 ( 阻塞 )"></a>save 持久化 ( 阻塞 )</h2><p><code>Redis</code>是单线程的, 所以<code>save</code>命令一旦执行, 其时间复杂度是<code>O(n)</code>, 数据量一大, <code>Redis</code>就会阻塞后面的请求.<br>所以一般不直接使用<code>save</code>命令进行持久化.</p>
<h2 id="bgsave-持久化-fork子进程"><a href="#bgsave-持久化-fork子进程" class="headerlink" title="bgsave 持久化 ( fork子进程 )"></a>bgsave 持久化 ( fork子进程 )</h2><p><code>Redis</code>提供了<code>bgsave</code>命令, <code>fork</code>一个子进程来进行<code>save</code>. 这样就不会阻塞住原本的进程.<br><code>fork</code>后的子进程执行<code>save</code>命令, 会创建一个临时<code>RDB</code>文件, 待持久化完毕后, 覆盖之前的<code>RDB</code>文件.<br>但是<code>fork</code>这个操作, 仍然是阻塞的, </p>
<h2 id="save-seconds-changes-定时持久化"><a href="#save-seconds-changes-定时持久化" class="headerlink" title="save seconds changes ( 定时持久化 )"></a>save seconds changes ( 定时持久化 )</h2><p><code>Redis</code>的配置文件中, 还提供了另一种<code>RDB</code>持久化方式, 格式: <code>save &lt;seconds&gt; &lt;changes&gt;</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save "" # 关闭 RDB</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></p>
<p>表示<code>seconds</code>秒内改变了<code>changes</code>次数据, 则自动<code>bgsave</code>.<br>缺点也很明显, 无法控制生成RDB的频率</p>
<h2 id="最佳配置-开启-RDB-时"><a href="#最佳配置-开启-RDB-时" class="headerlink" title="最佳配置 ( 开启 RDB 时 )"></a>最佳配置 ( 开启 RDB 时 )</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 注释掉所有的 save 命令</span></span><br><span class="line"><span class="comment"># save 900 1</span></span><br><span class="line"><span class="comment"># save 300 10</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 指定 RDB 文件名</span></span><br><span class="line">dbfilename dump-6379.rdb</span><br><span class="line"><span class="comment"># 3. 指定存储文件夹, 放RDB文件、AOF文件、log文件</span></span><br><span class="line">dir /data</span><br><span class="line"><span class="comment"># 4. 指定 bgsave 发生错误时停止写入</span></span><br><span class="line">stop-writes-on-bgsave-error yes </span><br><span class="line"><span class="comment"># 5. 压缩 RDB 文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 6. 校验 RDB 文件</span></span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure>
<p>值得注意的是, 即使在配置文件中关闭<code>RDB</code>自动持久化, 在以下情况, 仍会产生<code>RDB</code>文件.</p>
<ol>
<li>主从复制之全量复制时, 会生成RDB文件</li>
<li><code>debug reload</code>重启Redis, 会生成RDB文件</li>
<li><code>shutdown save</code>保存退出时, 会生成RDB文件</li>
</ol>
<h1 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h1><p><code>AOF</code>会将执行的命令<strong>优化(重写)</strong>后, 保存到内存中, 然后再从内存<code>fsync</code>到硬盘中.<br>待恢复时, 重新执行这些命令.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开 AOF 持久化</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 三种 fsync 方式</span></span><br><span class="line"><span class="comment"># appendfsync always # 每次执行命令都会 fsync</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行 fsync</span></span><br><span class="line"><span class="comment"># appendfsync no     # 取决于操作系统执行 fsync (不可控)</span></span><br></pre></td></tr></table></figure>
<h2 id="手动重写"><a href="#手动重写" class="headerlink" title="手动重写"></a>手动重写</h2><p>假设要执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> a a</span><br><span class="line"><span class="built_in">set</span> a b</span><br><span class="line"><span class="built_in">set</span> a c</span><br></pre></td></tr></table></figure></p>
<p>那么<code>AOF</code>肯定不会傻傻的将这<code>3</code>条命令写到<code>AOF</code>文件中, 因为只要保证<code>set a c</code>即可.<br>忽略中间态, 这就是<code>AOF</code>重写.<br>可以极大的减少<code>AOF</code>文件大小, 加快<code>AOF</code>恢复速度.</p>
<p>要手动重写, 只需要执行<code>bgrewriteaof</code>命令即可.<br>它会<code>fork</code>一个子进程来执行<code>AOF</code>重写操作.</p>
<h2 id="自动重写"><a href="#自动重写" class="headerlink" title="自动重写"></a>自动重写</h2><p><code>Redis</code>也在配置文件<code>/etc/redis.conf</code>中提供了满足一定条件就自动重写的配置.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 当 AOF 文件大于某个值时进行重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># 2. AOF 文件增长率, 下次就是到达 128mb、 256mb 就会重写.</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure></p>
<p>我们可以在<code>redis-cli</code>客户端查看<code>info</code>信息.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info persistence</span><br><span class="line"><span class="comment"># AOF开启, 才会追加以下信息</span></span><br><span class="line"><span class="comment"># aof_current_size  AOF 文件当前大小</span></span><br><span class="line"><span class="comment"># aof_base_size     上次AOF文件重写时的大小</span></span><br></pre></td></tr></table></figure></p>
<p>当满足以下条件时, <code>AOF</code>文件会自动重写.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aof_current_size &gt; auto_aof_rewrite_min_size</span><br><span class="line">aof_current_size - aof_base_size / aof_base_size &gt; auto_aof_rewrite_percentage</span><br></pre></td></tr></table></figure></p>
<h2 id="最佳配置-开启-AOF-时"><a href="#最佳配置-开启-AOF-时" class="headerlink" title="最佳配置 ( 开启 AOF 时 )"></a>最佳配置 ( 开启 AOF 时 )</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 开启 AOF</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># 2. 指定 AOF 文件名</span></span><br><span class="line">appendfilename appendonly-6379.aof</span><br><span class="line"><span class="comment"># 3. 指定存储文件夹, 放RDB文件、AOF文件、log文件</span></span><br><span class="line">dir /data</span><br><span class="line"><span class="comment"># 4. AOF 每秒保存一次, 宕机最多丢失一秒数据</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 5. AOF 重写时是否正常执行 AOF</span></span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line"><span class="comment"># 6. 当 AOF 文件大于 64mb 时进行重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># 7. AOF 文件增长率, 下次就是到达 128mb、 256mb 就会重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">slowlog官方文档</a></li>
<li><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">Redis高级功能 - 慢查询日志</a></li>
<li><a href="https://segmentfault.com/a/1190000014091287" target="_blank" rel="noopener">docker 安装部署 redis（配置文件启动）</a></li>
<li><a href="http://redis.cn/topics/persistence.html" target="_blank" rel="noopener">Redis 持久化 官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/posts/Singleton_Pattern.html</url>
    <content><![CDATA[<h1 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h1><p>单例模式算是设计模式入门的最简单的一个模式, 由于 <code>Java</code> 语言的特性(指令重排序), 导致同时也是最难的一个模式。</p>
<p>所幸, 先驱者<code>Joshua Bloch</code>在<code>Google I/O 2008</code>上的新书<code>Effective Java</code>介绍了单例模式的最佳实践。这本神书我还没来的及看, 但在国外好像备受推崇, 所以有机会还是看看。<br><a id="more"></a></p>
<p>一个<code>android</code>应用程序的一个单例模式的类只能有且只有一个实例对象。<br>通俗的讲，就是构造方法私有化，并在类内创建唯一一个私有的类实例,提供一个用于获取唯一实例的公有方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;  <span class="comment">//创建唯一一个私有实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;              <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> A(); <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">return</span> instance;    <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>单例模式分为以下两种类型</strong></p>
<ol>
<li>饿汉模式：类<strong>加载</strong>的时候便进行创建（加载类时较慢，运行时获取对象较快，线程安全）</li>
<li>懒汉模式：要<strong>使用</strong>的时候才进行创建（加载类时较快，运行时获取对象较慢，线程不安全）</li>
</ol>
<h1 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h1><h2 id="在Java-5-之前的最佳实践"><a href="#在Java-5-之前的最佳实践" class="headerlink" title="在Java 5 之前的最佳实践"></a>在Java 5 之前的最佳实践</h2><p>直接在声明的时候初始化, 当类加载时, <code>instance = new A()</code>就会执行.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance = <span class="keyword">new</span> A(); <span class="comment">//注意这里初始化的时机</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;                       <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;                 <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Java-5-之后的最佳实践"><a href="#Java-5-之后的最佳实践" class="headerlink" title="Java 5 之后的最佳实践"></a>Java 5 之后的最佳实践</h2><p><code>enum</code> 作为枚举关键字, 很难想像到它和 <code>单例模式</code> 联系到一起。<br>但是换种思路, 枚举类只有一个元素, 不就是单例模式了吗?<br>枚举类还可以添加自定义的方法。完全可以当成一个类来使用。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> A &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h1><blockquote>
<p>要使用的时候才进行创建</p>
</blockquote>
<h2 id="静态内部类-在Java-5-之前的最佳实践"><a href="#静态内部类-在Java-5-之前的最佳实践" class="headerlink" title="静态内部类 (在Java 5 之前的最佳实践)"></a>静态内部类 (在Java 5 之前的最佳实践)</h2><p>因为<code>Holder</code>是静态内部类, 只有<code>getInstance()</code>方法访问到<code>Holder</code>, 才会初始化静态内部类的<code>static</code>的变量.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> A instance = <span class="keyword">new</span> A();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Holder.instance; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="双重锁-volatile-在Java-5-之后的最佳实践"><a href="#双重锁-volatile-在Java-5-之后的最佳实践" class="headerlink" title="双重锁+volatile (在Java 5 之后的最佳实践)"></a>双重锁+volatile (在Java 5 之后的最佳实践)</h2><h3 id="双重锁的优化"><a href="#双重锁的优化" class="headerlink" title="双重锁的优化"></a>双重锁的优化</h3><p>上面提到，懒汉式是线程不安全的，对于多线程比较陌生的可能不太理解，先看代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;<span class="comment">// 一</span></span><br><span class="line">            instance = <span class="keyword">new</span> A();<span class="comment">// 二</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;<span class="comment">// 三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们获取调用<code>getInstance()</code>方法获取<code>A</code>的实例对象时，如果有多个线程调用<code>getInstance()方法</code>，就会出现线程不安全，怎么解释呢？</p>
<p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p>
<ol>
<li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 此时线程1时间片结束, <code>CPU</code>切换到线程2.</li>
<li>此时线程2执行到<code>if(instance == null)</code>, 因为线程1还未来得及执行<code>instance = A()</code>, 所以<code>if</code>判断为<code>true</code>, 进入方法体, 此时线程2时间片结束, <code>CPU</code>切换到线程1.</li>
<li>此时线程1执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, 然后<code>return</code>, 执行结束, 切换回线程2.</li>
<li>此时线程2在<code>if</code>内, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>851</code>, 然后<code>return</code>.</li>
</ol>
<p>看到了吗? 这样就创建了两个<code>A</code>的实例. 说好的单例模式呢?</p>
<p>那么改一下, 加上<code>synchronized</code>同步一下.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;          <span class="comment">// 一</span></span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;    <span class="comment">// 二</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;  <span class="comment">// 三</span></span><br><span class="line">                    instance = <span class="keyword">new</span> A(); <span class="comment">// 四</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance; <span class="comment">// 五</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p>
<ol>
<li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 此时线程1时间片结束, <code>CPU</code>切换到线程2.</li>
<li>此时线程2执行到<code>if(instance == null)</code>, 因为线程1还未来得及执行<code>instance = A()</code>, 所以<code>if</code>判断为<code>true</code>, 进入方法体, 此时线程2时间片结束, <code>CPU</code>切换到线程1.</li>
<li>线程1拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 此时就算切换回线程2, 线程2也会因为拿不到<code>A.class</code>锁对象, 阻塞在同步代码块外面.</li>
<li>线程1继续执行<code>if</code>, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, 然后<code>return</code>, 执行结束, 切换回线程2.</li>
<li>此时线程2拿到<code>A.class</code>锁, 进入<code>synchronized</code>, <code>if</code>判断为<code>false</code>, 直接<code>return</code>.</li>
</ol>
<blockquote>
<p>为什么不把第一个<code>if</code>去掉, 直接留个<code>synchronized + if</code>呢?<br>因为<code>synchronized</code>耗时长, 消耗性能, 双重锁只要保证第一次并发不产生多个对象即可.</p>
</blockquote>
<p>你以为这样就线程安全了吗! <code>Java</code>还有个<strong>指令重排序</strong>的大招等着你呢.</p>
<h3 id="volatile-优化"><a href="#volatile-优化" class="headerlink" title="volatile 优化"></a>volatile 优化</h3><p><code>volatile</code>关键字用来解决指令重排序在多线程下的问题, 它有两个功能.</p>
<ol>
<li>保证内存可见性</li>
<li>防止指令重排序</li>
</ol>
<p>我们先看内存可见性(其实这已经被<code>synchronized</code>解决了)<br><code>Java</code>内存模型规定, 变量存储在主存中, 每个线程拥有该变量的一个拷贝副本在自己的工作内存中, 线程修改变量是修改自己工作内存中的变量, 而修改完毕后, 会将自己工作内存中的修改后的值回写到主存中.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;          <span class="comment">// 一</span></span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;    <span class="comment">// 二</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;  <span class="comment">// 三</span></span><br><span class="line">                    instance = <span class="keyword">new</span> A(); <span class="comment">// 四</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance; <span class="comment">// 五</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p>
<ol>
<li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 继续执行<code>if</code>, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, <strong>此时<code>instance</code>没有回写到主存</strong>, 切换回线程2.</li>
<li>线程2执行到第一个<code>if</code>, 因为线程1的值没有回写到主存, 所以还是会进入<code>if</code>内, 但是被<code>synchronized</code>阻塞了.</li>
<li>线程1将变量回写到主存, 并<code>return</code>.</li>
<li>此时线程2拿到<code>A.class</code>锁, 进入<code>synchronized</code>, <code>if</code>判断为<code>false</code>, 直接<code>return</code>.<br>所以就算没有使用<code>volatile</code>保证内存可见性, 也不会导致出错.<br>其实<code>synchronized</code>就有保证内存可见性的功能.<blockquote>
<p>在 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html" target="_blank" rel="noopener">java.util.concurrent.locks.Lock</a> 接口的Javadoc中有这样一段话：<br>All Lock implementations must enforce the <strong>same memory synchronization semantics as provided by the built-in monitor lock</strong></p>
</blockquote>
</li>
</ol>
<p>再来看指令重排序<br><code>instance = A();</code> 这条命令并不是原子性的, 它包含3个操作.</p>
<ol>
<li>在堆内存申请<code>A</code>实例的内存空间.</li>
<li>初始化<code>A</code>实例.</li>
<li>将<code>instance</code>变量指向内存中的<code>A</code>实例的内存空间(执行完这步 <code>instance</code> 就为非 <code>null</code> 了)<br>由于<code>JVM</code>的指令重排序, 步骤<code>123</code>可能会变成<code>132</code>, 多线程下会导致出错.</li>
</ol>
<p>假设有两个线程同时调用了<code>getInstance()</code>方法. 指令顺序为<code>132</code>.</p>
<ol>
<li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 继续执行<code>if</code>, 执行<code>instance = A()</code>.</li>
<li>先在堆内存申请<code>A</code>实例的内存空间, 由于指令重排序, 将<code>instance</code>变量指向没有初始化的, 但是已经申请了的内存空间. 此时线程1时间片结束, CPU切换到线程2.</li>
<li>线程2执行到第一个<code>if</code>, 因为<code>instance</code>已经指向没有初始化的内存空间, 所以直接<code>return</code>. 这时调用这个单例, 因为还未初始化, 所以会导致错误出现.</li>
</ol>
<p>而<code>volatile</code>可以防止指令重排序, 让指令严格按照<code>123</code>的顺序执行.<br><strong>但是, 在<code>Java 5</code>之前, 因为<code>Java</code>内存模型的缺陷, <code>volatile</code>不能解决指令重排序的问题.</strong><br>所以最佳实践就是<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="破坏单例模式的攻击"><a href="#破坏单例模式的攻击" class="headerlink" title="破坏单例模式的攻击"></a>破坏单例模式的攻击</h1><h2 id="克隆-clone-攻击"><a href="#克隆-clone-攻击" class="headerlink" title="克隆 clone 攻击"></a>克隆 clone 攻击</h2><p>要用<code>clone</code>攻击单例模式只需要两步.</p>
<ol>
<li><code>A</code>类实现<code>Cloneable</code>接口, 虽然里面啥也没有, 主要时为了解决<code>CloneNotSupportedException</code>.</li>
<li>重写<code>Object</code>中的<code>protected native Object clone()</code>方法, 不然外部访问不了.<br>然后运行<code>main</code>方法, <code>a1==a2</code>得到<code>false</code>.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (A) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        A a2 = (A) a1.clone();</span><br><span class="line">        System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>要解决<code>clone</code>攻击也很简单, 既然是<code>clone</code>方法的问题, 那我们就直接在<code>clone</code>方法改动即可.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h2><p>用<code>constructor.setAccessible(true);</code>破解私有构造函数.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        A a2 = create(A<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;T&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那我们只能在构造函数体做文章了.<br>判断如果被初始化过了, 再次初始化则抛出异常即可.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;  <span class="comment">//创建唯一一个私有实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;               <span class="comment">//私有化构造函数</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;  <span class="comment">//避免反射创建</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"单例模式不允许再创建"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> A(); <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">return</span> instance;    <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="序列化攻击"><a href="#序列化攻击" class="headerlink" title="序列化攻击"></a>序列化攻击</h2><p>只要对<code>A</code>类实现<code>Serializable</code>接口, 即可进行对象序列化.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"serializable.txt"</span>);</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        <span class="comment">// 1. 序列化</span></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);) &#123;</span><br><span class="line">            oos.writeObject(a1);</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 反序列化</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);) &#123;</span><br><span class="line">            A a2 = (A) ois.readObject();</span><br><span class="line">            System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要化解序列化攻击, 很简单, 我们先看<code>ois.readObject()</code>这个方法.<br><img src="https://yuml.me/diagram/nofunky/class/[readObject]-&gt;[readObject0],[readObject0]-&gt;[readOrdinaryObject]" alt="readObject调用链"><br>最终调用的是<code>readOrdinaryObject</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">ObjectInput</span>, <span class="title">ObjectStreamConstants</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">        desc.checkDeserialize();</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// =============== !!注意这里!! ===============</span></span><br><span class="line">            obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// =============== !!注意这里!! ===============</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(desc.forClass().getName(), <span class="string">"unable to create instance"</span>).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            desc.hasReadResolveMethod()) &#123; <span class="comment">// 注意这里, false</span></span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到<code>desc.isInstantiable()</code>返回<code>true</code>之后, 反序列化会通过反射创建一个新的对象.<br>看下<code>isInstantiable()</code>的文档.</p>
<blockquote>
<p>Returns true if represented class is serializable/externalizable and can be instantiated by the serialization runtime–i.e., if it is externalizable and defines a public no-arg constructor, or if it is non-externalizable and its first non-serializable superclass defines an accessible no-arg constructor.  Otherwise, returns false.</p>
</blockquote>
<p>也就是说, 满足以下两种情况任意一种, 则返回<code>true</code></p>
<ol>
<li>类实现了<code>Externalizable</code>接口, 并定义了一个无参构造器</li>
<li>类没有实现<code>Externalizable</code>接口, 它的第一个非<code>Serializable</code>父类(如<code>Object</code>)定义了一个无参构造器.</li>
</ol>
<p>我们继续往下看, 根据方法名, 如果<code>A</code>类实现了<code>readResolve</code>方法, 就会调用<code>readResolve</code>方法, 并返回出去.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">ObjectInput</span>, <span class="title">ObjectStreamConstants</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            desc.hasReadResolveMethod()) &#123; <span class="comment">// 注意这里, true</span></span><br><span class="line">            Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">            <span class="keyword">if</span> (rep != obj) &#123;</span><br><span class="line">                <span class="comment">// 省略部分代码</span></span><br><span class="line">                obj = rep;</span><br><span class="line">                <span class="comment">// 省略部分代码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以, 要化解序列化攻击, 只需要写一个<code>readResolve</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="究极无敌完全进化完美精华牛逼上天单例模式懒汉版"><a href="#究极无敌完全进化完美精华牛逼上天单例模式懒汉版" class="headerlink" title="究极无敌完全进化完美精华牛逼上天单例模式懒汉版"></a>究极无敌完全进化完美精华牛逼上天单例模式懒汉版</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;  <span class="comment">// 化解反射攻击</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"单例模式不允许再创建"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重锁保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 化解克隆攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 化解序列化攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/70689" target="_blank" rel="noopener">What is an efficient way to implement a singleton pattern in Java?</a></li>
<li><a href="http://kanlei.github.io/design%20pattern/2017/04/16/double-checked-locking-is-broken" target="_blank" rel="noopener">Double Checked Locking is Broken</a></li>
<li><a href="http://www.importnew.com/21141.html" target="_blank" rel="noopener">如何正确地写出单例模式</a></li>
<li><a href="http://ifeve.com/java%E9%94%81%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84/" target="_blank" rel="noopener">Java锁是如何保证数据可见性的</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis慢查询日志</title>
    <url>/posts/Redis_slow_log.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Redis</code>的命令有一个生命周期, 比如发送一个<code>set key value</code>命令.</p>
<ol>
<li><code>Redis</code>客户端发送<code>set key value</code>到<code>Redis</code>服务端</li>
<li>因为<code>Redis</code>是单线程, 所以命令在队列中排队.</li>
<li><code>Redis</code>服务端执行<code>set key value</code>命令, 并产生结果</li>
<li><code>Redis</code>服务端将结果发送给<code>Redis</code>客户端</li>
</ol>
<p>而<code>Redis</code>命令的慢查询命令就是<code>Redis</code>服务端消耗时间较长的命令, 耗时过长是导致客户端超时的原因<strong>之一</strong>.</p>
<a id="more"></a>
<h1 id="慢查询配置"><a href="#慢查询配置" class="headerlink" title="慢查询配置"></a>慢查询配置</h1><p>慢查询其实就是一个固定长度的<code>FIFO</code>队列, 它保存在内存中.<br>既然是<code>FIFO</code>, 那么肯定会存在旧的慢查询丢失问题, 所以需要定期进行持久化到硬盘.</p>
<h2 id="修改配置文件重启-不推荐"><a href="#修改配置文件重启-不推荐" class="headerlink" title="修改配置文件重启(不推荐)"></a>修改配置文件重启(不推荐)</h2><p><code>Redis</code>配置文件在<code>/etc/redis.conf</code>下, 里面有两个属性.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 超过 10000 微秒的命令会被记录下来, 为0则记录所有命令, 为负数则禁用慢查询日志</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"># 慢查询日志队列长度, slowlog reset 命令会清空队列回收内存</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure></p>
<p>实际我们不这样做, 因为<code>Redis</code>支持动态配置.</p>
<h2 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h2><p><code>Redis</code>可以通过命令, 将配置写入内存中, 再调用<code>config rewrite</code>回写到配置文件中.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">    <span class="comment"># 慢查询日志队列长度, slowlog reset 命令会清空队列回收内存</span></span><br><span class="line">    config <span class="built_in">set</span> slowlog-max-len 256</span><br><span class="line">    config get slowlog-max-len</span><br><span class="line">    <span class="comment"># 超过 20000 微秒的命令会被记录下来, 为0则记录所有命令, 为负数则禁用慢查询日志</span></span><br><span class="line">    config <span class="built_in">set</span> slowlog-log-slower-than 20000</span><br><span class="line">    config get slowlog-log-slower-than</span><br><span class="line">    config rewrite</span><br></pre></td></tr></table></figure></p>
<p><strong>注意! 如果<code>Redis Server</code>启动时没有指定配置文件, 则<code>config rewrite</code>会报错!</strong></p>
<p>所以需要指定配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="Docker-配置"><a href="#Docker-配置" class="headerlink" title="Docker 配置"></a>Docker 配置</h2><p>如果是<code>Docker</code>启动的话, <code>Image</code>里是没有<code>redis.conf</code>的, 需要自己映射<code>volume</code>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 准备外部文件</span></span><br><span class="line">mkdir /opt/docker/redis/&#123;conf,data&#125; -p</span><br><span class="line">cp /etc/redis.conf /opt/docker/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/docker/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 映射到容器内</span></span><br><span class="line">docker run -p 6380:6379 -v <span class="variable">$PWD</span>/data:/data -v <span class="variable">$PWD</span>/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>
<p>如果是<code>Docker-Compose</code>启动的话, 需要指定<code>volume</code>, 然后后台启动<code>docker-compose up -d</code>.<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/docker-library/redis/issues/125#issuecomment-363322332</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br></pre></td></tr></table></figure></p>
<h1 id="慢查询命令"><a href="#慢查询命令" class="headerlink" title="慢查询命令"></a>慢查询命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看慢查询里前100条命令, 注意这里是FIFO</span></span><br><span class="line">slowlog get 100;</span><br><span class="line"><span class="comment"># 2. 记录超过0毫秒的命令, 即所有命令记录下来</span></span><br><span class="line">config <span class="built_in">set</span> slowlog-log-slower-than 0</span><br><span class="line"><span class="comment"># 3. 执行命令</span></span><br><span class="line"><span class="built_in">set</span> k1 v1</span><br><span class="line"><span class="comment"># 4. 查看慢查询里前100条命令, 注意这里是FIFO</span></span><br><span class="line">slowlog get 100</span><br><span class="line"><span class="comment"># 1) 1) (integer) 1</span></span><br><span class="line"><span class="comment">#    2) (integer) 1549684719</span></span><br><span class="line"><span class="comment">#    3) (integer) 141</span></span><br><span class="line"><span class="comment">#    4) 1) "set"</span></span><br><span class="line"><span class="comment">#       2) "k1"</span></span><br><span class="line"><span class="comment">#       3) "v1;"</span></span><br><span class="line"><span class="comment">#    5) "172.17.0.1:56592"</span></span><br><span class="line"><span class="comment">#    6) ""</span></span><br><span class="line"><span class="comment"># 5. 清空慢查询队列</span></span><br><span class="line">slowlog reset</span><br></pre></td></tr></table></figure>
<p>可以看到慢查询日志由<code>6</code>个部分组成。<a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">官方文档</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">条目</th>
<th style="text-align:center">值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>(integer) 1</code></td>
<td style="text-align:center">慢查询日志的<code>id</code>, 自增</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>(integer) 1549684719</code></td>
<td style="text-align:center">开始命令的<code>unix</code>时间戳</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>(integer) 141</code></td>
<td style="text-align:center">执行命令消耗的事件, 以微秒为单位</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><code>1) &quot;set&quot; 2) &quot;k1&quot; 3) &quot;v1;&quot;</code></td>
<td style="text-align:center">组成命令的参数, 以数组形式存放</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><code>&quot;172.17.0.1:56592&quot;</code></td>
<td style="text-align:center"><code>4.0+</code>新增, 客户端的<code>ip:port</code></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><code>&quot;&quot;</code></td>
<td style="text-align:center"><code>4.0+</code>新增, 客户端的名称</td>
</tr>
</tbody>
</table>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 不要设置过大, 默认10ms, 通常设置1ms</span><br><span class="line">config set slowlog-max-len 1</span><br><span class="line"># 不要设置过小, 通常设置1000左右</span><br><span class="line">config set slowlog-log-slower-than 1000</span><br></pre></td></tr></table></figure>
<p>慢查询日志是一个<code>FIFO</code>队列, 如果一段时间没有处理, 则旧的慢查询日志则会从队列移除, 所以我们需要定期持久化慢查询日志到硬盘, 通过定时任务插入<code>MySQL</code>等方式.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slowlog get 100</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">slowlog官方文档</a></li>
<li><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">Redis高级功能 - 慢查询日志</a></li>
<li><a href="https://segmentfault.com/a/1190000014091287" target="_blank" rel="noopener">docker 安装部署 redis（配置文件启动）</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker数据持久化</title>
    <url>/posts/Docker_data_persistence.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们使用<code>Docker</code>创建一个<code>mysql</code>的<code>container</code>, 数据是存储在<code>container</code>内的.<br>如果有一天不小心执行了<code>docker rm $(docker ps -aq)</code>删除所有<code>container</code>. 那么<code>mysql</code>里的数据也会被删掉, 这是不安全的.<br>我们需要将数据持久化, 存储在<code>container</code>外部. 即使删除<code>container</code>也不会删除原有的数据.</p>
<a id="more"></a>
<h1 id="Data-Volume-数据持久化"><a href="#Data-Volume-数据持久化" class="headerlink" title="Data Volume 数据持久化"></a>Data Volume 数据持久化</h1><p><code>Volume</code>可以将数据持久化到宿主机的某个目录下.<br>我们在官方的<code>mysql</code>的<a href="https://github.com/docker-library/mysql/blob/bb7ea52db4e12d3fb526450d22382d5cd8cd41ca/5.7/Dockerfile#L73" target="_blank" rel="noopener"><code>Dockerfile</code></a>里可以看到指定了<code>VOLUME</code>.<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/lib/mysql</span></span><br></pre></td></tr></table></figure></p>
<p>说明这个<code>mysql</code>的数据存在这个文件夹下, <strong>但是, 不是直接存在这个文件夹下, 里面还有多层目录</strong>.</p>
<p>先看下下面的例子<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行一个mysql, -v 等价于 VOLUME 关键字, -e 指定环境变量</span></span><br><span class="line">docker run -d -v my-volume:/var/lib/mysql --name my-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># DRIVER   VOLUME NAME</span></span><br><span class="line"><span class="comment"># local    my-volume</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看 my-volume 的详细信息, 可以看到 Mountpoint 指定了具体存储位置</span></span><br><span class="line">docker volumn inspect my-volume</span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         "CreatedAt": "2019-02-03T10:25:00+08:00",</span></span><br><span class="line"><span class="comment">#         "Driver": "local",</span></span><br><span class="line"><span class="comment">#         "Labels": null,</span></span><br><span class="line"><span class="comment">#         "Mountpoint": "/var/lib/docker/volumes/my-volume/_data",</span></span><br><span class="line"><span class="comment">#         "Name": "my-volume",</span></span><br><span class="line"><span class="comment">#         "Options": null,</span></span><br><span class="line"><span class="comment">#         "Scope": "local"</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除 container 后, volume 仍然存在</span></span><br><span class="line">docker rm -f my-mysql</span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># DRIVER   VOLUME NAME</span></span><br><span class="line"><span class="comment"># local    my-volume</span></span><br></pre></td></tr></table></figure></p>
<p>既然数据是在<code>container</code>外部的, 那当然的, 我们可以创建另一个<code>mysql</code>连接到这个<code>Volume</code>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v my-volume:/var/lib/mysql --name my-mysql-new -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure></p>
<h1 id="Bing-Mounting-绑定挂载"><a href="#Bing-Mounting-绑定挂载" class="headerlink" title="Bing Mounting 绑定挂载"></a>Bing Mounting 绑定挂载</h1><p><code>Bing Mounting</code>可以将<code>container</code>里的目录和宿主机的目录做映射.<br>比如<code>nginx</code>, 想要改里面的<code>html</code>, 每次都要<code>docker exec -it my-nginx /bin/bash</code>进去容器内部改.<br>并且, <code>container</code>删掉后, 里面的<code>html</code>也不见了.</p>
<p>使用<code>Bing Mounting</code>解决这个问题.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个自己的 index.html</span></span><br><span class="line">mkdir /opt/nginx</span><br><span class="line"><span class="built_in">cd</span> /opt/nginx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"替换掉的html"</span> &gt; /opt/nginx/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将当前目录 /opt/nginx 和 container 内部的 html 目录做映射</span></span><br><span class="line">docker run -v $(<span class="built_in">pwd</span>):/usr/share/nginx/html -d -p 80:80 --name my-nginx nginx</span><br></pre></td></tr></table></figure></p>
<p>这样, 在外部访问<code>nginx</code>时, 就可以看到被替换的<code>html</code>.</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络</title>
    <url>/posts/Docker_network.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Docker</code>有三种网络连接方式, <code>bridge</code>、<code>host</code>和<code>none</code>.<br><code>Docker</code>会自动创建<code>3</code>个网络, 每种<code>1</code>个.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># 7b083adc391a        bridge              bridge              local</span></span><br><span class="line"><span class="comment"># 5855c878dc68        host                host                local</span></span><br><span class="line"><span class="comment"># 9895a4ab897d        none                null                local</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="bridge-网络隔离"><a href="#bridge-网络隔离" class="headerlink" title="bridge 网络隔离"></a>bridge 网络隔离</h1><p>默认的<code>container</code>使用的是<code>bridge</code>连接, <code>container</code>使用<code>--link &lt;container&gt;</code>可以连接到其他的<code>container</code>.<br>做到网络隔离的效果.</p>
<p>比如<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个 bridge1 容器, 并查看ip地址</span></span><br><span class="line">docker run -d --name bridge1 busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 ip a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个 bridge2 容器, 并 ping bridge1 的 ip 地址</span></span><br><span class="line">docker run -d --name bridge2 --link bridge1 busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge2 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge2 /bin/ping bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 默认的 bridge 是单向的, bridge1 ping bridge2 失败</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge2</span><br></pre></td></tr></table></figure></p>
<p>发现<code>bridge2</code>可以直接<code>ping bridge1</code>, 不用输入<code>IP</code>地址.<br>因为<code>--link bridge1</code>相当于给<code>bridge2</code>添加了一条<code>DNS</code>解析.<br><strong>而且, 默认的 <code>bridge</code> 是单向的, 这句话先记着, 后面讲</strong></p>
<p>我们可以自己创建一个<code>bridge</code>, 做网络隔离.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建自己的 bridge</span></span><br><span class="line">docker network create -d bridge my-bridge</span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个新的 container 连接到 my-bridge</span></span><br><span class="line">docker run -d --name bridge3 --link bridge1 --network my-bridge busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ping bridge1 失败</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1</span><br></pre></td></tr></table></figure></p>
<p>把 <code>bridge1</code> 连接到 <code>my-bridge</code>上, 注意, 此时 <code>bridge1</code> 仍然存在于默认的 <code>bridge</code> 上.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 把 bridge1 连接到 my-bridge</span></span><br><span class="line">docker network connect my-bridge bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ping bridge1 成功</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ping bridge3 成功</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge3的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge3</span><br></pre></td></tr></table></figure></p>
<p>注意, 我们没有给<code>bridge1</code>添加<code>--link bridge3</code>, 只是连接到 <code>my-bridge</code>, 却可以<code>ping bridge3</code>.<br>因为和默认的<code>bridge</code>不同, <strong>自己创建的<code>bridge</code>默认是双向的</strong>.</p>
<h1 id="host-共享-network-namespace"><a href="#host-共享-network-namespace" class="headerlink" title="host 共享 network namespace"></a>host 共享 network namespace</h1><p>如果我们用<code>Docker</code>启动了一个<code>nginx</code>服务器.<br>此时, 只有宿主机可以访问<code>Docker</code>容器里的<code>nginx</code>服务器.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行本地服务器 nginx</span></span><br><span class="line">docker run -d --name web-local nginx</span><br><span class="line"><span class="comment"># 2. 查看container的容器地址, 默认连接到 bridge 上</span></span><br><span class="line"><span class="comment">#    看 Containers 下的 IPv4Address, 得知 IP 地址为 172.17.0.2</span></span><br><span class="line">docker network inspect bridge</span><br><span class="line"><span class="comment"># 3. 测试连接 nginx, 访问成功</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line">curl http://172.17.0.2</span><br></pre></td></tr></table></figure></p>
<p>在宿主机里可以访问这个<code>nginx</code>, 但是在局域网的其他机器上, 却不能访问<code>http://172.17.0.2</code>.<br>我们需要把宿主机里的<code>nginx</code>暴露到外部来, 使用端口映射达到这个目的.<br>将<code>container</code>的<code>80</code>端口, 映射到宿主机的<code>8080</code>端口, 这样, 我们直接访问宿主机的<code>8080</code>端口, 就可以间接的访问到<code>nginx</code>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name web-port-map nginx</span><br></pre></td></tr></table></figure></p>
<p>以上文字和<code>host</code>毫无关联, 只是为下文做铺垫.<br><code>host</code>可以共享宿主机的<code>network namespace</code>, 关于<code>Linux network namespace</code>可以看我的另一篇文章.<br>把它想象成一个网络沙箱即可.<br>还是用<code>nginx</code>做个简单例子, 我们从上面可以知道部署<code>nginx</code>需要做端口映射.<br>但是使用<code>host</code>共享宿主机的<code>network namespace</code>就可以<strong>不用做端口映射</strong>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name web-host --network host nginx</span><br></pre></td></tr></table></figure></p>
<p>注意, <strong>这里没有使用端口映射</strong>.<br>然而, 我们依旧能在外部, 使用宿主机的<code>IP</code>地址, 访问到<code>80</code>端口的<code>nginx</code>.</p>
<h1 id="none-断网操作"><a href="#none-断网操作" class="headerlink" title="none 断网操作"></a>none 断网操作</h1><p>一般用于安全性, 保密性较高的程序.<br>直接隔离网络, 断网.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name net-none --network none busybox /bin/sh -c <span class="string">"while true; do sleep 3600;done"</span></span><br><span class="line">docekr <span class="built_in">exec</span> -it net-none ip a</span><br><span class="line"><span class="comment"># 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span></span><br><span class="line"><span class="comment">#     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class="line"><span class="comment">#     inet 127.0.0.1/8 scope host lo</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux network namespace</title>
    <url>/posts/Linux_network_namespace.html</url>
    <content><![CDATA[<h1 id="network-namespace"><a href="#network-namespace" class="headerlink" title="network namespace"></a>network namespace</h1><p><code>Linux network namespace</code> 是 <code>Linux</code> 提供的网络虚拟化功能, 它能创建网络虚拟空间, 将容器(<code>Docker</code>)或虚拟机的网络隔离开来, 假装是一台独立的网络机器.<br><code>Docker</code>也使用了<code>Linux network namespace</code>来隔离网络空间.<br>这里使用<code>ip</code>命令来查看网络信息.</p>
<a id="more"></a>
<h1 id="使用-Veth-pair-进行一对一通信"><a href="#使用-Veth-pair-进行一对一通信" class="headerlink" title="使用 Veth pair 进行一对一通信"></a>使用 Veth pair 进行一对一通信</h1><h2 id="准备两个network-namespace"><a href="#准备两个network-namespace" class="headerlink" title="准备两个network namespace"></a>准备两个network namespace</h2><p>先准备两个<code>network namespace</code>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 添加3个network namespace</span></span><br><span class="line"><span class="comment"># ip netns add &lt;name&gt;</span></span><br><span class="line">ip netns add test1</span><br><span class="line">ip netns add test2</span><br><span class="line">ip netns add test3</span><br><span class="line"><span class="comment"># 2. 删掉1个network namespace</span></span><br><span class="line">ip netns delete test3</span><br><span class="line"><span class="comment"># 3，查看所有network namespace</span></span><br><span class="line">ip netns list</span><br></pre></td></tr></table></figure></p>
<p>默认的<code>network namespace</code>只有一个回环地址, 并且启动网卡也是<code>UNKNOWN</code>状态, 因为没有做网络连接.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip netns exec test1 ip link</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">[root@localhost ~]# ip netns exec test1 ip link set dev lo up</span><br><span class="line">[root@localhost ~]# ip netns exec test1 ip link</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure></p>
<h2 id="Veth-pair-绑定、启用、ping"><a href="#Veth-pair-绑定、启用、ping" class="headerlink" title="Veth pair 绑定、启用、ping"></a>Veth pair 绑定、启用、ping</h2><p><code>Veth pair</code>像一条网线, 连接两个<code>network namespace</code>.<br>相互连接的两个<code>network namespace</code>, 各自拥有一个<code>Veth pair</code>, <code>Veth pair</code>是成对存在的, 删掉一个另一个也会被删掉.</p>
<p>创建一对<code>Veth pair</code>, 默认都是<code>DOWN</code>的.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip link add &lt;p1-name&gt; type veth peer name &lt;p2-name&gt;</span></span><br><span class="line">ip link add veth-test1 <span class="built_in">type</span> veth peer name veth-test2</span><br><span class="line">46: veth-test2@veth-test1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 32:70:51:a9:bb:2d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">47: veth-test1@veth-test2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000</span><br><span class="line">    link/ether fa:7d:53:a0:13:9a brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure></p>
<p>将<code>Veth pair</code>和两个<code>network namespace</code>绑定.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ip link  set &lt;Veth-pair&gt;  netns &lt;network-namespace&gt;</span></span><br><span class="line">ip link  <span class="built_in">set</span> veth-test1  netns test1</span><br><span class="line">ip link  <span class="built_in">set</span> veth-test2  netns test2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机的ip link的两个Veth pair消失</span></span><br><span class="line">ip link</span><br><span class="line"><span class="comment"># 两个 network namespace 各自多了个Veth pair</span></span><br><span class="line">ip netns <span class="built_in">exec</span> test1  ip link</span><br><span class="line">ip netns <span class="built_in">exec</span> test2  ip link</span><br></pre></td></tr></table></figure></p>
<p>为<code>Veth pair</code>添加<code>ip</code>地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip netns <span class="built_in">exec</span> test1  ip addr add 192.168.1.1/24  dev veth-test1</span><br><span class="line">ip netns <span class="built_in">exec</span> test2  ip addr add 192.168.1.2/24  dev veth-test2</span><br></pre></td></tr></table></figure></p>
<p>启动<code>Veth pair</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip netns <span class="built_in">exec</span> test1  ip link <span class="built_in">set</span> dev veth-test1 up</span><br><span class="line">ip netns <span class="built_in">exec</span> test2  ip link <span class="built_in">set</span> dev veth-test2 up</span><br></pre></td></tr></table></figure></p>
<p>这时候就<code>ping</code>通两个不同的<code>network namespace</code>了.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip netns <span class="built_in">exec</span> test1  ping 192.168.1.2</span><br></pre></td></tr></table></figure></p>
<h1 id="使用-Bridge-进行多对多通信"><a href="#使用-Bridge-进行多对多通信" class="headerlink" title="使用 Bridge 进行多对多通信"></a>使用 Bridge 进行多对多通信</h1><p>如果有<code>100</code>台机器进行通信, 现在再追加<code>1</code>台机器, 就需要<code>100</code>个<code>Veth pair</code>. 这种拓扑结构明显是有问题的.<br><code>Bridge</code>提供了一个桥梁, 相当于一个中转站, 这样要追加<code>1</code>台机器, 只需要<code>1</code>个<code>Veth pair</code>, 连接到<code>Bridge</code>, <code>Bridge</code>会转发到目标机器上.</p>
<h2 id="简单的-3-台机器通信例子"><a href="#简单的-3-台机器通信例子" class="headerlink" title="简单的 3 台机器通信例子"></a>简单的 3 台机器通信例子</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建 Bridge 并启动, 创建3个 network namespace</span></span><br><span class="line">ip link add bridge-ns <span class="built_in">type</span> bridge</span><br><span class="line">ip link <span class="built_in">set</span> dev bridge-ns up</span><br><span class="line">ip netns add ns1</span><br><span class="line">ip netns add ns2</span><br><span class="line">ip netns add ns3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建 3对 Veth pair</span></span><br><span class="line">ip link add veth-bridge1 <span class="built_in">type</span> veth peer name veth-ns1</span><br><span class="line">ip link add veth-bridge2 <span class="built_in">type</span> veth peer name veth-ns2</span><br><span class="line">ip link add veth-bridge3 <span class="built_in">type</span> veth peer name veth-ns3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 绑定到各自的 network namespace</span></span><br><span class="line">ip link  <span class="built_in">set</span> veth-ns1  netns ns1</span><br><span class="line">ip link  <span class="built_in">set</span> veth-ns2  netns ns2</span><br><span class="line">ip link  <span class="built_in">set</span> veth-ns3  netns ns3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 添加ip地址</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip addr add 192.168.1.1/24 dev veth-ns1</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip addr add 192.168.1.2/24 dev veth-ns2</span><br><span class="line">ip netns <span class="built_in">exec</span> ns3 ip addr add 192.168.1.3/24 dev veth-ns3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 连接到bridge</span></span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge1 master bridge-ns</span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge2 master bridge-ns</span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge3 master bridge-ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启用</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip link <span class="built_in">set</span> dev veth-ns1 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip link <span class="built_in">set</span> dev veth-ns2 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns3 ip link <span class="built_in">set</span> dev veth-ns3 up</span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge1 up</span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge2 up</span><br><span class="line">ip link <span class="built_in">set</span> dev veth-bridge3 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. ping测试</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ping 192.168.1.2</span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ping 192.168.1.3</span><br></pre></td></tr></table></figure>
<p>结果这<code>3</code>台机器都可以两两相互通信.<br>使用<code>bridge link</code>命令可以查看连接信息.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brctl 命令需要安装依赖</span></span><br><span class="line">yum install -y bridge-utils</span><br><span class="line">bridge link</span><br><span class="line"><span class="comment"># 50: veth-bridge1 state UP @(null): &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master bridge-ns state forwarding priority 32 cost 2 </span></span><br><span class="line"><span class="comment"># 52: veth-bridge2 state UP @(null): &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master bridge-ns state forwarding priority 32 cost 2 </span></span><br><span class="line"><span class="comment"># 56: veth-bridge3 state UP @(null): &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master bridge-ns state forwarding priority 32 cost 2</span></span><br></pre></td></tr></table></figure></p>
<h1 id="使用-NAT-连接外网"><a href="#使用-NAT-连接外网" class="headerlink" title="使用 NAT 连接外网"></a>使用 NAT 连接外网</h1><p>待续</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RUN和CMD和ENTRYPOINT</title>
    <url>/posts/RUN_CMD_ENTRYPOINT.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Docker</code>有三种命令执行方式</p>
<ol>
<li><code>RUN</code>: 执行命令并创建新的<code>Image Layer</code></li>
<li><code>CMD</code>: 设置容器启动后默认执行的命令和参数</li>
<li><code>ENTRYPOINT</code>: 设置容器启动时运行的命令</li>
</ol>
<a id="more"></a>
<h1 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h1><p><code>RUN</code>命令一般用来安装一些依赖, 删除缓存等操作.<br>但是每一次<code>RUN</code>都会产生一层<code>Image Layer</code>, 所以需要尽可能的少用<code>RUN</code>, 尽量一行代码搞定.<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update &amp;&amp; yum install -y vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">        vim &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> /bin/bash -c <span class="string">'source $HOME/.bashrc; echo $HOME'</span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p><code>CMD</code>是<code>container</code>启动时默认执行的命令.<br>等价于<code>docker run -it [image] /bin/bash</code>.<br>并且会被覆盖.</p>
<ol>
<li>多个CMD只会执行最后一个.</li>
<li>外部命令会覆盖内部的<code>CMD</code>.</li>
</ol>
<p>利用外部命令会覆盖内部<code>CMD</code>的特性, 我们可以从外部传入参数.<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/bin/curl"</span>]</span></span><br><span class="line"><span class="comment"># 默认查看curl版本号</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--version"</span>]</span></span><br></pre></td></tr></table></figure></p>
<p>然后执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t centos-curl .</span><br><span class="line">docker run -it centos-curl --head www.baidu.com</span><br></pre></td></tr></table></figure></p>
<p>等价于在<code>container</code>中执行<code>/usr/bin/curl --head www.baidu.com</code>.</p>
<h1 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h1><p><code>ENTRYPOINT</code>让<code>container</code>以应用程序或者服务的形式运行.<br>和<code>CMD</code>相比, <code>ENTRYPOINT</code>不会被忽略, 一定会执行.<br>最佳实践就是写一个<code>shell</code>作为<code>ENTRYPOINT</code><br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"docker-entrypoint.sh"</span>]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参数格式-SHELL-和-EXEC"><a href="#参数格式-SHELL-和-EXEC" class="headerlink" title="参数格式 SHELL 和 EXEC"></a>参数格式 SHELL 和 EXEC</h1><p>另外, <code>RUN</code>和<code>CMD</code>和<code>ENTRYPOINT</code>的参数规则有两种, <code>SHELL</code> 和 <code>EXEC</code>.<br>以<code>ENTRYPOINT</code>为例, 这两种<code>ENTRYPOINT</code>的写法是等价的.<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">ENV</span> name Ahao</span><br><span class="line"><span class="comment"># ENTRYPOINT echo "hello $&#123;Ahao&#125;"</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello <span class="variable">$&#123;Ahao&#125;</span>"</span>]</span></span><br><span class="line"><span class="comment"># ENRTYPOINT [COMMAND] 等价于 ENTRYPOINT ["/bin/bash", "-c", "[COMMAND]"]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>使用<code>RUN</code>安装软件依赖, 并记得删除缓存.</li>
<li>构建服务时使用<code>Exec</code>格式的<code>ENTRYPOINT</code>.</li>
<li>默认启动命令使用<code>CMD</code>.</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadPoolExecutor源码分析</title>
    <url>/posts/ThreadPoolExecutor_source_code.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ThreadPoolExecutor</code>是一个线程池的实现.<br><code>Java</code>提供了<code>Executors</code>工厂类来创建<code>ExecutorService</code>线程池实例。</p>
<a id="more"></a>
<p><img src="https://yuml.me/diagram/nofunky/class/[&lt;&lt;Executor&gt;&gt;]^-.-[&lt;&lt;ExecutorService&gt;&gt;],[&lt;&lt;ExecutorService&gt;&gt;]^-.-[AbstractExecutorService],[AbstractExecutorService]^-[ThreadPoolExecutor]" alt></p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p><code>ThreadPoolExecutor</code>的构造方法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime, TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>把线程池想象一个水壶, <code>corePoolSize</code>就相当于液面警戒线, 虽然满了还可以再加水, 但是不可能超过水壶的极限高度<code>maximumPoolSize</code>.<br><code>keepAliveTime</code>则是允许线程空闲下来的时间, <code>TimeUnit</code>是时间单位.<br><code>workQueue</code>是阻塞队列, 用于存储超过<code>corePoolSize</code>但是未满<code>maximumPoolSize</code>的线程.<br><code>threadFactory</code>用于创建线程池内的线程, 默认是<code>DefaultThreadFactory</code><br><code>handler</code>是拒绝策略, 用于回调执行添加线程失败的代码. </p>
<h1 id="线程池内部状态流转"><a href="#线程池内部状态流转" class="headerlink" title="线程池内部状态流转"></a>线程池内部状态流转</h1><p><code>Java</code>中的<code>int</code>类型有<code>32</code>位, <code>ThreadPoolExecutor</code>使用<code>ctl</code>的高<code>3</code>位表示线程池的运行状态, 低<code>29</code>位表示线程池中的线程数.<br>线程池的状态有:</p>
<ol>
<li><code>RUNNING</code>: 运行状态, 可以接收任务</li>
<li><code>SHUTDOWN</code>: 调用了<code>shutdown()</code>方法后的状态, 等待所有任务执行完毕后关闭线程池.</li>
<li><code>STOP</code>: 调用了<code>shutdownNow()</code>方法后的状态, 强制结束所有任务并关闭线程池.</li>
<li><code>TIDYING</code>: 空闲状态, 所有任务都执行完毕。</li>
<li><code>TERMINATED</code>: 终止状态，调用了<code>terminated()</code>方法后的状态.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;      <span class="comment">// 29</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>; <span class="comment">// 11111111111111111111111111111, 29位全1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;    <span class="comment">// 111 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;    <span class="comment">// 000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;    <span class="comment">// 001</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;    <span class="comment">// 010</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;    <span class="comment">// 011</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Packing and unpacking ctl</span></span><br><span class="line">    <span class="comment">// 获取运行状态, 高3位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">    <span class="comment">// 获取线程数量, 低29位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">    <span class="comment">// 获取 ctl 变量, 组合 高3位 和 低29位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>下面<code>3</code>个静态方法用于拆分和组合<strong>运行状态</strong>和<strong>线程数量</strong>.<br>假设线程池运行状态为<code>RUNING</code>, 线程池内有<code>2</code>个线程.<br>那么<code>ctl</code>变量的值的二进制形式就是<code>111 00000000000000000000000000010</code>.<br>根据<code>ctl</code>获取运行状态: <code>rs = runStateOf(ctl)</code>得到<code>111 00000000000000000000000000000</code><br>根据<code>ctl</code>获取线程数量: <code>wc = workerCountOf(ctl)</code>得到<code>000 00000000000000000000000000010</code><br>如果之后需要根据<code>rs</code>和<code>wc</code>获取<code>ctl</code>, 则调用<code>ctl = ctlOf(rs, wc)</code>得到<code>111 00000000000000000000000000010</code></p>
<h1 id="添加一个Runnable"><a href="#添加一个Runnable" class="headerlink" title="添加一个Runnable"></a>添加一个Runnable</h1><h2 id="execute-Runnable-command"><a href="#execute-Runnable-command" class="headerlink" title="execute(Runnable command)"></a>execute(Runnable command)</h2><p><code>ThreadPoolExecutor</code>实现了<code>Executor</code>接口的唯一一个方法<code>void execute(Runnable command)</code>;<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 1. 判断当前线程数量 是否小于 核心线程数量, 尝试添加线程到核心线程池</span></span><br><span class="line">        <span class="comment">//    添加到核心线程池失败 或者 核心线程池满了, 则继续往下走</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 判断线程池状态是 RUNNING, 往阻塞队列添加这个 Runnable </span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="comment">// 2.1. 判断线程池不是RUNNING, 则从队列删除这个 Runnable, 并调用 reject 回调方法</span></span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="comment">// 2.2. 判断线程池内的线程数量如果为0, 则创建一个非核心线程</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 如果线程池状态不是 RUNNING, 或者阻塞队列添加失败</span></span><br><span class="line">        <span class="comment">//    尝试添加 Runnable 到非核心线程池, 如果还是失败, 则调用 reject 回调方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>只要<code>Core Pool</code>没有填满, 线程池就会一直创建线程到<code>Core Pool</code>中.</li>
<li>一旦<code>Core Pool</code>填满了, 就添加到阻塞队列(构造函数传入)中.<br> 2.2. 如果添加到阻塞队列成功, 且当前线程池的线程数为0, 则创建一个非<code>Core</code>线程.<ol start="3">
<li>如果添加到阻塞队列失败, 尝试创建一个非<code>Core</code>线程, 仍然失败则调用<code>reject</code>处理器(构造函数传入)的回调函数.</li>
</ol>
</li>
</ol>
<p>简单点说, 线程池会先填满<code>corePoolSize</code>, 再填满队列, 再填满<code>maximumPoolSize</code>, 如果还有则调用<code>reject</code>回调方法.</p>
<h2 id="addWorker-Runnable-firstTask-boolean-core"><a href="#addWorker-Runnable-firstTask-boolean-core" class="headerlink" title="addWorker(Runnable firstTask, boolean core)"></a>addWorker(Runnable firstTask, boolean core)</h2><p>上面的代码一直围绕着<code>addWorker</code>方法, 这个方法可以创建<code>Core</code>线程和非<code>Core</code>线程.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 省略以上代码, 都是对状态进行判断, 判断是否可以添加 Worker, 不复杂, 就是绕</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 创建 Worker 实例, 线程池中的线程都是 Worker</span></span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread; <span class="comment">// 这个线程是用 ThreadFactory 创建的</span></span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 3. HashSet 不是线程安全的, 加锁, 添加到 HashSet 中</span></span><br><span class="line">                <span class="comment">// 省略部分代码</span></span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                workers.add(w);</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">                <span class="comment">// 4. 执行线程</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面代码可以看出, <code>Core</code>线程和非<code>Core</code>线程本质都是一个<code>Worker</code>, 甚至这个<code>Worker</code>都没有属性来标识是否为<code>Core</code>线程, 而是通过一堆线程池状态来判断创建的是<code>Core</code>线程还是非<code>Core</code>线程.</p>
<p>创建完后就执行这个<code>Worker</code>线程, 从阻塞队列里不停的取任务来执行.</p>
<h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p><code>Worker</code>是<code>ThreadPoolExecutor</code>的内部类.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread thread; <span class="comment">// ThreadFactory 创建的线程</span></span><br><span class="line">        Runnable firstTask;  <span class="comment">// 提交到线程池里的任务</span></span><br><span class="line">        Worker(Runnable firstTask) &#123;</span><br><span class="line">            setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">            <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">            <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            runWorker(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="runWorker-Worker-w"><a href="#runWorker-Worker-w" class="headerlink" title="runWorker(Worker w)"></a>runWorker(Worker w)</h2><p>间接调用了<code>ThreadPoolExecutor</code>的<code>runWorker</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 先执行Worker的任务, 然后从队列中循环取出任务</span></span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task); <span class="comment">// 交给子类扩展, 空方法体</span></span><br><span class="line">                    task.run();</span><br><span class="line">                    afterExecute(task, thrown); <span class="comment">// 交给子类扩展, 空方法体</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>直接调用了<code>run</code>方法, 完成线程任务.</p>
<h2 id="getTask"><a href="#getTask" class="headerlink" title="getTask()"></a>getTask()</h2><p><code>getTask()</code>从阻塞队列中获取提交到线程池的任务.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">            <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 省略跳出循环的代码, timedOut 为 true 则 return null</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runnable r = timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                timedOut = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">                timedOut = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>poll</code>方法支持延迟从队列中获取元素, <code>take</code>则马上从队列中获取元素.<br>当超时后, <code>getTask()</code>返回<code>null</code>, 则<code>runWorker</code>方法的无限循环也跑不下去了, 自然就结束了这个线程.</p>
<p>一个交给线程池的线程就执行完毕了. 省略了很多状态转换的代码, 如果看不懂可以结合源码阅读。</p>
<h1 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h1><p>关闭线程池有两种方法<code>shutdown()</code>和<code>shutdownNow()</code>.<br>参考资料提到了一种优雅的关闭线程池的方法, 如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    pool.execute(<span class="keyword">new</span> Job());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pool.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!pool.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">    logger.info(<span class="string">"线程还在执行。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">logger.info(<span class="string">"一共处理了【&#123;&#125;】"</span>, (end - start));</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/crossoverJie/JCSprout/blob/master/MD/ThreadPoolExecutor.md" target="_blank" rel="noopener">ThreadPoolExecutor</a></li>
<li><a href="https://blog.csdn.net/u010963948/article/details/80573898" target="_blank" rel="noopener">深入理解Java线程池原理分析与使用（尤其当线程队列满了之后事项）</a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>基于shadowsocks-libev+simple-obfs的单机多用户搭建</title>
    <url>/posts/multi_user_of_shadowsocks_libev.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于<a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">shadowsocks-libev</a>+<a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">simple-obfs</a>的单机多用户搭建。<br>本文基于<code>Ubuntu 18.04</code>在虚拟机中进行操作, 并于<code>VPS</code>上测试成功。</p>
<a id="more"></a>
<h1 id="允许root远程登录"><a href="#允许root远程登录" class="headerlink" title="允许root远程登录"></a>允许root远程登录</h1><p>使用<code>root</code>避免各种权限问题, 实际使用时应登录普通用户后<code>sudo -s</code>切换到<code>root</code>用户。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">sudo sed -i <span class="string">'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config</span><br><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure></p>
<h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><p>服务端使用<a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">shadowsocks-libev</a>, 其他项目似乎都好久没更新了。<br><a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc#config-file" target="_blank" rel="noopener">配置文件官方文档</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 shadowsocks-libev</span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install shadowsocks-libev -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加配置文件</span></span><br><span class="line">sudo mkdir /opt/config</span><br><span class="line">sudo vim /opt/config/manager.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"port_password"</span>: &#123;</span><br><span class="line">    <span class="string">"443"</span>: <span class="string">"12345"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"fast_open"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"reuse_port"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"no_delay"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: 300,</span><br><span class="line">  <span class="string">"mode"</span>:<span class="string">"tcp_and_udp"</span>,</span><br><span class="line">  <span class="string">"method"</span>: <span class="string">"aes-256-gcm"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 启动</span></span><br><span class="line">sudo ss-manager -c /opt/config/manager.json</span><br></pre></td></tr></table></figure></p>
<p>客户端连接上, 然后开启全局模式, 执行如下操作</p>
<ol>
<li>访问<code>www.baidu.com</code>, 访问成功</li>
<li>关闭服务端, 访问<code>www.baidu.com</code>, 访问失败</li>
</ol>
<p>则说明<code>shadowsocks-libev</code>已经成功配置。</p>
<h1 id="配置-simple-obfs-混淆插件"><a href="#配置-simple-obfs-混淆插件" class="headerlink" title="配置 simple-obfs 混淆插件"></a>配置 simple-obfs 混淆插件</h1><h2 id="服务端配置-1"><a href="#服务端配置-1" class="headerlink" title="服务端配置"></a>服务端配置</h2><p><a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">simple-obfs</a> 是一个简单的混淆插件, 可以伪装成 <code>http</code> 流量。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 从 Github 下载源码进行编译</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">apt-get install --no-install-recommends build-essential autoconf libtool libssl-dev libpcre3-dev libev-dev asciidoc xmlto automake -y</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/shadowsocks/simple-obfs.git</span><br><span class="line"><span class="built_in">cd</span> simple-obfs</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure &amp;&amp; make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加配置文件, 添加 plugin 和 plugin_opts 参数</span></span><br><span class="line">sudo vim /opt/config/manager.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"port_password"</span>: &#123;</span><br><span class="line">    <span class="string">"443"</span> : <span class="string">"12345"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"fast_open"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"reuse_port"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"no_delay"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: 300,</span><br><span class="line">  <span class="string">"mode"</span>:<span class="string">"tcp_and_udp"</span>,</span><br><span class="line">  <span class="string">"method"</span>: <span class="string">"aes-256-gcm"</span>,</span><br><span class="line">  <span class="string">"plugin"</span>:<span class="string">"obfs-server"</span>,</span><br><span class="line">  <span class="string">"plugin_opts"</span>:<span class="string">"obfs=http;failover=apps.bdimg.com"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重启 shadowsocks-libev</span></span><br><span class="line">systemctl restart shadowsocks-libev</span><br></pre></td></tr></table></figure></p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p><code>win</code>: <a href="https://github.com/shadowsocks/simple-obfs/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/simple-obfs/releases</a><br>复制到客户端同一目录下, 并配置以下参数<br>插件程序: <code>obfs-local</code><br>插件选项: <code>obfs=http</code><br>插件参数: <code>obfs-host=apps.bdimg.com</code></p>
<p><code>android</code>: <a href="https://github.com/shadowsocks/simple-obfs-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/simple-obfs-android/releases</a></p>
<p>没有苹果设备, 不做研究。</p>
<h1 id="流量统计"><a href="#流量统计" class="headerlink" title="流量统计"></a>流量统计</h1><p><del><a href="https://github.com/shadowsocks/shadowsocks-manager" target="_blank" rel="noopener">shadowsocks-manager</a>要部署邮箱才行, 放弃.</del><br><del><a href="https://github.com/shadowsocks/shadowsocks-hub" target="_blank" rel="noopener">shadowsocks-hub</a>依赖于<a href="https://github.com/shadowsocks/shadowsocks-restful-api" target="_blank" rel="noopener">shadowsocks-restful-api</a>, 也是依赖于原生的<code>manager API</code>接口.(虽然我跑<code>docker</code>失败了)</del></p>
<p><code>shadowsocks-libev</code>提供了原生的<code>manager API</code>接口, 可以统计流量使用情况.接口文档在这里<a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/ss-manager.asciidoc#protocol" target="_blank" rel="noopener">protocol</a>.</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><p><code>BBR</code>需要内核<code>4.9</code>以上.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看内核</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启动BBR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></p>
<h2 id="部署一个正常的网站到80端口"><a href="#部署一个正常的网站到80端口" class="headerlink" title="部署一个正常的网站到80端口"></a>部署一个正常的网站到80端口</h2><p>也可以用来部署一些自己的<code>web</code>应用<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt install apache2 -y</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure></p>
<h2 id="封禁恶意访问IP"><a href="#封禁恶意访问IP" class="headerlink" title="封禁恶意访问IP"></a>封禁恶意访问IP</h2><p>使用 <code>fail2ban</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 fail2ban</span></span><br><span class="line">apt install fail2ban -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ssh 安全规则</span></span><br><span class="line">vim /etc/fail2ban/jail.d/ssh.conf</span><br><span class="line">[ssh-iptables]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter     = sshd</span><br><span class="line">action   = iptables[name=SSH, port=ssh, protocol=tcp]</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/secure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. apache 安全规则</span></span><br><span class="line">vim /etc/fail2ban/jail.d/apache.conf</span><br><span class="line">[apache-tcpwrapper]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter     = apache-auth</span><br><span class="line">action   = hostdeny</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/httpd/error_log</span><br><span class="line"></span><br><span class="line">[apache-badbots]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter     = apache-badbots</span><br><span class="line">action   = iptables-multiport[name=BadBots, pory=<span class="string">"http,https"</span>]</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line"></span><br><span class="line">[apache-shorewall]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter     = apache-noscript</span><br><span class="line">action   = shorewall</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/httpd/error_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 重启服务</span></span><br><span class="line">service fail2ban restart</span><br></pre></td></tr></table></figure></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>吐槽下, <code>libev</code>关于<code>config.json</code>的配置没有一个完整的<code>example</code>, 也没有<code>wiki</code>页, 还是我翻了下<code>issue</code>才发现了文档位置. 并且有些参数配置在<code>config.json</code>还没有对应位置.</p>
<p>开发者觉得我弄出来能用就好了, 不懂就去看源码全在那.<br>小白则是素质三连, 怎么用不了了, 报错了, 打不开怎么办.</p>
<p>开源不易, 珍惜每个用心写文档的开发者和每个用心写复现步骤的小白.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB学习笔记</title>
    <url>/posts/MongoDB_simple_use.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>mongodb</code>是一个<code>NoSQL</code>数据库, 可以分词查询, 可以基于地理位置查询, 记录以<code>JSON</code>形式存储.<br><code>mongodb</code>的数据表又叫做数据集合, 关键字为<code>collection</code>.<br><code>mongodb</code>是不存在<code>join</code>这个概念的, 所以一切的关联查询都得通过外部程序来做.</p>
<a id="more"></a>
<h1 id="安装配置-基于v3-4-18"><a href="#安装配置-基于v3-4-18" class="headerlink" title="安装配置(基于v3.4.18)"></a>安装配置(基于v3.4.18)</h1><p>安装教程: <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">Install MongoDB Community Edition on Red Hat Enterprise or CentOS Linux</a>(国内可以用阿里云<code>yum</code>镜像).<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"><span class="comment"># 2. 初始化</span></span><br><span class="line">mkdir -p /opt/mongodb/data/db /opt/mongodb/<span class="built_in">log</span></span><br><span class="line">cp /etc/mongod.conf /opt/mongodb/mongod.conf</span><br><span class="line"><span class="comment"># 3. 修改配置文件</span></span><br><span class="line">sed -i <span class="string">'s#/var/log/mongodb/mongod.log#/opt/mongodb/log/mongod.log#g'</span> /opt/mongodb/mongod.conf</span><br><span class="line">sed -i <span class="string">'s#/var/lib/mongo#/opt/mongodb/data/db#g'</span> /opt/mongodb/mongod.conf</span><br><span class="line">sed -i <span class="string">'s#/var/run/mongodb/mongod.pid#/opt/mongodb/mongod.pid#g'</span> /opt/mongodb/mongod.conf</span><br><span class="line"><span class="comment"># 4. 查看版本号</span></span><br><span class="line">mongod --version</span><br><span class="line"><span class="comment"># 5. 启动</span></span><br><span class="line">mongod -f /opt/mongodb/mongod.conf</span><br><span class="line"><span class="comment"># 6. 关闭</span></span><br><span class="line">mongo 127.0.0.1:27071/<span class="built_in">test</span></span><br><span class="line">use admin <span class="comment"># 使用 admin 数据库</span></span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></p>
<h1 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h1><h2 id="auth-用户名密码登录"><a href="#auth-用户名密码登录" class="headerlink" title="auth 用户名密码登录"></a>auth 用户名密码登录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建用户</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">"ahao"</span>,</span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">"ahao"</span>,</span><br><span class="line">  customData: &#123;msg:<span class="string">"我是一个新用户"</span>&#125;,</span><br><span class="line">  roles:[&#123;role:<span class="string">"dbOwner"</span>, db:<span class="string">"admin"</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">角色类型: <span class="built_in">read</span>、readWrite、dbAdmin、dbOwner、userAdmin</span><br><span class="line">dbOwner = <span class="built_in">read</span> + readWrite + dbAdmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 开启auth验证, 修改 /opt/mongodb/mongodb.conf</span></span><br><span class="line">system:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3. 启动, 查询所有用户</span></span><br><span class="line">mongod -f /opt/mongodb/mongodb.conf</span><br><span class="line">mongo 127.0.0.1:12345 -u ahao -p ahao</span><br><span class="line">use admin</span><br><span class="line">db.system.users.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 创建角色</span></span><br><span class="line">db.createRole(&#123;</span><br><span class="line">  _id: <span class="string">"唯一id"</span>,</span><br><span class="line">  role: <span class="string">"角色名"</span>,</span><br><span class="line">  db: <span class="string">"数据库名"</span>,</span><br><span class="line">  privileges: [</span><br><span class="line">    &#123; resource:&#123;db:<span class="string">"数据库名"</span>, collection:<span class="string">"集合名"</span>, actions:[允许执行的操作]&#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">  roles: [继承哪些角色]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="集群keyfile"><a href="#集群keyfile" class="headerlink" title="集群keyfile"></a>集群keyfile</h2><p>keyfile文件认证</p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><code>mongodb</code>数据库不用新建, 直接<code>use</code>, 数据库会在插入记录的时候自动创建数据库及数据集合.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 新建数据库(插入记录时自动创建数据库及数据集合)</span></span><br><span class="line">use test_db</span><br><span class="line">db.test_collection.insert(&#123;x:1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 显示数据库</span></span><br><span class="line">show dbs</span><br><span class="line">  admin   0.000GB</span><br><span class="line">  <span class="built_in">local</span>   0.000GB</span><br><span class="line">  test_db 0.000GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除数据库</span></span><br><span class="line">use test_db</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure></p>
<h1 id="表collection"><a href="#表collection" class="headerlink" title="表collection"></a>表collection</h1><p>同样, 数据表也是在插入时自动创建.<br>和关系型数据库不同, 不需要提前设置字段.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 切换到 test 数据库</span></span><br><span class="line">use test_db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建数据表(插入记录时自动创建)</span></span><br><span class="line">show collections <span class="comment"># 没有表</span></span><br><span class="line">db.test_collection.insert(&#123;x:1&#125;)</span><br><span class="line">show collections</span><br><span class="line">  test_collection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除数据表</span></span><br><span class="line">&gt; db.test_collection.drop()</span><br></pre></td></tr></table></figure></p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在<code>v3.0.0</code>后, <a href="https://docs.mongodb.com/manual/reference/method/db.collection.ensureIndex/" target="_blank" rel="noopener">官方文档</a>提到创建索引的函数<code>createIndex()</code>替换掉了<code>ensureIndex()</code>. 当然非要使用<code>ensureIndex()</code>也是可以的.<br>创建索引的格式: <code>db.集合名.createIndex({索引值}, {索引属性})</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">索引属性</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">默认</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center"><code>db.集合名.createIndex({索引值}, {name:&quot;索引名称&quot;})</code></td>
<td style="text-align:center"><code>字段名_1</code>或<code>字段名_-1</code></td>
</tr>
<tr>
<td style="text-align:center">唯一性</td>
<td style="text-align:center"><code>db.集合名.createIndex({索引值}, {unique:[true or false]})</code></td>
<td style="text-align:center"><code>false</code></td>
</tr>
<tr>
<td style="text-align:center">稀疏性</td>
<td style="text-align:center"><code>db.集合名.createIndex({索引值}, {sparse:[true or false]})</code></td>
<td style="text-align:center"><code>true</code>, 避免为插入记录不存在的字段创建索引</td>
</tr>
<tr>
<td style="text-align:center">是否定时删除</td>
<td style="text-align:center"><code>db.集合名.createIndex({索引值}, {expireAfterSeconds:秒数})</code></td>
<td style="text-align:center">不删除</td>
</tr>
</tbody>
</table>
<h2 id="没有属性的普通索引"><a href="#没有属性的普通索引" class="headerlink" title="没有属性的普通索引"></a>没有属性的普通索引</h2><table>
<thead>
<tr>
<th style="text-align:center">索引类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">创建方法(1为正序, -1为逆序)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>_id</code>索引</td>
<td style="text-align:center">自动创建的索引, 作为记录的唯一主键</td>
<td style="text-align:center"><code>db.test_collection.insert({name:1})</code></td>
</tr>
<tr>
<td style="text-align:center">单键索引</td>
<td style="text-align:center">为一个字段创建的索引, 字段值为<strong>单个</strong>元素</td>
<td style="text-align:center"><code>db.test_collection.createIndex({name:1})</code></td>
</tr>
<tr>
<td style="text-align:center">多键索引</td>
<td style="text-align:center">为一个字段创建的索引, 字段值为<strong>数组</strong>元素</td>
<td style="text-align:center"><code>db.test_collection.createIndex({class:1})</code></td>
</tr>
<tr>
<td style="text-align:center">复合索引</td>
<td style="text-align:center">为<strong>多个</strong>字段创建的索引</td>
<td style="text-align:center"><code>db.test_collection.createIndex({name:1, age:1})</code></td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 test 数据库</span></span><br><span class="line">use test_db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看索引, 格式: db.数据集合.getIndexes()</span></span><br><span class="line">db.test_collection.getIndexes()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. _id索引自动创建, 每条插入的数据都会自动生成一个`_id`字段, 作为`key`.</span></span><br><span class="line">db.test_collection.insert(&#123;name:<span class="string">"Tom"</span>, age:12, friends:[<span class="string">"Sum"</span>, <span class="string">"Kim"</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建索引, 格式: db.数据表.createIndex(&#123;索引字段: [1|-1]&#125;), 1为正序, -1为逆序</span></span><br><span class="line"><span class="comment">## 单个元素的单键索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;name:1&#125;)</span><br><span class="line"><span class="comment">## 多个元素的多键索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;friends:1&#125;)</span><br><span class="line"><span class="comment">## 多个字段的复合索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;name:1, age:1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 删除索引</span></span><br><span class="line">db.test_collection.dropIndex(<span class="string">"索引名"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="过期索引TTL"><a href="#过期索引TTL" class="headerlink" title="过期索引TTL"></a>过期索引TTL</h2><p>一定时间后会过期的索引, 存储的值必须是时间类型, 如<code>new Date()</code>. 如果是数组, 则取最小的时间.<br>一个字段不能同时有过期索引和复合索引. </p>
<p>当数据过期时, 对应的数据会自动删除. 但是<code>mongodb</code>删除任务<code>60</code>秒执行一次, 所以过期时间最好不要小于<code>60</code>秒.<br>适用于登录信息、日志信息、缓存等不重要的信息.<br>创建语法: <code>db.数据集合.createIndex({时间字段:1}, {expireAfterSeconds:秒数})</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化数据</span></span><br><span class="line">use test_db</span><br><span class="line">db.login_info.insert(&#123;name:<span class="string">"Tom"</span>, login_time:new Date()&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引, 10秒后过期</span></span><br><span class="line">db.login_info.createIndex(&#123;login_time:1&#125;, &#123;expireAfterSeconds:10&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待过期后, 查询不到过期数据</span></span><br><span class="line">db.login_info.find()</span><br></pre></td></tr></table></figure></p>
<h2 id="文本索引"><a href="#文本索引" class="headerlink" title="文本索引"></a>文本索引</h2><p>说是文本索引, 其实就是对选择的字段进行分词索引. 所选的字段可以一个, 也可以多个.<br>一个数据集只有一个文本索引, 且只能是字符串类型的字段.<br>查询文本索引时, 不允许使用<code>hint()</code>指定索引进行查询.<br>创建语法: <code>db.数据集合.createIndex({字段:&quot;text&quot;})</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个字段的文本索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;name:<span class="string">"text"</span>&#125;)</span><br><span class="line"><span class="comment"># 多个字段的文本索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;name:<span class="string">"text"</span>, address:<span class="string">"text"</span>&#125;)</span><br><span class="line"><span class="comment"># 所有字段的文本索引</span></span><br><span class="line">db.test_collection.createIndex(&#123;<span class="string">"$**"</span>:<span class="string">"text"</span>&#125;)</span><br></pre></td></tr></table></figure></p>
<p>查询语法, 多个关键字用空格分隔, 默认为<code>or</code>查询.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line">db.test_collection.find(&#123;</span><br><span class="line">  <span class="variable">$text</span>: &#123;</span><br><span class="line">    <span class="variable">$search</span>: 搜索字符串, </span><br><span class="line">    <span class="variable">$language</span>: 指定语言(社区版不支持中文),</span><br><span class="line">    <span class="variable">$caseSensitive</span>: 是否大小写敏感(默认<span class="literal">false</span>),</span><br><span class="line">    <span class="variable">$diacriticSensitive</span>: 是否区别发音符号(默认<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单个关键词, 匹配包含hello或world的文本</span></span><br><span class="line">db.test_collection.find(&#123;<span class="variable">$text</span>:&#123;<span class="variable">$search</span>:<span class="string">"hello world"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询单个关键词, 匹配包含hello world的文本</span></span><br><span class="line">db.test_collection.find(&#123;<span class="variable">$text</span>:&#123;<span class="variable">$search</span>:<span class="string">"\"hello world\""</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询多个关键词, 匹配包含hello且不包含world的文本</span></span><br><span class="line">db.test_collection.find(&#123;<span class="variable">$text</span>:&#123;<span class="variable">$search</span>:<span class="string">"hello -world"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询多个关键词, 查询包含ssl certificate 且 包含authority或key或ssl或certificate中任意一个 的文本</span></span><br><span class="line">db.test_collection.find(&#123;<span class="variable">$text</span>:&#123;<span class="variable">$search</span>:<span class="string">"\"ssl certificate\" authority key"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 文本相似度排序</span></span><br><span class="line">db.test_collection.find(&#123;<span class="variable">$text</span>:&#123;<span class="variable">$search</span>:<span class="string">"hello"</span>&#125;&#125;, &#123;score:&#123;<span class="variable">$meta</span>:<span class="string">"textScore"</span>&#125;&#125;).sort(&#123;score:&#123;<span class="variable">$meta</span>:<span class="string">"textScore"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="2d地理位置索引-平面"><a href="#2d地理位置索引-平面" class="headerlink" title="2d地理位置索引(平面)"></a>2d地理位置索引(平面)</h2><p>插入语法: <code>db.数据集合.insert({字段名:[经度(-180,180), 纬度(-90,90)]})</code><br>创建语法: <code>db.数据集合.createIndex({字段:&quot;2d&quot;},{min:最小值,max:最大值,bits:精度(默认26) })</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $near查询距离(10,20)最近的点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$near</span>:[10,20]&#125;&#125;)</span><br><span class="line"><span class="comment"># $near查询距离(10,20)最近的10个点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$near</span>:[10,20]&#125;&#125;).<span class="built_in">limit</span>(10)</span><br><span class="line"><span class="comment"># $near查询距离(10,20)最大距离为10的点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$near</span>:[10,20], <span class="variable">$maxDistance</span>:10&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $geoWithin 查询某个形状内的点</span></span><br><span class="line"><span class="comment"># 查询对角坐标为(1,2),(3,4)组成的矩形内的点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$box</span>:[[1,2],[3,4]]&#125;&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询圆心坐标为(1,2), 半径为3的圆内的点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$center</span>:[[1,2], 3]&#125;&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询坐标为(1,2),(1,10),(2,10),(1,5)组成的多边形内的点</span></span><br><span class="line">db.test_location.find(&#123;loc:&#123;<span class="variable">$geoWithin</span>:&#123;<span class="variable">$polygon</span>:[[1,2], [1,10], [2,10], [1,5]]&#125;&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回更多数据的查询</span></span><br><span class="line">db.runCommand(&#123;</span><br><span class="line">    geoNear: 集合名,</span><br><span class="line">    near: [x,y],</span><br><span class="line">    minDistance: 最小距离(对2d索引无效, 对2dsphere索引有效),</span><br><span class="line">    maxDistance: 最大距离</span><br><span class="line">    num: 数量</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="2dsphere地理位置索引-球面"><a href="#2dsphere地理位置索引-球面" class="headerlink" title="2dsphere地理位置索引(球面)"></a>2dsphere地理位置索引(球面)</h2><p>插入语法: <code>db.数据集合.insert({字段名:{type:&quot;Point&quot;,coordinates:[经度(-180,180), 纬度(-90,90)]}})</code><br>创建语法: <code>db.数据集合.createIndex({字段:&quot;2dsphere&quot;})</code><br>点用<code>GeoJSON</code>的形式表示, 参考<a href="https://docs.mongodb.com/manual/reference/geojson/" target="_blank" rel="noopener">GeoJSON Objects</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回更多数据的查询</span></span><br><span class="line">db.runCommand(&#123;</span><br><span class="line">    geoNear: 集合名,</span><br><span class="line">    near: GeoJSON形式的值,</span><br><span class="line">    minDistance: 最小距离(对2d索引无效, 对2dsphere索引有效),</span><br><span class="line">    maxDistance: 最大距离</span><br><span class="line">    num: 数量</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h1 id="插入更新删除"><a href="#插入更新删除" class="headerlink" title="插入更新删除"></a>插入更新删除</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 插入数据, 格式: db.数据表.insert(json);</span></span><br><span class="line"><span class="comment"># 插入单条数据</span></span><br><span class="line">&gt; db.test_collection.insert(&#123;name:<span class="string">"小明"</span>, age: 10&#125;)</span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line">&gt; <span class="keyword">for</span>(i=1;i&lt;3;i++) db.test_collection.insert(&#123;name:<span class="string">"name"</span>+i, age:i&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 更新数据, 格式: db.数据表.update(查询条件, 修改后的值, 是否不存在则插入, 是否批量更新);</span></span><br><span class="line"><span class="comment">## 会覆盖所有字段, age 字段会删除</span></span><br><span class="line">&gt; db.test_collection.update(&#123;name:<span class="string">"小明"</span>&#125;, &#123;name:<span class="string">"新名字"</span>&#125;)</span><br><span class="line"><span class="comment">## 只更新 name 字段, age 字段不会更新</span></span><br><span class="line">&gt; db.test_collection.update(&#123;name:<span class="string">"小明"</span>&#125;, &#123;<span class="variable">$set</span>&#123;name:<span class="string">"新名字"</span>&#125;&#125;)</span><br><span class="line"><span class="comment">## 不存在则插入数据</span></span><br><span class="line">&gt; db.test_collection.update(&#123;name:<span class="string">"小红"</span>&#125;, &#123;name:<span class="string">"新小红"</span>, age: 11&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">## 批量更新</span></span><br><span class="line">&gt; db.test_collection.update(&#123;age:10&#125;, &#123;<span class="variable">$set</span>&#123;age: 21&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除数据</span></span><br><span class="line">&gt; db.test_collection.remove(&#123;age:21&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">db.test_collection.find()</span><br><span class="line"><span class="comment"># 查询总数</span></span><br><span class="line">db.test_collection.find().count()</span><br><span class="line"><span class="comment"># 查询第4条到第7条数据, 按name倒序排序</span></span><br><span class="line">db.test_collection.find().skip(3).<span class="built_in">limit</span>(4).sort(&#123;name: -1&#125;)</span><br><span class="line"><span class="comment"># 查询一条数据</span></span><br><span class="line">db.test_collection.findOne(&#123;name:<span class="string">"小明"</span>&#125;)</span><br><span class="line"><span class="comment"># 查询存在某个字段的记录</span></span><br><span class="line">&gt; db.test_collection.find(&#123;x:&#123;<span class="variable">$exists</span>:<span class="literal">true</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 按写入顺序逆序10条记录</span></span><br><span class="line">&gt; db.test_collection.find().sort(&#123;<span class="variable">$natural</span>:-1&#125;).<span class="built_in">limit</span>(10)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>自动转型带来的NoSuchMethodError</title>
    <url>/posts/NoSuchMethodError_caused_by_Automatic_Type_Conversion.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>更新了<code>core</code>包里的通用方法, 结果本地代码没问题, 线上代码<code>500</code>, 看了下<code>localhost.log</code>, 发现报<code>NoSuchMethodError</code>. 特此记录下。</p>
<a id="more"></a>
<h1 id="重现步骤"><a href="#重现步骤" class="headerlink" title="重现步骤"></a>重现步骤</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">10</span>;</span><br><span class="line">        Utils.test(page,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span>+page+<span class="string">", pageSize:"</span>+pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译<code>javac Main.java Utils.java</code><br>运行<code>java Main</code>后输出<code>page:1, pageSize:10</code><br>修改<code>Utils</code>代码, 将<code>int</code>改为<code>long</code>, <code>Main</code>不用改动<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Utils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> page, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第"</span>+page+<span class="string">"页, 分页大小为"</span>+pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>只编译<code>Utils</code>, 执行<code>javac Utils.java</code><br>然后运行<code>java Main</code>, 抛出<code>NoSuchMethodError</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: Utils.test(II)V</span><br><span class="line">        at Main.main(Main.java:5)</span><br></pre></td></tr></table></figure></p>
<p>重新同时编译两个文件<code>javac Main.java Utils.java</code><br>运行<code>java Main</code>后又成功输出<code>page:1, pageSize:10</code></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>先把修改前的<code>class</code>文件反编译, 得到如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var2 = <span class="number">10</span>;</span><br><span class="line">        Utils.test(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utils.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> var0, <span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span> + var0 + <span class="string">", pageSize:"</span> + var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将<code>Utils</code>的<code>int</code>转为<code>long</code>之后进行反编译得到如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var2 = <span class="number">10</span>;</span><br><span class="line">        Utils.test(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utils.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> var0, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span> + var0 + <span class="string">", pageSize:"</span> + var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同时编译<code>Main.java</code>和<code>Utils.java</code>之后进行反编译得到如下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var2 = <span class="number">10</span>;</span><br><span class="line">        Utils.test((<span class="keyword">long</span>)var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utils.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> var0, <span class="keyword">int</span> var2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span> + var0 + <span class="string">", pageSize:"</span> + var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对比可以看到, 正常执行的代码, <code>page</code>参数的类型是对应的, 自动转型其实是在编译的时候对其进行了强制转换.<br>当我们修改了方法参数类型后, 只编译部署<code>Utils.class</code>后, <code>Main</code>就找不到符合<code>test(int, int)</code>的方法, 因为<code>Utils.class</code>只有<code>test(long, int)</code>方法。<br>而当我们两个类都进行编译时, <code>Main</code>检测到<code>Utills.class</code>没有<code>test(int, int)</code>, 就会自动在调用的方法里加上强制类型转换<code>(long) var1</code>.</p>
<h1 id="发生的情景"><a href="#发生的情景" class="headerlink" title="发生的情景"></a>发生的情景</h1><p>一般发生在增量更新的项目里面, 本地编译了<code>class</code>文件, 只替换服务器上对应的文件, 如果是全量更新的项目, 则不会出现这个问题。</p>
<h1 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h1><p>有两种方法</p>
<ol>
<li>全量更新</li>
<li>保留旧的代码, 添加<code>@Deprecated</code>注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Utils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span>+page+<span class="string">", pageSize:"</span>+pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> page, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"page:"</span>+page+<span class="string">", pageSize:"</span>+pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置多个域名</title>
    <url>/posts/Nginx_configures_multiple_server_name.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>解决<code>Cookie</code>跨域请求的时候, 发现这样一个<a href="https://scripts.cmbuckley.co.uk/cookies.php" target="_blank" rel="noopener">网站scripts.cmbuckley.co.uk</a>, 它拥有无限的子域名, 比如<code>a.scripts.cmbuckley.co.uk</code>、<code>b.scripts.cmbuckley.co.uk</code>、<code>hhhhh.scripts.cmbuckley.co.uk</code>.</p>
<a id="more"></a>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>这里用本地环境测试, 在虚拟机搭建一个<code>Nginx</code>服务器.<br><code>Nginx</code>的<code>server_name</code>在<code>server</code>块里面配置, 用于配置基于名称的虚拟主机。<br>比如<code>/etc/nginx/conf.d/default.conf</code>中配置的就是<code>localhost</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们修改<code>hosts</code>, 把<code>localhost</code>指向服务器的<code>IP</code>, 然后访问<code>http://localhost:80</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.94.189 localhost</span><br></pre></td></tr></table></figure></p>
<p>浏览器发送的请求头会携带一个<code>Host</code>参数<code>localhost</code>, <code>Nginx</code>根据这个<code>Host</code>将请求分发到名为<code>localhost</code>的<code>server</code>进行处理。<br>如果有多个<code>server</code>, 则会按从上到下的顺序一个个匹配, 如果都匹配不到, 则默认交给第一个请求, 或者也可以指定<code>default_server</code>.</p>
<h1 id="各种server-name"><a href="#各种server-name" class="headerlink" title="各种server_name"></a>各种server_name</h1><p><code>server_name</code>支持精确匹配, 支持通配符匹配, 支持正则匹配<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_name  domain.com  www.domain.com;</span><br><span class="line">server_name  *.domain.com;</span><br><span class="line">server_name  domain.*;</span><br><span class="line">server_name  ~^(?.+)\.domain\.com$;</span><br></pre></td></tr></table></figure></p>
<p>很明显, 上面提到的无限子域名的网站, 是通过<code>*.domain.com</code>的方式实现的.<br><code>Nginx</code>配好后, 记得<code>hosts</code>文件也要改, 手头没有域名, 就只能改<code>hosts</code>了.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.51cto.com/onlyzq/535279" target="_blank" rel="noopener">关于Nginx的server_name</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP的编译流程</title>
    <url>/posts/JSP_compile_and_load.html</url>
    <content><![CDATA[<h1 id="情景还原"><a href="#情景还原" class="headerlink" title="情景还原"></a>情景还原</h1><p>用<code>Spring Boot</code>简单搭建环境, 建一个<code>Controller</code>以及两个<code>JSP</code>页面。<br>发现<code>/test1</code>页面<code>404</code>不能访问, 而<code>/test2</code>可以访问。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/views/IE10+.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/views/IE10.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p><code>JSP</code>是本质一个<code>Java</code>文件, 所以命名也需要遵循<code>Java</code>命名规则, <code>+</code>加号对<code>Java</code>命名规则来说是一个非法字符。<br>所以<code>IE10+.jsp</code>对应的<code>java</code>文件是不存在的, 自然也就<code>404</code>了。<br>我在<code>$CATALINA_BASE/work/Catalina/localhost/web/org/apache/jsp/WEB_002dINF/views/</code>下只看到了<code>IE10_jsp.java</code>和<code>IE10_jsp.class</code>这两个文件。</p>
<h1 id="JSP编译流程"><a href="#JSP编译流程" class="headerlink" title="JSP编译流程"></a>JSP编译流程</h1><ol>
<li>客户端请求<code>JSP</code>文件.</li>
<li><code>Servlet</code>容器将请求交给<code>org.apache.jasper.servlet.JspServlet</code>处理, 具体配置在<code>Tomcat</code>的<code>conf/web.xml</code>中.</li>
<li><code>JspServlet</code>生成<code>java</code>文件, 编译为<code>class</code>文件, 加载到<code>ClassLoader</code>, 加入缓存中.</li>
<li>调用生成的<code>Servlet</code>的<code>service</code>方法处理请求.</li>
</ol>
<h1 id="基于Tomcat-8-5-35的源码分析"><a href="#基于Tomcat-8-5-35的源码分析" class="headerlink" title="基于Tomcat 8.5.35的源码分析"></a>基于Tomcat 8.5.35的源码分析</h1><p><img src="https://yuml.me/diagram/nofunky/class/[&lt;&lt;PeriodicEventListener&gt;&gt;;interface]^-[JspServlet], [HttpServlet]^-[JspServlet]" alt="继承树"><br><code>JspServlet</code>继承了<code>HttpServlet</code>, 并实现了<code>PeriodicEventListener</code>接口, 这个接口暂时不管它, <code>HttpServlet</code>在我<a href="https://ahaochan.github.io/posts/HttpServlet_source_code.html" target="_blank" rel="noopener">另一篇文章</a>中有做源码解析。</p>
<h2 id="重写了继承树上GenericServlet的方法"><a href="#重写了继承树上GenericServlet的方法" class="headerlink" title="重写了继承树上GenericServlet的方法"></a>重写了继承树上GenericServlet的方法</h2><p><code>JspServlet</code>重写了<code>GenericServlet</code>的两个方法.<br>默认情况下, 只做了一件事, 对<code>JspRuntimeContext</code>的实例进行初始化和销毁.</p>
<ol>
<li><code>public void init(ServletConfig config);</code> 初始化方法, 默认只初始化<code>JspRuntimeContext</code>的实例</li>
<li><code>public void destroy();</code> 销毁方法, 销毁<code>JspRuntimeContext</code>的实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">PeriodicEventListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletContext context;</span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Options options;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> JspRuntimeContext rctxt;</span><br><span class="line">    <span class="keyword">private</span> String jspFile;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(config);</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.context = config.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略部分代码, 默认不执行的代码</span></span><br><span class="line">        options = <span class="keyword">new</span> EmbeddedServletOptions(config, context);</span><br><span class="line">        rctxt = <span class="keyword">new</span> JspRuntimeContext(context, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rctxt.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="重写了HttpServlet的service方法"><a href="#重写了HttpServlet的service方法" class="headerlink" title="重写了HttpServlet的service方法"></a>重写了HttpServlet的service方法</h2><p><code>service</code>方法是实际处理请求的逻辑方法。这里不对<code>include</code>等特殊情况做分析.<br>首先会判断请求参数是否携带<code>jsp_precompile</code>参数, 如果有的话就标记成预编译, 交给后面的核心代码使用.<br>然后再从缓存中获取<code>JspServletWrapper</code>实例, 没有则创建.<br>最后交给<code>JspServletWrapper</code>的<code>service</code>去执行核心代码.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">PeriodicEventListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletContext context;</span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Options options;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> JspRuntimeContext rctxt;</span><br><span class="line">    <span class="keyword">private</span> String jspFile;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jspFile may be configured as an init-param for this servlet instance</span></span><br><span class="line">        String jspUri = request.getServletPath();</span><br><span class="line">        String pathInfo = request.getPathInfo();</span><br><span class="line">        <span class="keyword">if</span> (pathInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jspUri += pathInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据 jsp_precompile 参数是否存在, 判断是否需要进行预编译</span></span><br><span class="line">        <span class="keyword">boolean</span> precompile = preCompile(request);</span><br><span class="line">        <span class="comment">// 处理请求</span></span><br><span class="line">        serviceJspFile(request, response, jspUri, precompile);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serviceJspFile</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String jspUri, <span class="keyword">boolean</span> precompile)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 从 JspRuntimeContext 缓存中获取 JspServlet包装类, 双重锁避免高并发问题</span></span><br><span class="line">        JspServletWrapper wrapper = rctxt.getWrapper(jspUri);</span><br><span class="line">        <span class="keyword">if</span> (wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                wrapper = rctxt.getWrapper(jspUri);</span><br><span class="line">                <span class="keyword">if</span> (wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 判断请求的JSP是否存在, 避免创建无用的JspServletWwrapper</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == context.getResource(jspUri)) &#123;</span><br><span class="line">                        handleMissingResource(request, response, jspUri);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    wrapper = <span class="keyword">new</span> JspServletWrapper(config, options, jspUri, rctxt);</span><br><span class="line">                    <span class="comment">// 加入 JspRuntimeContext 缓存</span></span><br><span class="line">                    rctxt.addWrapper(jspUri,wrapper);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 核心处理代码</span></span><br><span class="line">            wrapper.service(request, response, precompile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">            handleMissingResource(request, response, jspUri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="生成Java文件并编译"><a href="#生成Java文件并编译" class="headerlink" title="生成Java文件并编译"></a>生成Java文件并编译</h2><p><code>options.getDevelopment()</code>这个变量是写在<code>web.xml</code>的<code>JspServlet</code>里, 通过<code>ServletConfig</code>的<code>getInitParameter(&quot;development&quot;)</code>方法获取. <code>web.xml</code>中没有进行配置, 所以默认为<code>true</code>.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServletWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServletWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JspCompilationContext ctxt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> mustCompile = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Options options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="keyword">boolean</span> precompile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="comment">// (1) 编译, mustCompile默认为true, options.getDevelopment()默认为true</span></span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="keyword">if</span> (options.getDevelopment() || mustCompile) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.getDevelopment() || mustCompile) &#123;</span><br><span class="line">                    <span class="comment">// The following sets reload to true, if necessary</span></span><br><span class="line">                    ctxt.compile();</span><br><span class="line">                    mustCompile = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ==================省略部分代码==================</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>JspServletWrapper</code>的<code>service</code>调用了<code>JspCompilationContext</code>的<code>compile</code>方法.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.JspCompilationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspCompilationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">()</span> <span class="keyword">throws</span> JasperException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取编译器</span></span><br><span class="line">        createCompiler();</span><br><span class="line">        <span class="comment">// 2. 判断是否需要重新将 JSP 转为 java 文件, 并编译为 class 文件</span></span><br><span class="line">        <span class="keyword">if</span> (jspCompiler.isOutDated()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isRemoved()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(jspUri);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3. 先删除上次生成的 class 文件, 后删除 java 文件</span></span><br><span class="line">            jspCompiler.removeGeneratedFiles();</span><br><span class="line">            jspLoader = <span class="keyword">null</span>; <span class="comment">// 清空 ClassLoader, 为了进行 JSP 热部署</span></span><br><span class="line">            <span class="comment">// 4. 重新生成 java 文件, 后编译为 class 文件</span></span><br><span class="line">            jspCompiler.compile();</span><br><span class="line">            jsw.setReload(<span class="keyword">true</span>); <span class="comment">// 设置重新加载 Servlet 的标识</span></span><br><span class="line">            jsw.setCompilationException(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分捕获异常的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第一步, <code>createCompiler();</code>先获取编译器</p>
<ol>
<li>判断<code>web.xml</code>里的<code>JspServlet</code>有没有定义编译器的类名<code>compilerClassName</code>, 有则创建</li>
<li>判断<code>web.xml</code>里的<code>JspServlet</code>有没有定义<code>compiler</code>, 有则先创建<code>JDTCompiler</code>编译器, 否则先创建<code>AntCompiler</code>. 创建失败则尝试创建两者的另一个编译器.</li>
<li>都创建失败, 则抛出异常</li>
</ol>
<p>第二步, <code>jspCompiler.isOutDated()</code>比较<code>JSP</code>的最后修改时间和对应的<code>class</code>文件<br>最后修改时间, 过时则重新编译.  可以在<code>web.xml</code>里的<code>JspServlet</code>配置<code>modificationTestInterval</code>参数, 指定一定秒数内<code>return false</code>, 不进行重新编译.</p>
<p>第三步, 先删除上次生成的<code>class</code>文件, 后删除<code>java</code>文件。<br>第四步, 调用之前获取到的编译器的<code>compile</code>方法生成<code>java</code>文件, 并编译为<code>class</code>文件.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.compiler.Compiler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, JasperException, Exception </span>&#123;</span><br><span class="line">        compile(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(<span class="keyword">boolean</span> compileClass)</span> <span class="keyword">throws</span> FileNotFoundException, JasperException, Exception </span>&#123;</span><br><span class="line">        compile(compileClass, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compile</span><span class="params">(<span class="keyword">boolean</span> compileClass, <span class="keyword">boolean</span> jspcMode)</span> <span class="keyword">throws</span> FileNotFoundException, JasperException, Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 生成 java 文件</span></span><br><span class="line">        String[] smap = generateJava();</span><br><span class="line">        File javaFile = <span class="keyword">new</span> File(ctxt.getServletJavaFileName());</span><br><span class="line">        Long jspLastModified = ctxt.getLastModified(ctxt.getJspFile());</span><br><span class="line">        javaFile.setLastModified(jspLastModified.longValue());</span><br><span class="line">        <span class="keyword">if</span> (compileClass) &#123;</span><br><span class="line">            <span class="comment">// 2. 编译为 class 文件, 交给子类实现, 如 AntCompiler、JDTCompiler</span></span><br><span class="line">            generateClass(smap);</span><br><span class="line">            <span class="comment">// Fix for bugzilla 41606</span></span><br><span class="line">            <span class="comment">// Set JspServletWrapper.servletClassLastModifiedTime after successful compile</span></span><br><span class="line">            File targetFile = <span class="keyword">new</span> File(ctxt.getClassFileName());</span><br><span class="line">            <span class="keyword">if</span> (targetFile.exists()) &#123;</span><br><span class="line">                targetFile.setLastModified(jspLastModified.longValue());</span><br><span class="line">                <span class="keyword">if</span> (jsw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    jsw.setServletClassLastModifiedTime(</span><br><span class="line">                            jspLastModified.longValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="获取-Servlet"><a href="#获取-Servlet" class="headerlink" title="获取 Servlet"></a>获取 Servlet</h2><p>同样是<code>JspServletWrapper</code>的<code>service</code>方法, 在编译出了<code>class</code>文件后, 就应该要将<code>class</code>加载到<code>ClassLoader</code>里了。<br>在之前提到的<code>JspCompilationContext</code>的<code>compile</code>方法里, 将<code>JSP</code>的<code>ClassLoader</code>变量<code>jspLoader</code>设置为了<code>null</code>. 因为一个<code>ClassLoader</code>不能加载两个相同的类, 所以要一个新的<code>ClassLoader</code>进行热部署<code>JSP</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServletWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServletWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Servlet theServlet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="keyword">boolean</span> precompile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="comment">// (2) (重新)加载 servlet class 文件</span></span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        Servlet servlet = getServlet();</span><br><span class="line">        <span class="comment">// 如果请求参数 jsp_precompile 存在, 则不执行之后的代码</span></span><br><span class="line">        <span class="keyword">if</span> (precompile) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Servlet <span class="title">getServlet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getReloadInternal() || theServlet == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// Synchronizing on jsw enables simultaneous loading</span></span><br><span class="line">                <span class="comment">// of different pages, but not the same page.</span></span><br><span class="line">                <span class="keyword">if</span> (getReloadInternal() || theServlet == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 1. 先销毁旧的 Servlet</span></span><br><span class="line">                    destroy();</span><br><span class="line">                    <span class="comment">// 2. 加载 class 并反射创建 Servlet, 这里的 JspLoader 在之前设置为 null, 所以这里会 new 一个 JspLoader</span></span><br><span class="line">                    InstanceManager instanceManager = InstanceManagerFactory.getInstanceManager(config);</span><br><span class="line">                    <span class="comment">// fqcn 是  Full Qualified Class Name 的缩写</span></span><br><span class="line">                    Servlet servlet = (Servlet) instanceManager.newInstance(ctxt.getFQCN(), ctxt.getJspLoader());</span><br><span class="line">                    <span class="comment">// 3. 初始化 Servlet</span></span><br><span class="line">                    servlet.init(config);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4. JSP 重载数量+1</span></span><br><span class="line">                    <span class="keyword">if</span> (theServlet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ctxt.getRuntimeContext().incrementJspReloadCount();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    theServlet = servlet;</span><br><span class="line">                    reload = <span class="keyword">false</span>; <span class="comment">// 编译时会重新设置为 true, 用于进入此 if</span></span><br><span class="line">                    <span class="comment">// Volatile 'reload' forces in order write of 'theServlet' and new servlet object</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> theServlet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="限制-JSP-加载数量-选读"><a href="#限制-JSP-加载数量-选读" class="headerlink" title="限制 JSP 加载数量(选读)"></a>限制 JSP 加载数量(选读)</h2><p>默认不执行这段代码, 属于程序优化部分, 比较简单, 就是对一个队列进行先进先出的操作。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServletWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServletWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadAllowed; <span class="comment">// web.xml 的 JspServlet 的 maxLoadedJsps  参数配置, 大于0则为true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadByIdle;  <span class="comment">// web.xml 的 JspServlet 的 jspIdleTimeout 参数配置, 大于0则为true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadByCount; <span class="comment">// 值为 unloadAllowed || unloadByIdle</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="keyword">boolean</span> precompile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="comment">// (3) 限制 JSP 数量, 先进先出的队列</span></span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="keyword">if</span> (unloadAllowed) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (unloadByCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (unloadHandle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        unloadHandle = ctxt.getRuntimeContext().push(<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastUsageTime &lt; ctxt.getRuntimeContext().getLastJspQueueUpdate()) &#123;</span><br><span class="line">                        <span class="comment">// 核心代码, 移除队列中的 JSP 缓存</span></span><br><span class="line">                        ctxt.getRuntimeContext().makeYoungest(unloadHandle);</span><br><span class="line">                        lastUsageTime = System.currentTimeMillis();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastUsageTime &lt; ctxt.getRuntimeContext().getLastJspQueueUpdate()) &#123;</span><br><span class="line">                        lastUsageTime = System.currentTimeMillis();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="JSP-生成的-Servlet-进行处理请求"><a href="#JSP-生成的-Servlet-进行处理请求" class="headerlink" title="JSP 生成的 Servlet 进行处理请求"></a>JSP 生成的 Servlet 进行处理请求</h2><p>终于到了我们熟悉的环节, 调用创建的<code>Servlet</code>的<code>service</code>方法, 处理请求.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.apache.jasper.servlet.JspServletWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspServletWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadAllowed; <span class="comment">// web.xml 的 JspServlet 的 maxLoadedJsps  参数配置, 大于0则为true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadByIdle;  <span class="comment">// web.xml 的 JspServlet 的 jspIdleTimeout 参数配置, 大于0则为true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> unloadByCount; <span class="comment">// 值为 unloadAllowed || unloadByIdle</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="keyword">boolean</span> precompile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="comment">// (4) 执行创建的 Servlet 的 service 方法</span></span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">        <span class="keyword">if</span> (servlet <span class="keyword">instanceof</span> SingleThreadModel) &#123;</span><br><span class="line">            <span class="comment">// sync on the wrapper so that the freshness</span></span><br><span class="line">            <span class="comment">// of the page is determined right before servicing</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                servlet.service(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            servlet.service(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// =========================================</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="一个简单的Hello-world"><a href="#一个简单的Hello-world" class="headerlink" title="一个简单的Hello world"></a>一个简单的Hello world</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.jsp.WEB_002dINF.views.upload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IE10_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceDependent</span>,</span></span><br><span class="line"><span class="class">                 <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> javax.servlet.jsp.JspFactory _jspxFactory =</span><br><span class="line">          javax.servlet.jsp.JspFactory.getDefaultFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; _jspx_dependants;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_packages;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_classes;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    _jspx_imports_packages = <span class="keyword">new</span> java.util.HashSet&lt;&gt;();</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">"javax.servlet"</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">"javax.servlet.http"</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">"javax.servlet.jsp"</span>);</span><br><span class="line">    _jspx_imports_classes = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> javax.el.ExpressionFactory _el_expressionfactory;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> org.apache.tomcat.InstanceManager _jsp_instancemanager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; getDependants() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_dependants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Set&lt;java.lang.String&gt; getPackageImports() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_imports_packages;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Set&lt;java.lang.String&gt; getClassImports() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_imports_classes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> javax.el.<span class="function">ExpressionFactory <span class="title">_jsp_getExpressionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_el_expressionfactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_el_expressionfactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _el_expressionfactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> org.apache.tomcat.<span class="function">InstanceManager <span class="title">_jsp_getInstanceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_jsp_instancemanager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_jsp_instancemanager == <span class="keyword">null</span>) &#123;</span><br><span class="line">          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _jsp_instancemanager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> java.lang.String _jspx_method = request.getMethod();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"GET"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"POST"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"HEAD"</span>.equals(_jspx_method) &amp;&amp; !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;</span><br><span class="line">      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="string">"JSPs only permit GET POST or HEAD"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      			<span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// =========================== 输出代码 =====================================</span></span><br><span class="line">      out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;html&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;body&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"Hello world\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;/body&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;/html&gt;\r\n"</span>);</span><br><span class="line">      <span class="comment">// =========================== 输出代码 =====================================</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.lang.Throwable t) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> javax.servlet.jsp.SkipPageException))&#123;</span><br><span class="line">        out = _jspx_out;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">              out.flush();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              out.clearBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (_jspx_page_context != <span class="keyword">null</span>) _jspx_page_context.handlePageException(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _jspxFactory.releasePageContext(_jspx_page_context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://shenzhang.github.io/blog/2013/06/26/recompile-and-redeploy-in-jsp/" target="_blank" rel="noopener">Jsp的编译过程和热部署原理</a></li>
<li><a href="https://www.jianshu.com/p/01805c2a1036" target="_blank" rel="noopener">JSP 热部署 源码解析</a></li>
<li><a href="https://blog.csdn.net/hwcptbtptp/article/details/78270243" target="_blank" rel="noopener">FQCN是什么鬼</a></li>
<li><a href="https://stackoverflow.com/questions/53511441" target="_blank" rel="noopener">Why Spring Boot cannot parse view with + symbol?</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Servlet</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的资源限制ulimit命令</title>
    <url>/posts/ulimit_Command_of_Linux.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>ulimit</code>是一个<code>Linux</code>命令, 用于限制<code>shell</code>进程及其子进程的系统资源使用。通俗且不严谨的讲，就是限制登录用户能一次性打开多少个进程，多少个文件等等。</p>
<blockquote>
<p>假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。</p>
</blockquote>
<a id="more"></a>
<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><p><code>ulimit</code>限制分为<code>soft</code>软上限和<code>hard</code>硬上限, 使用<code>ulimit</code>命令默认修改<code>soft</code>软上限。</p>
<ul>
<li><code>soft</code>软上限: 任何进程都可以修改软上限，但是软上限不能超过硬上限</li>
<li><code>hard</code>硬上限: 普通进程可以降低硬上限，只有<code>root</code>可以提高硬上限</li>
</ul>
<p>命令格式: <code>ulimit [options] [limit]</code></p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>options</code>参数</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-H</code></td>
<td style="text-align:center">设置硬资源限制, 一旦设置不能增加。</td>
<td style="text-align:center"><code>ulimit -Hs 64</code> 限制硬资源, 线程栈大小为 64K。</td>
</tr>
<tr>
<td style="text-align:center"><code>-S</code></td>
<td style="text-align:center">设置软资源限制, 设置后可以增加, 但是不能超过硬资源设置。</td>
<td style="text-align:center"><code>ulimit -Sn 32</code> 限制软资源, 32 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:center"><code>-a</code></td>
<td style="text-align:center">显示当前所有的 limit 信息, 默认显示软上限。</td>
<td style="text-align:center"><code>ulimit -a</code> 显示当前所有的 limit 信息。</td>
</tr>
<tr>
<td style="text-align:center"><code>-c</code></td>
<td style="text-align:center">最大的 core 文件的大小, 以 blocks 为单位。</td>
<td style="text-align:center"><code>ulimit -c unlimited</code>  对生成的 core 文件的大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:center"><code>-d</code></td>
<td style="text-align:center">进程最大的数据段的大小, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -d unlimited</code> 对进程的数据段大小不进行限制。</td>
</tr>
<tr>
<td style="text-align:center"><code>-f</code></td>
<td style="text-align:center">进程可以创建文件的最大值, 以 blocks 为单位。</td>
<td style="text-align:center"><code>ulimit -f 2048</code> 限制进程可以创建的最大文件大小为 2048 blocks。</td>
</tr>
<tr>
<td style="text-align:center"><code>-l</code></td>
<td style="text-align:center">最大可加锁内存大小, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -l 32</code> 限制最大可加锁内存大小为 32 Kbytes。</td>
</tr>
<tr>
<td style="text-align:center"><code>-m</code></td>
<td style="text-align:center">最大内存大小, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -m unlimited</code> 对最大内存不进行限制。</td>
</tr>
<tr>
<td style="text-align:center"><code>-n</code></td>
<td style="text-align:center">可以打开最大文件描述符的数量。</td>
<td style="text-align:center"><code>ulimit -n 128</code> 限制最大可以使用 128 个文件描述符。</td>
</tr>
<tr>
<td style="text-align:center"><code>-p</code></td>
<td style="text-align:center">管道缓冲区的大小, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -p 512</code> 限制管道缓冲区的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:center"><code>-s</code></td>
<td style="text-align:center">线程栈大小, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -s 512</code> 限制线程栈的大小为 512 Kbytes。</td>
</tr>
<tr>
<td style="text-align:center"><code>-t</code></td>
<td style="text-align:center">最大的 CPU 占用时间, 以秒为单位。</td>
<td style="text-align:center"><code>ulimit -t unlimited</code> 对最大的 CPU 占用时间不进行限制。</td>
</tr>
<tr>
<td style="text-align:center"><code>-u</code></td>
<td style="text-align:center">用户最大可用的进程数。</td>
<td style="text-align:center"><code>ulimit -u 64</code> 限制用户最多可以使用 64 个进程。</td>
</tr>
<tr>
<td style="text-align:center"><code>-v</code></td>
<td style="text-align:center">进程最大可用的虚拟内存, 以 Kbytes 为单位。</td>
<td style="text-align:center"><code>ulimit -v 200000</code> 限制最大可用的虚拟内存为 200000 Kbytes。</td>
</tr>
</tbody>
</table>
<h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><p><strong>对登录用户进行限制</strong></p>
<ol>
<li>在<code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>~/.bash_profile</code>、<code>~/.bashrc</code>文件中写入<code>ulimit</code>命令。</li>
<li>直接在控制台输入<code>ulimit</code>命令, 这是临时配置, 重启失效。</li>
</ol>
<p><strong>对应用程序进行限制</strong></p>
<ol>
<li>对<code>Tomcat</code>进行限制, 编写启动脚本<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -s 512;</span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>对多个用户或用户组进行限制</strong></p>
<ol>
<li>在<code>/etc/security/limits.conf</code>中输入<code>&lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt;</code>, 每一行一个限制。<blockquote>
<p>domain 表示用户或者组的名字，还可以使用 * 作为通配符。Type 可以有两个值，soft 和 hard。Item 则表示需要限定的资源，可以有很多候选值，如 stack，cpu，nofile 等等，分别表示最大的堆栈大小，占用的 cpu 时间，以及打开的文件数。通过添加对应的一行描述，则可以产生相应的限制</p>
</blockquote>
</li>
</ol>
<p><strong>对系统全局的进程进行限制</strong></p>
<ol>
<li>修改<code>/proc</code>下的文件</li>
</ol>
<h1 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h1><ol>
<li><code>ulimit -a</code>: 查看当前 <code>shell</code> 的所有资源限制，默认显示软限制</li>
<li><code>ulimit -Sa</code>: 查看当前 <code>shell</code> 的所有资源限制，<code>-S</code> 表示显示软限制</li>
<li><code>ulimit -Ha</code>: 查看当前 <code>shell</code> 的所有资源限制，<code>-H</code> 表示显示硬限制</li>
<li><code>ulimit -n</code>: 显示当前可打开的文件描述符数量，软限制</li>
<li><code>ulimit -Hn</code>: 显示当前可打开的文件描述符数量，硬限制</li>
<li><code>ulimit -n 10240</code>: 修改可打开的文件描述符数为 <code>10240</code>，默认软限制，除非指明参数 <code>H</code></li>
<li><code>ulimit -Hn 51200</code>: 修改可打开的文件描述符数为 <code>51200</code>，硬限制(如果是提高硬限制，则需要 <code>root</code> 权限)</li>
<li><code>ulimit -s 102400</code>: 修改堆栈大小的软限制为 <code>102400 kbytes</code> 即 <code>100 MB</code></li>
<li><code>ulimit -Hs unlimited</code>: 修改堆栈大小的硬限制为 <code>unlimited</code>，即不限制上限</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-ulimit/index.html" target="_blank" rel="noopener">通过 ulimit 改善系统性能</a></li>
<li><a href="https://www.zfl9.com/ulimit.html" target="_blank" rel="noopener">Linux ulimit详解</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库查询出的数据转为树形结构</title>
    <url>/posts/The_database_records_converted_to_tree_structure..html</url>
    <content><![CDATA[<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><p>假设有以下数据, 要建立树形结构<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id    pid    name</span><br><span class="line">6      5     node6</span><br><span class="line">5      2     node5</span><br><span class="line">4      2     node4</span><br><span class="line">3      1     node3</span><br><span class="line">2      0     node2</span><br><span class="line">1      0     node1</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    List&lt;TreeNode&gt; subTree;</span><br><span class="line">    <span class="comment">// 省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库查出的都是<code>List</code>集合, 要转成树形结构只能用<code>Java</code>代码实现。<br>转化的方式有两种</p>
<ol>
<li>先查询出根节点, 再用<code>pid</code>递归查询数据库</li>
<li>一次性查出所有的记录, 然后用<code>Java</code>代码组装树形结构</li>
</ol>
<h1 id="递归查询数据库-不推荐-耗时长"><a href="#递归查询数据库-不推荐-耗时长" class="headerlink" title="递归查询数据库(不推荐, 耗时长)"></a>递归查询数据库(不推荐, 耗时长)</h1><p>这种方法编写方便, 但是要进行频繁的数据库<code>IO</code>, 所以不推荐使用。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface DAO &#123;</span><br><span class="line">    List&lt;TreeNode&gt; getByPid(int pid);</span><br><span class="line">&#125;</span><br><span class="line">public class TestService &#123;</span><br><span class="line">    private DAO dao = new DAO();</span><br><span class="line">    public List&lt;TreeNode&gt; getTree() &#123;</span><br><span class="line">        return getTree(0);</span><br><span class="line">    &#125;</span><br><span class="line">    private List&lt;TreeNode&gt; getTree(int pid) &#123;</span><br><span class="line">        List&lt;TreeNode&gt; parent = dao.getByPid(pid);</span><br><span class="line">        for(TreeNode item : parent) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; child = dao.getByPid(item.getId());</span><br><span class="line">            item.setSubTree(child);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果有<code>n</code>个节点, 那么就要查询<code>n</code>次数据库, 数量大了就会特别慢。</p>
<h1 id="一次性查询出所有记录"><a href="#一次性查询出所有记录" class="headerlink" title="一次性查询出所有记录"></a>一次性查询出所有记录</h1><p>既然数据库查询耗时长, 那么先一次性把所有数据查到内存中, 再自由组装树形结构。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    List&lt;TreeNode&gt; subTree;</span><br><span class="line">    <span class="comment">// 省略 getter 和 setter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeNode&gt; <span class="title">source</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">6</span>, <span class="number">5</span>, <span class="string">"node6"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">5</span>, <span class="number">2</span>, <span class="string">"node5"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">4</span>, <span class="number">2</span>, <span class="string">"node4"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">3</span>, <span class="number">1</span>, <span class="string">"node3"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"node2"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"node1"</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里在内存中组装树形结构也有两种方法, 递归和循环。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; recursive = recursive(TreeNode.source());</span><br><span class="line">        List&lt;TreeNode&gt; loop = loop(TreeNode.source());</span><br><span class="line">        System.out.println(JSONObject.toJSONString(recursive));</span><br><span class="line">        System.out.println(JSONObject.toJSONString(loop));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================= 循环构建 ======================</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeNode&gt; <span class="title">loop</span><span class="params">(List&lt;TreeNode&gt; source)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; topNodes = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (TreeNode node : source) &#123;</span><br><span class="line">            <span class="comment">// 1. 获取 top 节点, 即没有 parent 节点的节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.getPid() == <span class="number">0</span>) &#123;</span><br><span class="line">                topNodes.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 寻找 是否有节点的 parent 节点 为当前节点, 有则加入</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode find : source) &#123;</span><br><span class="line">                <span class="keyword">if</span> (find.getPid().equals(node.getId())) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node.getSubTree() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        node.setSubTree(<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    node.getSubTree().add(find);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> topNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================= 递归构建 ======================</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeNode&gt; <span class="title">recursive</span><span class="params">(List&lt;TreeNode&gt; source)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; trees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TreeNode node : source) &#123;</span><br><span class="line">            <span class="comment">// 1. 获取 top 节点, 即没有 parent 节点的节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.getPid() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 2. 寻找 是否有节点的 parent 节点 为当前节点, 有则加入</span></span><br><span class="line">                trees.add(find(node, source));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">find</span><span class="params">(TreeNode parent, List&lt;TreeNode&gt; treeNodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TreeNode it : treeNodes) &#123;</span><br><span class="line">            <span class="keyword">if</span>(parent.getId().equals(it.getPid())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent.getSubTree() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    parent.setSubTree(<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                parent.getSubTree().add(find(it,treeNodes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>某篇CSDN博客, 后来找不到了</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>业务设计</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SLF4J在多线程下输出到不同的日志文件</title>
    <url>/posts/Use_SLF4J_to_output_to_different_log_files_under_multi_threading.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做了个数据传输的模块, 用到了线程池多线程, 要求将市平台的文章导入到公司的项目中进行管理, 每个栏目都有对应的文章, 但是打印日志时出现了日志混乱的问题。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">栏目A传输文章1: 开始</span><br><span class="line">栏目B传输文章2: 开始</span><br><span class="line">栏目B传输文章2: 成功</span><br><span class="line">栏目C传输文章3: 开始</span><br><span class="line">栏目A传输文章1: 成功</span><br><span class="line">栏目C传输文章3: 失败</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>每个线程输出到不同的日志文件下, 这个功能应该是可以做到的, 只要在初始化<code>Logger</code>时指定对应的文件名就可以了。</p>
<h1 id="Logback-的实现-版本号1-1-11"><a href="#Logback-的实现-版本号1-1-11" class="headerlink" title="Logback 的实现(版本号1.1.11)"></a>Logback 的实现(版本号1.1.11)</h1><p>除了<code>Logback</code>的基础模块, 需要追加引用<a href="https://mvnrepository.com/artifact/ch.qos.logback/logback-access" target="_blank" rel="noopener"><code>logback-access</code></a>模块。</p>
<p><code>slf4j</code>提供了<code>Mapped Diagnostic Context (MDC)</code>这个工具, 来设置自定义变量。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MDC.put(<span class="string">"logName"</span>, <span class="string">"LogFile1"</span>);</span><br><span class="line">logger.debug(<span class="string">"Test"</span> + System.currentTimeMillis());</span><br><span class="line">MDC.remove(<span class="string">"logName"</span>);</span><br></pre></td></tr></table></figure></p>
<p>在代码中这样使用, 即可在配置文件中取到<code>value</code>。<br><code>Logback</code>提供了<code>SiftingAppender</code>来进行日志记录, 并且可以读取<code>MDC</code>的值到日志路径的变量中。<br>下面代码是从我之前写的<code>Logback</code>日志配置中复制并加以微调的。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 MDC 的 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_CUSTOM"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.sift.SiftingAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- discriminator 的默认实现类 ch.qos.logback.classic.sift.MDCBasedDiscriminator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discriminator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>logName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultValue</span>&gt;</span>MyFile<span class="tag">&lt;/<span class="name">defaultValue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sift</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 标准的文件输出 Appender, 文件名根据 MDC 动态生成  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE-$&#123;logName&#125;"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span>自定义文件路径/$&#123;logName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>自定义文件路径/%d&#123;yyyy-MM-dd&#125;/$&#123;logName&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sift</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- root级别 INFO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_CUSTOM"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="log4j的实现-版本号1-2-16"><a href="#log4j的实现-版本号1-2-16" class="headerlink" title="log4j的实现(版本号1.2.16)"></a>log4j的实现(版本号1.2.16)</h1><p><code>log4j</code>没有<code>SiftingAppender</code>, 并且也不能读取<code>MDC</code>到日志路径的变量中(但是可以读取到日志格式中)。</p>
<p>用编程的方式为每个对象示例初始化<code>Logger</code>, 然后为其添加<code>Appender</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> org.apache.log4j.<span class="function">Logger <span class="title">getLogger</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(<span class="string">"日志"</span>+id);</span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意要判断是否已存在Appender, 否则会重复创建</span></span><br><span class="line">        String appenderName = <span class="string">"log"</span>+id+<span class="string">"Appender"</span>;</span><br><span class="line">        <span class="keyword">if</span>(logger.getAppender(appenderName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RollingFileAppender appender = <span class="keyword">new</span> RollingFileAppender();</span><br><span class="line">            appender.setName(appenderName);</span><br><span class="line">            appender.setFile(<span class="string">"D:\\mylog\\"</span>+id+<span class="string">".log"</span>);</span><br><span class="line">            appender.setLayout(<span class="keyword">new</span> PatternLayout(<span class="string">"[S][%d&#123;yyyyMMdd HH:mm:ss&#125;][%-5p][%C:%L] - %m%n"</span>));</span><br><span class="line">            appender.setMaxFileSize(<span class="string">"10240KB"</span>);</span><br><span class="line">            appender.setMaxBackupIndex(<span class="number">10</span>);</span><br><span class="line">            appender.activateOptions();</span><br><span class="line">            logger.addAppender(appender);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.mkyong.com/logging/logback-different-log-file-for-each-thread" target="_blank" rel="noopener">logback-different-log-file-for-each-thread</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>业务设计</tag>
        <tag>Logback</tag>
        <tag>SLF4J</tag>
        <tag>Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的负载均衡配置</title>
    <url>/posts/Nginx_Server_load_balancing_configuration.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>负载均衡本质就是一个反向代理。<br>通俗点讲, 就类似<code>10086</code>客服电话, 如果只有一个通话员, 那全国十几亿人肯定处理不过来, 这时候就多招聘一堆通话员, 做负载均衡, 这样就减少了通话员的压力。</p>
<a id="more"></a>
<h1 id="SLB和GSLB"><a href="#SLB和GSLB" class="headerlink" title="SLB和GSLB"></a>SLB和GSLB</h1><p>负载均衡又分为</p>
<ol>
<li><code>GSLB(Global Server Load Balance)</code>全局负载均衡</li>
<li><code>SLB(Server load balancing)</code>负载均衡</li>
</ol>
<p>还是以<code>10086</code>为例, 如果只有北京开设了一个通话员中心(<code>SLB</code>), 即使通话员(<code>server</code>)的数量足够, 但是广东省的要打电话过去, 西藏的要打电话过去, 路途遥远。那么就设立多个通话员中心(<code>SLB</code>), 广东省的打广东省的<code>10086</code>, 西藏的打西藏的<code>10086</code>, 如果解决不了问题, 再上升到北京的<code>10086</code>。<br><img src="https://yuml.me/diagram/nofunky/class/[1广东用户]-&gt;[1广东10086],[2西藏用户]-&gt;[2西藏10086],[1广东10086]-&gt;[3北京10086],[2西藏10086]-&gt;[3北京10086]" alt><br>也就是说, 多个<code>SLB</code>组成了<code>GSLB</code>。</p>
<h1 id="OSI模型上的负载均衡"><a href="#OSI模型上的负载均衡" class="headerlink" title="OSI模型上的负载均衡"></a>OSI模型上的负载均衡</h1><p>学过计算机网络的应该都知道<a href="https://zh.wikipedia.org/wiki/OSI模型" target="_blank" rel="noopener"><code>OSI</code>模型</a>, 分为物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。<br>比如数据链路层是根据<code>mac</code>地址进行数据包发送的, 那么就可以在这里做负载均衡。（一般是用虚拟<code>mac</code>地址方式，外部对虚拟<code>mac</code>地址请求，负载均衡接收后分配后端实际的<code>mac</code>地址响应）。</p>
<p>最常用的就是<br><strong>四层负载均衡(<code>IP + port</code>)</strong><br><strong>七层负载均衡(<code>IP + port + URL</code>)</strong><br><code>Nginx</code>是应用层, 也就是七层负载均衡。</p>
<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>假设我们有三台机器<code>192.168.0.100</code>、<code>192.168.0.101</code>、<code>example.com</code>。<br>下面是一个简单的配置方法, <code>upstream</code>块必须在<code>http</code>块内。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        server example.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        # 1. 负载均衡, 首页单独处理, 加快速度</span><br><span class="line">        location = / &#123;</span><br><span class="line">            proxy_pass http://tomcats/index</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认是以请求次数做轮询条件, 比如第一次请求, 则分配到<code>192.168.0.100:8080</code>, 第二次请求, 则分配到<code>192.168.0.101:8080</code>, 以此类推。</p>
<h2 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h2><p>追加到<code>server</code>后面<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080 weight=2;</span><br><span class="line">    server example.com:8080 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">配置</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>weight=2</code></td>
<td style="text-align:center">权重越高, 越容易被轮询到</td>
</tr>
<tr>
<td style="text-align:center"><code>down</code></td>
<td style="text-align:center">暂不参与负载均衡</td>
</tr>
<tr>
<td style="text-align:center"><code>backup</code></td>
<td style="text-align:center">预留的备份服务器, 当其他所有服务挂了的时候启用</td>
</tr>
<tr>
<td style="text-align:center"><code>max_fails=1</code></td>
<td style="text-align:center">允许请求失败的次数</td>
</tr>
<tr>
<td style="text-align:center"><code>fail_timeout=10s</code></td>
<td style="text-align:center">经过<code>max_fails</code>失败后, <code>server</code>暂停的时间, 默认<code>10s</code></td>
</tr>
<tr>
<td style="text-align:center"><code>max_conns=10</code></td>
<td style="text-align:center">限制最大的接收连接数</td>
</tr>
</tbody>
</table>
<h1 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h1><p>除了默认的轮询策略, 还有其他的负载均衡策略, 配置到<code>upstream</code>内即可。</p>
<table>
<thead>
<tr>
<th style="text-align:center">轮询策略</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">轮询(默认)</td>
<td style="text-align:center">按请求顺序分配到不同的<code>server</code></td>
</tr>
<tr>
<td style="text-align:center">加权轮询</td>
<td style="text-align:center"><code>weight</code>值越大, 分配到的访问几率越高(最常用)</td>
</tr>
<tr>
<td style="text-align:center"><code>ip_hash</code></td>
<td style="text-align:center">每个请求按访问<code>IP</code>的<code>hash</code>结果分配, 同一个<code>IP</code>固定访问一个<code>server</code></td>
</tr>
<tr>
<td style="text-align:center"><code>url_hash</code></td>
<td style="text-align:center">按照访问的<code>URL</code>的<code>hash</code>结果分配, 同一个<code>URL</code>固定访问一个<code>server</code></td>
</tr>
<tr>
<td style="text-align:center"><code>least_conn</code></td>
<td style="text-align:center">最少链接数, 哪个<code>server</code>连接数少就分配给谁</td>
</tr>
<tr>
<td style="text-align:center"><code>hash关键数值</code></td>
<td style="text-align:center"><code>hash</code>自定义的<code>key</code>, <code>url_hash</code>是具体实现, 在<code>Nginx 1.7.2</code>后可用</td>
</tr>
<tr>
<td style="text-align:center"><code>fair</code></td>
<td style="text-align:center">响应时间短的服务器优先分配</td>
</tr>
</tbody>
</table>
<p>下面只简单介绍下应用场景</p>
<h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><p>保证同一个用户访问同一台服务器, 并且不用对项目做多大改动.<br>用于需要对<code>Session</code>或<code>Cookie</code>保持一致的情况.</p>
<p>但是不能保证平均负载.<br>并且如果多台机器走同一个代理服务器, <code>Nginx</code>根据代理服务器的<code>IP</code>做<code>Hash</code>, 会导致多台服务器走的都是同一个<code>server</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server example.com:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h2><p>能保证同一个服务, 同一个<code>url</code>访问同一个服务器.<br>这种负载均衡策略也不能保证平均负载, 请求频繁的<code>url</code>会请求到同一个服务器上.</p>
<p><code>url_hash</code>是将<code>$request_uri</code>作为自定义<code>hash</code>的<code>key</code>。<br>注意, 自定义<code>hash key</code>只有在<code>Nginx 1.7.2</code>后可用。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server example.com:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>没有最佳实践, 具体场景具体分析.<br>但是实际上解决<code>Session</code>同步问题, 一般都用<code>Redis</code>做分布式<code>Session</code>.<br>这里就不展开讲了, 和<code>Nginx</code>无关.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.51cto.com/dmwing/1896879" target="_blank" rel="noopener">四层和七层负载均衡 - 详细总结</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用inotifytools监控文件</title>
    <url>/posts/Monitor_files_with_inotifytools.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>监控文件变化是一个很常用的功能, 比如监控密码文件, <code>html</code>文件, 如果被恶意修改, 那就发送一个请求给服务器, 发送短信给管理员。<br>这里使用<code>inotify-tools</code>来监控文件变化, 安装命令如下:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum install -y inotify-tools</span><br></pre></td></tr></table></figure></p>
<p><code>inotify-tools</code>提供了两个命令: </p>
<ol>
<li><code>inotifywait</code>, 它是用来监控文件或目录的变化</li>
<li><code>inotifywatch</code>, 它是用来统计文件系统访问的次数</li>
</ol>
<a id="more"></a>
<h1 id="默认内核参数"><a href="#默认内核参数" class="headerlink" title="默认内核参数"></a>默认内核参数</h1><p>参数以文件形式存储</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件路径</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>/proc/sys/fs/inotify/max_queued_evnets</code></td>
<td style="text-align:center">16384</td>
<td style="text-align:center">表示调用<code>inotify_init</code>时分配给<code>inotify instance</code>中可排队的<code>event</code>的数目的最大值，超出这个值的事件被丢弃，但会触发<code>IN_Q_OVERFLOW</code>事件。</td>
</tr>
<tr>
<td style="text-align:center"><code>/proc/sys/fs/inotify/max_user_instances</code></td>
<td style="text-align:center">128</td>
<td style="text-align:center">表示每一个real user <a href="http://man.linuxde.net/id" title="id命令" target="_blank" rel="noopener">id</a>可创建的<code>inotify instatnces</code>的数量上限</td>
</tr>
<tr>
<td style="text-align:center"><code>/proc/sys/fs/inotify/max_user_watches</code></td>
<td style="text-align:center">8192</td>
<td style="text-align:center">表示每个<code>inotify instatnces</code>可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。</td>
</tr>
</tbody>
</table>
<p>如修改每个<code>inotify instatnces</code>可监控的最大目录数量为<code>104857600</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 104857600 &gt; /proc/sys/fs/inotify/max_user_watches</span><br></pre></td></tr></table></figure></p>
<h1 id="inotifywait监控文件变化"><a href="#inotifywait监控文件变化" class="headerlink" title="inotifywait监控文件变化"></a>inotifywait监控文件变化</h1><p><strong>部分常用参数说明</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>-m, --monitor</code></td>
<td style="text-align:center">一直监听, 不指定则默认在第一个事件发生后结束</td>
</tr>
<tr>
<td style="text-align:center"><code>-r, --recursive</code></td>
<td style="text-align:center">使用递归形式监视目录, 注意监视文件的数量最多为<code>8192</code>, 要修改数量需要修改<code>max_user_watches</code>文件</td>
</tr>
<tr>
<td style="text-align:center"><code>-q, --quiet</code></td>
<td style="text-align:center">指定一次减少输出信息(仅打印事件), 指定两次不输出非错误信息</td>
</tr>
<tr>
<td style="text-align:center"><code>--timefmt</code></td>
<td style="text-align:center">指定时间的输出格式, 显示在<code>--format</code>的<code>%T</code>中, 格式参考<a href="http://www.cplusplus.com/reference/ctime/strftime/" target="_blank" rel="noopener">strftime函数</a></td>
</tr>
<tr>
<td style="text-align:center"><code>--format</code></td>
<td style="text-align:center">指定日志输出格式, <code>%w</code>表示发生事件的目录, <code>%f</code>表示发生事件的文件, <code>%e</code>表示发生的事件, <code>%Xe</code>事件名以<code>X</code>分隔, <code>%T</code>使用由<code>--timefmt</code>定义的时间格式</td>
</tr>
<tr>
<td style="text-align:center"><code>--event</code></td>
<td style="text-align:center">只监听某些事件, 事件参考<a href="http://man.linuxde.net/inotifywait" target="_blank" rel="noopener">可监听的事件</a></td>
</tr>
</tbody>
</table>
<p>先来个简单的例子, 监控<code>test</code>文件夹下的变化。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 在终端1开启inotifywait, -r表示递归监视, -m表示持续监视, -q表示只输出事件</span></span><br><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ inotify -rmq <span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># 2. 在终端2写入文件</span></span><br><span class="line">$ <span class="built_in">echo</span> 123 &gt; <span class="built_in">test</span>/123.txt</span><br><span class="line"><span class="comment"># 3. 终端1显示如下信息</span></span><br><span class="line"><span class="built_in">test</span>/ CREATE 123.txt</span><br><span class="line"><span class="built_in">test</span>/ OPEN 123.txt</span><br><span class="line"><span class="built_in">test</span>/ MODIFY 123.txt</span><br><span class="line"><span class="built_in">test</span>/ CLOSE_WRITE,CLOSE 123.txt</span><br></pre></td></tr></table></figure></p>
<p>下面来一个复杂点的例子, 后台监控<code>test</code>文件夹变化, 并将变化内容发送到邮箱。(注意! 这种注释方式会<a href="https://stackoverflow.com/a/12797512/6335926" target="_blank" rel="noopener">损耗性能</a>! 这里只是为了直观才加的注释)<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在终端1操作</span></span><br><span class="line">$ vim inotify.sh</span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">/usr/bin/inotifywait -rmq               `<span class="comment"># 1. -r表示递归监视, -m表示持续监视, -q表示只输出事件` \</span></span><br><span class="line">   --timefmt <span class="string">'%Y-%m-%d %H:%M:%S'</span>        `<span class="comment"># 2. 时间格式为 2018-08-15 16:16:12` \</span></span><br><span class="line">   --format  <span class="string">'%T %w%f %e'</span>               `<span class="comment"># 3. 输出格式为: 时间 目录 文件 事件` \</span></span><br><span class="line">   --event modify,attrib,create,delete  `<span class="comment"># 4. 只监控特定事件` \</span></span><br><span class="line">   <span class="built_in">test</span>/                                `<span class="comment"># 5. 监控test文件夹` \</span></span><br><span class="line">   | <span class="keyword">while</span> <span class="built_in">read</span> <span class="built_in">log</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$log</span> | mail -s <span class="string">'文件改变'</span> root; <span class="keyword">done</span>; `<span class="comment"># 6. 读取管道流, 执行发送邮件给 root 的命令`</span></span><br><span class="line"></span><br><span class="line">$ chmod 755 inotify.sh</span><br><span class="line">$ nohup inotify.sh &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在终端2操作</span></span><br><span class="line">$ <span class="built_in">echo</span> 123 &gt; <span class="built_in">test</span>/123.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在终端3操作, ctrl+D结束查看邮件</span></span><br><span class="line">$ mail</span><br><span class="line">Heirloom Mail version 12.5 7/5/10.  Type ? <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"><span class="string">"/var/spool/mail/root"</span>: 1 message 1 new</span><br><span class="line">&gt;N  1 root                  Wed Aug 15 17:14  18/697   <span class="string">"文件改变"</span></span><br><span class="line">&amp; Held 1 message <span class="keyword">in</span> /var/spool/mail/root</span><br></pre></td></tr></table></figure></p>
<h1 id="inotifywatch统计访问次数"><a href="#inotifywatch统计访问次数" class="headerlink" title="inotifywatch统计访问次数"></a>inotifywatch统计访问次数</h1><p>一个简单的例子, 监控<code>test</code>文件夹下<code>60s</code>内的变化次数<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">inotifywatch -v -e modify,delete,create,attrib,move,open,close,access -e modify -t 60 -r <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/martinzhang/p/4126907.html" target="_blank" rel="noopener">inotifywait命令</a></li>
<li><a href="http://linux.51yip.com/search/inotifywatch" target="_blank" rel="noopener">inotifywatch</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx连接限制和访问控制</title>
    <url>/posts/Nginx_connection_restrictions_and_access_control.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Nginx</code>自带的模块支持对并发请求数进行限制, 还有对请求来源进行限制。可以用来防止<code>DDOS</code>攻击。<br>阅读本文须知道<code>nginx</code>的配置文件结构和语法。</p>
<a id="more"></a>
<h1 id="连接限制-limit-conn-module"><a href="#连接限制-limit-conn-module" class="headerlink" title="连接限制 limit_conn_module"></a>连接限制 limit_conn_module</h1><p><code>limit_conn_module</code>: <code>TCP</code>连接频率限制, 一次<code>TCP</code>连接可以建立多次<code>HTTP</code>请求。<br>配置语法: </p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>limit_conn_module</code>语法</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>limit_conn_zone 标识 zone=空间名:空间大小;</code></td>
<td style="text-align:center"><code>http</code></td>
<td style="text-align:center">用于声明一个存储空间</td>
</tr>
<tr>
<td style="text-align:center"><code>limit_conn 空间名 并发限制数;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>或<code>location</code></td>
<td style="text-align:center">用于限制某个存储空间的并发数量</td>
</tr>
<tr>
<td style="text-align:center"><code>limit_conn_log_level 日志等级;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>或<code>location</code></td>
<td style="text-align:center">当达到最大限制连接数后, 记录日志的等级</td>
</tr>
<tr>
<td style="text-align:center"><code>limit_conn_status 状态码;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>或<code>location</code></td>
<td style="text-align:center">当超过限制后，返回的响应状态码，默认是<code>503</code></td>
</tr>
</tbody>
</table>
<p><code>limit_conn_zone</code>会声明一个<code>zone</code>空间来记录连接状态, 才能限制数量。<br><code>zone</code>是存储连接状态的空间, 以键值对存储, 通常以客户端地址<code>$binary_remote_addr</code>作为<code>key</code>来标识每一个连接。<br>当<code>zone</code>空间被耗尽，服务器将会对后续所有的请求返回<code>503(Service Temporarily Unavailable)</code> 错误。</p>
<h1 id="请求限制-limit-req-mudule"><a href="#请求限制-limit-req-mudule" class="headerlink" title="请求限制 limit_req_mudule"></a>请求限制 limit_req_mudule</h1><p><code>limit_req_mudule</code>: <code>HTTP</code>请求频率限制, 一次<code>TCP</code>连接可以建立多次<code>HTTP</code>请求。<br> 配置语法:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>limit_req_mudule</code>语法</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>limit_req_zone key zone=空间名:空间大小 rate=每秒请求数;</code></td>
<td style="text-align:center"><code>http</code></td>
<td style="text-align:center">用于声明一个存储空间</td>
</tr>
<tr>
<td style="text-align:center"><code>limit_req zone=空间名 [burst=队列数] [nodelay];</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>或<code>location</code></td>
<td style="text-align:center">用于限制某个存储空间的并发数量</td>
</tr>
</tbody>
</table>
<p>这里的<code>zone</code>也是用来存储连接的一个空间。</p>
<h2 id="burst和nodelay"><a href="#burst和nodelay" class="headerlink" title="burst和nodelay"></a>burst和nodelay</h2><p><code>burst</code>和<code>nodelay</code>对并发请求设置了一个缓冲区和是否延迟处理的策略。<br>先假设有如下<code>zone</code>配置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    limit_req_zone $binan_remote_addr zone=req_zone:1m rate=10r/s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>情况1: <code>limit_req zone=req_zone;</code></p>
<ol>
<li>第<code>1</code>秒发送<code>10</code>个请求, 正常响应。</li>
<li>第<code>1</code>秒发送<code>13</code>个请求, 前<code>10</code>个请求正常响应, 后<code>3</code>个请求返回<code>503(Service Temporarily Unavailable)</code>。</li>
</ol>
<p>不加<code>brust</code>和<code>nodelay</code>的情况下, <code>rate=10r/s</code>每秒只能执行<code>10</code>次请求, 多的直接返回<code>503</code>错误。</p>
<hr>
<p>情况2: <code>limit_req zone=req_zone brust=5;</code></p>
<ol>
<li>第<code>1</code>秒发送<code>10</code>个请求, 正常响应。</li>
<li>第<code>1</code>秒发送<code>13</code>个请求, 前<code>10</code>个请求正常响应, 后<code>3</code>个请求放入<code>brust</code>等待响应。</li>
<li>第<code>1</code>秒发送<code>20</code>个请求, 前<code>10</code>个请求正常响应, 后<code>5</code>个请求放入<code>brust</code>等待响应, 最后<code>5</code>个请求返回<code>503(Service Temporarily Unavailable)</code>, 第<code>2</code>秒执行<code>brust</code>中的<code>5</code>个请求。</li>
<li>第<code>1</code>秒发送<code>20</code>个请求, 前<code>10</code>个请求正常响应, 后<code>5</code>个请求放入<code>brust</code>等待响应, 最后<code>5</code>个请求返回<code>503(Service Temporarily Unavailable)</code>, 第<code>2</code>秒发送<code>6</code>个请求, 执行<code>brust</code>中的<code>5</code>个请求, 将<code>5</code>个请求放入<code>brust</code>等待响应, 剩下的<code>1</code>个请求返回<code>503(Service Temporarily Unavailable)</code>。</li>
</ol>
<p>加<code>brust=5</code>不加<code>nodelay</code>的情况下, 有一个容量为<code>5</code>的缓冲区, <code>rate=10r/s</code>每秒只能执行<code>10</code>次请求, 多的放到缓冲区中, 如果缓冲区满了, 就直接返回<code>503</code>错误。而缓冲区在下一个时间段会取出请求进行响应, 如果还有请求进来, 则继续放缓冲区, 多的就返回<code>503</code>错误。</p>
<hr>
<p>情况3: <code>limit_req zone=req_zone brust=5 nodelay;</code></p>
<ol>
<li>第<code>1</code>秒发送<code>10</code>个请求, 正常响应。</li>
<li>第<code>1</code>秒发送<code>13</code>个请求, <code>13</code>个请求正常响应。</li>
<li>第<code>1</code>秒发送<code>20</code>个请求, 前<code>15</code>个请求正常响应, 后<code>5</code>个请求返回<code>503(Service Temporarily Unavailable)</code>。</li>
<li>第<code>1</code>秒发送<code>20</code>个请求, 前<code>15</code>个请求正常响应, 后<code>5</code>个请求返回<code>503(Service Temporarily Unavailable)</code>, 第<code>2</code>秒发送<code>6</code>个请求, 正常响应。</li>
</ol>
<p>加<code>brust=5</code>和<code>nodelay</code>的情况下, 有一个容量为<code>5</code>的缓冲区, <code>rate=10r/s</code>每秒能执行<code>15</code>次请求, <code>15=10+5</code>。多的直接返回<code>503</code>错误。 </p>
<hr>
<h1 id="基于IP的访问控制"><a href="#基于IP的访问控制" class="headerlink" title="基于IP的访问控制"></a>基于IP的访问控制</h1><p><code>http_access_module</code>: 基于<code>IP</code>的访问控制, 通过代理可以绕过限制, 防君子不防小人。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>http_access_module</code>语法</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>allow IP地址 &amp;#124; CIDR网段 &amp;#124; unix: &amp;#124; all;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>、<code>location</code>和<code>limit_except</code></td>
<td style="text-align:center">允许<code>IP地址</code>、<code>CIDR</code>格式的网段、<code>unix</code>套接字或所有来源访问</td>
</tr>
<tr>
<td style="text-align:center"><code>deny IP地址 &amp;#124; CIDR网段 &amp;#124; unix: &amp;#124; all;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>、<code>location</code>和<code>limit_except</code></td>
<td style="text-align:center">禁止<code>IP地址</code>、<code>CIDR</code>格式的网段、<code>unix</code>套接字或所有来源访问</td>
</tr>
</tbody>
</table>
<p><code>allow</code>和<code>deny</code>会按照顺序, 从上往下, 找到第一个匹配规则, 判断是否允许访问, 所以一般把<code>all</code>放最后。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny  192.168.1.1;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    allow 10.1.1.0/16;</span><br><span class="line">    allow 2001:0db8::/32;</span><br><span class="line">    deny  all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="基于用户密码的访问控制"><a href="#基于用户密码的访问控制" class="headerlink" title="基于用户密码的访问控制"></a>基于用户密码的访问控制</h1><p><code>http_auth_basic_module</code>: 基于文件匹配用户密码的登录</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>http_auth_basic_module</code>语法</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>auth_basic 请输入你的帐号密码 &amp;#124; off;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>、<code>location</code>和<code>limit_except</code></td>
<td style="text-align:center">显示用户登录提示(有些浏览器不显示提示)</td>
</tr>
<tr>
<td style="text-align:center"><code>auth_basic_user_file 存储帐号密码的文件路径;</code></td>
<td style="text-align:center"><code>http</code>、<code>server</code>、<code>location</code>和<code>limit_except</code></td>
<td style="text-align:center">从文件中匹配帐号密码</td>
</tr>
</tbody>
</table>
<p>密码文件可以通过<code>htpasswd</code>生成, <code>htpasswd</code>需要安装<code>yum install -y httpd-tools</code>。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c 创建新文件, -b在参数中直接输入密码</span></span><br><span class="line">$ htpasswd -bc /etc/nginx/conf.d/passwd user1 pw1</span><br><span class="line">Adding password <span class="keyword">for</span> user user1</span><br><span class="line">$ htpasswd -b /etc/nginx/conf.d/passwd user2 pw2</span><br><span class="line">Adding password <span class="keyword">for</span> user user2</span><br><span class="line">$ cat /etc/nginx/conf.d/passwd </span><br><span class="line">user1:<span class="variable">$apr1</span><span class="variable">$7v</span>/m0.IF<span class="variable">$2kpM9NVVxbAv</span>.jSUvUQr01</span><br><span class="line">user2:<span class="variable">$apr1</span><span class="variable">$XmoO4Zzy</span><span class="variable">$Df76U0Gzxbd7</span>.5vXE0UsE0</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" target="_blank" rel="noopener">limit_conn_module</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">limit_req_mudule</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_access_module.html" target="_blank" rel="noopener">http_access_module</a></li>
<li><a href="http://nginx.org/cn/docs/http/ngx_http_auth_basic_module.html" target="_blank" rel="noopener">http_auth_basic_module</a></li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>BandwagonHost推广获取佣金</title>
    <url>/posts/How_to_get_Commission_of_Bandwagonhost.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>BandwagonHost</code>是一个国外的<code>VPS</code>网站, 可以做一些在国内做不了的事情。</p>
<a id="more"></a>
<h1 id="如何获取推广链接"><a href="#如何获取推广链接" class="headerlink" title="如何获取推广链接"></a>如何获取推广链接</h1><p>首先你要注册一个帐号, 注意资料尽量真实, 貌似搬瓦工会检测你的<code>IP</code>来判断你是否在欺诈他。<br>然后访问<a href="https://bandwagonhost.com/affiliates.php" target="_blank" rel="noopener">自己的推广页面</a>。<br>可以看到一个推广链接, 下面是<a href="https://bandwagonhost.com/aff.php?aff=22459" target="_blank" rel="noopener">我的推广链接</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://bandwagonhost.com/aff.php?aff=22459</span><br></pre></td></tr></table></figure></p>
<p>还可以看到各种统计的数据</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">佣金百分比</td>
<td style="text-align:center">22%</td>
</tr>
<tr>
<td style="text-align:center">待定佣金</td>
<td style="text-align:center">$0.00 USD</td>
</tr>
<tr>
<td style="text-align:center">可提取佣金</td>
<td style="text-align:center">$0.00 USD</td>
</tr>
<tr>
<td style="text-align:center">支付总额</td>
<td style="text-align:center">$0.00 USD</td>
</tr>
</tbody>
</table>
<h2 id="获取单品推广链接"><a href="#获取单品推广链接" class="headerlink" title="获取单品推广链接"></a>获取单品推广链接</h2><p>但是上面的推广链接访问的是搬瓦工首页, 如果想直接推广某个<code>VPS</code>, 就需要自己写<code>url</code>。<br>比如最便宜的<code>10G VPS</code>, 它的<a href="https://bandwagonhost.com/cart.php?a=add&amp;pid=43" target="_blank" rel="noopener">商品链接</a>如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://bandwagonhost.com/cart.php?a=add&amp;pid=43</span><br></pre></td></tr></table></figure></p>
<p>我们只要在自己的推广链接后面加上<code>pid</code>参数即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://bandwagonhost.com/aff.php?aff=22459&amp;pid=43</span><br></pre></td></tr></table></figure></p>
<p>这样别人点你的推广链接, 并且购买成功, 你就可以获得一定比例的佣金, 比如上面写的<code>22%</code>。</p>
<h1 id="如何使用佣金"><a href="#如何使用佣金" class="headerlink" title="如何使用佣金"></a>如何使用佣金</h1><p>值得注意的是, 推广链接必须贴在<strong>网页</strong>上。不能私发, 不能<code>hack</code>别人。<br>在<a href="https://bandwagonhost.com/affiliates.php" target="_blank" rel="noopener">affiliates</a>提交提现申请即可。<br>选择<code>To account balance (to be used to pay for services)</code>用于下次续费。</p>
<p>默认等个两三天就可以提现成功, 如果没有成功, 可以发个<a href="https://bandwagonhost.com/supporttickets.php" target="_blank" rel="noopener">工单</a>。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果你是第一次购买, 可以使用下我的<a href="https://bandwagonhost.com/cart.php?a=add&amp;pid=43" target="_blank" rel="noopener">推广链接</a>支持下我, 感激不尽。</p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>BandwagonHost</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门安装与运行</title>
    <url>/posts/Docker_simple_installation_and_operation.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>docker</code>是一个存放应用的容器, 将下载、安装、运行等进行了规范化。<br>本文将在虚拟机中<code>CentOS</code>使用桥接连接本机。关于桥接可以看我的另一篇文章, 上方搜索<strong>桥接</strong>即可。</p>
<a id="more"></a>
<h1 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 1. 检查是否为root用户</span><br><span class="line">echo &quot;==================检查是否为root用户==================&quot;</span><br><span class="line">if [[ $&#123;EUID&#125; != 0 ]]; then</span><br><span class="line">    echo &quot;请切换到root用户&quot;;</span><br><span class="line">    exit 1;</span><br><span class="line">fi;</span><br><span class="line">echo &quot;当前用户是root&quot;</span><br><span class="line"></span><br><span class="line"># 2. 检查内核版本号大于3.10</span><br><span class="line">echo &quot;==================检查内核版本号大于3.10==================&quot;</span><br><span class="line">status=$(uname -r | awk -F &apos;.&apos; &apos;&#123;if($1&gt;=3&amp;&amp;$2&gt;=10) &#123;print &quot;0&quot;&#125; else &#123; print &quot;1&quot;&#125;&#125;&apos;)</span><br><span class="line">if [[ $&#123;status&#125; != 0 ]]; then</span><br><span class="line">    echo &quot;Kernel version must be &gt;= 3.10, you version is $(uname -r)&quot;</span><br><span class="line">    exit 1;</span><br><span class="line">fi;</span><br><span class="line">echo &quot;当前内核版本号是$(uname -r)&quot;</span><br><span class="line"></span><br><span class="line"># 3. 删除旧版本docker</span><br><span class="line">echo &quot;==================删除旧版本docker==================&quot;</span><br><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line"># 4. yum-util提供yum-config-manager功能, 另外两个是devicemapper驱动依赖的</span><br><span class="line">echo &quot;==================安装相关依赖==================&quot;</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"># 5. 设置yum源</span><br><span class="line">echo &quot;==================设置yum源==================&quot;</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># 6. 安装docker并启动</span><br><span class="line">echo &quot;==================安装docker==================&quot;</span><br><span class="line">yum install -y docker-ce</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"># 7. 验证是否安装成功</span><br><span class="line">echo &quot;==================验证是否安装成功==================&quot;</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>
<h1 id="安装运行Hello-World"><a href="#安装运行Hello-World" class="headerlink" title="安装运行Hello World"></a>安装运行Hello World</h1><p><code>docker</code>包含几个命令, <code>docker pull</code>下载, <code>docker images</code>查看镜像, <code>docker run</code> 运行。<br>这是一个<code>hello world</code>程序, <a href="https://hub.docker.com/_/hello-world/" target="_blank" rel="noopener">docker hub 地址</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 从仓库下载hello-world</span></span><br><span class="line">$ docker pull hello-world</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">9db2ca6ccae0: Pull complete </span><br><span class="line">Digest: sha256:4b8ff392a12ed9ea17784bd3c9a8b1fa3299cac44aca35a85c90c5e3c7afacdc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看已有镜像</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              2cb0d9787c4d        5 days ago          1.85kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 运行 hello world, 打印如下信息</span></span><br><span class="line">$ docker run hello-world</span><br><span class="line">来自Docker的问好!</span><br><span class="line">此消息表示您的安装似乎正常工作。</span><br><span class="line"></span><br><span class="line">为了生成这些信息, Docker进行了以下的操作:</span><br><span class="line"> 1. Docker客户端 连接到 Docker daemon守护进程</span><br><span class="line"> 2. Docker daemon守护进程 从 Docker 仓库 下载(pull) 了 hello-world 镜像(image)</span><br><span class="line"> 3. Docker daemon守护进程从该镜像(image)创建了一个新容器(container)，该容器运行并执行可执行文件, 输出您现在看到的内容。</span><br><span class="line"> 4. Docker daemon守护进程将输出流输出到Docker客户端, Docker客户端会将信息发送到你的终端(terminal)</span><br></pre></td></tr></table></figure></p>
<p>执行操作: </p>
<ol>
<li><code>docker client</code>客户端向<code>docker daemon</code>服务端发送<code>docker run</code>命令</li>
<li><code>docker daemon</code>检查是否有<code>image</code>镜像, 没有则向<code>docker hub</code>仓库下载<code>image</code>镜像</li>
<li><code>docker daemon</code>会创建一个<code>container</code>容器运行这个<code>image</code>镜像</li>
</ol>
<h1 id="安装运行Nginx"><a href="#安装运行Nginx" class="headerlink" title="安装运行Nginx"></a>安装运行Nginx</h1><p>先安装<code>docker pull nginx</code>, 然后运行<code>docker run -dp 8080:80 nginx</code>。</p>
<ol>
<li><code>-d</code>: 后台运行容器, 并返回容器ID</li>
<li><code>-p</code>: 进行端口映射, 格式为: <code>主机端口:容器端口</code></li>
</ol>
<p>然后我们就可以在自己电脑输入<code>http://ip地址:8080</code>访问到<code>nginx</code>。</p>
<h2 id="WARNING-IPv4-forwarding-is-disabled-Networking-will-not-work"><a href="#WARNING-IPv4-forwarding-is-disabled-Networking-will-not-work" class="headerlink" title="WARNING: IPv4 forwarding is disabled. Networking will not work."></a>WARNING: IPv4 forwarding is disabled. Networking will not work.</h2><p>如果提示<code>IPv4</code>转发没有开启, 那就去开启。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward=1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ systemctl restart network</span><br></pre></td></tr></table></figure></p>
<h2 id="为什么要做端口映射"><a href="#为什么要做端口映射" class="headerlink" title="为什么要做端口映射?"></a>为什么要做端口映射?</h2><p><code>Docker</code>容器可以看成是一个<code>虚拟机</code>, 那我们的3台机器就有这种关系<br><img src="https://yuml.me/diagram/nofunky/class/[win10%E7%9C%9F%E6%AD%A3%E7%9A%84%E4%B8%BB%E6%9C%BA]-%3E[CentOS7%E8%99%9A%E6%8B%9F%E6%9C%BA],[CentOS7%E8%99%9A%E6%8B%9F%E6%9C%BA]-%3E[Docker%20Nginx%E5%AE%B9%E5%99%A8]" alt="主机关系"></p>
<p>如果是直接安装在<code>CentOS7虚拟机</code>上的话, 我们的<code>win10真正的主机</code>是可以直接访问<code>Nginx</code>的。 但是现在是运行在<code>Docker</code>容器里, 中间隔了个<code>CentOS7虚拟机</code>, 我们就需要做端口映射, 如<code>docker run -dp 8080:80 nginx</code>。</p>
<p>这样我们在<code>win10真正的主机</code>访问<code>CentOS7虚拟机</code>的<code>8080</code>端口时, <code>CentOS7虚拟机</code>会转发到<code>Docker</code>容器的<code>80</code>端口(这也是之前我们为什么要开启<code>IPv4</code>转发的原因)，我们就可以在<code>win10真正的主机</code>间接访问<code>Docker</code>容器中的<code>Nginx</code>了。</p>
<p><strong>注意</strong><br>实际最好端口要一致, 这里为了容易区分, 才分为<code>8080:80</code>, 最好为<code>80:80</code>。</p>
<h2 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h2><p><code>Docker</code>容器就像一个虚拟机, 所以我们也可以通过<code>bash</code>进入。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 后台启动nginx, 映射虚拟机端口8080到容器端口80</span></span><br><span class="line">[root@localhost ~]$ docker run -dp 8080:80 nginx</span><br><span class="line">0df7493162a1e34d43c74e67b1bbe4c810ea821a994d85d5d45eae837d4ddf25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看docker进程, 找到nginx的容器id</span></span><br><span class="line">[root@localhost ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">0df7493162a1        nginx               <span class="string">"nginx -g 'daemon of…"</span>   6 seconds ago       Up 5 seconds        0.0.0.0:8080-&gt;80/tcp   naughty_kilby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 执行bash命令进入docker容器内部</span></span><br><span class="line">[root@localhost ~]$ docker <span class="built_in">exec</span> -it 0df7493162a1 bash</span><br><span class="line"><span class="comment"># -i 让容器的标准输入保持打开</span></span><br><span class="line"><span class="comment"># -t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</span></span><br><span class="line">root@0df7493162a1:/$ vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>
<p>进入容器, 就可以像普通的<code>Linux</code>一样进行操作了, 如编辑配置文件<code>vim /etc/nginx/nginx.conf</code>。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux打包压缩tar常用命令</title>
    <url>/posts/Linux_package_compression_common_tar_commands.html</url>
    <content><![CDATA[<h1 id="打包存在的意义"><a href="#打包存在的意义" class="headerlink" title="打包存在的意义"></a>打包存在的意义</h1><p>打包是把多个文件变成一个文件。<br>压缩是把一个大文件变成小文件。<br>那么要把多个文件压缩成小文件, 就只能曲线救国, 先把多个文件打包成一个文件, 然后再对这个文件进行压缩。</p>
<a id="more"></a>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="tar"><a href="#tar" class="headerlink" title=".tar"></a>.tar</h2><p>解包：<code>tar xvf FileName.tar</code><br>打包：<code>tar cvf FileName.tar DirName</code></p>
<h2 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h2><p>解压1：<code>gunzip FileName.gz</code><br>解压2：<code>gzip -d FileName.gz</code><br>压缩：<code>gzip FileName</code></p>
<h2 id="tar-gz-和-tgz"><a href="#tar-gz-和-tgz" class="headerlink" title=".tar.gz 和 .tgz"></a>.tar.gz 和 .tgz</h2><p>解压：<code>tar zxvf FileName.tar.gz</code><br>压缩：<code>tar zcvf FileName.tar.gz DirName</code></p>
<h2 id="bz2"><a href="#bz2" class="headerlink" title=".bz2"></a>.bz2</h2><p>解压1：<code>bzip2 -d FileName.bz2</code><br>解压2：<code>bunzip2 FileName.bz2</code><br>压缩： <code>bzip2 -z FileName</code></p>
<h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title=".tar.bz2"></a>.tar.bz2</h2><p>解压：<code>tar jxvf FileName.tar.bz2</code><br>压缩：<code>tar jcvf FileName.tar.bz2 DirName</code></p>
<h2 id="Z"><a href="#Z" class="headerlink" title=".Z"></a>.Z</h2><p>安装：<code>yum install -y ncompress</code><br>解压：<code>uncompress FileName.Z</code><br>压缩：<code>compress FileName</code></p>
<h2 id="tar-Z"><a href="#tar-Z" class="headerlink" title=".tar.Z"></a>.tar.Z</h2><p>安装：<code>yum install -y ncompress</code><br>解压：<code>tar Zxvf FileName.tar.Z</code><br>压缩：<code>tar Zcvf FileName.tar.Z DirName</code></p>
<h2 id="zip"><a href="#zip" class="headerlink" title=".zip"></a>.zip</h2><p>安装：<code>yum install -y zip</code><br>解压：<code>unzip FileName.zip</code><br>压缩：<code>zip FileName.zip DirName</code></p>
<h2 id="rar"><a href="#rar" class="headerlink" title=".rar"></a>.rar</h2><p>解压：<code>rar x FileName.rar</code><br>压缩：<code>rar a FileName.rar DirName</code></p>
<h2 id="rpm"><a href="#rpm" class="headerlink" title=".rpm"></a>.rpm</h2><p>解包：<code>rpm2cpio FileName.rpm | cpio -div</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/eoiioe/archive/2008/09/20/1294681.html" target="_blank" rel="noopener">linux下解压命令大全</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx日志配置</title>
    <url>/posts/Nginx_log_configuration.html</url>
    <content><![CDATA[<h1 id="日志输出配置"><a href="#日志输出配置" class="headerlink" title="日志输出配置"></a>日志输出配置</h1><p><code>nginx</code>的日志有两种</p>
<ol>
<li><code>error_log</code>: 记录服务器错误, 配置在<strong>全局</strong>范围</li>
<li><code>access_log</code>: 记录每一次请求访问, 配置在<code>http</code>范围</li>
</ol>
<a id="more"></a>
<p>日志配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1. error.log日志配置</span><br><span class="line"># error_log  日志存储位置  错误日志级别;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # 2. access.log日志配置</span><br><span class="line">    # access_log  日志存储位置  日志格式名;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    # log_format 日志格式名 [escape=default|json] 参数字符串;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h1><p>语法: <code>log_format 日志格式名 [escape=default|json] string ...;</code><br>日志格式可以携带一些内置的变量, 如<code>IP地址</code>之类的。</p>
<h2 id="HTTP请求变量"><a href="#HTTP请求变量" class="headerlink" title="HTTP请求变量"></a>HTTP请求变量</h2><ol>
<li><code>arg_PARANERER</code>: 请求参数</li>
<li><code>http_HEADER</code>: 请求头</li>
<li><code>sent_HEADER</code>: 响应头</li>
</ol>
<p><code>Nginx</code>支持参数、请求头和响应头, 只要把字母转成小写, 横线转为下划线, 再加上<code>arg</code>、<code>http</code>或<code>sent</code>的前缀即可。<br>比如请求头的<code>User-Agent</code>, 对应的变量为<code>http_user_agent</code>。 </p>
<h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#variables" target="_blank" rel="noopener">Nginx http core模块的变量</a><br>这里只介绍<code>nginx.conf</code>中默认配置的变量</p>
<ol>
<li><code>$remote_addr</code>: 客户端地址, 如<code>192.168.1.7</code></li>
<li><code>$remote_user</code>: 随基本身份验证提供的用户名</li>
<li><code>$time_local</code>: 通用日志格式的本地时间, 如<code>07/Jul/2018:15:33:14 +0800</code></li>
<li><code>$request</code>: 完整原始的请求行, 如<code>GET / HTTP/1.1</code></li>
<li><code>$status</code>: 响应状态码, 如<code>200</code>、<code>404</code></li>
<li><code>$body_bytes_sent</code>: 发送到客户端的字节数，不包括响应头</li>
</ol>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p><code>set</code>只能配置在<code>server</code>、<code>location</code>和<code>if</code>中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    set $变量名 &quot;变量值&quot;</span><br><span class="line">    location / &#123;</span><br><span class="line">        set $变量名 &quot;变量值&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的location配置</title>
    <url>/posts/Nginx_location_configuration.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>location</code>匹配到的<code>url</code>可以执行特定的操作, 比如拦截, 转发。</p>
<a id="more"></a>
<h1 id="url匹配"><a href="#url匹配" class="headerlink" title="url匹配"></a>url匹配</h1><p>语法:<br><code>location [=|~|~*|^~|@] uri { 配置 }</code><br><code>location</code>的<code>url</code>匹配遵循最长匹配原则。</p>
<table>
<thead>
<tr>
<th style="text-align:center">modifier</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">精确匹配, 和这个<code>url</code>完全一样的会被匹配到</td>
</tr>
<tr>
<td style="text-align:center">^~</td>
<td style="text-align:center">前缀匹配, 以这个<code>url</code>开头都会被匹配到</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">表示执行一个正则匹配，区分大小写</td>
</tr>
<tr>
<td style="text-align:center">~*</td>
<td style="text-align:center">表示执行一个正则匹配，不区分大小写</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">什么都没有, 就说明以这个<code>uri</code>开头的都会被匹配到</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:center">“@” 定义一个命名的 location，使用在内部定向时使用，例如 error_page, try_files</td>
</tr>
</tbody>
</table>
<p>匹配步骤:</p>
<ol>
<li>将所有的非正则匹配规则放入<strong>排序三叉树</strong>中, 正则匹配规则放入一个顺序队列(按配置文件书写顺序排序)中。</li>
<li>在三叉树中匹配<code>url</code>。如果匹配到<code>location =</code>就停止搜索。如果是前缀匹配<code>location ^~</code>或默认规则<code>location</code>则找到最长匹配。</li>
<li>再在正则匹配规则队列中匹配<code>url</code>, 如果有, 则使用这个正则匹配, 没有则使用三叉树中找到的匹配规则。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>上面说这么多, 还是得看例子来理解, 等看完例子再回过头去看上面的详细说明。<br><a href="https://detailyang.github.io/nginx-location-match-visible/" target="_blank" rel="noopener">nginx-location-match-visible</a>提供了一个可视化的匹配步骤。<br>将下面规则复制到其中, 即可查看匹配步骤和匹配结果。</p>
<h2 id="和-none-的区别"><a href="#和-none-的区别" class="headerlink" title="= 和 none 的区别"></a>= 和 none 的区别</h2><p>匹配规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;&#125;      # A</span><br><span class="line">location = / &#123;&#125;    # B</span><br><span class="line">location = /123 &#123;&#125; # C</span><br></pre></td></tr></table></figure></p>
<p>测试用例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/      # 匹配B</span><br><span class="line">/123   # 匹配C</span><br></pre></td></tr></table></figure></p>
<p>##　~ 正则(区分大小写)<br>匹配规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;&#125;                           # A</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;&#125;   # B</span><br><span class="line">location ~ \.(GIF|JPG|PNG|JS|CSS)$ &#123;&#125;   # C</span><br></pre></td></tr></table></figure></p>
<p>测试用例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/       # 匹配A</span><br><span class="line">/a.jpg  # 匹配B</span><br><span class="line">/a.JPG  # 匹配C</span><br></pre></td></tr></table></figure></p>
<h2 id="正则-不区分大小写"><a href="#正则-不区分大小写" class="headerlink" title="~ 正则(不区分大小写)"></a>~ 正则(不区分大小写)</h2><p>匹配规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;&#125;                            # A</span><br><span class="line">location ~* \.(gif|jpg|png|js|css)$ &#123;&#125;   # B</span><br></pre></td></tr></table></figure></p>
<p>测试用例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/       # 匹配A</span><br><span class="line">/a.jpg  # 匹配B</span><br><span class="line">/a.JPG  # 匹配B, 注意!! nginx-location-match-visible 有误! 实际是匹配到B的!</span><br></pre></td></tr></table></figure></p>
<h2 id><a href="#" class="headerlink" title="@"></a>@</h2><p><code>@</code>常用于内部跳转<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">    error_page 404 @img_err</span><br><span class="line">&#125;</span><br><span class="line">location @img_err &#123;</span><br><span class="line">    # 规则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="复合"><a href="#复合" class="headerlink" title="复合"></a>复合</h2><p>匹配规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location = / &#123;&#125;                         # A</span><br><span class="line">location = /login &#123;&#125;                    # B</span><br><span class="line">location ^~ /static/ &#123;&#125;                 # C</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;&#125;   # D</span><br><span class="line">location ~* \.png$ &#123;&#125;                   # E</span><br><span class="line">location / &#123;&#125;                           # F</span><br></pre></td></tr></table></figure></p>
<p>测试用例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/                   # 匹配F</span><br><span class="line">/login              # 匹配B</span><br><span class="line">/static             # 匹配F</span><br><span class="line">/static/a           # 匹配C</span><br><span class="line">/test.png           # 匹配D</span><br><span class="line">/static.png         # 匹配D</span><br><span class="line">/test.PNG           # 匹配E, 注意!! nginx-location-match-visible 有误! 实际是匹配到E的!</span><br><span class="line">/static/a.png       # 匹配C</span><br><span class="line">/static/a.gif       # 匹配C</span><br></pre></td></tr></table></figure></p>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>一般把<code>Nginx</code>作为负载均衡服务器, 静态资源可以存在<code>Nginx</code>服务器。<br>负载均衡配置本文不详细讲, 简单的说就像是买卖房屋的中介, 给你(客户端)介绍一个好的(连接的上的)房屋(服务端)。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        server example.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        # 1. 静态文件处理 参照另一篇文章, 这里简单的列举一下</span><br><span class="line">        location ^~ /static/ &#123;</span><br><span class="line">            root /webroot/static/;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">            root /webroot/res/;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        # 2. 负载均衡, 首页单独处理, 加快速度</span><br><span class="line">        location = / &#123;</span><br><span class="line">            proxy_pass http://tomcats/index</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>toArray和toArray(T[])的不同</title>
    <url>/posts/Difference_between_toArray(T%5B%5Da)_and_toArray().html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Collection</code>接口有两个方法<code>Object[] toArray();</code>和<code>&lt;T&gt; T[] toArray(T[] a);</code>, 可以用来将集合转为数组。</p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>一个返回<code>Object[]</code>, 一个返回<code>T[]</code>, 为了避免发生强制转化, 我们一般都是使用<code>&lt;T&gt; T[] toArray(T[] a);</code>。<br>而<code>&lt;T&gt; T[] toArray(T[] a);</code>传入的数组大小可以直接填<code>0</code>, 当然也可以直接填<code>source.size()</code>。<br>但是<a href="https://shipilev.net/blog/2016/arrays-wisdom-ancients/" target="_blank" rel="noopener">arrays-wisdom-ancients</a>这篇文章做了分析, <code>JDK6</code>以后直接填<code>0</code>性能更好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; source = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">String[] array1 = (Object[]) source.toArray();</span><br><span class="line">String[] array2 = source.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">String[] array3 = source.toArray(<span class="keyword">new</span> String[source.size()]);</span><br></pre></td></tr></table></figure>
<h1 id="查看ArrayList的实现"><a href="#查看ArrayList的实现" class="headerlink" title="查看ArrayList的实现"></a>查看ArrayList的实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrays</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">            ? (T[]) new Object[newLength]</span><br><span class="line">            : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们调用<code>ArrayList.toArray</code>方法的时候, 都会调用<code>Arrays.copyOf</code>方法, 最终调用<code>System.arraycopy</code>方法, 这是一个<code>native</code>方法。<br>当然, 不同的集合有不同的<code>toArray</code>实现方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果传入的参数<code>toArray(T[] a)</code>小于本身的长度, 会<code>new</code>或者反射创建一个新的数组, 然后将元素复制进去。<br>但是<a href="https://shipilev.net/blog/2016/arrays-wisdom-ancients/" target="_blank" rel="noopener">arrays-wisdom-ancients</a>这篇文章做了分析, <code>JDK6</code>以后直接填<code>0</code>性能更好。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux前后台程序管理</title>
    <url>/posts/Linux_front_end_program_management.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比如我打开电脑登录了<code>administrator</code>用户, 打开<code>QQ</code>, 微信, 然后开始下载游戏, 看视频。<br>我在看视频, 那么这个视频就是在前台运行的, 而下载游戏, 我不需要看它是怎么下载的, 所以放到后台执行, 这个就是前后台的应用场景。</p>
<a id="more"></a>
<h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><ol>
<li><code>命令; Ctrl+z</code>: 执行命令后, 按住<code>Ctrl+z</code>,将命令切换到后台<strong>暂停</strong>。</li>
<li><code>命令 &gt; /tmp/log.txt 2&gt;&amp;1 &amp;</code>: 将命令放到后台执行, 注意要将输出信息重定向, 否则会污染前台操作</li>
<li><code>bg %jobNumber</code>: 将某个后台程序放到后台<strong>运行</strong>。</li>
<li><code>jobs -l</code>: 查看所有的后台程序, <code>-l</code>显示PID。</li>
<li><code>fg %jobNumber</code>: 将某个后台程序放到前台运行。</li>
<li><code>kill -9 %jobNumber</code>: 将某个后台程序<strong>强制</strong>结束运行。</li>
<li><code>kill -15 %jobNumber</code>: 将某个后台程序<strong>正常</strong>结束运行。</li>
<li><code>nohup 命令 &amp;</code>: 将某个后台程序放到系统后台运行, 注销登录不会终止程序。</li>
</ol>
<h1 id="jobs-l"><a href="#jobs-l" class="headerlink" title="jobs -l"></a>jobs -l</h1><p><code>$ jobs [-lrs]</code>可以查看所有的后台程序。<br>选项与参数：<br><code>-l</code>  ：除了列出 <code>job number</code> 与命令串之外，同时列出 <code>PID</code> 的号码；<br><code>-r</code>  ：仅列出正在背景 <code>run</code> 的工作；<br><code>-s</code>  ：仅列出正在背景当中暂停 (<code>stop</code>) 的工作。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">jobs</span> -l</span><br><span class="line">[1]- 10314 Stopped                 vim ~/.bashrc</span><br><span class="line">[2]+ 10833 Stopped                 find / -<span class="built_in">print</span></span><br></pre></td></tr></table></figure></p>
<p><code>[1]</code>和<code>[2]</code>表示的是<code>jobNumber</code>, 作为<code>fg</code>、<code>bg</code>、<code>kill</code>命令的参数。<br><code>+</code>表示最近一个暂停的程序, <code>-</code>表示倒数第二个暂停的任务, 其他的不显示<code>+</code>和<code>-</code>。</p>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Ctrl+Z跳到后台暂停</span></span><br><span class="line">$ vim ~/test.txt</span><br><span class="line">123</span><br><span class="line"><span class="comment"># 按Ctrl+z</span></span><br><span class="line">[1]+  已停止               vim ~/test.tx<span class="comment"># 2. vim跳到前台执行</span></span><br><span class="line">$ <span class="built_in">fg</span> %1</span><br><span class="line"><span class="comment"># 3. 后台执行</span></span><br><span class="line">$ tar -zpcvf /tmp/etc.tar.gz /etc &gt; /tmp/log.txt 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 5143</span><br><span class="line"><span class="comment"># 一段时间后, 执行完毕</span></span><br><span class="line">[1]+  完成                  tar -zpcvf /tmp/etc.tar.gz /etc &gt; /tmp/log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>长城宽带拒退光猫押金</title>
    <url>/posts/The_Great_Wall_Broadband_refused_to_refund_the_deposit.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>长城宽带是真的坑, 没想到被我遇上了, 这里记录下。</p>
<a id="more"></a>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>2017年10月13日, 家里断网了, 我拨打长城宽带客服电话<code>95079</code>咨询, 得知我所在地在进行三线合一工程, 要求使用光猫才能上网。<br>不接光猫就上不了网。<br>行吧, 赶紧催长城宽带过来装光猫。</p>
<p>2017年10月14日, 长城宽带工作人员范某某<!-- 范杰彬 -->(工号<code>14041</code>, 现已离职), 来我家装光猫。<br>说要交<code>200</code>押金, 我就问交押金到时怎么退押金, 重点来了, 他说只要带<code>开户人身份证</code>和<code>开户人手机号</code>过去, 就可以退押金了。<br>于是在没有收到收据的情况下, 交给他<code>200</code>元光猫押金。</p>
<h1 id="口头承诺都是屁-白纸黑字才是理"><a href="#口头承诺都是屁-白纸黑字才是理" class="headerlink" title="口头承诺都是屁, 白纸黑字才是理"></a>口头承诺都是屁, 白纸黑字才是理</h1><p>2018年6月, 家里要换电信, 我去打电话准备办光猫退押金手续。<br>结果长城宽带就开始表演了, 说是后台查不到我的记录, 要我提供押金单, 但是这不存在的押金单根本没有给我。<br>打电话打了几天, 都是在扯皮, 一副你没有押金单, 就不给你退的嘴脸。</p>
<h1 id="投诉之路"><a href="#投诉之路" class="headerlink" title="投诉之路"></a>投诉之路</h1><ol>
<li>(失败) <a href="http://web.sicq.org/" target="_blank" rel="noopener">深圳市消费者委员会消费维权公共服务平台</a>, 长城宽带要求我提供本不存在的单据才能退款, 和解失败。</li>
<li>(完结) 离职工作人员范某某联系我说愿意以<code>100</code>元回收光猫, 迫于没有单据证明, 只好妥协。</li>
</ol>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>原价<code>200</code>的光猫最后只收到<code>100</code>元。</p>
<h1 id="人生经验"><a href="#人生经验" class="headerlink" title="人生经验"></a>人生经验</h1><p>以后做什么事, 无论是工作合同, 还是买卖东西, 银行取款什么的, 都要白纸黑字写的一清二楚, 不给的话就不弄。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8使用console会导致页面阻塞</title>
    <url>/posts/IE8_use_the_console_object_will_cause_the_page_to_be_blocked.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<code>JS</code>里经常会使用<code>console.log()</code>来调试程序(<strong>这是不对的</strong>), 结果在<code>IE8</code>里面发现<code>AJAX</code>执行不了, 一开始以为是<code>IE8</code>不支持<code>JSONP</code>, 后来才知道原来是<code>console</code>的锅。</p>
<a id="more"></a>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>console</code>对象调用<code>log()</code>方法打印日志, 这个操作在<code>IE8</code>的正式环境是行不通的。<br>因为在<code>IE8</code>中, <code>console</code>对象只有在<code>Dev Toolbar</code>开发者工具打开的时候才会创建, 如果在正式环境下, <code>console</code>对象没有创建, 而<code>JS</code>代码去调用了<code>console.log()</code>就会抛出找不到<code>console</code>对象的错误, 导致后续的代码无法执行。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>最好的解决方案就是不使用<code>console.log()</code>调试, 使用浏览器<code>Dev Toolbar</code>开发者工具提供的断点进行<code>debug</code>。</p>
<p><strong>但是</strong><br>代码开发人员的素质水平参差不齐, 所以还是要兼容<code>console</code>。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免出现console错误</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> methods = [</span><br><span class="line">        <span class="string">'assert'</span>, <span class="string">'clear'</span>, <span class="string">'count'</span>, <span class="string">'debug'</span>, <span class="string">'dir'</span>, <span class="string">'dirxml'</span>, <span class="string">'error'</span>,</span><br><span class="line">        <span class="string">'exception'</span>, <span class="string">'group'</span>, <span class="string">'groupCollapsed'</span>, <span class="string">'groupEnd'</span>, <span class="string">'info'</span>, <span class="string">'log'</span>,</span><br><span class="line">        <span class="string">'markTimeline'</span>, <span class="string">'profile'</span>, <span class="string">'profileEnd'</span>, <span class="string">'table'</span>, <span class="string">'time'</span>, <span class="string">'timeEnd'</span>,</span><br><span class="line">        <span class="string">'timeStamp'</span>, <span class="string">'trace'</span>, <span class="string">'warn'</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> length = methods.length;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">console</span> = (<span class="built_in">window</span>.console = <span class="built_in">window</span>.console || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (length--) &#123;</span><br><span class="line">        <span class="keyword">var</span> method = methods[length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// method不存在则设置默认方法</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">console</span>[method]) &#123;</span><br><span class="line">            <span class="built_in">console</span>[method] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">'not support!'</span>) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/a/12315859/6335926" target="_blank" rel="noopener">why-does-javascript-only-work-after-opening-developer-tools-in-ie-once</a></li>
<li><a href="https://stackoverflow.com/questions/690251" target="_blank" rel="noopener">what-happened-to-console-log-in-ie8</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>IE8</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat自定义异常页面</title>
    <url>/posts/Customize_Tomcat_Exceptions_Page.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Tomcat</code>在抛出异常的时候会自动跳转到带有异常堆栈的错误页面, 这很容易暴露自己的代码。</p>
<a id="more"></a>
<h1 id="Tomcat的原生解决方案"><a href="#Tomcat的原生解决方案" class="headerlink" title="Tomcat的原生解决方案"></a>Tomcat的原生解决方案</h1><p>在项目的<code>/WEB-INF/web.xml</code>中指定自定义的默认页面即可, 并且该页面要与<code>WEB-INF</code>文件夹放在同一个目录下。<br>如果是<code>Servlet 2.5</code>, 还需要指定<code>Http</code>状态码。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持Servlet 2.5+, 如果要对状态码特别指定页面, 需要按顺序排列error-page标签  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持Servlet 3  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="SpringMVC的解决方案"><a href="#SpringMVC的解决方案" class="headerlink" title="SpringMVC的解决方案"></a>SpringMVC的解决方案</h1><p><code>Tomcat</code>的解决方案局限性太大, 也不能做逻辑处理记录到数据库之类的操作。</p>
<p>使用<code>ControllerAdvice</code>进行拦截, 并处理逻辑, 也可以重定向到其他页面。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ErrorController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">handleConflict</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>, <span class="title">HttpServletResponse</span> <span class="title">response</span>, <span class="title">Exception</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果使用@ResponseStatus注释异常，则重新抛出该异常并让框架处理该异常</span></span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">"发生了错误"</span>, e);</span><br><span class="line">        <span class="comment">// 逻辑操作, 记录到数据库等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置状态码, 并输出错误信息</span></span><br><span class="line">        response.setStatus(<span class="number">500</span>);</span><br><span class="line">        response.getWriter().println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc" target="_blank" rel="noopener">exception-handling-in-spring-mvc</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>dependencyManagement和dependencies的不同</title>
    <url>/posts/differences_between_dependencymanagement_and_dependencies_in_maven.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着<code>Spring</code>全家桶越做越大，和其他框架的结合的机会也越来越多，现在做<code>Web</code>基本是起手就是一个<code>Spring</code>。这就会出现版本号冲突的问题，比如新的<code>Spring</code>和旧的<code>Quartz</code>不兼容之类的情况。</p>
<a id="more"></a>
<h1 id="Spring-framework-bom"><a href="#Spring-framework-bom" class="headerlink" title="Spring framework bom"></a>Spring framework bom</h1><p>为了解决这个问题，<code>Spring</code>推出了<a href="https://mvnrepository.com/artifact/org.springframework/spring-framework-bom/4.2.0.RELEASE" target="_blank" rel="noopener"><code>spring-framework-bom</code></a>。<code>Spring Boot</code>有对应的<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies" target="_blank" rel="noopener"><code>spring-boot-dependencies</code></a>。<br>只需要将以下<code>pom.xml</code>加入我们项目的<code>pom.xml</code>，就不用在<code>dependencies</code>标签中写版本号。<code>dependencyManagement</code>会自动帮我们引入版本号。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们可以看下<code>spring-framework-bom</code>的源码，可以看到它已经默认为我们填好了版本号。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Framework (Bill of Materials)<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Framework (Bill of Materials)<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        https://github.com/spring-projects/spring-framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring IO<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://projects.spring.io/spring-framework<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jhoeller<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Juergen Hoeller<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>jhoeller@pivotal.io<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">            scm:git:git://github.com/spring-projects/spring-framework</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">            scm:git:git://github.com/spring-projects/spring-framework</span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">            https://github.com/spring-projects/spring-framework</span><br><span class="line">        <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>Jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jira.springsource.org/browse/SPR<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--===================注意这里===================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-instrument<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-instrument-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc-portlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--===================注意这里===================--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>dependencyManagement</code>是一个版本号管理器，官方说法是<strong>中央依赖版本管理</strong>。<br><code>dependencyManagement</code>子标签中的<code>dependency</code>声明的版本号，可以被引用了该<code>dependencyManagement</code>的<code>pom.xml</code>继承，但是需要在<code>pom.xml</code>中声明<code>dependency</code>而不必声明版本号。<br>简单地说，就是自己的<code>pom.xml</code>不用再写<code>dependencyManagement</code>中拥有的<code>dependency</code>的版本号了，但是要写<code>dependency</code>的<strong>名称</strong>(这里的名称只是形象的说法)</p>
<p><strong>!!注意!!</strong><br><code>dependencyManagement</code>并不会产生继承关系，引用了<code>dependencyManagement</code>的新项目的<code>pom.xml</code>，仍需要<strong>手动声明</strong>引用的<code>dependency</code>，只是不用再写版本号。</p>
<p>如果需要继承的话，就使用<code>parent</code>标签，这里不赘述。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ahao-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ahao.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management" target="_blank" rel="noopener">Apache官方文档 Dependency_Management 小节</a></li>
<li><a href="https://stackoverflow.com/questions/2619598" target="_blank" rel="noopener">differences-between-dependencymanagement-and-dependencies-in-maven</a></li>
</ul>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer不能为表中的标识列插入显式值</title>
    <url>/posts/Cannot_insert_explicit_value_for_identity_column.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天遇到个问题，要把线上生产环境的某张数据表的数据导出到本地的测试环境，但是导出后的<code>SQL</code>文件执行时出现了错误。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SQL] INSERT INTO [test_user] ([id], [name]) VALUES (100, &apos;测试用户&apos;)</span><br><span class="line">[Err] 23000 - [SQL Server]当 IDENTITY_INSERT 设置为 OFF 时，不能为表 &apos;test_user&apos; 中的标识列插入显式值。</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>设置<code>identity_insert</code>为<code>ON</code>，执行完毕再设置为<code>OFF</code>即可。<br>设置语法为<code>SET IDENTITY_INSERT [ database.[ owner.] ] { table } { ON | OFF }</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> identity_insert ClassInfo <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [m_opendata] ([<span class="keyword">id</span>], [<span class="keyword">name</span>]) <span class="keyword">VALUES</span> (<span class="number">100</span>, <span class="string">'测试标题'</span>);</span><br><span class="line"><span class="keyword">set</span> identity_insert ClassInfo <span class="keyword">OFF</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/xgcblog/archive/2011/08/10/2133974.html" target="_blank" rel="noopener">当 IDENTITY_INSERT 设置为 OFF 时，不能为表中的标识列插入显式值</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax提交之快速获取表单值</title>
    <url>/posts/get_form_values_when_use_AJAX_submit.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>表单请求经常需要进行表单验证, 然后再进行请求, 再对页面进行后处理, 比如弹出个对话框提示请求成功。<br>普通的<code>form</code>提交是不能满足需求的, 要通过<code>AJAX</code>来处理。</p>
<a id="more"></a>
<h1 id="使用jQuery的submit函数"><a href="#使用jQuery的submit函数" class="headerlink" title="使用jQuery的submit函数"></a>使用jQuery的submit函数</h1><p><code>jQuery</code>提供了<code>submit</code>函数, 来接管提交事件, </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#form-userInfo'</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 拦截默认的提交方式</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取表单值</span></span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">'input[name="username"]'</span>).val();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. ajax请求</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/login'</span>, <span class="comment">// url where to submit the request</span></span><br><span class="line">        type : <span class="string">'POST'</span>, <span class="comment">// type of action POST || GET</span></span><br><span class="line">        dataType : <span class="string">'json'</span>, <span class="comment">// data type</span></span><br><span class="line">        data : &#123; <span class="attr">username</span>: username &#125;, <span class="comment">// post data || get data</span></span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 3.1. 请求成功</span></span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, resp, text</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 3.2. 请求失败</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr, resp, text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="serializeArray-序列化参数"><a href="#serializeArray-序列化参数" class="headerlink" title="serializeArray 序列化参数"></a>serializeArray 序列化参数</h1><p>获取参数的方式有很多种, 上面使用的是最简单的方法, 通过获取元素来获取值。<br>但是如果有很多个参数, 比如用户名、密码、性别、城市、手机号、身份证号等等。<br>每个都要去手动获取元素再来获取值, 就太麻烦了。</p>
<p><code>jQuery</code>提供了<code>serialize</code>和<code>serializeArray</code>两个方法去序列化参数, 关于这两个方法的不同, 可以查阅参考资料和<code>jQuery</code>文档。<br>这里使用<code>serializeArray</code>, 主要是第二步获取参数的方式不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#form-userInfo'</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 拦截默认的提交方式</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取表单值, 看这里!!!!</span></span><br><span class="line">    <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">    $(<span class="keyword">this</span>).serializeArray().map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;data[x.name] = x.value;&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. ajax请求</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/login'</span>, <span class="comment">// url where to submit the request</span></span><br><span class="line">        type : <span class="string">'POST'</span>, <span class="comment">// type of action POST || GET</span></span><br><span class="line">        dataType : <span class="string">'json'</span>, <span class="comment">// data type</span></span><br><span class="line">        data : &#123; <span class="attr">username</span>: username &#125;, <span class="comment">// post data || get data</span></span><br><span class="line">        success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 3.1. 请求成功</span></span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, resp, text</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 3.2. 请求失败</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr, resp, text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/a/17784656/6335926" target="_blank" rel="noopener">Convert form data to JavaScript object with jQuery</a></li>
<li><a href="https://stackoverflow.com/questions/10430502" target="_blank" rel="noopener">What’s the difference between .serialize() and .serializeArray()?</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>尾部的零</title>
    <url>/posts/trailing_zeros.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.lintcode.com/problem/trailing-zeros" target="_blank" rel="noopener">LintCode-尾部的零</a><br><strong>描述</strong><br>设计一个算法，计算出n阶乘中尾部零的个数</p>
<p><strong>样例</strong><br>11! = 39916800，因此应该返回 2</p>
<p><strong>挑战</strong><br>O(logN)的时间复杂度</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><del>这么简单, 递归阶乘, 转字符串, 从后往前遍历</del><br><img src="/images/开玩笑.jpg"></p>
<p>上面的方法当然是超时了.<br>网上也已经有很多解题思路, 自己再总结一下。<br>这个问题可以换个问法, <code>n!=K*10^M</code>, 求<code>M</code>。<br>在样例中, <code>n! = K * 10^M = 11! = 399168 * 10^2</code>。<br>也就是说, 尾部有多少个零, 那么就是<code>K</code>乘以<code>10</code>的多少次方。</p>
<p>再转化一下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11! = 1 * 2 * 3 *    4    * 5 *    6    * 7 *      8      *    9    *   10    * 11</span><br><span class="line">11! = 1 * 2 * 3 * (2 * 2) * 5 * (2 * 3) * 7 * (2 * 2 * 2) * (3 * 3) * (2 * 5) * 11</span><br><span class="line">11! = 1 * 7 * 11 * 3^4 * 2^8 * 5^2</span><br><span class="line">11! = (1 * 7 * 11 * 3^4 * 2^6) * 2^2 * 5^2</span><br><span class="line">11! = (1 * 7 * 11 * 3^4 * 2^6) * (2 * 5)^2</span><br><span class="line">11! = (399168) * 10^2</span><br><span class="line">n!  = K * 10^M</span><br></pre></td></tr></table></figure></p>
<p>可以看到解题方法就是找出<strong>因式分解</strong>后, 里面有多少个 <code>2*5</code>的组合。<br>从上面可以看出, <code>2</code>的数量一定是比<code>5</code>多的。<br>所以, 因式分解后有多少个<code>5</code>, 尾部就有多少个零。</p>
<p>再转化一下, 能被<code>5</code>整除的因子必然是<code>5</code>的倍数, 也就是说, <del>找出<code>n</code>之前有多少个<code>5</code>的倍数</del>(这是不正确的)。<br>还需要考虑到<code>25, 125</code>等数字。</p>
<table>
<thead>
<tr>
<th style="text-align:center">n</th>
<th style="text-align:center">因子是5的倍数</th>
<th style="text-align:center">计算方法</th>
<th style="text-align:center">多少个零</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">5, 10</td>
<td style="text-align:center">11 / 5 = 2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">5, 10, 15, 20, 25</td>
<td style="text-align:center">26 / 5 + 26 / 25 = 6</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1000</td>
<td style="text-align:center">5, 10, 15, …. 995, 1000</td>
<td style="text-align:center">1000 / 5 + 1000 / 25 + 1000 / 125 …. = 249</td>
<td style="text-align:center">249</td>
</tr>
</tbody>
</table>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">trailingZeros</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123; </span><br><span class="line">        count += n / <span class="number">5</span>;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LintCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LintCode</tag>
      </tags>
  </entry>
  <entry>
    <title>A+B问题</title>
    <url>/posts/a_b_problem.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>萌新重新开始刷题了, 在<code>LintCode</code>遇到一道题目, 是讲不用<code>+</code>运算符进行加法运算。<br><a href="https://www.lintcode.com/problem/a-b-problem/description" target="_blank" rel="noopener">A + B 问题</a></p>
<a id="more"></a>
<h1 id="不进位加法算法"><a href="#不进位加法算法" class="headerlink" title="不进位加法算法"></a>不进位加法算法</h1><p>既然不用<code>+</code>运算符, 那就直接<code>return a-(-b)</code>就行啦~<br><img src="/images/开玩笑.jpg"></p>
<p>言归正传, 既然不能用<code>+</code>运算符, 那必然是位运算的范畴了。</p>
<p>异或运算, 又叫做不进位加法, 这里的加法都是基于二进制的。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0+0=0</td>
<td style="text-align:center">0+1=1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1+0=1</td>
<td style="text-align:center">1+1=0(不进位)</td>
</tr>
</tbody>
</table>
<p>再来看下异或运算</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0^0=0</td>
<td style="text-align:center">0^1=1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1^0=1</td>
<td style="text-align:center">1^1=0</td>
</tr>
</tbody>
</table>
<p>可以看出 <strong>不进位加法 = 异或运算</strong></p>
<h1 id="进位算法"><a href="#进位算法" class="headerlink" title="进位算法"></a>进位算法</h1><p>进位的情况只有一种, 也就是<code>1+1</code>的情况, 可以通过<code>&amp;</code>与运算找到。<br>也就是说, 我们需要找到全1的一位, 再左移一位, 就可以得到进位后的值。</p>
<p>下面是一个加法的例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a       + b         = (a ^ b)  + (a &amp; b &lt;&lt; 1)</span><br><span class="line">4(0100) + 6(0110)   = 2(0010)  + 4(0100) &lt;&lt; 1</span><br><span class="line">4(0100) + 6(0110)   = 2(0010)  + 8(1000)</span><br><span class="line">2(0010) + 8(1000)   = 10(1010) + 0(0000)</span><br></pre></td></tr></table></figure></p>
<p>当不需要进位之后, 运算结束。</p>
<p>伪代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> xor=a^b, and=(a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    a = xor;</span><br><span class="line">    b = and;</span><br><span class="line">&#125; <span class="keyword">while</span>(b != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LintCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LintCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring默认以包名加类名为BeanName解决命名冲突</title>
    <url>/posts/Spring_resolves_naming_conflicts_by_default_with_PackageName_ClassName_BeanName.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Spring</code>可以自动将<code>@Component</code>注解修饰的类加载为<code>Bean</code>.<br>比如<code>MyController</code>这个类, 就会加载为名称是<code>myController</code>的<code>Bean</code>.<br>但是, 如果在不同的模块下, 不同的包下, 有着相同文件名的类, 就会造成<code>BeanName</code>冲突。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- com.ahao.project</span><br><span class="line">    -  moduleA</span><br><span class="line">        - IndexController.java</span><br><span class="line">        - moduleAService.java</span><br><span class="line">    - moduleB</span><br><span class="line">        - IndexController.java</span><br><span class="line">        - moduleBService.java</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>为什么我们使用<code>Java</code>类的时候不会发生冲突呢?<br>因为<code>import</code>将包名导入了, 否则我们需要输入<code>包名.类名</code>才能使用这个类。</p>
<p>引用这个思路, 将<code>BeanName</code>也设置成<code>包名.类名</code>的形式。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ahao"</span> <span class="attr">name-generator</span>=<span class="string">"com.ahao.core.spring.bean.PackageBeanNameGenerator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageBeanNameGenerator</span> <span class="keyword">extends</span> <span class="title">AnnotationBeanNameGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(PackageBeanNameGenerator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateBeanName</span><span class="params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        String beanClassName = Introspector.decapitalize(definition.getBeanClassName());</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.startsWith(beanClassName, getPackageNamePrefix())) &#123;</span><br><span class="line">            logger.debug(<span class="string">"初始化Bean: "</span> + beanClassName);</span><br><span class="line">            <span class="keyword">return</span> beanClassName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.generateBeanName(definition, registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPackageNamePrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String separator = <span class="string">"."</span>;</span><br><span class="line">        String[] splits = StringUtils.split(<span class="keyword">this</span>.getClass().getPackage().getName(), separator);</span><br><span class="line">        String prefix = Arrays.stream(splits).limit(<span class="number">3</span>)</span><br><span class="line">                .collect(Collectors.joining(separator));</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Mybatis使用BeanNameGenerator"><a href="#Mybatis使用BeanNameGenerator" class="headerlink" title="Mybatis使用BeanNameGenerator"></a>Mybatis使用BeanNameGenerator</h1><p>在<code>Spring</code>整合发现<code>Mybatis</code>的<code>BeanName</code>生成没有使用<code>BeanNameGenerator</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ahao"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">name-generator</span>=<span class="string">"com.ahao.core.beans.PackageBeanNameGenerator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ModuleDAO</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getNames</span><span class="params">()</span></span>; <span class="comment">// 使用 ModuleMapper.xml</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在调试时，<code>Mybatis</code>的代理类没有使用<code>@Repository</code>注解，所以<code>include-filter</code>没有扫描到代理类。</p>
<p>在<code>Stack Overflow</code>提问也没人回。<br>后来自己找到了解决方法, 在配置<code>MapperScannerConfigurer</code>时注入<code>NameGenerator</code>即可。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置扫描Dao接口包,动态实现DAO接口,注入到spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给出需要扫描的Dao接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ahao.**.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nameGenerator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ahao.core.spring.beans.PackageBeanNameGenerator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Spring-Boot-基于注解的配置"><a href="#Spring-Boot-基于注解的配置" class="headerlink" title="Spring Boot 基于注解的配置"></a>Spring Boot 基于注解的配置</h1><p><code>Spring Boot</code>分为两种启动方式</p>
<ul>
<li>通过<code>main</code>方法启动内嵌<code>Tomcat</code></li>
<li>打包<code>war</code>包启动外置<code>Tomcat</code></li>
</ul>
<p>直接看代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. main方法启动</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        app.setBeanNameGenerator(<span class="keyword">new</span> PackageBeanNameGenerator());</span><br><span class="line">        app.run(args);</span><br><span class="line">        logger.info(<span class="string">"Spring Boot 启动成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 外置Tomcat启动</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">beanNameGenerator</span>(<span class="title">new</span> <span class="title">PackageBeanNameGenerator</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样的, <code>Mybatis</code>依然需要单独配置, 重点在<code>@MapperScan</code>注解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"ahao.datasource"</span>, name = <span class="string">"open"</span>, havingValue = <span class="string">"false"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"com.ahao.**.dao"</span>&#125;, nameGenerator = PackageBeanNameGenerator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据源连接池配置, DruidProperties是自定义的配置类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">(DruidProperties druidProperties)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidProperties.config(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/5414215" target="_blank" rel="noopener">automatically-assign-springs-bean-name-to-prevent-name-conflicts</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>计算两个日期之间的工作日时间差</title>
    <url>/posts/Calculate_the_number_of_working_days_between_two_dates.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作日的计算是一个大的问题, 要考虑假期, 而且每年的假期也不一样。假期完还有工作日调休等。<br>所以必须要将假期存储在硬盘上的数据(数据库或xml)。<br>然后计算时间差。<br>比如, 2018年5月11日星期五, 需要过3个工作日, 那么就是2018年5月16日星期三。</p>
<a id="more"></a>
<h1 id="假期的获取"><a href="#假期的获取" class="headerlink" title="假期的获取"></a>假期的获取</h1><p>假期每年都是不一样的, 所以</p>
<ol>
<li>通过人工查看政策文件手动写入硬盘, 如<a href="http://sousuo.gov.cn/s.htm?t=paper&amp;advance=true&amp;title=节假日安排" target="_blank" rel="noopener">节假日安排</a></li>
<li>通过<code>Api</code>定时任务<code>Quartz</code>进行获取, 如<a href="https://www.juhe.cn/docs/api/id/177" target="_blank" rel="noopener">聚合数据Api</a></li>
</ol>
<h2 id="以xml形式存储"><a href="#以xml形式存储" class="headerlink" title="以xml形式存储"></a>以xml形式存储</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">holidays</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-01-01"</span> <span class="attr">desc</span>=<span class="string">"元旦"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-15"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-16"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-17"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-18"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-19"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-20"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-21"</span> <span class="attr">desc</span>=<span class="string">"春节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-05"</span> <span class="attr">desc</span>=<span class="string">"清明节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-06"</span> <span class="attr">desc</span>=<span class="string">"清明节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-07"</span> <span class="attr">desc</span>=<span class="string">"清明节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-29"</span> <span class="attr">desc</span>=<span class="string">"劳动节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-30"</span> <span class="attr">desc</span>=<span class="string">"劳动节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-05-01"</span> <span class="attr">desc</span>=<span class="string">"劳动节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-06-16"</span> <span class="attr">desc</span>=<span class="string">"端午节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-06-17"</span> <span class="attr">desc</span>=<span class="string">"端午节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-06-18"</span> <span class="attr">desc</span>=<span class="string">"端午节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-09-22"</span> <span class="attr">desc</span>=<span class="string">"中秋节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-09-23"</span> <span class="attr">desc</span>=<span class="string">"中秋节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-09-24"</span> <span class="attr">desc</span>=<span class="string">"中秋节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-01"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-02"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-03"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-04"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-05"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-06"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-10-07"</span> <span class="attr">desc</span>=<span class="string">"国庆节"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">holidays</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">workingdays</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-11"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-02-24"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-08"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-04-28"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-09-29"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">day</span> <span class="attr">value</span>=<span class="string">"2018-09-30"</span> <span class="attr">desc</span>=<span class="string">"调休成为工作日"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">workingdays</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="以数据库形式存储"><a href="#以数据库形式存储" class="headerlink" title="以数据库形式存储"></a>以数据库形式存储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id          day        desc</span><br><span class="line">1        2018-01-01    元旦</span><br><span class="line">2        2018-02-15    春节</span><br><span class="line">3        2018-02-16    春节</span><br><span class="line">4        2018-02-17    春节</span><br><span class="line">5        2018-02-18    春节</span><br><span class="line">6        2018-02-19    春节</span><br><span class="line">7        2018-02-20    春节</span><br><span class="line">8        2018-02-21    春节</span><br><span class="line">9        2018-04-05    清明节</span><br><span class="line">10       2018-04-06    清明节</span><br><span class="line">11       2018-04-07    清明节</span><br><span class="line">12       2018-04-29    劳动节</span><br><span class="line">13       2018-04-30    劳动节</span><br><span class="line">14       2018-05-01    劳动节</span><br><span class="line">15       2018-06-16    端午节</span><br><span class="line">16       2018-06-17    端午节</span><br><span class="line">17       2018-06-18    端午节</span><br><span class="line">18       2018-09-22    中秋节</span><br><span class="line">19       2018-09-23    中秋节</span><br><span class="line">20       2018-09-24    中秋节</span><br><span class="line">21       2018-10-01    国庆节</span><br><span class="line">22       2018-10-02    国庆节</span><br><span class="line">23       2018-10-03    国庆节</span><br><span class="line">24       2018-10-04    国庆节</span><br><span class="line">25       2018-10-05    国庆节</span><br><span class="line">26       2018-10-06    国庆节</span><br><span class="line">27       2018-10-07    国庆节</span><br><span class="line">28       2018-02-11    调休成为工作日</span><br><span class="line">29       2018-02-24    调休成为工作日</span><br><span class="line">30       2018-04-08    调休成为工作日</span><br><span class="line">31       2018-04-28    调休成为工作日</span><br><span class="line">32       2018-09-29    调休成为工作日</span><br><span class="line">33       2018-09-30    调休成为工作日</span><br></pre></td></tr></table></figure>
<h1 id="计算工作日的时间差"><a href="#计算工作日的时间差" class="headerlink" title="计算工作日的时间差"></a>计算工作日的时间差</h1><p>代码逻辑都写在注释中了。<br>其中, <code>holidaysMap&lt;年月日, 节假日名称&gt;</code>和<code>workingdaysMap&lt;年月日, 调休&gt;</code>两个<code>Map</code>集合读取的数据, 来源于上述的数据集合。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DurationFormatUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkDateHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WorkDateHelper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DAY_TIME = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 1天的毫秒数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat yyyyMMdd = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算工作日的时间差</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preDate 前一个日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate 后一个日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">workTimeDiff</span><span class="params">(Date preDate, Date nextDate)</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 保证 前一个日期 大于 后一个日期</span></span><br><span class="line">        <span class="keyword">long</span> preTime = preDate.getTime(), nextTime = nextDate.getTime();</span><br><span class="line">        <span class="keyword">if</span>(preTime &gt; nextTime)&#123;</span><br><span class="line">            logger.error(<span class="string">"前一个日期"</span>+yyyyMMdd.format(preDate)+<span class="string">"不能大于后一个日期"</span>+yyyyMMdd.format(nextDate));</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 校准 preTime, 调整到明天0点整点</span></span><br><span class="line">        <span class="keyword">long</span> timeDiff = <span class="number">0</span>;</span><br><span class="line">        calendar.setTimeInMillis(preTime);</span><br><span class="line">        calendar.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">        calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1. 如果是节假日调休或工作日, 就记录校准时间差</span></span><br><span class="line">        <span class="keyword">if</span>(isWorkDate(preTime)) &#123;</span><br><span class="line">            timeDiff += calendar.getTimeInMillis() - preTime;</span><br><span class="line">        &#125;</span><br><span class="line">        preTime = calendar.getTimeInMillis();</span><br><span class="line"><span class="comment">//        logger.debug("校准preTime:"+new Date(preTime)+","+DurationFormatUtils.formatDuration(timeDiff, "**dd HH:mm:ss**", true));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 校准 nextTime, 调整到当天0点整点</span></span><br><span class="line">        calendar.setTimeInMillis(nextTime);</span><br><span class="line">        calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">        calendar.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.1. 如果是节假日调休或工作日, 就记录校准时间差</span></span><br><span class="line">        <span class="keyword">if</span>(isWorkDate(nextTime)) &#123;</span><br><span class="line">            timeDiff += nextTime - calendar.getTimeInMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        nextTime = calendar.getTimeInMillis();</span><br><span class="line"><span class="comment">//        logger.debug("校准nextTime:"+new Date(nextTime)+","+DurationFormatUtils.formatDuration(timeDiff, "**dd HH:mm:ss**", true));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 模拟时间流逝, 计算在工作日内的时间差</span></span><br><span class="line">        <span class="keyword">while</span>(preTime &lt; nextTime) &#123;</span><br><span class="line">            <span class="comment">// 3. 如果是节假日调休或工作日, 就记录校准时间差</span></span><br><span class="line">            <span class="keyword">if</span>(isWorkDate(preTime)) &#123;</span><br><span class="line">                timeDiff += DAY_TIME;</span><br><span class="line">            &#125;</span><br><span class="line">            preTime += DAY_TIME;</span><br><span class="line"><span class="comment">//            logger.debug("时间流逝:"+new Date(preTime)+","+DurationFormatUtils.formatDuration(timeDiff, "**dd HH:mm:ss**", true));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> timeDiff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为 工作日, 节假日调休或正常工作日</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 计算的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWorkDate</span><span class="params">(<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        String day = yyyyMMdd.format(<span class="keyword">new</span> Date(time));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 是节假日就返回false</span></span><br><span class="line">        <span class="keyword">if</span>(holidaysMap.containsKey(day))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 是节假日调休就返回true</span></span><br><span class="line">        <span class="keyword">if</span>(workingdaysMap.containsKey(day))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 是周末返回false</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTimeInMillis(time);</span><br><span class="line">        <span class="keyword">int</span> dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        <span class="keyword">if</span>(dayOfWeek == Calendar.SUNDAY || dayOfWeek == Calendar.SATURDAY)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 是正常工作日就返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX加载和SEO优化</title>
    <url>/posts/AJAX_loading_and_SEO.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搜索引擎是不执行<code>JavaScript</code>的, 换言之, 搜索引擎和<code>AJAX</code>加载数据是水火不容的。<br>不过<a href="https://github.com/cssmagic/blog-old/issues/22" target="_blank" rel="noopener">听说</a>谷歌的搜索引擎可以执行<code>AJAX</code>, 不愧是谷人希。</p>
<a id="more"></a>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>既然搜索引擎不能爬到<code>AJAX</code>数据, 那么只要将数据写到<code>JSP</code>中就可以了。<br>但是这样就失去了<code>AJAX</code>局部加载的功能。</p>
<p>搜索引擎是爬取链接的, 那么只要以下形式加载数据, 就可以兼顾搜索引擎和<code>AJAX</code>了。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:8080/blog-1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"next"</span> <span class="attr">value</span>=<span class="string">"$&#123;page+1&#125;"</span>/&gt;</span><span class="comment">&lt;!-- JSP标签, next值为2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog-$&#123;next&#125;"</span> <span class="attr">onclick</span>=<span class="string">"ajaxBlog($&#123;next&#125;); return false;"</span>&gt;</span>加载第$&#123;next&#125;页的blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在点击<code>&lt;a&gt;</code>标签的时候, 会执行以下顺序</p>
<ol>
<li>执行<code>onclick()</code>函数</li>
<li>执行<code>ajaxBlog()</code>函数加载下一页的博客</li>
<li><code>onclick()</code>函数<code>return false</code>拦截点击事件</li>
<li><code>href</code>链接跳转被拦截, 不执行</li>
</ol>
<p>数据加载就解决了, 但是又有个问题, 这个<code>&lt;a&gt;</code>标签也必须写在<code>JSP</code>中, 不能通过<code>JavaScript</code>生成, 因为搜索引擎不爬取<code>JavaScript</code>。<br>也就是说, 这个<code>&lt;a&gt;</code>标签, 分页器, 需要在<code>Java</code>代码拼接<code>Html</code>分页器。</p>
<p>分页器如下, 需要<code>Java</code>代码拼接<code>Html</code>, 传到<code>JSP</code>中。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog-1"</span> <span class="attr">onclick</span>=<span class="string">"ajaxBlog(1); return false;"</span>&gt;</span>加载第1页的blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog-2"</span> <span class="attr">onclick</span>=<span class="string">"ajaxBlog(2); return false;"</span>&gt;</span>加载第2页的blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog-3"</span> <span class="attr">onclick</span>=<span class="string">"ajaxBlog(3); return false;"</span>&gt;</span>加载第3页的blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog-4"</span> <span class="attr">onclick</span>=<span class="string">"ajaxBlog(4); return false;"</span>&gt;</span>加载第4页的blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://zy116494718.iteye.com/blog/1685776" target="_blank" rel="noopener">ajax对于seo的影响</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>文字单行溢出显示省略号</title>
    <url>/posts/Text_single_line_overflow_display_ellipses.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搜索候选框需要单行显示, 超出长度的部分用省略号表示。</p>
<a id="more"></a>
<h1 id="简单粗暴的方式"><a href="#简单粗暴的方式" class="headerlink" title="简单粗暴的方式"></a>简单粗暴的方式</h1><p>直接使用<code>substring</code>截取字符串, 然后加上省略号。<br>但是这种方式不支持响应式。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">'1234567890'</span>;</span><br><span class="line"><span class="keyword">if</span> (title.length &gt; <span class="number">23</span>) &#123;</span><br><span class="line">    title = title.substring(<span class="number">0</span>, <span class="number">23</span>) + <span class="string">'...'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// substr和substring的区别</span></span><br><span class="line">alert(<span class="string">"abc"</span>.substr(<span class="number">1</span>,<span class="number">2</span>));    <span class="comment">// 从第2个字符(0为起始)之后长度为2的子字符串, returns "bc"</span></span><br><span class="line">alert(<span class="string">"abc"</span>.substring(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// 从第2个字符(0为起始)开始, 第3个字符之前的子字符串, returns "b"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="CSS3的解决方案-支持IE8"><a href="#CSS3的解决方案-支持IE8" class="headerlink" title="CSS3的解决方案(支持IE8)"></a>CSS3的解决方案(支持IE8)</h1><p>添加以下样式即可<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipses</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;        <span class="comment">/* 当内容溢出元素框时, 超出部分隐藏 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;     <span class="comment">/* 文本不会换行，文本会在在同一行上继续，直到遇到 &lt;br&gt; 标签为止 */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 规定当文本溢出包含元素时, 用省略号表示超出部分 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>TravisCI加密配置文件并自动部署Hexo</title>
    <url>/posts/TravisCI_encrypts_configuration_files_and_automatically_deploys_Hexo.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis-CI</a>是一个可以将<code>Github</code>上的代码做持续集成的网站。<br>持续集成和版本控制相关联, <code>Git</code>就是一种版本控制, 可以提交, 也可以下载, 就像网盘一样。<br>持续集成就是你的每一次提交上传, 服务器都会自动对你提交后的代码进行编译, 单元测试等一系列行为, 并告知你是否成功。</p>
<a id="more"></a>
<h1 id="阅读条件"><a href="#阅读条件" class="headerlink" title="阅读条件"></a>阅读条件</h1><ol>
<li>至少一次手动<code>hexo d</code>部署过<code>GitHub Page</code>博客</li>
<li>熟悉Linux基本命令</li>
<li>熟练Git基本命令</li>
</ol>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="准备虚拟机"><a href="#准备虚拟机" class="headerlink" title="准备虚拟机"></a>准备虚拟机</h2><ol>
<li>使用的是<code>CentOS7</code>虚拟机, 用户名<code>root</code>, 密码<code>root</code></li>
<li><p>网络连接选择<strong>桥接</strong>模式, 关于桥接模式可以看我的另一篇文章。</p>
<img src="/images/TravisCI加密配置文件并自动部署Hexo_01.png">
</li>
<li><p><code>Windows</code>网络环境选择专用网络</p>
<img src="/images/TravisCI加密配置文件并自动部署Hexo_02.png"></li>
<li><p><code>Windows10</code>需要在网络适配器属性界面, 添加<code>VMware Bridge Protocol</code>协议。</p>
<img src="/images/TravisCI加密配置文件并自动部署Hexo_03.png">
</li>
<li><p>使用<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">Xshell</a>(发送命令)和<a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla</a>(传输文件)在<code>Windows</code>上连接虚拟机. 两者都是通过<code>ssh</code>连接的, 在软件中配置好虚拟机的<code>IP</code>地址和账号密码<code>root</code>即可。</p>
<img src="/images/TravisCI加密配置文件并自动部署Hexo_04.png">
<img src="/images/TravisCI加密配置文件并自动部署Hexo_05.png">
<img src="/images/TravisCI加密配置文件并自动部署Hexo_06.png">
</li>
</ol>
<h2 id="准备Travis-CI帐号"><a href="#准备Travis-CI帐号" class="headerlink" title="准备Travis-CI帐号"></a>准备Travis-CI帐号</h2><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis-CI</a>支持<code>GitHub</code>帐号登录。<br>配置教程参考<a href="https://segmentfault.com/a/1190000009054888#articleHeader1" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a></p>
<h2 id="准备Git并clone"><a href="#准备Git并clone" class="headerlink" title="准备Git并clone"></a>准备Git并clone</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 修改yum源 为 网易源</span></span><br><span class="line">yum install -y wget</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="comment"># 2. 安装git</span></span><br><span class="line">yum install -y git</span><br><span class="line"><span class="comment"># 3. 配置git</span></span><br><span class="line">git config --global user.name <span class="string">"Ahaochan"</span></span><br><span class="line">git config --global user.email <span class="string">"844394093@qq.com"</span></span><br><span class="line"><span class="comment"># 3. clone项目到/opt文件夹下</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Ahaochan/Ahaochan.github.io.git</span><br><span class="line"><span class="built_in">cd</span> Ahaochan.github.io/</span><br><span class="line"><span class="comment"># 4. 新建并切换到source分支</span></span><br><span class="line">git branch <span class="built_in">source</span></span><br><span class="line">git checkout <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 5. 删除所有文件, 为hexo源文件腾出位置</span></span><br><span class="line">rm -rf *</span><br></pre></td></tr></table></figure>
<h2 id="准备Travis-CI-客户端"><a href="#准备Travis-CI-客户端" class="headerlink" title="准备Travis-CI 客户端"></a>准备Travis-CI 客户端</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装gcc和ruby环境</span></span><br><span class="line">yum install -y gcc ruby ruby-devel</span><br><span class="line"><span class="comment"># 2. 改为国内gem源</span></span><br><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ </span><br><span class="line"><span class="comment"># 3. 安装Travis</span></span><br><span class="line">gem install travis</span><br><span class="line"><span class="comment"># 4. 登录Travis, 并输入账号密码, 注意使用的是 travis-ci.org 或 travis-ci.com</span></span><br><span class="line"><span class="comment">#    org 现在已迁移到 com, 发送标题 Open Source Migration Beta Testing 邮件到 support@travis-ci.com 即可开通 Beta 迁移功能.</span></span><br><span class="line"><span class="comment">#    https://docs.travis-ci.com/user/migrate/open-source-on-travis-ci-com/#existing-open-source-repositories-on-travis-ciorg</span></span><br><span class="line">travis login --com</span><br></pre></td></tr></table></figure>
<h2 id="将本地的hexo移动到服务器"><a href="#将本地的hexo移动到服务器" class="headerlink" title="将本地的hexo移动到服务器"></a>将本地的hexo移动到服务器</h2><p><strong>请确保服务器的项目分支已经切换到<code>source</code></strong><br>通过<a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla</a>将本地的<code>hexo</code>文件夹部署到服务器。<br>为了节省<code>GitHub</code>空间, 我只将以下文件加入仓库中。<br><img src="/images/TravisCI加密配置文件并自动部署Hexo_07.png"></p>
<h1 id="加密next-yml"><a href="#加密next-yml" class="headerlink" title="加密next.yml"></a>加密next.yml</h1><p>我将<code>hexo/_config.yml</code>和<code>theme/next/_config.yml</code>的内容统一复制到<code>source/_data/next.yml</code>中。<br>配置文件包含太多敏感信息, 所以我进行了加密.<br><code>Travis-CI</code>提供了加密策略, 只要加密后, 就只有<code>Travis-CI</code>能解密, 就算是加密的人也不能解密。具体可以看我翻译的<code>Travis-CI</code>文档。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 确保在source分支下操作</span></span><br><span class="line">git checkout <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 2. 进入next.yml所在文件夹</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_data</span><br><span class="line"><span class="comment"># 3. 进行加密(如果想要加密多个文件, 需要将多个文件打包, 再在Travis-CI解压)</span></span><br><span class="line">travis encrypt-file next.yml</span><br><span class="line"><span class="comment"># 4. 在.travis.yml中加入配置, 注意要指定source/_data/next.yml路径. (这里不要复制我的key, 每个人都不一样)</span></span><br><span class="line">vim /opt/Ahaochan.github.io/.travis.yml</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_3873d9e40d23_key</span> -iv <span class="variable">$encrypted_3873d9e40d23_iv</span> -<span class="keyword">in</span> <span class="built_in">source</span>/_data/next.yml.enc -out <span class="built_in">source</span>/_data/next.yml -d</span><br><span class="line"><span class="comment"># 5. 在.gitignore添加一行, 不提交next.yml</span></span><br><span class="line">vim /opt/Ahaochan.github.io/.gitignore</span><br><span class="line"><span class="built_in">source</span>/_data/next.yml</span><br></pre></td></tr></table></figure>
<h1 id="给予Travis推送GitHub的权限"><a href="#给予Travis推送GitHub的权限" class="headerlink" title="给予Travis推送GitHub的权限"></a>给予Travis推送GitHub的权限</h1><p>网上很多都是生成<code>ssh</code>公钥, 或者直接使用<code>git push -u origin master</code>的方式部署。<br>我参考的<a href="https://segmentfault.com/a/1190000009054888#articleHeader1" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a>配置了<code>REPO_TOKEN</code>, 但是没有物尽其用。<br>这里将<code>REPO_TOKEN</code>做了替换。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># next.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://REPO_TOKEN@github.com/Ahaochan/Ahaochan.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="comment"># 注意要放在解密next.yml文件命令之后</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/REPO_TOKEN/$&#123;REPO_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure>
<h1 id="从GitHub下载最新模块和主题"><a href="#从GitHub下载最新模块和主题" class="headerlink" title="从GitHub下载最新模块和主题"></a>从GitHub下载最新模块和主题</h1><p>为了节省<code>Github</code>空间, 我在<code>.travis.yml</code>配置了很多的下载命令.<br>详细可以看我的GitHub<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="comment"># node版本</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">lts/*</span></span><br><span class="line"><span class="comment"># 设置只监听哪个分支</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source</span></span><br><span class="line"><span class="comment"># 缓存，可以节省集成的时间，这里我用了yarn，如果不用可以删除</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">apt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">yarn:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">theme</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="comment">#  配置git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"Ahaochan"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"844394093@qq.com"</span></span><br><span class="line"><span class="comment"># 由于使用了yarn，所以需要下载，如不用yarn这两行可以删除</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">curl</span> <span class="string">-o-</span> <span class="string">-L</span> <span class="string">https://yarnpkg.com/install.sh</span> <span class="string">|</span> <span class="string">bash</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">export</span> <span class="string">PATH=$HOME/.yarn/bin:$PATH</span></span><br><span class="line"><span class="comment"># npm模块安装</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">global</span> <span class="string">add</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-asset-image</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-generator-feed</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-related-popular-posts</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-symbols-count-time</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-generator-sitemap</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-generator-baidu-sitemap</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-leancloud-counter-security</span> <span class="string">--save</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-helper-live2d</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># next.yml配置文件解密</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_3873d9e40d23_key</span> <span class="string">-iv</span> <span class="string">$encrypted_3873d9e40d23_iv</span> <span class="string">-in</span> <span class="string">source/_data/next.yml.enc</span> <span class="string">-out</span> <span class="string">source/_data/next.yml</span> <span class="string">-d</span></span><br><span class="line"><span class="comment"># 将 GitHub Token 替换到 next.yml 中</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/REPO_TOKEN/$&#123;REPO_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="comment"># next主题下载</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/hexo-theme-next</span> <span class="string">themes/next</span></span><br><span class="line"><span class="comment"># next主题依赖下载</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-pangu.git</span> <span class="string">themes/next/source/lib/pangu</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-reading-progress</span> <span class="string">themes/next/source/lib/reading_progress</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-fastclick</span> <span class="string">themes/next/source/lib/fastclick</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-jquery-lazyload</span> <span class="string">themes/next/source/lib/jquery_lazyload</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-pace</span> <span class="string">themes/next/source/lib/pace</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">themes/next/source/lib/canvas-nest</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-fancybox3</span> <span class="string">themes/next/source/lib/fancybox</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="comment"># 不用yarn的话这里改成 npm i 即可</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="comment"># 配置 LeanCloud</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">lc-counter</span> <span class="string">register</span> <span class="string">$leancloud_username</span> <span class="string">$leancloud_password</span> <span class="string">--config</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">--config</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">--config</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">d</span> <span class="string">--config</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后将所有文件<code>git push -u origin source</code>推送到远程的<code>source</code>分支上即可。<br>如果失败, 可以在 <a href="https://travis-ci.org/Ahaochan/Ahaochan.github.io/requests" target="_blank" rel="noopener">https://travis-ci.org/Ahaochan/Ahaochan.github.io/requests</a> 查看错误信息。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.jianshu.com/p/d8573f9d1f96" target="_blank" rel="noopener">CentOS yum 源的配置与使用</a></li>
<li><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a></li>
<li><a href="http://kflu.github.io/2017/01/03/2017-01-03-hexo-travis/" target="_blank" rel="noopener">Auto Deploy Hexo.io to Github Pages With Travis CI</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Travis-CI</tag>
      </tags>
  </entry>
  <entry>
    <title>currentRequestAttributes和getRequestAttributes获取HttpServletRequest对象</title>
    <url>/posts/use_currentRequestAttributes()_and_getRequestAttributes()_to_get_HttpServletRequest_object.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Spring</code>获取<code>HttpServletRequest</code>的方法有很多。<br>比较常用的是使用<code>@Autowired</code>或者直接在方法参数里面注入。</p>
<a id="more"></a>
<h1 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h1><p>从数据库<code>dao</code>层取出了<code>url</code>资源路径, 需要结合<code>ContextPath</code>进行补充。<br>比如访问<code>http://localhost:8080/project/userList</code>, 项目路径是<code>project</code>。<br>查询到以下数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id    name       avatar_url</span><br><span class="line">1     user1     /avatar1.jpg</span><br><span class="line">2     user2     /avatar2.jpg</span><br><span class="line">3     user3     /avatar3.jpg</span><br></pre></td></tr></table></figure></p>
<p>如果直接将<code>avatar_url</code>填入<code>&lt;img src=&quot;/avatar1.jpg&quot;/&gt;</code>中的话, 会出现<code>404</code>错误。<br>需要在前面添加项目路径<code>ContextPath</code>, 也就是<code>&lt;img src=&quot;/project/avatar1.jpg&quot;/&gt;</code>才能正常访问。</p>
<h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><p>现在的项目一般都是通过<code>MVC</code>完成的。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyController</span><span class="params">(MyService myService)</span></span>&#123; <span class="keyword">this</span>.myService = myService; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/userList"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, String&gt;&gt; userList()&#123;</span><br><span class="line">        <span class="keyword">return</span> myService.getUserList();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyService</span></span>&#123; List&lt;Map&lt;String, String&gt;&gt; getUserList(); &#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title">MyService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyDao myDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServiceImpl</span><span class="params">(MyDao myDao)</span> </span>&#123; <span class="keyword">this</span>.myDao = myDao; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, String&gt;&gt; getUserList() &#123;</span><br><span class="line">        <span class="comment">// 给avatar_url添加contextPath前缀</span></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; list = myDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, String&gt; user : list) &#123;</span><br><span class="line">            String url = user.get(<span class="string">"avatar_url"</span>);</span><br><span class="line">            user.put(<span class="string">"avatar_url"</span>, contextPath+url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, String&gt;&gt; getUserList()&#123;</span><br><span class="line">        <span class="comment">// 模拟从数据库取出数据</span></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            Map&lt;String, String&gt; user = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            user.put(<span class="string">"id"</span>, String.valueOf(i));</span><br><span class="line">            user.put(<span class="string">"name"</span>, <span class="string">"user"</span>+i);</span><br><span class="line">            user.put(<span class="string">"avatar_url"</span>, <span class="string">"/avatar"</span>+i+<span class="string">".jpg"</span>);</span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用Spring自动注入"><a href="#使用Spring自动注入" class="headerlink" title="使用Spring自动注入"></a>使用Spring自动注入</h2><p>只要是实现了<code>@Component</code>注解(<code>@Controller</code>中包含<code>@Component</code>, 注意, 注解没有继承), <code>Spring</code>就可以自动为其注入<code>HttpServletRequest</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">    HttpServletRequest request1; <span class="comment">// 1. 第一种方法</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/userList"</span>)</span><br><span class="line">    <span class="comment">// 2. 第二种方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, String&gt;&gt; userList(HttpServletRequest request2)&#123;</span><br><span class="line">        <span class="keyword">return</span> myService.getUserList();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面两种都可以取得<strong>线程安全</strong>的<code>HttpServletRequest</code>对象。</p>
<p>但是有个弊端。<br>使用<code>HttpServletRequest</code>对象的类必须实现<code>@Component</code>注解。<br>如果我是在工具类<code>Utils</code>中使用, 则必须要为<code>Utils</code>中的静态方法提供一个<code>HttpServletRequest</code>参数。<br>如果函数调用链足够深, 则会污染整个函数调用链, 导致每个链上的每个函数都有一个<code>HttpServletRequest</code>参数。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>每一个<code>Request</code>请求都是属于一个线程, 那么就应该可以存放在<code>ThreadLocal</code>对象中。<br><code>RequestContextHolder</code>类里面就有<code>ThreadLocal</code>对象。<br>它有两个方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.context.request.RequestContextHolder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContextHolder</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</span><br><span class="line">            <span class="keyword">new</span> NamedThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request attributes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder =</span><br><span class="line">            <span class="keyword">new</span> NamedInheritableThreadLocal&lt;RequestAttributes&gt;(<span class="string">"Request context"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title">getRequestAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestAttributes attributes = requestAttributesHolder.get();</span><br><span class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123; attributes = inheritableRequestAttributesHolder.get(); &#125;</span><br><span class="line">        <span class="keyword">return</span> attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title">currentRequestAttributes</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用getRequestAttributes()方法</span></span><br><span class="line">        RequestAttributes attributes = getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (jsfPresent) &#123;</span><br><span class="line">                attributes = FacesRequestAttributesFactory.getFacesRequestAttributes();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"异常信息"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attributes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>currentRequestAttributes</code>方法调用了<code>getRequestAttributes</code>方法。追加了对<code>JSF</code>的判断。</p>
<p>所以我们可以直接使用<code>currentRequestAttributes</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RequestHelper</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"工具类不允许实例化"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder</span><br><span class="line">                .currentRequestAttributes()).getRequest(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getContextPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequest().getContextPath();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/47586707" target="_blank" rel="noopener">what-is-the-difference-between-these-methods-of-requestcontextholder-currentre</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>缺少分号导致IIFE失效</title>
    <url>/posts/Missing_semicolon_causes_IIFE_not_working.html</url>
    <content><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>先来看这两段代码, 执行之后可以看到控制台爆出<code>log.(...) is not a function</code>的错误异常信息。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 1. 执行错误</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" 测试1"</span>)</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"测试哈哈哈"</span>); &#125;)();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 正确执行</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" 测试1"</span>);</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"测试哈哈哈"</span>); &#125;)();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>万物皆对象, 函数也是对象。<br>所以函数也可以返回函数, 做到<code>fun(arg1)(arg2)(arg3)</code>这种奇葩的语法。</p>
<p>我们再把第一种缺少分号的函数换个写法, 这两种写法是等价的。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 原代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" 测试1"</span>)</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"测试哈哈哈"</span>); &#125;)();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 换种写法, 类似于`fun(arg1)(arg2)(arg3)`</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" 测试1"</span>)(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"测试哈哈哈"</span>); &#125;)();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我们预想的执行方式截然不同。<code>console.log()</code>和匿名函数变成了一条语句。<br>即使是使用了<code>&#39;use strict&#39;;</code>也不会在写代码的时候报错。<br>所以不要太过于依赖没有分号。</p>
<h1 id="结合window-onerror造成更大杀伤力"><a href="#结合window-onerror造成更大杀伤力" class="headerlink" title="结合window.onerror造成更大杀伤力"></a>结合window.onerror造成更大杀伤力</h1><p>第一行我加上了<code>window.onerror = undefined;</code>。<br>因为项目上使用了<a href="https://www.kaipuyun.cn/" target="_blank" rel="noopener">开普云</a>的一个<code>js</code>脚本。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">id</span>=<span class="string">"kpyfx_js_id_10000077"</span> <span class="attr">src</span>=<span class="string">"//fxsjcj.kaipuyun.cn/count/10000077/10000077.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个<code>js</code>没有详细去看, 因为压缩混淆过了。<br>但是我知道的是, 它拦截了异常报错信息, 导致控制台无法正常提示错误, 拖住我好久(生气<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">url, error, line, column</span>) </span>&#123;</span><br><span class="line">    _$xerrorcode = <span class="string">"msg["</span> + url + <span class="string">"]#line["</span> + line + <span class="string">"]#column["</span> + column + <span class="string">"]"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p>
<p>所以我在第一行加上了<code>window.onerror = undefined;</code>(或者<code>null</code>)。<br>因为我在浏览器控制台输入<code>window.onerror</code>, 返回的是<code>null</code>。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-CI加密变量</title>
    <url>/posts/Travis_CI_Encrypting_keys.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文: <a href="https://docs.travis-ci.com/user/encryption-keys/" target="_blank" rel="noopener">Encryption keys</a></p>
<p><strong>这里有单独的关于<a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">加密文件</a>的文档。</strong></p>
<p>仓库<code>Repository</code>中的<code>.travis.yml</code>文件可以具有“加密值”，例如<a href="https://docs.travis-ci.com/user/environment-variables/" target="_blank" rel="noopener">环境变量</a>，通知设置和部署<code>api</code>的<code>key</code>。这些加密后的值可以由任何人添加，但只能由<code>Travis CI</code>解密读取。仓库<code>Repository</code>拥有者不保留任何加密<code>key</code>。</p>
<p><strong>请注意，加密的环境变量不适用于<a href="https://docs.travis-ci.com/user/pull-requests#Pull-Requests-and-Security-Restrictions" target="_blank" rel="noopener">pull requests</a>。</strong></p>
<a id="more"></a>
<h1 id="加密方案"><a href="#加密方案" class="headerlink" title="加密方案"></a>加密方案</h1><p><code>Travis CI</code> 使用<strong>非对称密码学</strong>. 对于每个注册过的仓库<code>Repository</code>, <code>Travis CI</code> 会生成一对<code>RSA</code>密钥对.<br><code>Travis CI</code> 拥有私钥, 但是可以让每个人都可以使用该公钥. </p>
<p>例如, <code>GitHub</code>仓库<code>foo/bar</code> 的<strong>公钥</strong>可以在<code>https://api.travis-ci.org/repos/foo/bar/key</code>获取. 任何人都可以在任何仓库<code>Repository</code>运行<code>travis encrypt</code>, 使用<strong>公钥</strong>来加密参数.<br>因此, <code>foo/bar</code>的<strong>加密后的值</strong>可以被<code>Travis CI</code>使用<code>foo/bar</code>的<strong>私钥</strong>解密, 但这些<strong>加密后的值</strong>不能被任何人解密, 即使是加密这些值的人, 或者是仓库的拥有者, 任何人都不能解密.</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>使用公钥加密某些东西的最简单方法是使用<code>Travis CLI</code>工具。 这个工具是用<code>Ruby</code>编写的，并以<code>gem</code>的形式发布。 首先，你需要安装gem：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 译者追加</span></span><br><span class="line">$ yum install -y gcc ruby ruby-devel <span class="comment"># 安装gcc和ruby环境</span></span><br><span class="line">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ <span class="comment"># 改为国内gem源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原文</span></span><br><span class="line">$ gem install travis</span><br></pre></td></tr></table></figure></p>
<p>然后, 你可以使用<code>encrypt</code>命令去加密数据( 这个例子假设你的工作目录<code>pwd</code>是在仓库<code>Repository</code>下面, 如果不是, 请追加<code>-r 用户名/项目名</code> )<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 译者追加</span></span><br><span class="line">$ travis encrypt 变量名=<span class="string">"待加密的值"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原文</span></span><br><span class="line">$ travis encrypt SOMEVAR=<span class="string">"secretvalue"</span></span><br></pre></td></tr></table></figure></p>
<p>这将输出一个字符串，如下所示：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 译者追加</span></span><br><span class="line">secure: <span class="string">"加密后的值"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原文</span></span><br><span class="line">secure: <span class="string">".... encrypted data ...."</span></span><br></pre></td></tr></table></figure></p>
<p>现在你可以把它放在<code>.travis.yml</code>文件中.<br>你也可以跳过上面的步骤, 直接追加参数<code>--add</code>, 自动添加到<code>.travis.yml</code>文件中.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt SOMEVAR=<span class="string">"secretvalue"</span> --add</span><br></pre></td></tr></table></figure></p>
<p>请注意，环境变量的名称及其值都由<code>travis encrypt</code>生成的字符串进行编码。您必须将生成的<code>secure: &quot;.... encrypted data ....&quot;</code>添加到您的<code>.travis.yml</code>中。这样您的程序就可以使用环境变量<code>SOMEVAR</code>。</p>
<p>您可以使用多个加密变量, 添加到您的<code>.travis.yml</code>文件中。它们都可用于您的程序。</p>
<p>加密后的值可用于<a href="https://docs.travis-ci.com/user/environment-variables#Defining-Variables-in-.travis.yml" target="_blank" rel="noopener">secure environment variables in the build matrix</a> 和<a href="https://docs.travis-ci.com/user/notifications" target="_blank" rel="noopener">notifications</a>.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 译者追加</span></span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">secure:</span> <span class="string">执行travis</span> <span class="string">encrypt得到的加密值</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">secure:</span> <span class="string">可以存在多个加密变量</span></span><br></pre></td></tr></table></figure>
<h2 id="关于转义某些符号的注意事项"><a href="#关于转义某些符号的注意事项" class="headerlink" title="关于转义某些符号的注意事项"></a>关于转义某些符号的注意事项</h2><p>当你使用<code>travis encrypt</code>去加密敏感数据时, 请注意<code>travis encrypt</code>将作为<code>bash</code>语句处理.<br>这意味着你正在加密的数据不能出现<code>bash</code>语法错误.<br>不完整的数据会导致<code>bash</code>将错误<code>statement</code>语句存储到日志文件中, 这个日志文件会包含你的敏感数据. 并且是明文显示.</p>
<p>所以你需要对<a href="(http://www.tldp.org/LDP/abs/html/special-chars.html">特殊字符</a>进行转义, 就像<code>{}</code>、<code>()</code>、<code>\</code>、<code>|</code>之类的特殊字符.</p>
<p>例如，当您想要将字符串<code>6&amp;a(5!1Ab\</code>分配到<code>FOO</code>变量中，您需要执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt <span class="string">"FOO=6\\&amp;a\\(5\\!1Ab\\\\"</span></span><br></pre></td></tr></table></figure></p>
<p><code>travis</code>加密了字符串<code>FOO=6\&amp;a\(5\!1Ab\\</code>,然后<code>bash</code>使用加密后的字符串在构建环境中<code>evaluate</code>.<br>你也可以这样做, 这和上面的加密语句等价.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt <span class="string">'FOO=6\&amp;a\(5\!1AB\\'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Notifications-例子"><a href="#Notifications-例子" class="headerlink" title="Notifications 例子"></a>Notifications 例子</h2><p>我们想要添加一个<code>campfire notifications</code>到<code>.travis.yml</code>文件中, 但是我们不想暴露我们的<code>API token</code>.<br>应该在<code>.travis.yml</code>中使用以下格式:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span> <span class="string">[subdomain]:[api</span> <span class="string">token]@[room</span> <span class="string">id]</span></span><br></pre></td></tr></table></figure></p>
<p>举个例子, 比如<code>rooms: somedomain:abcxyz@14</code><br>我们加密这个字符串<code>somedomain:abcxyz@14</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt somedomain:abcxyz@14</span><br></pre></td></tr></table></figure></p>
<p>会输出以下内容<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Please add the following to your .travis.yml file:</span></span><br><span class="line">  <span class="attr">secure:</span> <span class="string">"ABC5OwLpwB7L6Ca...."</span></span><br></pre></td></tr></table></figure></p>
<p>我们将其加入到<code>.travis.yml</code>文件中<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span></span><br><span class="line">      <span class="attr">secure:</span> <span class="string">"ABC5OwLpwB7L6Ca...."</span></span><br></pre></td></tr></table></figure></p>
<p>这样就完成了</p>
<h2 id="详细讨论"><a href="#详细讨论" class="headerlink" title="详细讨论"></a>详细讨论</h2><p><strong>安全变量系统</strong>在配置<code>YAML</code>中采用<code>{ &#39;secure&#39; =&gt; &#39;encrypted string&#39; }</code>形式的值，并将其替换为解密后的字符串。</p>
<p>所以会发生如下变化<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span></span><br><span class="line">      <span class="attr">secure:</span> <span class="string">"加密后的值"</span></span><br><span class="line"><span class="comment"># 变成</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span> <span class="string">"解密后的值"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">secure:</span> <span class="string">"加密后的值"</span></span><br><span class="line"><span class="comment"># 变成</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">campfire:</span></span><br><span class="line">    <span class="attr">rooms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"解密后的值"</span></span><br></pre></td></tr></table></figure>
<p>如果是环境变量, 则会发生如下变化<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">secure:</span> <span class="string">"加密后的值"</span></span><br><span class="line"><span class="comment"># 变成</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"解密后的值"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="为您的仓库Repository获取公钥"><a href="#为您的仓库Repository获取公钥" class="headerlink" title="为您的仓库Repository获取公钥"></a>为您的仓库<code>Repository</code>获取公钥</h1><p>你可以通过<code>Travis API</code>获取公钥, 使用<code>/repos/用户名/仓库名/key</code>或者<code>/repos/:id/key</code>来获取公钥<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://api.travis-ci.org/repos/travis-ci/travis-ci/key</span><br></pre></td></tr></table></figure></p>
<p>你也可以使用<code>travis pubkey</code>命令行获取公钥.<br>如果你不在项目文件夹下, 则使用<code>travis pubkey -r 用户名/项目名</code>获取指定项目的公钥.</p>
<p>请注意, <code>Travis</code>在您的项目中使用<code>travis.slug</code>来确定端点是否存在（通过使用<code>git config --local travis.slug</code>来检查), 如果您重命名您的仓库或将您的仓库移动到另一个用户/组织，则可能需要对其进行更改。</p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>Travis-CI</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-CI加密文件</title>
    <url>/posts/Travis_CI_Encrypting_Files.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文: <a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">Encrypting Files</a></p>
<p><strong>请注意，加密文件不适用于<a href="https://docs.travis-ci.com/user/pull-requests#Pull-Requests-and-Security-Restrictions" target="_blank" rel="noopener">pull requests from forks</a>。</strong></p>
<a id="more"></a>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><ul>
<li>安装 Travis CI <a href="https://github.com/travis-ci/travis.rb#readme" target="_blank" rel="noopener">命令行客户端</a></li>
<li>使用<code>$ travis login</code>或者<code>$ travis login --pro</code><a href="https://github.com/travis-ci/travis.rb#login" target="_blank" rel="noopener">登录</a> 到 Travis CI </li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 译者追加</span></span><br><span class="line">$ yum install -y gcc ruby ruby-devel <span class="comment"># 安装gcc和ruby环境</span></span><br><span class="line">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ <span class="comment"># 改为国内gem源</span></span><br><span class="line">$ gem install travis</span><br><span class="line">$ travis login</span><br></pre></td></tr></table></figure>
<p>有关系统所需版本的<code>Ruby</code>和操作系统的更多信息，请参阅命令行客户端<a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">安装说明</a>。</p>
<h1 id="自动加密"><a href="#自动加密" class="headerlink" title="自动加密"></a>自动加密</h1><p>假设:</p>
<ul>
<li>这个仓库设置在了<code>Travis CI</code>上</li>
<li>你安装了<strong>1.7.0</strong>以上版本的<code>Travis CI</code>命令行客户端, 并成功登录<code>Travis CI</code></li>
<li>你<code>clone</code>了仓库到本地, 并且工作目录<code>pwd</code>在该本地仓库下</li>
<li>你在仓库中有一个名为<code>super_secret.txt</code>的文件, 你想要在<code>Travis CI</code>使用这个文件，但你不想在<code>GitHub</code>上公开这个文件的内容。</li>
</ul>
<p><code>travis encrypt-file</code>命令将使用对称加密(AES-256)为你加密文件, 并将密钥存储在<code>secure</code>变量中。<br><code>travis encrypt-file</code>命令将输出以下命令, 你可以在你的构建脚本中解密这个文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt-file super_secret.txt</span><br><span class="line">encrypting super_secret.txt <span class="keyword">for</span> rkh/travis-encrypt-file-example</span><br><span class="line">storing result as super_secret.txt.enc</span><br><span class="line">storing secure env variables <span class="keyword">for</span> decryption</span><br><span class="line"><span class="comment"># 请将以下内容添加到您的构建脚本中(例如，在`.travis.yml`中的`before_install`阶段)：</span></span><br><span class="line">openssl aes-256-cbc -K <span class="variable">$encrypted_0a6446eb3ae3_key</span> -iv <span class="variable">$encrypted_0a6446eb3ae3_iv</span> -<span class="keyword">in</span> super_secret.txt.enc -out super_secret.txt -d</span><br><span class="line"><span class="comment"># 提示: 你可以添加 `--add` 选项让它自动添加到`.travis.yml`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保添加 super_secret.txt.enc 到你的 git 仓库</span></span><br><span class="line"><span class="comment"># 确保不要添加 super_secret.txt 到你的 git 仓库</span></span><br><span class="line"><span class="comment"># 提交你的`.travis.yml`</span></span><br></pre></td></tr></table></figure></p>
<p>您也可以使用<code>--add</code>选项自动将解密命令添加到您的<code>.travis.yml</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt-file super_secret.txt --add</span><br><span class="line">encrypting super_secret.txt <span class="keyword">for</span> rkh/travis-encrypt-file-example</span><br><span class="line">storing result as super_secret.txt.enc</span><br><span class="line">storing secure env variables <span class="keyword">for</span> decryption</span><br><span class="line"></span><br><span class="line">确保添加 super_secret.txt.enc 到你的 git 仓库</span><br><span class="line">确保不要添加 super_secret.txt 到你的 git 仓库</span><br><span class="line">提交你的`.travis.yml`</span><br></pre></td></tr></table></figure></p>
<h2 id="加密多个文件"><a href="#加密多个文件" class="headerlink" title="加密多个文件"></a>加密多个文件</h2><p>直接加密多个文件会有<code>bug</code>，命令行客户端将会<a href="https://github.com/travis-ci/travis.rb/issues/239" target="_blank" rel="noopener">覆盖前一个加密文件</a>。</p>
<p>如果您需要加密多个文件，请首先创建敏感文件的<strong>压缩包</strong>，然后在构建期间将其解密并解压.<br>假设我们有敏感文件<code>foo</code>和<code>bar</code>, 运行以下命令.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar cvf secrets.tar foo bar</span><br><span class="line">$ travis encrypt-file secrets.tar</span><br><span class="line">$ vi .travis.yml</span><br><span class="line">$ git add secrets.tar.enc .travis.yml</span><br><span class="line">$ git commit -m <span class="string">'use secret archive'</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>.travis.yml</code>中添加解密步骤, 根据你的需求调整<code>$*_key</code> 和<code>$*_iv</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - openssl aes-256-cbc -K $encrypted_5880cf525281_key -iv $encrypted_5880cf525281_iv -in secrets.tar.enc -out secrets.tar -d</span><br><span class="line">  - tar xvf secrets.tar</span><br></pre></td></tr></table></figure></p>
<h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>这个函数在本地<code>Windows</code>机器上不起作用。 请使用<code>WSL</code>(适用于<code>Linux</code>的<code>Windows</code>子系统)或<code>Linux</code>或<code>OS X</code>操作系统。</p>
<h1 id="手动加密"><a href="#手动加密" class="headerlink" title="手动加密"></a>手动加密</h1><p>假设:</p>
<ul>
<li>这个仓库设置在了<code>Travis CI</code>上</li>
<li>你安装了<strong>1.7.0</strong>以上版本的`Travis CI命令行客户端, 并成功登录</li>
<li>你<code>clone</code>了仓库到本地, 并且工作目录<code>pwd</code>在该本地仓库下</li>
<li>你在仓库中有一个名为<code>super_secret.txt</code>的文件, 你想要在<code>Travis CI</code>使用这个文件，但你不想在<code>GitHub</code>上公开这个文件的内容。</li>
</ul>
<p>该文件可能<strong>太大</strong>，无法通过<code>travis encrypt</code>命令直接加密。<br>但是，您可以使用密码来加密文件，然后再加密这个密码。在Travis CI上，您可以使用密码解密这个文件。</p>
<p>设置过程如下所示：</p>
<ol>
<li><strong>创建密码</strong>。首先，你需要一个密码。我们建议使用<code>pwgen</code>或<code>1password</code>等工具生成随机密码。在我们的例子中，我们将使用<code>ahduQu9ushou0Roh</code>作为密码。</li>
<li><strong>加密这个密码并添加到.travis.yml</strong>。这里我们可以使用这个加密命令: <code>travis encrypt super_secret_password=ahduQu9ushou0Roh --add</code>, 注意，如果你有多个文件需要手动加密, 你必须使用不同的变量名, 这样密码就不会相互覆盖。</li>
<li><strong>本地加密文件</strong>。使用你已经安装在本地的工具<code>GPG</code>或<code>OpenSSL</code>，它也安装在<code>Travis CI</code>上(见下文)。</li>
<li><strong>设置解密命令</strong>。您应该将用于解密文件的命令添加到<code>.travis.yml</code>的<code>before_install</code>阶段（请参阅下文）。<br>确保添加<code>super_secret.txt</code>到你的<code>.gitignore</code>文件中, 并提交你的<code>加密后的文件</code>和<code>.travis.yml</code>.</li>
</ol>
<h2 id="使用GPG加密"><a href="#使用GPG加密" class="headerlink" title="使用GPG加密"></a>使用GPG加密</h2><p>设置:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt super_secret_password=ahduQu9ushou0Roh --add</span><br><span class="line">$ gpg -c super_secret.txt</span><br><span class="line">(将提示您输入密码两次，使用与上述super_secret_password相同的值)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">加密后的值</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$super_secret_password</span> <span class="string">|</span> <span class="string">gpg</span> <span class="string">--passphrase-fd</span> <span class="number">0</span> <span class="string">super_secret.txt.gpg</span></span><br></pre></td></tr></table></figure>
<p>加密的文件名为<code>super_secret.txt.gpg</code>, 并且必须被提交到仓库。</p>
<h2 id="使用OpenSSL"><a href="#使用OpenSSL" class="headerlink" title="使用OpenSSL"></a>使用OpenSSL</h2><p>设置:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ travis encrypt super_secret_password=ahduQu9ushou0Roh --add</span><br><span class="line">$ openssl aes-256-cbc -k <span class="string">"ahduQu9ushou0Roh"</span> -<span class="keyword">in</span> super_secret.txt -out super_secret.txt.enc</span><br><span class="line">(记住用适当的值替换密码)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">加密后的值</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-k</span> <span class="string">"$super_secret_password"</span> <span class="string">-in</span> <span class="string">super_secret.txt.enc</span> <span class="string">-out</span> <span class="string">super_secret.txt</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure>
<p>加密的文件名为<code>super_secret.txt.enc</code>, 并且必须被提交到仓库。</p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>Travis-CI</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>初探FFmpeg命令行</title>
    <url>/posts/learn_FFmpeg_command_tool.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微博上很火的<code>sorry</code>表情包程序, 看到有<code>Java</code>程序, 于是扒了下来看<a href="https://github.com/xtyxtyx/sorry" target="_blank" rel="noopener">源码</a>。<br>看是怎么实现的, 原来是生成<code>ass</code>字幕文件, 然后用<code>FFmpeg</code>命令加入视频。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>FFmpeg</code>是用于录制、转换和流化音频和视频的完整解决方案。<br><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">官网地址</a>、<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">GitHub地址</a></p>
<p><strong>安装教程</strong></p>
<ul>
<li><a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">官网安装教程</a></li>
<li><a href="https://www.vultr.com/docs/how-to-install-ffmpeg-on-centos" target="_blank" rel="noopener">如何在CentOS上安装FFmpeg</a></li>
</ul>
<h1 id="ffmpeg-h帮助"><a href="#ffmpeg-h帮助" class="headerlink" title="ffmpeg -h帮助"></a>ffmpeg -h帮助</h1><p>在命令行输入<code>ffmpeg -h</code>可以看到帮助命令。<br>这里只显示常用的帮助命令。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">用法: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class="line"></span><br><span class="line">获取帮助:</span><br><span class="line">    -h      -- 打印基本帮助命令</span><br><span class="line">    -h long -- 打印更多帮助命令</span><br><span class="line">    -h full -- 打印所有帮助命令 (包括所有格式和编解码器特定的选项, 很长)</span><br><span class="line">    有关选项的详细说明, 请参阅man ffmpeg.</span><br><span class="line"></span><br><span class="line">打印帮助 / 信息 / 功能:</span><br><span class="line">-L                  显示license许可证</span><br><span class="line">-version            显示版本</span><br><span class="line">-formats            显示可用的格式</span><br><span class="line">-codecs             显示可用的编码器、解码器</span><br><span class="line"></span><br><span class="line">全局选项（影响整个程序而不是仅仅一个文件:</span><br><span class="line">-v loglevel         设置日志输出等级</span><br><span class="line">-report             generate a report</span><br><span class="line">-y                  覆盖输出文件</span><br><span class="line">-n                  不覆盖输出文件</span><br><span class="line"></span><br><span class="line">每个文件的主要选项:</span><br><span class="line">-f fmt              指定输出格式</span><br><span class="line">-t duration         录制或转码音频/视频的“持续时间”, 以秒为单位</span><br><span class="line">-to time_stop       录制或转码音频/视频的“截止时间”, 以秒为单位</span><br><span class="line">-ss time_off        录制或转码音频/视频的“开始时间”, 以秒为单位, 也支持[-]hh:mm:ss[.xxx]的时间格式</span><br><span class="line"></span><br><span class="line">视频选项:</span><br><span class="line">-vframes number     设置要输出的视频帧的数量</span><br><span class="line">-r rate             设置帧率(Hz值，分数或缩写)</span><br><span class="line">-s size             设置帧分辨率(如1280x720)</span><br><span class="line">-aspect aspect      设置纵横比 (4:3, 16:9 或 1.3333, 1.7777)</span><br><span class="line">-vn                 禁用视频, 用于只输出音频文件</span><br><span class="line">-vf filter_graph    设置视频过滤器</span><br><span class="line">-ab bitrate         指定音频比特率(单位kbit/s), 如-b:a 320</span><br><span class="line">-b bitrate          指定视频比特率(单位kbit/s), 如-b:v 64</span><br><span class="line"></span><br><span class="line">音频选项:</span><br><span class="line">-ar rate            设置音频采样率(以Hz为单位)</span><br><span class="line">-an                 禁用音频, 用于只输出视频</span><br><span class="line"></span><br><span class="line">字幕选项:</span><br><span class="line">-sn                 禁用字幕</span><br></pre></td></tr></table></figure></p>
<h1 id="FFmpeg过滤器"><a href="#FFmpeg过滤器" class="headerlink" title="FFmpeg过滤器"></a>FFmpeg过滤器</h1><p><code>ffmpeg</code>目录下, 有个文件夹叫<code>libavfilter</code>, 它可以单独编译为一个库。用于音视频过滤。<br>相当于一个特效之类的东西。<br><a href="https://ffmpeg.org/ffmpeg-filters.html" target="_blank" rel="noopener">官方文档</a></p>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><ol>
<li><p>显示媒体文件详细信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>将视频文件转换为不同的格式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure>
</li>
<li><p>将视频文件转换为音频文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vn -ar 44100 -ac 2 -ab 320 -f mp3 output.mp3</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改视频文件的分辨率</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -s 1280x720 -c:a copy output.mp4 </span><br><span class="line">ffmpeg -i input.mp4 -filter:v scale=640:480 -c:a copy output.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩视频文件</span></span><br><span class="line">ffmpeg -i input.mp4 -vf scale=1280:-1 -c:v libx264 -preset veryslow -crf 24 output.mp4 </span><br><span class="line"><span class="comment"># 压缩音频文件</span></span><br><span class="line">ffmpeg -i input.mp3 -ab 128 output.mp3</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除音频、视频</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除视频</span></span><br><span class="line">ffmpeg -i input.mp4 -vn output.mp3</span><br><span class="line"><span class="comment"># 删除音频</span></span><br><span class="line">ffmpeg -i input.mp4 -an output.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>截取图片</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截取1帧图片保存为image-01.png的格式</span></span><br><span class="line">ffmpeg -i input.mp4 -r 1 -f image2 image-%2d.png</span><br></pre></td></tr></table></figure>
</li>
<li><p>裁剪视频</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从位置(10,20)开始裁剪300×400的部分</span></span><br><span class="line">ffmpeg -i input.mp4 -filter:v <span class="string">"crop=10:20:300:400"</span> output.mp4 </span><br><span class="line"><span class="comment"># 将第10秒开始的50秒视频转为avi格式, 可以用hh.mm.ss格式</span></span><br><span class="line">ffmpeg -i input.mp4 -ss 10 -t 50 output.avi </span><br><span class="line"><span class="comment"># 将纵横比改为16:9</span></span><br><span class="line">ffmpeg -i input.mp4 -aspect 16:9 output.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加字幕到视频文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i subtitle.srt -map 0 -map 1 -c copy -c:v libx264 -crf 23 -preset veryfast output.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加字幕并转为gif</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 6 -vf ass=videoAss.ass,scale=300:-1 -y output.gif</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/xtyxtyx/sorry" target="_blank" rel="noopener">在线制作sorry 为所欲为的gif</a></li>
<li><a href="https://www.ostechnix.com/20-ffmpeg-commands-beginners/" target="_blank" rel="noopener">20 FFmpeg初学者命令</a></li>
<li><a href="https://blog.csdn.net/axdc_qa_team/article/details/4204358" target="_blank" rel="noopener">FFMPEG使用参数详解</a></li>
<li><a href="https://blog.csdn.net/newchenxf/article/details/51364105" target="_blank" rel="noopener">ffmpeg filter过滤器 基础实例及全面解析</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Lombok并拒绝它</title>
    <url>/posts/learn_Lombok_and_reject_it.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一个<code>GitHub</code>项目发现它使用了<code>Lombok</code>这个工具。没见过所以了解一下, 但是发现还是不太好用, 于是摒弃之。但好歹记录一下。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok</a>是一个可以大量减少代码的工具, 通过<code>Pluggable Annotation Processing API</code>的方式解析注解, 在<strong>编译期</strong>为<code>class</code>文件注入<code>getter</code>或<code>setter</code>或<code>toString</code>等等诸如此类的代码。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>开发工具<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">IDEA</a></li>
<li>在IDEA中安装<a href="https://plugins.jetbrains.com/plugin/6317" target="_blank" rel="noopener">Lombok Plugin</a>插件</li>
<li>导入<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok" target="_blank" rel="noopener">org.projectlombok.lombok</a></li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><code>Lombok</code>通过注解生效, <a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">官方注解列表</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(<span class="string">"自动生成的方法:"</span> + user.getId() + <span class="string">","</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="为什么摒弃它"><a href="#为什么摒弃它" class="headerlink" title="为什么摒弃它"></a>为什么摒弃它</h1><ol>
<li><code>Lombok</code>具有太强的侵入性</li>
<li>失去了封装的意义</li>
</ol>
<h2 id="具有太强的侵入性"><a href="#具有太强的侵入性" class="headerlink" title="具有太强的侵入性"></a>具有太强的侵入性</h2><p>我在第一次接触到到带有<code>Lombok</code>项目的时候, 编译报错, 虽然我导入了<code>Lombok</code>的<code>maven</code>地址, 但是仍然提示找不到<code>getter</code>方法。<br>点进去一看, 发现根本没有<code>getter</code>方法, 只有一个<code>@Getter</code>注解。</p>
<p>也就是说, 一旦你使用了<code>Lombok</code>, 所有编译你代码的人都必须使用<code>Lombok</code>编译, 传染性、侵入性太强</p>
<h1 id="失去了封装的意义"><a href="#失去了封装的意义" class="headerlink" title="失去了封装的意义"></a>失去了封装的意义</h1><p>更重要的是, <strong>面向对象</strong>。<br>如果我们只是不想写<code>getter</code>和<code>setter</code>方法, 不如就直接将<code>field</code>设置成<code>public</code>。<br>长久的写重复的<code>getter</code>和<code>setter</code>方法已经让人不知道为什么要这样写, 只知道大家都是这样写, 以前都是这样写, 所以这样写。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"admin"</span>: <span class="keyword">this</span>.name = <span class="string">"I am admin:"</span>+name; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"user"</span> : <span class="keyword">this</span>.name = <span class="string">"I am user:"</span> +name; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二个<code>setter</code>方法, 封装了逻辑操作, 和第一个方法不同, 这就是<code>setter</code>方法的意义。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer的PARTITION_BY进行分区查询</title>
    <url>/posts/use_PARTITION_BY_to_query.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假设有一个用户表<code>admin(id, name, sex)</code>, 现在有个需求。<br>是按照性别<code>sex</code>进行分区, 然后排序。</p>
<a id="more"></a>
<p>比如有以下数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id          name       sex(1男2女)</span><br><span class="line">1          admin1          1</span><br><span class="line">2          admin2          1</span><br><span class="line">3          admin3          2</span><br><span class="line">4          admin4          2</span><br><span class="line">5          admin5          2</span><br></pre></td></tr></table></figure></p>
<p>要求查询性别<code>sex</code>进行分区, 然后排序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            1</span><br><span class="line">4          admin4          2            2</span><br><span class="line">5          admin5          2            3</span><br></pre></td></tr></table></figure></p>
<h1 id="使用ROW-NUMBER进行排序"><a href="#使用ROW-NUMBER进行排序" class="headerlink" title="使用ROW_NUMBER进行排序"></a>使用ROW_NUMBER进行排序</h1><p>首先获取行数, <code>SQLServer</code>提供了<code>ROW_NUMBER</code>函数。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tmp.*, ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> tmp.id <span class="keyword">asc</span>) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">from</span> ( <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, sex <span class="keyword">from</span> <span class="keyword">admin</span> ) tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> row_num <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            3</span><br><span class="line">4          admin4          2            4</span><br><span class="line">5          admin5          2            5</span><br></pre></td></tr></table></figure>
<p>但是需求是, 根据<code>sex</code>分区排序, 所以添加一个<code>partition by</code>关键字。</p>
<h1 id="使用PARTITION-BY进行分区"><a href="#使用PARTITION-BY进行分区" class="headerlink" title="使用PARTITION  BY进行分区"></a>使用PARTITION  BY进行分区</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tmp.*, ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> sex <span class="keyword">order</span> <span class="keyword">by</span> tmp.id <span class="keyword">asc</span>) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">from</span> ( <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, sex <span class="keyword">from</span> <span class="keyword">admin</span> ) tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sex <span class="keyword">asc</span>, row_num <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            1</span><br><span class="line">4          admin4          2            2</span><br><span class="line">5          admin5          2            3</span><br></pre></td></tr></table></figure>
<p>完成, 此外还可以用来做分区求和等功能。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://blog.csdn.net/wawmg/article/details/40840093" target="_blank" rel="noopener">sum over partition by 的用法</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>从Response读取XML字符串进行解析</title>
    <url>/posts/read_XML_string_from_Response_for_parsing.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调用<code>WebService</code>接口返回了<code>XML</code>的数据, 需要解析并封装为一个<code>AjaxDto(status, msg, obj)</code>对象。<br>项目中已经依赖了<code>Apache</code>的<a href="https://mvnrepository.com/artifact/commons-configuration/commons-configuration" target="_blank" rel="noopener">commons-configuration</a>, 所以就直接拿来用了。</p>
<a id="more"></a>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p>响应体<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="GBK" ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>integer<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span>&gt;</span>String<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>解析代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlParser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(XmlParser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String xml = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"GBK\" ?&gt; \n"</span> +</span><br><span class="line">                <span class="string">"&lt;response&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;code&gt;integer&lt;/code&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;message&gt;String&lt;/message&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/response&gt;\n"</span>;</span><br><span class="line">        XmlParser parser = XmlParser.init(xml);</span><br><span class="line">        <span class="keyword">if</span>(parser == <span class="keyword">null</span>)&#123;</span><br><span class="line">            logger.error(<span class="string">"创建失败"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(parser.getString(<span class="string">"head.code"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XMLConfiguration config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> XmlParser <span class="title">init</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 字符串转为输入流</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> ByteArrayInputStream(xml.getBytes());) &#123;</span><br><span class="line">            XmlParser parser = <span class="keyword">new</span> XmlParser(in);</span><br><span class="line">            <span class="keyword">return</span> parser;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ConfigurationException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"加载xml错误"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">XmlParser</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> ConfigurationException </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 读取输入流数据</span></span><br><span class="line">        config = <span class="keyword">new</span> XMLConfiguration();</span><br><span class="line">        config.load(in);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 获取节点数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String xpath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getString(xpath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>注意以下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(parser.getString(<span class="string">"response.head.code"</span>));</span><br><span class="line">System.out.println(parser.getString(<span class="string">"head.code"</span>));</span><br></pre></td></tr></table></figure></p>
<p>我第一次使用的时候, 是使用第一行<code>response.head.code</code>代码的, 但是获取失败。<br>改成第二行<code>head.code</code>代码就行了。<br>后来想了下原因, <code>response</code>是根节点, 根节点<strong>有且只有</strong>一个。所以也就不需要特意去指定了。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>被忽视的初始化块</title>
    <url>/posts/Ignored_initialization_block.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从学过初始化块之后, 就一直没用到, 今天学习<code>Mybatis</code>, 居然有一处语法没看懂。特此记录一下。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectById</span><span class="params">(<span class="keyword">final</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                SELECT(<span class="string">"id, privilege_name, privilege_url"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h1><p>这可不是<code>Lambda</code>表达式, 因为环境是<code>JDK 1.7</code>。<br>而是<strong>初始化块</strong>。<br>我们自己创建个例子。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 链式编程, 返回this</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyList&lt;E&gt; <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        list.add(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyList&lt;String&gt; list = <span class="keyword">new</span> MyList&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">// 初始化块</span></span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"test1"</span>);</span><br><span class="line">                add(<span class="string">"test2"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    add(<span class="string">"test3"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Assert.assertEquals(<span class="number">4</span>, list.list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyList&lt;String&gt; list = <span class="keyword">new</span> MyList&lt;String&gt;()</span><br><span class="line">                .add(<span class="string">"test1"</span>)</span><br><span class="line">                .add(<span class="string">"test2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">"test3"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.assertEquals(<span class="number">4</span>, list.list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看<code>test1</code>方法, 是不是和上面的很熟悉, 其实就是使用了初始化块, 进行初始化。和下面<code>test2</code>方法是等价的。</p>
<p>而且也不会产生匿名内部类, 对于某些需要参数进行初始化, 而不得不将其设计为抽象类的类, 是一种很好的代码优化手段。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpOnly详解</title>
    <url>/posts/What_is_HttpOnly.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Http</code>连接是无状态的, 也就是说, 即使你发送第一次<code>Http</code>请求, 传了个<code>param</code>参数给<code>Web</code>服务器。第二次<code>Http</code>请求想获取<code>param</code>参数, 是获取不到的, 因为<code>Web</code>服务器是不认识你的。<br>为了完成这个需求, 我们可以使用<code>Cookie</code>和<code>Session</code>进行存储数据, 在<code>Cookie</code>中存入本次会话的<code>SessionID</code>, 那<code>Web</code>服务器从<code>Cookie</code>中获取<code>SessionID</code>就可以知道你是哪个用户, 知道你之前存了什么数据。</p>
<a id="more"></a>
<h1 id="危险"><a href="#危险" class="headerlink" title="危险"></a>危险</h1><p>我们知道<code>Cookie</code>是明文存储的, 甚至就算是小白用户, 也可以通过浏览器直接查看。那么如果小明知道了小红的<code>Cookie</code>里的用户凭证, 然后将自己的<code>Cookie</code>的用户凭证改为小红的用户凭证, 那不就可以看到小红的信息了? </p>
<h1 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h1><p>比如我自己搭建一个服务器<code>http://localhost:8080</code>, 然后在要窃取<code>Cookie</code>页面按下<code>F12</code>打开<code>Console</code>控制台执行下面代码(<code>XSS</code>攻击)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">'http://localhost:8080?c='</span>+<span class="built_in">document</span>.cookie);</span><br></pre></td></tr></table></figure>
<p>就可以将<code>Cookie</code>发送到我们自己的服务器。</p>
<p>那么, 只要不让<code>document</code>获取到敏感<code>Cookie</code>就好了。<br>为<code>Cookie</code>设置<code>HttpOnly</code>, 禁止<code>js</code>获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="keyword">true</span>); <span class="comment">// 设置HttpOnly</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test.jsp"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://segmentfault.com/q/1010000007347730" target="_blank" rel="noopener">关于cookie的安全性问题</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis回写主键的值</title>
    <url>/posts/how_to_get_primary_key_in_Mybatis.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每种数据库都有自己的主键生成方式，比如<code>MySQL</code>支持自增的主键, 在插入数据后自动生成主键, 比如<code>Oracle</code>通过序列的方式, 在插入数据之前生成主键, 再写去表中。</p>
<a id="more"></a>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User User)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">// 省略构造函数和getter setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 SqlSession</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = factory.openSession())&#123;</span><br><span class="line">            <span class="comment">// 2.  获取Mapper</span></span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setName(<span class="string">"测试用户"</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">            Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">            <span class="comment">// 3. 判断主键回写成功</span></span><br><span class="line">            Assert.assertNotNull(user.getId());</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用JDBC的useGeneratedKeys获取主键值"><a href="#使用JDBC的useGeneratedKeys获取主键值" class="headerlink" title="使用JDBC的useGeneratedKeys获取主键值"></a>使用JDBC的useGeneratedKeys获取主键值</h1><p>只支持<strong>插入数据后</strong>生成主键的数据库。如<code>MySQL</code>和<code>SQLServer</code>。<br>底层是使用了<code>JDBC</code>的<code>statement.getGeneratedKeys()</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert sys_user(id, name) values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="使用selectKey获取主键值"><a href="#使用selectKey获取主键值" class="headerlink" title="使用selectKey获取主键值"></a>使用selectKey获取主键值</h1><p><code>useGeneratedKeys</code>局限于主键自增的数据库, 不支持<code>Oracle</code>这种先<strong>生成主键</strong>, 再把主键插入数据库中的形式。<br><code>selectKey</code>两者都支持, 缺点就是比较笨重, 需要写多一点<code>xml</code>代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"Long"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert sys_user(id, name) values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>keyProperty</code>指的是实体的<code>field</code>名称, <code>keyColumn</code>指的是数据表的<code>column</code>名称, <code>resultType</code>指定返回的<code>Java</code>类型。<br><code>order</code>分为<code>AFTER</code>和<code>BEFORE</code>, 因为<code>MySQL</code>中, 主键是在插入数据之后生成的, 所以选择<code>AFTER</code>。<code>Oracle</code>则要选<code>Before</code>。<br>需要注意的是, <code>selectKey</code>的位置不会影响结果, 最好是根据实际情况来选择放置位置, 比如<code>MySQL</code>就放在<code>SQL</code>之前, 表示先生成主键后插入数据。</p>
<h2 id="各数据库回写主键的SQL"><a href="#各数据库回写主键的SQL" class="headerlink" title="各数据库回写主键的SQL"></a>各数据库回写主键的SQL</h2><ul>
<li><a href="https://www.mysql.com/cn/" target="_blank" rel="noopener">MySQL</a>： <code>SELECT LAST_INSERT_ID()</code></li>
<li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-2017" target="_blank" rel="noopener">Sql Server</a>：<code>SELECT SCOPE_IDENTITY()</code></li>
<li><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">Oracle</a>：<code>SELECT SEQ_ID.nextval from dual</code></li>
<li><a href="https://www.ibm.com/analytics/us/en/db2/" target="_blank" rel="noopener">Db2</a>： <code>VALUES IDENTITY_VAL_LOCAL()</code></li>
<li><a href="http://hsqldb.org/" target="_blank" rel="noopener">HSQLDB</a>：<code>CALL IDENTITY()</code></li>
</ul>
<h1 id="不使用实体类获取主键"><a href="#不使用实体类获取主键" class="headerlink" title="不使用实体类获取主键"></a>不使用实体类获取主键</h1>]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis文件位置引发的mappedStatements为空</title>
    <url>/posts/Mybatis_mapper_xml_location_causes_mappedStatements_is_empty.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在不使用<code>Spring</code>进行初始化<code>Bean</code>, 单纯的使用<code>Mybatis</code>的时候, 遇到<code>xml</code>读取不到的问题。</p>
<a id="more"></a>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><img src="/images/Mybatis文件位置引发的mappedStatements为空_01.png">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==============================日志============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==============================日志============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'A'</span>), (<span class="string">'B'</span>), (<span class="string">'C'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"SLF4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册mapper的三种方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ahao.demo.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="UserMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="com.ahao.demo.mapper.UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间,作用就是对sql进行分类化管理,理解sql隔离 注意:使用mapper代理方法开发,namespace有特殊重要的作用,namespace等于mapper接口地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ahao.demo.mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    List&lt;Map&lt;String, String&gt;&gt; selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ahao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ahao.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从 mybatis-config.xml 初始化 sqlSessionFactory</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 2. 读取并显示</span></span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(userMapper);</span><br><span class="line">            List user = userMapper.selectAll();</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>运行过后抛出一个异常, <code>statement</code>没有找到。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.ahao.demo.mapper.UserMapper.selectAll</span><br></pre></td></tr></table></figure></p>
<p>通过<code>debug</code>看到<code>sqlSessionFactory</code>对象中的<code>Configuration</code>内有两个属性，<code>mapperRegistry</code>和<code>mappedStatements</code>看起来是存储<code>mapper</code>类和对应的<code>Statements</code>的两个属性。<br><img src="/images/Mybatis文件位置引发的mappedStatements为空_02.png"><br><img src="/images/Mybatis文件位置引发的mappedStatements为空_03.png"><br><code>mapperRegistry</code>注册成功了, 但是<code>mappedStatements</code>为空, 也就是<code>Class</code>加载成功了, <code>xml</code>加载失败。</p>
<p><code>xml</code>自动扫描配置是包扫描, 那么切换成别的可行吗?<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Invalid bound statement (not found) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ahao.demo.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载成功 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Invalid bound statement (not found) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到只有直接指定<code>xml</code>才能加载成功。<br><strong>那就是通过<code>Class</code>自动去寻找对应<code>xml</code>的时候发生了异常。</strong><br>翻阅了<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">官方文档</a>, 并没有相关资料。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>然后检查<code>target</code>文件夹的时候, 发现<code>UserMapper.xml</code>和<code>UserMapper.class</code>没有在同一个文件夹内, 于是将<code>target</code>下的<code>UserMapper.xml</code>拖到<code>UserMapper.class</code>同级目录<br>。调试发现<code>mappedStatements</code>有数据。成功了, 推测应该是通过包名转文件路径进行扫描的。<br><img src="/images/Mybatis文件位置引发的mappedStatements为空_04.png"></p>
<p>经过测试, 有两种解决方案</p>
<ol>
<li>手动移动<code>target</code>文件夹内的<code>mapper.xml</code>到对应的<code>mapper.class</code><strong>相同文件夹</strong><code>/WEB-INF/class/com/ahao/demo/mapper</code>下。</li>
<li>将<code>mapper.xml</code>放在<code>resource</code>文件夹内, 对应的文件<strong>目录结构</strong><code>/resource/com/ahao/demo/mapper</code>下。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>Mybatis</code>太坑, 没有个<code>file not found</code>提示。在<code>IDEA</code>下, 就算一开始将<code>mapper.xml</code>文件放在<code>src/java</code>文件夹下, 编译后也不会将<code>xml</code>放到<code>target</code>的相同目录下。<br>不过有<code>Spring</code>就不用担心了, <code>Spring</code>可以指定扫描<code>xml</code>文件位置。实际开发一般都是和<code>Spring</code>整合的吧。</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之sed流文本编辑器</title>
    <url>/posts/sed_of_Linux.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>stream editor</code>是<code>Unix</code>的行处理命令, 以<strong>行</strong>为单位, 依次读入文本的每行进行处理。<br><code>sed</code><strong>一般</strong>不会对原文件进行操作, 当然, 有例外。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制测试文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/passwd /tmp/passwd</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h1><p><code>p</code>参数: 前面接数字或正则表达式, 打印匹配内容<br><code>-n</code>参数: 不自动打印内容, 如果不和<code>p</code>一起使用, 则会输出两次相同内容<br><code>!</code>参数: 对之前的参数进行取反<br><code>a~b</code>参数: 从<code>a</code>行开始, 每隔<code>b</code>行执行操作<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打印所有行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n 'p'</span></span><br><span class="line"><span class="comment"># 2. 打印所有行, 不使用 -n 会打印两次</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 'p'</span></span><br><span class="line"><span class="comment"># 3. 打印第2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2p'</span></span><br><span class="line"><span class="comment"># 4. 打印匹配正则表达式为 root 的一行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '/root/p'</span></span><br><span class="line"><span class="comment"># 5. 打印第2-10行的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2,10p'</span></span><br><span class="line"><span class="comment"># 6. 打印匹配正则表达式为 root 和 ahao 之间的行的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '/root/,/ahao/p'</span></span><br><span class="line"><span class="comment"># 7. 打印除了第2-10行的所有行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2,10!p'</span></span><br><span class="line"><span class="comment"># 8. 打印第2行开始, 每3行的所有行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2~3p'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="增删-不影响原文件"><a href="#增删-不影响原文件" class="headerlink" title="增删(不影响原文件)"></a>增删(不影响原文件)</h1><p><code>na string</code>参数: 表示在第<code>n</code>行后面追加(<code>append</code>)一行<code>string</code><br><code>ni string</code>参数: 表示在第<code>n</code>行前面插入(<code>insert</code>)一行<code>string</code><br><code>nd</code>参数: 将第<code>n</code>行或匹配正则表达式<code>n</code>的一行删除(<code>delete</code>)<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 在第5行后面追加(append)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5a HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 2. 在第2-5行每行后面追加(append)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5a HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在第5行前面插入(insert)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5i HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 4. 在第2-5行每行前面插入(insert)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5i HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 将第2-5行的内容删除(delete)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5d'</span></span><br><span class="line"><span class="comment"># 6. 将匹配正则表达式 root 的行内容删除(delete)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '/root/d'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p><code>nc string</code>参数: 将第<code>n</code>行替换(<code>replace</code>)为<code>string</code><br><code>s/regexp/replacement/</code>参数: 将每行第一个匹配<code>regexp</code>正则表达式的替换为<code>replacement</code><br><code>s/regexp/replacement/g</code>参数: 将每行所有匹配<code>regexp</code>正则表达式的替换为<code>replacement</code><br><code>s/regexp/str1 &amp; str2/g</code>参数: <code>&amp;</code>参数表示正则表达式匹配的值<br><code>s/regexp/\u&amp;/g</code>参数: <code>\u</code>首字母大写, <code>\U</code>所有字母大写<br><code>sed -i &quot;s/regexp/\u&amp;/g&quot;</code>: <code>\u</code>首字母大写, 回写到原文件<br><code>()</code>参数: 括号捕获多个值, 用<code>\1</code>、<code>\2</code>等表示捕获的第几个值<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 将第5行替换(replace)为指定字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5c HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 2. 将第2-5行替换(replace)为指定字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5c HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将每行第1个匹配正则表达式 : 的内容替换为 %</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%/'</span></span><br><span class="line"><span class="comment"># 4. 将每行所有匹配正则表达式 : 的内容替换为 %, g 全局替换</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%/g'</span></span><br><span class="line"><span class="comment"># 5. 将每行所有匹配正则表达式 : 的内容替换为 %包裹的字符串, &amp;表示匹配的字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%&amp;%/g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 将匹配到的单词首字母转为大写, \u转为大写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/[a-z]*/\u&amp;/g'</span></span><br><span class="line"><span class="comment"># 7. 将匹配到的单词所有字母转为大写, \U转为大写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/[a-z]*/\U&amp;/g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 使用()获取用户名, UID, GID, -r 不用加转义符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp/passwd | sed 's/^\([a-z_-]\+\):x:\([0-9]\+\):\([0-9]\+\):.*$/USER:\1  UID:\2  GID:\3/'</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp/passwd | sed -r 's/^([a-z_-]+):x:([0-9]+):([0-9]+):.*$/USER:\1  UID:\2  GID:\3/'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><p><code>q</code>参数: 退出<code>sed</code>命令<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 到第3行就退出(quit)sed</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '3q'</span></span><br><span class="line"><span class="comment"># 2. 找到匹配 root 正则就退出(quit)sed</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '/root/q'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="读写原文件-修改原文件"><a href="#读写原文件-修改原文件" class="headerlink" title="读写原文件(修改原文件)"></a>读写原文件(修改原文件)</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个文件</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  echo -e '123\n456\n789' &gt; hello.txt</span></span><br><span class="line"><span class="comment"># 2. 将/tmp/passwd插入 读入(read)的hello.txt文件的第1行后面打印输出, 不修改hello.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '1r /tmp/passwd' hello.txt</span></span><br><span class="line"><span class="comment"># 3. 将 hello.txt 写入(write)覆盖 /tmp/passwd, 修改/tmp/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed 'w /tmp/passwd' </span></span><br><span class="line"><span class="comment"># 4. 将 hello.txt 的第2行写入(write)覆盖 /tmp/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '2w /tmp/passwd' hello.txt</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之awk流文本编辑器</title>
    <url>/posts/awk_of_Linux.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>awk</code>是<code>Unix</code>的行处理命令, 以<strong>行</strong>为单位, 依次读入文本的每行进行切片处理。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制测试文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/passwd /tmp/passwd</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk [option] &apos;[BEGIN&#123;awk 操作命令&#125;]pattern&#123;awk 操作命令&#125;[END&#123;awk 操作命令&#125;]&apos; file(s)</span><br></pre></td></tr></table></figure>
<p><code>BEGIN{awk 操作命令}</code>: 可选的, 前置操作, 在执行<code>pattern</code>循环之前执行。<br><code>END{awk 操作命令}</code>:   可选的, 后置操作, 在执行<code>pattern</code>循环之后执行。<br><code>pattern{awk 操作命令}</code>: 必选的, 对每行进行处理。<br><code>awk 操作命令</code>: 包括函数调用<code>printf()</code>, 控制指令<code>if else</code>等。</p>
<h1 id="切片处理"><a href="#切片处理" class="headerlink" title="切片处理"></a>切片处理</h1><p>所谓的<strong>切片处理</strong>, 举个例子就是<code>a:b:c</code>, 可以将<code>:</code>作为分隔符, 划分为<code>3</code>个片段。</p>
<p><code>-F separator</code>选项: 指定<code>separator</code>作为分隔符, 默认为空格<br><code>$n</code>变量: <code>$0</code>表示当前行的内容, <code>$n</code>表示当前行内, 以上面的<code>separator</code>分割的第<code>n</code>个片段<br><code>NR</code>变量: 每行的行号, <code>The total number of input records seen so far.</code><br><code>NF</code>变量: 分割的片段的数量, <code>The number of fields in the current input record.</code><br><code>FILENAME</code>变量: 正在处理的文件名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取以 : 作为分隔符, 第3个片段, 即UID</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 获取以 : 作为分隔符, 第1和3个片段, 即用户名和UID</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $1,$3&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $1" "$3&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print "USER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 输出每行的行号NR和片段数NF</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print NR"\t"NF"\tUSER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 4. 输出处理的文件名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print FILENAME"\tUSER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure>
<h1 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h1><p><code>pattern</code>是每行前的一个匹配表达式。分为两种。</p>
<ol>
<li><code>~</code>, <code>!~</code>: 匹配正则表达式</li>
<li><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>: 判断逻辑表达式</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打印出匹配root的每行行号和内容</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'/root/&#123;print NR"\t"$0&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 打印出UID为1开头的每行行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3~/^1.*/&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 打印出UID不为1开头的每行行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3!~/^1.*/&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 打印出UID大于100的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;if($3&gt;100) print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3&gt;100&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 打印出UID等于0的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3==0&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 打印出UID不等于0的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3!=0&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure>
<h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打印出行号和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print NR"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;printf("%s\t%s\n", NR, $1)&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure>
<h1 id="逻辑计算"><a href="#逻辑计算" class="headerlink" title="逻辑计算"></a>逻辑计算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk [option] &apos;[BEGIN&#123;awk 操作命令&#125;]pattern&#123;awk 操作命令&#125;[END&#123;awk 操作命令&#125;]&apos; file(s)</span><br></pre></td></tr></table></figure>
<p>这里的<code>BEGIN</code>和<code>END</code>可以进行一些初始化操作和结尾操作。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 统计 / 文件夹下所有文件的大小总和, BEGIN可以声明变量</span></span><br><span class="line">ll / | awk <span class="string">'BEGIN&#123;size=0&#125;&#123;size+=$5&#125;END&#123;print "size:"size/1024/1024"M"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 统计 /etc/passwd 下有多少个用户, 用正则表达式 ^$ 排除空行</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;$1!~/^$/&#123;count++&#125;END&#123;print "count:"count&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 打印出UID大于100的行号和用户名, 加上表头和表尾</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;print "NR\tUsername"&#125;&#123;if($3&gt;100) print NR"\t"$1&#125;END&#123;print "-------"FILENAME"-------"&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 使用数组记录所有UID大于100的用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;&#123;if($3&gt;100)name[count++]=$1&#125;END&#123;for(i=0;i&lt;count;i++) print i"\t"name[i]&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 分别统计LISTEN和CONNECTED的连接数量</span></span><br><span class="line">netstat -anp | awk <span class="string">'$6~/(LISTEN)|(CONNECTED)/&#123;sum[$6]++&#125;END&#123;for(i in sum) print i" : "sum[i]&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub删除敏感commit</title>
    <url>/posts/Delete_sensitive_submissions_in_Github.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>GitHub</code>上提交项目时, 有时会把密钥等敏感信息不小心提交上去, 这时候需要删除<code>commit</code>。而<code>GitHub</code>自身是不支持删除<code>commit</code>的, 需要借助<code>Git</code>来删除。</p>
<a id="more"></a>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>打开一个文件夹, 在里面打开<code>Git</code>命令行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. clone 整个项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> 项目路径</span><br><span class="line"><span class="comment"># 2. 查看最近4条commit记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -n 4</span><br><span class="line">commit abcdefg1234567 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Ahaochan &lt;844394093@qq.com&gt;</span><br><span class="line">Date:   Wed Jan 3 09:06:34 2018 +0800</span><br><span class="line"><span class="comment"># 3. 根据commit-id回滚</span></span><br><span class="line">git reset --hard abcdefg1234567 </span><br><span class="line"><span class="comment"># 4. 强制push到GitHub上</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.2 代码回滚：Reset、Checkout、Revert 的选择" target="_blank" rel="noopener">5.2 代码回滚：Reset、Checkout、Revert 的选择</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery的clone陷阱</title>
    <url>/posts/Cloning_trap_of_jQuery.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>clone()</code> 方法生成被选元素的副本，包含子节点、文本和属性。<br>这里的属性, 包括了 <code>id</code>。当<code>clone</code>了<code>id</code>后, 获取<code>id</code>将会获取第一个匹配<code>id</code>的元素。造成不可预期的后果。<br><a id="more"></a></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p><a href="https://jsfiddle.net/ju8npczb/8/" target="_blank" rel="noopener">Demo地址</a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1. 更新 div-source 中的时间</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $time = $(<span class="string">'#time'</span>);</span></span><br><span class="line"><span class="javascript">  $time.html(<span class="string">'时间:'</span>+<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">// 2. clone 到 div-clone 中</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> $clone = $time.clone();</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.div-clone'</span>).html($clone);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是一个简单的页面, 每点击一次<strong>按钮</strong>, 就会更新<code>div-source</code>的时间, 再复制到<code>div-clone</code>中。<br>当第一次点击时, 页面如下, <code>div-clone</code>复制成功。</p>
<ol>
<li>更新<code>id</code>为<code>time</code>的元素文本为 <strong>现在的时间</strong></li>
<li>复制<code>id</code>为<code>time</code>的元素文本</li>
<li>粘贴到<code>div-clone</code>里面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>问题出在第二次点击时, 只会更新第一个<code>div</code>, 不更新第二个<code>div</code></p>
<ol>
<li>更新<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素文本为 <strong>现在的时间</strong>, 因为现在<code>id</code>为<code>time</code>的元素有两个。会更新第一个元素，也就是<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素</li>
<li>复制<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素文本</li>
<li>粘贴到<code>div-clone</code>里面</li>
<li><code>div-source</code>没被操作<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">     // 注意这里!!!有两个id为time的元素</span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 15:01:05 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span> </span><br><span class="line">     // 注意这里!!!有两个id为time的元素</span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 第二次点击, 预期是更新 div-source 的时间, 实际会更新 div-clone 中的时间</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $time = $(<span class="string">'#time'</span>);</span></span><br><span class="line"><span class="javascript">  $time.html(<span class="string">'时间:'</span>+<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> $clone = $time.clone();</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.div-clone'</span>).html($clone);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>clone</code>最好不要复制带有<code>id</code>属性的元素, 否则会发生不可预期的错误。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.w3school.com.cn/jquery/manipulation_clone.asp" target="_blank" rel="noopener">jQuery 文档操作 - clone() 方法</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>call和apply的区别</title>
    <url>/posts/The_difference_between_call_and_apply.html</url>
    <content><![CDATA[<h1 id="两者的异同"><a href="#两者的异同" class="headerlink" title="两者的异同"></a>两者的异同</h1><p><code>call</code> 和 <code>apply</code> 都是为了改变 <code>this</code> 而存在的。<br>两者可以说是完全一致, 唯一的不同就在于接收的参数的<strong>形式</strong>不同。</p>
<ul>
<li>call: 接收<strong>多个</strong>参数</li>
<li>apply: 接收<strong>一个</strong>数组参数</li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数功能, 打印 this 和 所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this:"</span>+<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"arguments["</span>+i+<span class="string">"]="</span>+<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// this:[object Window]</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br><span class="line"></span><br><span class="line">f.call(<span class="string">'我是this'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 接收多个参数</span></span><br><span class="line"><span class="comment">// this:我是this</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">f.apply(<span class="string">'我是this'</span>, arr); <span class="comment">// 接收一个数组参数</span></span><br><span class="line"><span class="comment">// this:我是this</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br></pre></td></tr></table></figure>
<p>可以粗略的理解为如下Java代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(String... strs)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(String[] strs)</span></span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server分页</title>
    <url>/posts/paging_query_of_SQL_Server.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>基于<code>Mybatis</code>的<a href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">动态SQL</a>。<br>使用<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">fastjson</a>格式化输出数据。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; getStudent(<span class="meta">@Param</span>(<span class="string">"sex"</span>) String sex,</span><br><span class="line">                              <span class="meta">@Param</span>(<span class="string">"page"</span>) <span class="keyword">int</span> page, <span class="meta">@Param</span>(<span class="string">"pageSize"</span>) <span class="keyword">int</span> pageSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao dao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找性别为男, 分页大小为10, 的第2页数据</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data = dao.getStudent(<span class="string">"男"</span>, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SQL-Server-2005"><a href="#SQL-Server-2005" class="headerlink" title="SQL Server 2005"></a>SQL Server 2005</h1><p>在2005之后, 使用<code>ROW_NUMBER()</code>函数标记记录的<strong>行号</strong>, 然后再使用<code>where</code>进行筛选。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;select id="getStudent" resultType="Map"&gt;</span><br><span class="line">    &lt;bind name="skip" value="(page-1)*pageSize"/&gt;</span><br><span class="line">    &lt;bind name="record" value="page*pageSize"/&gt;</span><br><span class="line">    <span class="keyword">SELECT</span>  *</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> TOP <span class="number">100</span> <span class="keyword">PERCENT</span> tmp.*, </span><br><span class="line">            ROW_NUMBER() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> tmp.birthday <span class="keyword">desc</span>) <span class="keyword">AS</span> row_num</span><br><span class="line">        <span class="keyword">FROM</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.id, s.name, <span class="keyword">CONVERT</span> (<span class="built_in">VARCHAR</span>(<span class="number">10</span>), s.birthday, <span class="number">120</span>) <span class="keyword">AS</span> birthday</span><br><span class="line">            <span class="keyword">FROM</span> student s</span><br><span class="line">            <span class="keyword">WHERE</span> s.sex = $&#123;sex&#125;</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> s.birthday</span><br><span class="line">        ) tmp</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> row_num</span><br><span class="line">    ) tmp</span><br><span class="line">    &lt;![CDATA[<span class="keyword">WHERE</span> row_num &gt; $&#123;<span class="keyword">skip</span>&#125; <span class="keyword">and</span> row_num &lt;= $&#123;<span class="built_in">record</span>&#125;]]&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="SQL-Server-2012"><a href="#SQL-Server-2012" class="headerlink" title="SQL Server 2012"></a>SQL Server 2012</h1><p>在2012之后, 使用<a href="https://technet.microsoft.com/zh-cn/library/gg699618.aspx" target="_blank" rel="noopener">OFFSET FETCH 子句</a>进行分页处理。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id="getStudent" resultType="Map"&gt;</span><br><span class="line">    &lt;bind name="skip" value="(page-1)*pageSize"/&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.id, s.name, <span class="keyword">CONVERT</span> (<span class="built_in">VARCHAR</span>(<span class="number">10</span>), s.birthday, <span class="number">120</span>) <span class="keyword">AS</span> birthday</span><br><span class="line">    <span class="keyword">FROM</span> student s</span><br><span class="line">    <span class="keyword">WHERE</span> s.sex = $&#123;sex&#125;</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> s.birthday</span><br><span class="line">    <span class="keyword">OFFSET</span> $&#123;<span class="keyword">skip</span>&#125; <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> $&#123;pageSize&#125; <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的定时任务</title>
    <url>/posts/Timing_tasks_of_Linux.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>同步数据之类的工作需要定时去完成, 如果要人工去做, 那是费时费力的。<br>既然是定时, 有规律可循, 那就应该使用编程完成, 而不是依赖人力完成。<br><code>Java</code> 有 <code>Quartz</code> 可以完成。<code>Linux</code> 和 <code>Windows</code> 也有相同的工具。</p>
<a id="more"></a>
<h1 id="一次执行和多次执行"><a href="#一次执行和多次执行" class="headerlink" title="一次执行和多次执行"></a>一次执行和多次执行</h1><p>一次执行: <code>at</code>命令, 需要<code>atd</code>服务的支持。<br>多次执行: <code>crontab</code>命令, 需要<code>crond</code>服务的支持。</p>
<h1 id="只执行一次的定时任务"><a href="#只执行一次的定时任务" class="headerlink" title="只执行一次的定时任务"></a>只执行一次的定时任务</h1><h2 id="打开atd服务"><a href="#打开atd服务" class="headerlink" title="打开atd服务"></a>打开atd服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保打开 atd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /etc/init.d/atd restart</span></span><br><span class="line">停止 atd：                                                 [确定]</span><br><span class="line">启动 atd：                                                 [确定]</span><br><span class="line"><span class="comment"># 将启动 atd 服务写入配置文件, 开机自动打开</span></span><br><span class="line">[root@localhost  ~]<span class="comment"># chkconfig atd on</span></span><br></pre></td></tr></table></figure>
<h2 id="指定允许使用at的用户"><a href="#指定允许使用at的用户" class="headerlink" title="指定允许使用at的用户"></a>指定允许使用at的用户</h2><p><code>at</code> 有两个重要的文件, 用来限制可以使用<code>at</code>定时任务的用户。<br>一个用户名占一行。<br><code>/etc/at.allow</code>白名单和<code>/etc/at.deny</code>黑名单。<br><code>at</code>根据文件是否存在判断使用白名单或者黑名单。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>/etc/at.allow</code></th>
<th style="text-align:center"><code>/etc/at.deny</code></th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">√</td>
<td style="text-align:center">无论是否存在</td>
<td style="text-align:center">只允许<code>/etc/at.allow</code>的用户执行<code>at</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
<td style="text-align:center">禁止<code>/etc/at.deny</code>的用户执行<code>at</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">只有<code>root</code>能执行<code>at</code></td>
</tr>
</tbody>
</table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一次性的5分钟后创建文件的定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># at -m now + 5 minutes </span></span><br><span class="line">at&gt; cat <span class="string">'now+5minutes file'</span> &gt; /tmp/now+5minutes.file</span><br><span class="line">at&gt; <span class="built_in">echo</span> <span class="string">'execute at task'</span> <span class="comment"># 使用 -m 选项可以将输出信息发送到email中</span></span><br><span class="line">at&gt; &lt;EOT&gt; <span class="comment"># 按Ctrl+D结束输入</span></span><br><span class="line">job 6 at 2017-10-19 04:31</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看at定时任务队列(queue), 或者 at -l</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atq</span></span><br><span class="line">6	2017-10-19 04:31 a root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查询定时任务的内容, -c 指定任务号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># at -c 6</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 省略一堆环境变量</span></span><br><span class="line"><span class="comment"># 进入创建定时任务时所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root || &#123;</span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">'Execution directory inaccessible'</span> &gt;&amp;2</span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line">cat <span class="string">'now+5minutes file'</span> &gt; /tmp/now+5minutes.file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'execute at task'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 根据任务号6, 移除(remove)定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atrm 6</span></span><br><span class="line"><span class="comment"># 5. 再次查看任务列表, 没有定时任务, 已经被删除了</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atq</span></span><br></pre></td></tr></table></figure>
<h2 id="其他的时间格式"><a href="#其他的时间格式" class="headerlink" title="其他的时间格式"></a>其他的时间格式</h2><p>除了用<code>now + 5 minutes</code>指定时间外, 还有其他的时间格式</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间格式</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HH:MM</td>
<td style="text-align:center">在HH时MM分执行一次</td>
</tr>
<tr>
<td style="text-align:center">HH:MM YYYY-MM-DD</td>
<td style="text-align:center">在YYYY年MM月DD日HH时MM分执行一次</td>
</tr>
<tr>
<td style="text-align:center">HH:MM[am/pm] [Month] [Date]</td>
<td style="text-align:center">在Month月Date日早上/下午HH时MM分执行一次, 月份是<strong>英文</strong>表示</td>
</tr>
<tr>
<td style="text-align:center">HH:MM[am/pm] + number [minutes/hours/days/weeks]</td>
<td style="text-align:center">在早上/下午HH时MM分的number分钟/小时/天/周后执行一次</td>
</tr>
</tbody>
</table>
<h2 id="batch空闲时运行"><a href="#batch空闲时运行" class="headerlink" title="batch空闲时运行"></a>batch空闲时运行</h2><p><code>batch</code>可以控制在工作负载低于<code>0.8</code>的时候执行一次定时任务。<br>工作负载为1, 说明这个时间点有1个程序在运行。<br>工作负载为2, 说明这个时间点有2个程序在运行。<br>负载越高, 说明CPU单位时间内切换程序的次数越多。<br>当然, 程序不可能一直在运算, 所以也有低于1的情况产生。<br><code>batch</code>可以避免在程序繁忙的时候执行一些操作, 比如定时重启。让定时任务延后运行。<br>可以看到最后一行代码是执行了<code>at</code>命令, 只是附带了一些参数而已。<br>和<code>at</code>命令一样的用法。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nl /usr/bin/batch</span></span><br><span class="line">42  <span class="built_in">exec</span> /usr/bin/at <span class="variable">$OPT_f</span> <span class="variable">$OPT_m</span> <span class="variable">$OPT_q</span> <span class="variable">$OPT_v</span> <span class="variable">$OPT_V</span> <span class="variable">$time_date_arg</span></span><br></pre></td></tr></table></figure></p>
<h1 id="多次执行的定时任务"><a href="#多次执行的定时任务" class="headerlink" title="多次执行的定时任务"></a>多次执行的定时任务</h1><p><code>Java</code>下有<code>Quartz</code>这个定时任务框架, 也使用到了<code>corn</code>表达式。<br><code>Linux</code>下的多次执行的定时任务是通过<code>cron</code>服务实现的。<br>检查<code>crontab</code>工具是否安装: <code>crontab -l</code><br>检查<code>crond</code>服务是否启动: <code>service  crond status</code></p>
<h2 id="指定允许使用cron的用户"><a href="#指定允许使用cron的用户" class="headerlink" title="指定允许使用cron的用户"></a>指定允许使用cron的用户</h2><p>和<code>at</code>一样, <code>cron</code>也有两个文件用来限制可以使用<code>cron</code>定时任务的用户。<br>一个用户名占一行。<br><code>/etc/cron.allow</code>白名单和<code>/etc/cron.deny</code>黑名单。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>/etc/cron.allow</code></th>
<th style="text-align:center"><code>/etc/cron.deny</code></th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">√</td>
<td style="text-align:center">无论是否存在</td>
<td style="text-align:center">只允许<code>/etc/cron.allow</code>的用户执行<code>cron</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">√</td>
<td style="text-align:center">禁止<code>/etc/cron.deny</code>的用户执行<code>cron</code></td>
</tr>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">只有<code>root</code>能执行<code>cron</code></td>
</tr>
</tbody>
</table>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>/etc/crontab</code>文件存储了<strong>系统</strong>的定时任务<br><code>/var/spool/cron/用户名</code>文件存储了各个<strong>用户</strong>的定时任务<br><code>/etc/cron.allow</code>文件指定了允许执行定时任务的<strong>白名单</strong><br><code>/etc/cron.deny</code>文件指定了允许执行定时任务的<strong>黑名单</strong></p>
<p>通过查看<code>/etc/crontab</code>可以看到看到<strong>系统</strong>的定时任务<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/crontab </span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># run-parts 后面跟一个目录, 可以执行目录下所有可执行文件</span></span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure></p>
<h1 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h1><p>从上可以看出cron表达式的格式如下</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">分</th>
<th style="text-align:center">时</th>
<th style="text-align:center">日</th>
<th style="text-align:center">月</th>
<th style="text-align:center">星期几</th>
<th style="text-align:center">用户名</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">取值范围</td>
<td style="text-align:center">0~59</td>
<td style="text-align:center">0~23</td>
<td style="text-align:center">1~31</td>
<td style="text-align:center">1~12</td>
<td style="text-align:center">0~7(0或7都是星期天)</td>
<td style="text-align:center">可选</td>
<td style="text-align:center">命令</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># who</span></span><br><span class="line">ahao     pts/1        2017-10-19 06:40 (192.168.94.121)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 编辑任务, 每分钟输出一次hello到终端屏幕/dev/pts/1上</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e</span></span><br><span class="line">*/1 * * * * <span class="built_in">echo</span> <span class="string">'hello'</span> &gt; /dev/pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看定时任务列表</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -l</span></span><br><span class="line">*/1 * * * * <span class="built_in">echo</span> <span class="string">'hello'</span> &gt; /dev/pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 清空定时任务, 单项删除用 crontab -e 编辑</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -r</span></span><br></pre></td></tr></table></figure>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>具体的用法, 只要看懂下面几个例子就行了<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每天21:30重启apache</span></span><br><span class="line">30 21 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每月1、10、22日4:45重启apache, 逗号表示或</span></span><br><span class="line">45 4 1,10,22 * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每月的1-10日4:45重启apache, 横杠表示区间</span></span><br><span class="line">45 4 1-10 * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔2分钟重启apache, 斜杠表示每隔一段时间</span></span><br><span class="line">*/2 * * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天23点到7点每隔1小时重启apache</span></span><br><span class="line">0 23-7/1 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天18:00到23:00每隔30分钟重启apache</span></span><br><span class="line">*/30 18-23 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4月的1-7号或每个星期日早晨1时59分重启apache</span></span><br><span class="line">59 1 1-7 * 4 0 service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4月的第1个星期日早晨1时59分重启apache, 第三个时间位置和第五个时间位置是【或】的关系</span></span><br><span class="line">59 1 1-7 4 * <span class="built_in">test</span> $(date +%w) -eq 0 &amp;&amp; service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每30秒重启apache, 通过sleep进行精确到秒级的操作, 注意要两个任务都存在</span></span><br><span class="line">*/1 * * * * service httpd restart</span><br><span class="line">*/1 * * * * sleep 30s; service httpd restart</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://man.linuxde.net/at" target="_blank" rel="noopener">at命令</a></li>
<li><a href="http://man.linuxde.net/crontab" target="_blank" rel="noopener">crontab命令</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之sudo权限</title>
    <url>/posts/sudo_permissions_of_Linux.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>sudo权限, 是可以临时把用户变成另一个用户(比如root)去执行某个命令。</p>
<a id="more"></a>
<h1 id="添加sudo权限"><a href="#添加sudo权限" class="headerlink" title="添加sudo权限"></a>添加sudo权限</h1><p>使用<code>visudo</code>命令。即可修改<code>/etc/sudoers</code>文件。<br>切换到最后一行。输入命令即可。<br>格式如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名  允许sudo的远程ip=(可使用的身份) 授权命令(绝对路径)</span><br><span class="line">%组名   允许sudo的远程ip=(可使用的身份) 授权命令(绝对路径)</span><br></pre></td></tr></table></figure></p>
<p>比如<code>shutdown -r now</code>重启命令, 不能被普通用户执行。<br>现在要赋予<code>ahao</code>用户重启服务器的权限。<br>命令越详细, 权限越小。最好写绝对路劲。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ahao    ALL=(ALL)       /sbin/shutdown -r now</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>ALL=(ALL)</code>的意思是</p>
<ol>
<li>左边的ALL, 表示被管理的主机的地址, 即是哪个<strong>远程主机</strong>或<strong>ip</strong>登录的这台服务器。</li>
<li>右边的ALL, 表示用户可使用的身份, <strong>省略的话会赋予root权限</strong>。</li>
</ol>
<p>下面是个简单的例子<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 临时切换为 root , 执行 visudo</span></span><br><span class="line">[ahao@localhost ~]$ su -c <span class="string">"/usr/sbin/visudo"</span> root</span><br><span class="line">    ahao    ALL=(ALL)       /sbin/shutdown -r now</span><br><span class="line"><span class="comment"># 2. 查看可用sudo命令</span></span><br><span class="line">[ahao@localhost ~]$ sudo -l </span><br><span class="line">用户 ahao 可以在该主机上运行以下命令：</span><br><span class="line">    (ALL) /sbin/shutdown -r now</span><br><span class="line"><span class="comment"># 3. 普通用户执行sudo赋予的命令</span></span><br><span class="line">[ahao@localhost ~]$ sudo /sbin/shutdown -r now </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. root用户可以随意切换用户, 随意执行sudo命令</span></span><br><span class="line"><span class="comment"># 下面root以user1的身份创建/tmp/hello文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo -u user1 touch /tmp/hello</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /tmp/hhh </span></span><br><span class="line">-rw-r--r-- 1 user1 user1 0 10-18 08:29 /tmp/hello</span><br></pre></td></tr></table></figure></p>
<h1 id="sudo支持正则、取反"><a href="#sudo支持正则、取反" class="headerlink" title="sudo支持正则、取反"></a>sudo支持正则、取反</h1><p>添加以下规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ahao    ALL=/usr/sbin/useradd # 赋予用户创建角色的权限</span><br><span class="line">ahao    ALL=/usr/bin/passwd   # 赋予用户修改密码的权限, 危险!!</span><br></pre></td></tr></table></figure></p>
<p>为<code>ahao</code>用户添加<strong>创建角色</strong>的权限, 还要添加<strong>修改密码</strong>的权限, 才能真正使用创建的用户。<br>但是如果使用上述规则, 则会允许<code>ahao</code>执行<code>/usr/bin/passwd root</code>修改<code>root</code>的密码, 这样很<strong>不安全</strong>。</p>
<p>修改为以下规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ahao    ALL=/usr/sbin/useradd</span><br><span class="line">ahao    ALL=/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd &quot;&quot;, !/usr/bin/passwd root</span><br><span class="line"># 使用正则表达式限定用户名为字母的用户, 使用 ! 取反, 不允许修改root的密码</span><br></pre></td></tr></table></figure></p>
<h1 id="sudo的别名"><a href="#sudo的别名" class="headerlink" title="sudo的别名"></a>sudo的别名</h1><p>调用<code>visudo</code>命令, 插入别名, 别名名称必须大写, 多个值用逗号分隔。</p>
<ul>
<li>用户别名: <code>User_Alias MYUSER = user1, user2, user3</code></li>
<li>主机别名: <code>Host_Alias MYHOST = 192.168.0.1, 192.168.0.2</code></li>
<li>命令别名: <code>Cmnd_Alias MYCMD = !/usr/bin/passwd, /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root</code></li>
</ul>
<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><p><code>sudo</code>很容易造成不安全的行为, 如同上面的修改密码的权限。<br>所以在使用的时候一定要注意安全问题。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在已搭建的SSM环境直接执行sql语句</title>
    <url>/posts/execute_sql_statement_in_SSM_environment.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天遇到个需求, 需要用<code>Java</code>代码对数据处理后批量执行一些<code>SQL</code>语句, 这种是一次性的需求。<br>写一个<code>Mapper.xml</code>又显得太繁琐。自己写<code>JDBC</code>又要重新加载数据库驱动创建数据库连接，更累。</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>编写<code>Class</code>代码不可取。缺点有二:</p>
<ol>
<li>修改<code>Class</code>需要重启<code>Tomcat</code>。</li>
<li>需要把<code>Class</code>设置为一个<code>Controller</code>。</li>
</ol>
<p>改为使用<code>JSP</code>。以上两个缺点都没了。</p>
<h1 id="使用JdbcTemplate"><a href="#使用JdbcTemplate" class="headerlink" title="使用JdbcTemplate"></a>使用JdbcTemplate</h1><p>因为是一次性的需求。写一个<code>Mapper.xml</code>又显得太繁琐。干脆就直接舍弃获取<code>Mybatis SqlSession</code>的方式。<br>使用<code>Spring Jdbc</code>自带的<code>JdbcTemplate</code>。</p>
<p>在<code>Spring</code>配置文件中添加<code>JdbcTemplate Bean</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>JSP</code>页面获取这个<code>Bean</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> language=<span class="string">"java"</span> contentType=<span class="string">"text/html;charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 1. 获取上下文</span></span><br><span class="line">    WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletConfig().getServletContext());</span><br><span class="line">    <span class="comment">// 2. 获取Bean</span></span><br><span class="line">    JdbcTemplate template = (JdbcTemplate) context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    <span class="comment">// 3. 执行sql语句 ( 使用fastjson转化为json格式 ) </span></span><br><span class="line">    List list = template.queryForList(<span class="string">"select * from mytable"</span>);</span><br><span class="line">    out.print(<span class="string">"测试:"</span>+ JSONObject.toJSONString(list));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的使用GitHub的js脚本</title>
    <url>/posts/The_Best_Practices_for_Using_GitHub&#39;s_JavaScript.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>GitHub</code>上有很多优秀的开源脚本, 但是不能直接使用, 需要下载下来保存在自己的项目中。<br>如果是使用<a href="https://jsfiddle.net/" target="_blank" rel="noopener">JSFiddle</a>进行演示的话, 只能通过<code>url</code>引用(当然如果你不嫌累长篇大段的CV大法另当别论)。<br>即使是直接引用<code>raw</code>也会抛出异常, <code>GitHub</code>的<code>raw</code>文件的<code>MIME type(Internet media type)</code>为<code>text/plain</code>。而<code>&lt;script&gt;</code>要求为<code>application/javascript</code>。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Refused to execute script from &apos;http://raw.githubusercontent.com/user/repo/branch/file.js&apos; because its MIME type (&apos;text/plain&apos;) is not executable, and strict MIME type checking is enabled.</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>其实<code>GitHub</code>自己就提供了解决方案。<br>只要将<code>raw.githubusercontent.com</code>替换为<code>rawgit.com</code>(非生产环境)或<code>cdn.rawgit.com</code>即可。<br>项目生产环境最好使用<code>cdn</code>。</p>
<p>比如<code>http://raw.githubusercontent.com/user/repo/branch/file.js</code>替换为<code>http://cdn.rawgit.com/user/repo/tag/file.js</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/17341122/link-and-execute-external-javascript-file-hosted-on-github" target="_blank" rel="noopener">Link and execute external JavaScript file hosted on GitHub</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>检测F12控制台是否开启</title>
    <url>/posts/Check_whether_the_F12_console_is_turned_on.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>吧友提到了拦截控制台的情况。<a href="http://tieba.baidu.com/p/5507907516" target="_blank" rel="noopener">别人页面中有个js文件,无法调试.有啥办法解除这个限制.</a><br>于是好奇找了下<code>stackoverflow</code>, <a href="https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open" target="_blank" rel="noopener">Find out whether Chrome console is open</a>, 但是代码不太懂。<br>后来dalao告诉我知乎有篇文章: <a href="https://www.zhihu.com/question/24188524" target="_blank" rel="noopener">前端开发中如何在JS文件中检测用户浏览器是否打开了调试面板（F12打开开发者工具）？</a></p>
<a id="more"></a>
<h1 id="Chrome-适用-截止至63-0-3239-108"><a href="#Chrome-适用-截止至63-0-3239-108" class="headerlink" title="Chrome 适用(截止至63.0.3239.108)"></a>Chrome 适用(截止至63.0.3239.108)</h1><p>在控制台打开的时候, 打印<code>html</code>元素会去取<code>id</code>属性的值, 只要覆盖<code>id</code>属性的<code>get</code>方法, 就可以判断是否开启控制台。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">status: <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"devtool-status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> checkStatus;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 创建一个html元素, 不能使用普通Object, 两者日志处理方式不同</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> element = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="actionscript"><span class="comment">//var element = document.createElement('any');</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 重新定义该元素的get方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(element, <span class="string">'id'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    checkStatus=<span class="string">'on'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 3. 定时检测控制台是否打开</span></span></span><br><span class="line"><span class="actionscript">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    checkStatus = <span class="string">'off'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.1 不使用log, 使用debug, 避免污染控制台</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.debug(element);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#devtool-status'</span>).innerHTML = checkStatus;</span></span><br><span class="line">&#125;, 1000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Firefox-适用-截止至57-0-4"><a href="#Firefox-适用-截止至57-0-4" class="headerlink" title="Firefox 适用(截止至57.0.4)"></a>Firefox 适用(截止至57.0.4)</h1><p>打印普通对象的日志会调用该对象的<code>toString</code>方法。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">status: <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"devtool-status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> checkStatus;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> devtools = <span class="regexp">/./</span>;</span></span><br><span class="line"><span class="actionscript">devtools.toString = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  checkStatus = <span class="string">'on'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    checkStatus = <span class="string">'off'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(devtools);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#devtool-status'</span>).innerHTML = checkStatus;</span></span><br><span class="line">&#125;, 1000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open" target="_blank" rel="noopener">Find out whether Chrome console is open</a></li>
<li><a href="https://segmentfault.com/a/1190000012359015" target="_blank" rel="noopener">突破前端反调试–阻止页面不断debugger</a></li>
<li><a href="https://www.zhihu.com/question/24188524" target="_blank" rel="noopener">前端开发中如何在JS文件中检测用户浏览器是否打开了调试面板（F12打开开发者工具）？</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JavaScript判断浏览器类型</title>
    <url>/posts/Use_JavaScript_to_determine_browser_type.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>User-Agent</code>判断浏览器是不可靠的。因为使用控制台可以随意的伪装<code>User-Agent</code>。<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>使用各浏览器特有的<strong>属性</strong>进行检测<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Opera 8.0+</span></span><br><span class="line"><span class="keyword">var</span> isOpera = (!!<span class="built_in">window</span>.opr &amp;&amp; !!opr.addons) || !!<span class="built_in">window</span>.opera || navigator.userAgent.indexOf(<span class="string">' OPR/'</span>) &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firefox 1.0+</span></span><br><span class="line"><span class="keyword">var</span> isFirefox = <span class="keyword">typeof</span> InstallTrigger !== <span class="string">'undefined'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Safari 3.0+ "[object HTMLElementConstructor]" </span></span><br><span class="line"><span class="keyword">var</span> isSafari = <span class="regexp">/constructor/i</span>.test(<span class="built_in">window</span>.HTMLElement) || (<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123; <span class="keyword">return</span> p.toString() === <span class="string">"[object SafariRemoteNotification]"</span>; &#125;)(!<span class="built_in">window</span>[<span class="string">'safari'</span>] || (<span class="keyword">typeof</span> safari !== <span class="string">'undefined'</span> &amp;&amp; safari.pushNotification));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Internet Explorer 6-11</span></span><br><span class="line"><span class="keyword">var</span> isIE = <span class="comment">/*@cc_on!@*/</span><span class="literal">false</span> || !!<span class="built_in">document</span>.documentMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edge 20+</span></span><br><span class="line"><span class="keyword">var</span> isEdge = !isIE &amp;&amp; !!<span class="built_in">window</span>.StyleMedia;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chrome 1+</span></span><br><span class="line"><span class="keyword">var</span> isChrome = !!<span class="built_in">window</span>.chrome &amp;&amp; !!<span class="built_in">window</span>.chrome.webstore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blink engine detection</span></span><br><span class="line"><span class="keyword">var</span> isBlink = (isChrome || isOpera) &amp;&amp; !!<span class="built_in">window</span>.CSS;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent" target="_blank" rel="noopener">User-Agent MDN</a></li>
<li><a href="http://www.useragentstring.com/pages/useragentstring.php" target="_blank" rel="noopener">List of User Agent Strings</a></li>
<li><a href="https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser" target="_blank" rel="noopener">How to detect Safari, Chrome, IE, Firefox and Opera browser?</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件安装之RPM包详解</title>
    <url>/posts/RPM_package_installation_of_Linux_software.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RPM</code>包管理员是在Linux下广泛使用的软件包管理器。</p>
<a id="more"></a>
<h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p><code>RPM</code>包一般在系统光盘里就有。不同系统的<code>RPM</code>包在不同的路径下。<br><code>CentOS5</code>在<code>CentOS</code>目录下。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先装入系统安装光盘, 切换到 root 用户</span></span><br><span class="line">[ahao@locathost /]$ su -</span><br><span class="line"><span class="comment"># 2. 挂载光盘到 /mnt/cdrom 目录, 目录需要手动创建</span></span><br><span class="line">[root@locathost /]<span class="comment"># mount -t auto /dev/cdrom /mnt/cdrom</span></span><br><span class="line"><span class="comment"># 3. 查看 RPM 包目录, 不同光盘的 RPM 包目录不同</span></span><br><span class="line">[root@locathost /]<span class="comment"># ll /mnt/cdrom/CentOS</span></span><br><span class="line"><span class="comment"># 4. 在用完之后记得卸载光盘</span></span><br><span class="line">[root@locathost /]<span class="comment"># umount /mnt/cdrom</span></span><br></pre></td></tr></table></figure></p>
<h1 id="RPM包命名规则"><a href="#RPM包命名规则" class="headerlink" title="RPM包命名规则"></a>RPM包命名规则</h1><p>这里以<code>Apache</code>的<code>httpd</code>包为例<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ll /mnt/cdrom/CentOS | grep 'httpd'</span></span><br><span class="line">-rw-r--r-- 2 root root  1280858 2009-03-17 httpd-2.2.3-22.el5.centos.x86_64.rpm</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">httpd</th>
<th style="text-align:center">2.2.3</th>
<th style="text-align:center">22</th>
<th style="text-align:center">el5.centos</th>
<th style="text-align:center">x86_64</th>
<th style="text-align:center">rpm</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">软件包名</td>
<td style="text-align:center">软件版本</td>
<td style="text-align:center">软件发布次数</td>
<td style="text-align:center">适合的Linux平台</td>
<td style="text-align:center">适合的硬件平台</td>
<td style="text-align:center">rpm包扩展名</td>
</tr>
</tbody>
</table>
<h1 id="RPM查询"><a href="#RPM查询" class="headerlink" title="RPM查询"></a>RPM查询</h1><p>包和包之间可能存在依赖关系, 比如<strong>软件<code>A</code></strong>需要调用<strong>软件<code>B</code></strong>, 那么安装<strong>软件<code>A</code></strong>之前就必须安装<strong>软件<code>B</code></strong>, 否则可能会出现找不到<strong>软件<code>B</code></strong>的某个<strong>函数</strong>的问题。<br>这叫做<strong>树形依赖</strong>, 其他还有其他依赖。</p>
<ol>
<li>树形依赖: a -&gt; b -&gt; c, 安装c需要先安装b, 安装b需要先安装a, 卸载的时候要先卸载a, 再卸载b, 最后卸载c</li>
<li>环形依赖: a -&gt; b -&gt; c -&gt; a, 用一条命令同时安装, <code>rpm -ivh a b c</code></li>
<li>模块依赖: 依赖另一个包的某个so库文件模块, 查询模块对应的软件: <a href="www.rpmfind.net">www.rpmfind.net</a></li>
</ol>
<p>以<code>httpd</code>包为例, 已安装的软件包在<code>/var/lib/rpm/</code>数据库中, 只用输入包名即可。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装httpd软件包, -i 安装, -v 显示详细信息, -h 显示进度, </span></span><br><span class="line"><span class="comment">#    会发现安装失败, 需要解决依赖性问题, 将依赖的包依次安装即可</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -ivh /mnt/cdrom/CentOS/httpd-2.2.3-22.el5.centos.x86_64.rpm </span></span><br><span class="line"><span class="comment"># 2. 查询所有已安装的RPM包, -q 查询, -a 查询所有</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -qa</span></span><br><span class="line"><span class="comment"># 3. 查询包信息, -i 包信息, -p 未安装的包</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -qi httpd</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -qip /mnt/cdrom/CentOS/httpd-2.2.3-22.el5.centos.x86_64.rpm </span></span><br><span class="line"><span class="comment"># 4. 查询包所有文件安装位置</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -ql httpd</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -qlp /mnt/cdrom/CentOS/httpd-2.2.3-22.el5.centos.x86_64.rpm</span></span><br><span class="line"><span class="comment"># 5. 查询文件名属于哪个包</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -qf /etc/httpd/</span></span><br><span class="line">httpd-2.2.3-22.el5.centos</span><br><span class="line"><span class="comment"># 6. 升级httpd包, 除非是重大安全漏洞, 避免升级</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -U httpd</span></span><br><span class="line"><span class="comment"># 7. 卸载http包, 需要解决依赖性问题</span></span><br><span class="line">[root@localhost /]<span class="comment"># rpm -e httpd</span></span><br></pre></td></tr></table></figure></p>
<h1 id="RPM验证"><a href="#RPM验证" class="headerlink" title="RPM验证"></a>RPM验证</h1><p>有时候网络波动或网络攻击会导致文件缺失或者文件被植入木马等问题, 就需要验证下载下来的文件和RPM包的文件是否一致。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 修改 httpd 包的配置文件 httpd.conf, 随便添加几个字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="comment"># 2. verify 校验RPM包中的文件, 发现被修改过了, S.5....T 对应表一, c 对应表二</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -V httpd</span></span><br><span class="line">S.5....T  c /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">S(Size)</th>
<th style="text-align:center">M(Mode)</th>
<th style="text-align:center">5(MD5)</th>
<th style="text-align:center">D(Device)</th>
<th style="text-align:center">L(Link)</th>
<th style="text-align:center">U(User)</th>
<th style="text-align:center">G(Group )</th>
<th style="text-align:center">T(mTime)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">文件大小</td>
<td style="text-align:center">文件类型或文件权限</td>
<td style="text-align:center">MD5校验</td>
<td style="text-align:center">设备主从代码</td>
<td style="text-align:center">文件路径</td>
<td style="text-align:center">文件所有者</td>
<td style="text-align:center">文件所属组</td>
<td style="text-align:center">文件修改时间</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">c(config)</th>
<th style="text-align:center">d(documentation)</th>
<th style="text-align:center">g(ghost)</th>
<th style="text-align:center">L(license)</th>
<th style="text-align:center">r(readme)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">配置文件</td>
<td style="text-align:center">普通文件</td>
<td style="text-align:center">不在RPM包的幽灵文件</td>
<td style="text-align:center">授权文件</td>
<td style="text-align:center">描述文件</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3. 使用 rpm2cpio 将 rpm 包中转为 cpio, 再通过 cpio 提取其中的 ./etc/httpd/conf/httpd.conf 文件, 保存到 /tmp 目录下</span></span><br><span class="line"><span class="comment"># -i copy-in模式还原, -d 还原时自动新建目录, -v verbose 显示还原过程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /tmp</span></span><br><span class="line">[root@localhost /tmp]<span class="comment"># rpm2cpio /mnt/cdrom/CentOS/httpd-2.2.3-22.el5.centos.x86_64.rpm | cpio -idv ./etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="comment"># 4. 覆盖被改变的 httpd.conf</span></span><br><span class="line">[root@localhost /tmp]<span class="comment"># cp /tmp/etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="comment"># 5. 再次校验RPM包, 发现没有异常, 只有时间被修改了</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># rpm -V httpd</span></span><br><span class="line">.......T  c /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件安装之Yum详解</title>
    <url>/posts/Yum_installation_of_Linux_software.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Yum(Yellow dog Updater, Modified)</code>是一个基于<code>RPM</code>包管理的字符前端软件包管理器。<br>能够从指定的服务器自动下载RPM包并且安装，可以自动处理<strong>依赖性</strong>关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。<br>不支持<code>RPM</code>查询和校验。</p>
<a id="more"></a>
<h1 id="Yum配置文件"><a href="#Yum配置文件" class="headerlink" title="Yum配置文件"></a>Yum配置文件</h1><p>配置文件在<code>/etc/yum.repos.d/</code>目录下<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># cat /etc/yum.repos.d/CentOS-Base.repo </span></span><br><span class="line">[容器名]</span><br><span class="line">name=容器说明</span><br><span class="line">mirrorlist=镜像站点, 当baseurl无法访问时启用</span><br><span class="line"><span class="comment">#baseurl=Yum服务器地址</span></span><br><span class="line">enabled=0禁用, 1启用, 默认启用</span><br><span class="line">gpgcheck=0表示RPM数字证书失效, 1表示生效</span><br><span class="line">gpgkey=数字证书的公钥文件保存位置</span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=os</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略其他容器</span></span><br></pre></td></tr></table></figure></p>
<p>使用阿里云<code>Yum</code>源: <a href="https://mirrors.aliyun.com/help/centos" target="_blank" rel="noopener">CentOS</a><br>配置好<code>repo</code>文件后, 清空缓存即可。<br><strong>注意, CentOS5已经过时, 很多网站都放弃了CentOS5的Yum源</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># yum clean all</span></span><br><span class="line">[root@localhost /]<span class="comment"># yum makecache</span></span><br></pre></td></tr></table></figure></p>
<h1 id="使用系统光盘创建本地Yum源"><a href="#使用系统光盘创建本地Yum源" class="headerlink" title="使用系统光盘创建本地Yum源"></a>使用系统光盘创建本地Yum源</h1><p><code>Yum(Yellow dog Updater, Modified)</code>是一个基于<code>RPM</code>包管理的字符前端软件包管理器。<br>系统光盘自带了一堆<code>RPM</code>包, 也就是说, 使用系统光盘也可以创建一个本地的无需联网的<code>Yum</code>源。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 移除Yum网络源</span></span><br><span class="line">[root@localhost /]<span class="comment"># mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span></span><br><span class="line"><span class="comment"># 2. 挂载光盘到 /mnt/cdrom 路径下</span></span><br><span class="line">[root@locathost /]<span class="comment"># mount -t auto /dev/cdrom /mnt/cdrom</span></span><br><span class="line"><span class="comment"># 2. 将挂载后的系统光盘路径设置为本地Yum源地址</span></span><br><span class="line">[root@localhost /]<span class="comment"># vim /etc/yum.repos.d/CentOS-Media.repo</span></span><br><span class="line">[c5-media]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Media</span><br><span class="line">baseurl=file:///mnt/cdrom/ <span class="comment"># 光盘挂载点</span></span><br><span class="line"><span class="comment"># 只保留一个, 其他注释掉</span></span><br><span class="line"><span class="comment">#        file:///media/cdrom/</span></span><br><span class="line"><span class="comment">#        file:///media/cdrecorder/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看Yum列表, c5-media 为容器名, 说明本地Yum源设置成功</span></span><br><span class="line">[root@localhost /]<span class="comment"># yum list</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list | grep 'httpd'</span></span><br><span class="line">httpd.x86_64                              2.2.3-22.el5.centos          c5-media</span><br><span class="line">httpd-manual.x86_64                       2.2.3-22.el5.centos          c5-media</span><br><span class="line">system-config-httpd.noarch                5:1.3.3.3-1.el5              installed</span><br></pre></td></tr></table></figure></p>
<h1 id="Yum常用命令"><a href="#Yum常用命令" class="headerlink" title="Yum常用命令"></a>Yum常用命令</h1><p><code>Yum</code>安装等操作不用再使用包全名, 使用包名即可。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装, -y 自动回答yes</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install httpd</span></span><br><span class="line"><span class="comment"># 2. 升级, 注意! 如果未加包名, 会更新所有软件, 包括系统内核!</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y update httpd</span></span><br><span class="line"><span class="comment"># 3. 卸载</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y remove httpd</span></span><br><span class="line"><span class="comment"># 4. 搜索, 或者使用 yum list | grep 'httpd'</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum search httpd</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">========================== Matched: httpd =============================</span><br><span class="line">mod_ssl.x86_64 : Apache HTTP 服务器的 SSL/TLS 模块</span><br><span class="line">system-config-httpd.noarch : Apache 配置工具。</span><br><span class="line">httpd.x86_64 : Apache HTTP 服务器</span><br><span class="line">httpd-manual.x86_64 : Apache HTTP 服务器的文档。</span><br></pre></td></tr></table></figure></p>
<h1 id="Yum-软件组"><a href="#Yum-软件组" class="headerlink" title="Yum 软件组"></a>Yum 软件组</h1><p>软件组, 顾名思义, 就是一组软件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先将系统语言改为英文</span></span><br><span class="line">[root@localhost ~]<span class="comment"># LANG=en_US</span></span><br><span class="line"><span class="comment"># 2. 列出所有可用的软件组列表</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum grouplist</span></span><br><span class="line"><span class="comment"># 3. 安装 MySQL 软件组, 组名必须要英文, 第1步已经修改了系统语言</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum groupinstall "MySQL Server"</span></span><br><span class="line"><span class="comment"># 4. 卸载软件组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum groupremove "MySQL Server"</span></span><br><span class="line"><span class="comment"># 5. 将系统语言改为中文UTF8</span></span><br><span class="line">[root@localhost ~]<span class="comment"># LANG=zh-CN.utf8</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件安装之源码包详解</title>
    <url>/posts/source_code_installation_of_Linux_software.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>源代码包则主要适用于自由软件的安装，用户需要自己编译它们。<br>通常从软件的官方网站获取下载。<br>就是开发者写的代码, 需要自己手动编译。</p>
<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>以 <code>Apache</code> 的 <code>httpd</code> 包为例。<a href="http://archive.apache.org/dist/httpd/" target="_blank" rel="noopener">httpd各版本下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 gcc 编译器, 源码包必须安装编译器</span></span><br><span class="line">[root@localhost /]<span class="comment"># yum -y install gcc</span></span><br><span class="line"><span class="comment"># 2. 下载 Apache 的 httpd 源码包, -C 断点续传, -o 指定输出文件</span></span><br><span class="line">[root@localhost /]<span class="comment"># curl -C -o /opt/httpd-2.2.9.tar.gz http://archive.apache.org/dist/httpd/httpd-2.2.9.tar.gz</span></span><br><span class="line"><span class="comment"># 3. 解压缩, 并进去该目录, -z 使用gzip压缩, -x 解压缩, -v 显示操作过程, -f 指定操作的文件, -C 解压在指定目录下</span></span><br><span class="line">[root@localhost /]<span class="comment"># tar -zxvf /opt/httpd-2.2.9.tar.gz -C /opt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.1. 进入解压缩后的目录, 必须!!!</span></span><br><span class="line">[root@localhost /]<span class="comment"># cd /opt/httpd-2.2.9</span></span><br><span class="line"><span class="comment"># 4.2. 软件配置, 生成Makefile文件, 保存定义好的功能选项和检测系统环境的信息, 用于后续的安装</span></span><br><span class="line"><span class="comment">#        安装到 /opt/apache 目录下</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># ./configure --prefix=/opt/apache</span></span><br><span class="line"><span class="comment"># 4.3. make是用来编译的，它从Makefile中读取指令，然后编译。</span></span><br><span class="line"><span class="comment">#        如果报错, 需要执行 make clean 清除缓存和临时文件。</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># make</span></span><br><span class="line"><span class="comment"># 4.4. make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</span></span><br><span class="line"><span class="comment">#        如果报错, 需要执行 make clean 清除缓存和临时文件, 并删除/opt/apache目录。</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 编辑html, 启动apache, 关闭防火墙, 在浏览器输入服务器的 ip 地址即可访问</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># vim /opt/apache/htdocs/index.html</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># /opt/apache/bin/apachectl start</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># systemctl stop firewalld.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 卸载直接删除目录即可</span></span><br><span class="line">[root@localhost httpd-2.2.9]<span class="comment"># cd / &amp;&amp; rm -rf /opt/http* /opt/apache</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC检测异常链接</title>
    <url>/posts/detect_abnormal_url_in_SpringMVC.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大型网站通常会因为开发人员的代码功底参差不齐, 在一段时间后, 因为接口关闭等一系列原因, 造成页面出现<code>500</code>或<code>404</code>等常见错误。而这些链接是隐藏极深, 难以去人工一一排除的。</p>
<p><a href="https://en.wikipedia.org/wiki/Xenu%27s_Link_Sleuth" target="_blank" rel="noopener">Xenu Link Sleuth</a>是一个错链扫描工具, 可以检测到网页中的链接是否正常。<br>当然, 这个工具是需要自己手动点击才能自动扫描的。最好就是用户访问到的瞬间, 我们就能知道链接是否正常。</p>
<a id="more"></a>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p><code>Spring MVC</code>提供了<strong>拦截器</strong>和<strong>拦截器链</strong>。<br>推荐使用注解加载<code>Bean</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ahaochan on 2017/9/21.</span></span><br><span class="line"><span class="comment"> * Spring拦截器的注解, 复制自&#123;<span class="doctag">@link</span> org.springframework.stereotype.Service&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Interceptor &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Ahaochan on 2017/9/21.</span></span><br><span class="line"><span class="comment"> * Web状态码拦截器, 拦截到异常或状态码不为200, 则进行处理</span></span><br><span class="line"><span class="comment"> * 写入数据库、日志, 或者短信提醒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Interceptor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebStatusInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebExceptionResolver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 具体实现交由开发人员自行处理</span></span><br><span class="line">        <span class="keyword">if</span>(ex != <span class="keyword">null</span> || response.getStatus() != HttpStatus.OK.value())&#123;</span><br><span class="line">            logger.error(<span class="string">"异常链接:"</span>+request.getRequestURI());</span><br><span class="line">            logger.error(<span class="string">"状态码:"</span>+response.getStatus());</span><br><span class="line">            logger.error(<span class="string">"异常:"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-aop.xml 省略部分代码--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描aop相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ahao"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"com.ahao.annotation.Interceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 拦截器链 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对所有uri进行拦截 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 特定请求的拦截器只能有一个 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"webStatusInterceptor "</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://en.wikipedia.org/wiki/Xenu%27s_Link_Sleuth" target="_blank" rel="noopener">Xenu Link Sleuth</a>是比较强大的工具, 但是及时性不足, 扫描时间过长。<br><code>Spring MVC</code>提供了拦截器可以补充上面的缺陷, 但是缺点就是无法扫描外部链接。</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux权限管理之ACL权限</title>
    <url>/posts/ACL_permissions_for_Linux_rights_management.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ACL权限 Access Control List<br>适用于当一个用户不满足所有者<code>owner</code>, 所属组<code>group</code>, 其他人<code>other</code>的情况。<br>比如一个家庭账本权限为<code>-rwxrwx---</code>, 所有者<code>owner</code>是我, 所属组<code>group</code>是直系亲属, 其他人<code>other</code>是陌生人。<br>现在三姑六婆想阅读这个家庭账本, 要求权限为<code>r--</code>, 不满足拥有者(我), 所属组(直系亲属), 其他人(陌生人), 这时候就是使用ACL权限的时候。</p>
<a id="more"></a>
<h1 id="开启ACL权限"><a href="#开启ACL权限" class="headerlink" title="开启ACL权限"></a>开启ACL权限</h1><p>执行以下<code>shell</code>脚本, 查看是否已经开启了<code>ACL</code>权限。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">[[ <span class="variable">$UID</span> != <span class="string">"0"</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">"you must be root"</span> &amp;&amp; <span class="built_in">exit</span> 1;</span><br><span class="line"></span><br><span class="line">filesystem=$(mount | grep <span class="string">" / "</span> | cut -d <span class="string">" "</span> -f 5)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;filesystem&#125;</span> == <span class="string">"ext3"</span> ]];<span class="keyword">then</span></span><br><span class="line">    /sbin/dumpe2fs -h /dev/sda2 | grep <span class="string">"acl"</span></span><br><span class="line">    [[ $? == <span class="string">"0"</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">"enabled acl"</span> || <span class="built_in">echo</span> <span class="string">"disabled acl"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>一般默认开启, 如果没有开启, 进行以下配置即可<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 临时配置, 重新挂载/根目录, 加入ACL权限</span></span><br><span class="line">[ahao@localhost ~]$ mount -o remount,acl /</span><br><span class="line"><span class="comment"># 2. 永久配置, 写入/etc/fstab文件, 重启生效</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line">LABEL=/                 /                       ext3    defaults,acl        1 1</span><br></pre></td></tr></table></figure></p>
<h1 id="查看和设置文件ACL权限"><a href="#查看和设置文件ACL权限" class="headerlink" title="查看和设置文件ACL权限"></a>查看和设置文件ACL权限</h1><p>设置ACL权限用<code>setfacl -m [u|g]:[用户名|组名]:权限 文件名</code>命令。<br>查看ACL权限用<code>getfacl 文件名</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">设置ACL权限</td>
<td style="text-align:center">setfacl -m [u&#124;g]:[用户名&#124;组名]:权限 文件名</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">删除指定ACL权限</td>
<td style="text-align:center">setfacl -x [u&#124;g]:[用户名&#124;组名] 文件名</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">删除全部ACL权限</td>
<td style="text-align:center">setfacl -b 文件名</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">设定默认ACL权限(子文件继承目录ACL权限)</td>
<td style="text-align:center">setfacl -m d:[u&#124;g]:[用户名&#124;组名]:权限 文件名</td>
</tr>
<tr>
<td style="text-align:center">k</td>
<td style="text-align:center">删除默认ACL权限(子文件继承目录ACL权限)</td>
<td style="text-align:center">setfacl -m</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">递归设置ACL权限(容易给文件x权限)</td>
<td style="text-align:center">setfacl -m [u&#124;g]:[用户名&#124;组名]:权限 -R 目录名</td>
</tr>
</tbody>
</table>
<p>这是一个例子。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建权限为drwxrwx---, 用户和用户组为root的dir目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir ~ahao/dir </span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 770 ~ahao/dir</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll ~ahao</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxrwx---. 2 root root 6 11月  4 22:32 dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 操作1: ahao用户尝试进入dir目录失败, 权限不足</span></span><br><span class="line">[ahao@localhost ~]$ <span class="built_in">cd</span> dir</span><br><span class="line">-bash: <span class="built_in">cd</span>: dir: 权限不够</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. root用户设置ACL权限, 给ahao用户赋予rx权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m u:ahao:rx ~ahao/dir</span></span><br><span class="line">[ahao@localhost ~]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">drwxrwx---+ 2 root root 6 11月  4 22:32 dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 操作2: ahao用户尝试进入dir目录成功, dir的+权限位代表ACL权限</span></span><br><span class="line">[ahao@localhost ~]$ <span class="built_in">cd</span> dir</span><br><span class="line">[ahao@localhost dir]$ <span class="comment"># 成功进入dir目录 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 操作3: 查看ACL权限</span></span><br><span class="line">[ahao@localhost dir]$ getfacl ~ahao/dir/ </span><br><span class="line">getfacl: Removing leading <span class="string">'/'</span> from absolute path names</span><br><span class="line"><span class="comment"># file: home/ahao/dir/</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:ahao:r-x <span class="comment"># ACL权限</span></span><br><span class="line">group::rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::---</span><br></pre></td></tr></table></figure></p>
<h1 id="mask掩码"><a href="#mask掩码" class="headerlink" title="mask掩码"></a>mask掩码</h1><p>上面的例子在使用<code>getfacl dir</code>之后, 可以看到有一项是<code>mask</code>。<br>这个和默认权限<code>umask</code>差不多, 也是一个权限掩码, 表示所能赋予的权限最大值。<br>这里的<code>mask</code>和<code>ACL权限</code>进行<code>&amp;与</code>运算, 得到的才是真正的<code>ACL权限</code>。<br>用人话讲, 就是</p>
<blockquote>
<p>你考一百分是因为实力只有一百分<br>我考一百分是因为总分只有一百分</p>
</blockquote>
<p><code>mask</code>限制了权限的最高值。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 修改ACL权限mask为r-x</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m m:rx ~ahao/tmp/av </span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl ~ahao/tmp/av</span></span><br><span class="line">getfacl: Removing leading <span class="string">'/'</span> from absolute path names</span><br><span class="line"><span class="comment"># file: home/ahao/tmp/av</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::r-x <span class="comment"># 修改ACL权限mask为r-x</span></span><br><span class="line">other::---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 为用户ahao添加ACL权限rwx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m u:ahao:rwx ~ahao/tmp/av/ </span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl ~ahao/tmp/av</span></span><br><span class="line">getfacl: Removing leading <span class="string">'/'</span> from absolute path names</span><br><span class="line"><span class="comment"># file: home/ahao/tmp/av</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:ahao:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx <span class="comment"># 注意, 这里的mask掩码会改变, 因为赋予的ACL权限大于mask</span></span><br><span class="line">other::---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 修改ACL权限mask为r-x</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m m:rx ~ahao/tmp/av</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl ~ahao/tmp/av</span></span><br><span class="line">getfacl: Removing leading <span class="string">'/'</span> from absolute path names</span><br><span class="line"><span class="comment"># file: home/ahao/tmp/av</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:ahao:rwx			<span class="comment">#effective:r-x # 这里会提示真实的ACL权限为r-x</span></span><br><span class="line">group::r-x</span><br><span class="line">mask::r-x <span class="comment"># 这里mask不会再改变</span></span><br><span class="line">other::---</span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>mask</code> 会限制 <code>ACL</code> 权限的最大值。</li>
<li>赋予<code>ACL</code> 权限大于 <code>mask</code> 的时候, 会将 <code>mask</code> <strong>撑大</strong>。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户管理之配置文件</title>
    <url>/posts/configuration_file_of_user_management.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 用户管理涉及到几个文件</p>
<ol>
<li><code>/etc/passwd</code> 存储用户账号信息</li>
<li><code>/etc/shadow</code> 存储用户密码信息</li>
<li><code>/etc/group</code>存储用户组信息</li>
<li><code>/etc/gshadow</code>存储用户组管理员密码信息</li>
</ol>
<a id="more"></a>
<h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><h2 id="etc-passwd文件结构"><a href="#etc-passwd文件结构" class="headerlink" title="/etc/passwd文件结构"></a>/etc/passwd文件结构</h2><p><code>/etc/passwd</code>是存储账号的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd | grep -E "ahao|root"</span></span><br><span class="line">ahao:x:500:500:ahao:/home/ahao:/bin/bash</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></p>
<p>以冒号分割, 分为7个部分。</p>
<ol>
<li>ahao: 用户名。</li>
<li>x: 以前存储密码的字段, 现在改为<code>/etc/shadow</code>文件。</li>
<li>500: 第一个500是<code>uid</code>用户id。</li>
<li>500: 第二个500是<code>gid</code>群组id, 在<code>/etc/group</code>文件中。</li>
<li>ahao: 这个是用户信息说明栏, 用来解释这个账号的意义。</li>
<li>/home/ahao: 家目录</li>
<li>/bin/bash: 默认使用<code>Bash</code></li>
</ol>
<p>用户uid的编码规则</p>
<table>
<thead>
<tr>
<th style="text-align:center">id 范围</th>
<th style="text-align:center">该 ID 使用者特性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">root用户, 系统管理员</td>
</tr>
<tr>
<td style="text-align:center">1~99</td>
<td style="text-align:center">系统id, 由 distributions 自行创建的系统账号, 启动系统服务使用该账号</td>
</tr>
<tr>
<td style="text-align:center">100~499</td>
<td style="text-align:center">系统id, 若用户有系统账号需求时, 可以使用的账号UID, 启动系统服务使用该账号</td>
</tr>
<tr>
<td style="text-align:center">500~65535</td>
<td style="text-align:center">可登陆账号, 一般用户使用</td>
</tr>
</tbody>
</table>
<h2 id="etc-shadow-文件结构"><a href="#etc-shadow-文件结构" class="headerlink" title="/etc/shadow 文件结构"></a>/etc/shadow 文件结构</h2><p><code>/etc/shadow</code>是存储密码的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/shadow | grep -E "ahao|root"</span></span><br><span class="line">ahao:<span class="variable">$1</span><span class="variable">$eoG3CKlq</span><span class="variable">$D8deyAR</span>.qvEws9kA5pFLd1:17431:0:99999:7:::</span><br><span class="line">root:<span class="variable">$1</span><span class="variable">$zQeO</span>.jbw<span class="variable">$ZyXVaa7yPIb2K</span>/3BopdSa.:17431:0:99999:7:::</span><br></pre></td></tr></table></figure></p>
<p>以冒号分割, 分为8个部分。</p>
<ol>
<li>ahao: 用户名</li>
<li><code>$1$eoG3CKlq$D8deyAR.qvEws9kA5pFLd1</code>: 加密后的密码</li>
<li>17431: 最近改密码的日期距离1970年1月1日的天数。</li>
<li>0: 只有0天后密码才能再次修改。</li>
<li>99999: 必须在99999天后修改密码, 否则账号标记为过期。</li>
<li>7: 警告该账号, 还有7天不修改密码的话, 账号就会过期。</li>
<li>null: 在账号标识为过期后, 还有null天宽限期可以登录该账号, 登录后会强制让用户修改密码。</li>
<li>null: 1970年1月1日的null天后账号失效, 和过期不同。</li>
<li>null: 保留字段, 暂时没用。</li>
</ol>
<h2 id="etc-group文件结构"><a href="#etc-group文件结构" class="headerlink" title="/etc/group文件结构"></a>/etc/group文件结构</h2><p><code>/etc/group</code>是存储用户组的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/group | grep -E "ahao|root"</span></span><br><span class="line">root:x:0:root</span><br><span class="line">ahao:x:500:</span><br></pre></td></tr></table></figure></p>
<ol>
<li>ahao: 用户组名, 在不指定用户组的情况下，创建用户并指定密码后会默认创建同名用户组。</li>
<li>x: 用户组密码, 改存储到<code>/etc/gshadow</code>文件。</li>
<li>500: 用户组ID, 对应<code>/etc/passwd</code>第四个字段。</li>
<li>null: 用户组支持的账号, 一个账号可以有多个用户组, 比如<code>ahao</code>用户要加入<code>root</code>用户组, 则编辑为<code>root:x:0:root,ahao</code>即可。</li>
</ol>
<h2 id="etc-gshadow文件结构"><a href="#etc-gshadow文件结构" class="headerlink" title="/etc/gshadow文件结构"></a>/etc/gshadow文件结构</h2><p><code>/etc/gshadow</code>是存储用户组密码的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gshadow | grep -E "ahao|root"</span></span><br><span class="line">root:::root</span><br><span class="line">ahao:!!::</span><br></pre></td></tr></table></figure></p>
<ol>
<li>ahao: 用户组名, 在不指定用户组的情况下，创建用户并指定密码后会默认创建同名用户组。</li>
<li>!!: 用户组密码。<strong>!</strong>表示没有密码, 即没有用户组管理员。</li>
<li>null: 用户组管理员的账号。</li>
<li>null: 用户组的下属账号</li>
</ol>
<h1 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd user1 # 新增用户user1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd user1  # 设置user1的密码, 创建用户后必须设置密码才能登录。 </span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -L user1  # 锁定user1的用户(仅改 /etc/shadow的密码部分)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -U user1  # 解锁user1的用户(仅改 /etc/shadow的密码部分)</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># userdel -r user1 # 删除用户, -r连同家目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd -r oldGroup1 # 新增用户组oldGroup1, -r创建系统用户组, 即GID&lt;500</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod -g 201 -n group1 oldGroup1 # 修改用户组oldGroup1的GID为201, 修改组名为group1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd group1 # 设置用户组group1的群组管理员密码</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -A user1 group1 # 设置用户user1为用户组group1的管理员</span></span><br><span class="line">[user1@localhost ~]$ gpasswd -a user2 group1 <span class="comment"># 群组管理员user1将用户user2加入用户组group1</span></span><br><span class="line">[user1@localhost ~]$ gpasswd -d user2 group1 <span class="comment"># 群组管理员user1将用户user2移出用户组group1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -M user2 group1 # 用户root将用户user2加入用户组group1</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># groupdel group1 # 删除用户组group1</span></span><br></pre></td></tr></table></figure>
<p>不指定其他选项的情况下, <code>useradd</code>和<code>passwd</code>命令默认完成以下步骤, 默认配置文件在<code>/etc/default/useradd</code>中。</p>
<ol>
<li><code>/etc/passwd</code>新增一行用户信息, 包括创建UID/GID/家目录等。</li>
<li><code>/etc/shadow</code>新增一行密码信息。</li>
<li><code>/etc/group</code> 新增一个和用户名同名的用户组。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>从时空复杂度思考获取子集合问题</title>
    <url>/posts/think_about_the_problem_of_obtaining_sub_collection_from_the_perspective_of_complexity_in_time_and_space.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需求: 需要从<code>List</code>根据条件获取子元素集合<code>subList</code>。</p>
<p>有两种方法</p>
<ol>
<li>时间优先: 添加到新的集合中。</li>
<li>空间优先: 使用<code>Iterator</code>迭代器进行删除。</li>
</ol>
<p>这里以<code>ArrayList</code>为例。</p>
<a id="more"></a>
<h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p>现在需要把偶数取出来。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="时间优先"><a href="#时间优先" class="headerlink" title="时间优先"></a>时间优先</h1><p>新建一个集合, 遍历参数集合, 将满足条件的数据插入新的集合, 再将新集合插入<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(even1(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">even1</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加到新的集合</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(list.size());</span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="空间优先"><a href="#空间优先" class="headerlink" title="空间优先"></a>空间优先</h1><p>直接在已有集合上, 使用迭代器进行删除操作。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(even2(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">even2</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在已有集合进行删除</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Integer&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            Integer value = it.next();</span><br><span class="line">            <span class="keyword">if</span> (value % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如何选择最佳的获取子集合策略，取决于该集合的数据结构。<br>例如 <code>ArrayList</code> 的集合数据结构是数组, 删除、插入的效率是 <code>O(n)</code> , 查找的效率是 <code>O(1)</code>。<br>再综合考虑代码的复杂度, 个人观点, 如果不是空间非常紧张, 还是选<strong>时间优先</strong>的方案比较好。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常量字符串过长</title>
    <url>/posts/constant_string_is_too_long.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用 <code>fastjson</code> 从 <code>url</code> 下载 <code>json</code> 解析时候, 出现了语法错误。<br>要排错, 于是将一堆 <code>json</code> 数据复制到 <code>String</code>。<br>结果报编译异常<strong>常量字符串过长</strong>。</p>
<a id="more"></a>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用 <code>Eclipse编译器</code> 解决问题。<br><code>IDEA 2017.1.5</code> 的操作流程:<br>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler<br>点击 <code>Use Compiler</code>, 选择 <code>Eclipse</code>, 点击确定保存即可。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Slow network is detected.Fallback font will be used while loading</title>
    <url>/posts/Chrome_Slow_network_is_detected.Fallback_font_will_be_used_while_loading.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>升级<code>Chrome</code>后, 在<code>F12控制台</code>调试的时候, 经常会出现一堆代码。看起来也不是错误。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slow network is detected. Fallback font will be used while loading: http://xxxxxxxx.woff</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><p>从字面意思上理解。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">检测到缓慢的网络请求。当加载http://xxxxxxx.woff时，回调字体将会被使用。</span><br></pre></td></tr></table></figure></p>
<p>就是当网络字体没加载完毕的时候, 页面会出现空白界面, 这对用户体验很不友好。Chrome正在用本地字体替换网页字体(使用<code>Css</code>的<code>@ font-face</code>规则加载）。</p>
<p>这是一个叫做<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face" target="_blank" rel="noopener">@font-face</a>的<a href="https://developer.mozilla.org/zh-CN/docs/CSS" title="CSS" target="_blank" rel="noopener">CSS</a>  <a href="https://developer.mozilla.org/zh-CN/docs/CSS/At-rule" title="At-rule" target="_blank" rel="noopener">@规则</a>, 它允许网页开发者为其网页指定在线字体, 避免对本地字库的依赖。</p>
<p>简单的说, 这是一个Chrome的<code>bug</code>, 只要加载网络字体, 就会提示这个信息。<br>但是这个信息对<strong>Web调试</strong>来说是噪音信息, 无用的信息。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>关闭这个提示。眼不见心不烦。<br>在地址栏输入<code>chrome://flags/#enable-webfonts-intervention-v2</code>, 选择<strong>Disable</strong>即可。<br>目前版本 61.0.3163.100, 尚未修复这个bug。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/40143098" target="_blank" rel="noopener">why-does-this-slow-network-detected-log-appear-in-chrome</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux以不同方式执行Shell导致的变量生命周期问题</title>
    <url>/posts/Linux_performs_variable_life_cycle_issues_caused_by_the_shell_in_different_ways.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<code>Tomcat/bin/catalina.sh</code>中有一段代码如下<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断setenv.sh是否存在, 存在就执行</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  . <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> <span class="comment"># 以点、空格、Shell的方式执行Shell</span></span><br><span class="line"><span class="keyword">elif</span> [ -r <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  . <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="不同的执行shell方式"><a href="#不同的执行shell方式" class="headerlink" title="不同的执行shell方式"></a>不同的执行shell方式</h1><p>先添加一个<code>setenv.sh</code>文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk/jdk1.8.0_151</span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=-Xmx512m</span><br></pre></td></tr></table></figure></p>
<p>执行以下代码<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找当前shell中的JAVA变量, 没找到</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># set | grep JAVA</span></span><br><span class="line"><span class="comment"># 1.1. 以开启子shell的方式执行setenv.sh</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># sh /opt/tomcat/tomcat-test/bin/setenv.sh </span></span><br><span class="line"><span class="comment"># 1.2. setenv.sh的变量生命周期在子shell中, 不影响当前shell, 所以没找到JAVA变量</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># set | grep JAVA</span></span><br><span class="line"><span class="comment"># 2.1. 在当前shell执行的方式, 点+空格+shell的格式执行</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># . /opt/tomcat/tomcat-test/bin/setenv.sh </span></span><br><span class="line"><span class="comment"># 2.2. 变量生命周期在当前shell, 找到了JAVA变量</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># set | grep JAVA</span></span><br><span class="line">JAVA_HOME=/opt/jdk/jdk1.8.0_151</span><br><span class="line">JAVA_OPTS=-Xmx512m</span><br><span class="line"><span class="comment"># 3.1. 退出shell重新打开shell, 清除之前的变量</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># exit</span></span><br><span class="line">[ahao@127.0.0.1 ~]$ su -</span><br><span class="line"><span class="comment"># 3.2. 确认JAVA变量已经清除</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># set | grep JAVA</span></span><br><span class="line"><span class="comment"># 3.3. 使用source在当前shell执行, 和方式2等价</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># source /opt/tomcat/tomcat-test/bin/setenv.sh </span></span><br><span class="line"><span class="comment"># 3.4. 变量生命周期在当前shell, 找到了JAVA变量</span></span><br><span class="line">[root@127.0.0.1 ~]<span class="comment"># set | grep JAVA</span></span><br><span class="line">JAVA_HOME=/opt/jdk/jdk1.8.0_151</span><br><span class="line">JAVA_OPTS=<span class="string">'-Xms2000m -Xmx2000m'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>有三种执行shell脚本的语法, 实际上只有两种执行shell的方式, 一种在当前shell执行, 一种在子shell中执行。</li>
<li><code>. /opt/tomcat/tomcat-test/bin/setenv.sh</code>和<code>source /opt/tomcat/tomcat-test/bin/setenv.sh</code>等价。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>发票代码和发票号码的意义</title>
    <url>/posts/The_meaning_of_invoice_code_and_invoice_number.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间要做<a href="https://github.com/Ahaochan/invoice" target="_blank" rel="noopener">毕业设计</a>, 需要了解发票的相关知识。<br>这里简单介绍下<code>发票代码</code>和<code>发票号码</code>有什么不同。</p>
<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>最主要的还是<code>发票代码</code>, <code>发票号码</code>是一个8位的流水号。<br><code>发票代码</code>和<code>发票号码</code>组合起来, 能够确保这张发票在全国的唯一性。</p>
<h2 id="增值税发票"><a href="#增值税发票" class="headerlink" title="增值税发票"></a>增值税发票</h2><p><code>增值税发票</code>分为<code>增值税普通发票</code>和<code>增值税专用发票</code>。<br>两者都是<code>10位</code>的阿拉伯数字。</p>
<table style="text-align: center;"><tr><th>代码序号</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><th>代码</th><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><th>说明</th><td colspan="4">市级行政区划代码4位</td><td colspan="2">制版年度2位</td><td>批次1位</td><td>语言文字1位</td><td>几联发票1位</td><td>金额版本号1位</td></tr></table>


<ol>
<li>行政区划代码有4位, 后面补两个零, 参考【<a href="/posts/Get_location_from_invoice_information.html" title="从发票信息中获取位置信息">从发票信息中获取位置信息</a>】</li>
<li>制版年度, 代表是<code>几几年</code>印刷的</li>
<li>批次, 代表是几几年印刷<code>第几批</code>印刷的</li>
<li>语言文字, 1中文、 2中英文、 3藏汉文、 4维汉文。</li>
<li>几联发票, 4代表<code>四联发票</code>、 7代表<code>七联发票</code>。</li>
<li>金额版本号, 1万元版、 2十万元版、 3百万元版、 4千万元版、 用0表示电脑发票。</li>
</ol>
<h2 id="普通发票"><a href="#普通发票" class="headerlink" title="普通发票"></a>普通发票</h2><p>普通发票代码共<code>12位</code>阿拉伯数字。</p>
<table style="text-align: center;"><tr><th>代码序号</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><th>代码</th><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><th>说明</th><td>税务局代码1位</td><td colspan="4">市级行政区划代码4位</td><td colspan="2">制版年度2位</td><td>统一的行业代码1位</td><td colspan="4">细化的发票种类代码4位</td></tr></table>

<ol>
<li>税务局代码, 1为国家税务局、 2为地方税务局、 0为总局。</li>
<li>行政区划代码有4位, 后面补两个零, 参考【<a href="/posts/Get_location_from_invoice_information.html" title="从发票信息中获取位置信息">从发票信息中获取位置信息</a>】</li>
<li>制版年度, 代表是<code>几几年</code>印刷的</li>
<li>统一的行业代码,<br>国税行业划分：1工业、2商业、3加工修理修配业、4收购业、5水电业、6其他。<br>地税行业划分：1交通运输业、2建筑业、3金融保险业、4邮电通信业、5文化体育业、6娱乐业、7服务业、8转让无形资产、9销售不动产、0表示其他。 </li>
<li>细化的发票种类代码4位, 由各税务局自行编制。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.chinatax.gov.cn/n810341/n810765/n812193/n813008/c1203713/content.html" target="_blank" rel="noopener">国家税务总局关于统一全国普通发票分类代码和发票号码的通知</a></li>
</ul>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>发票</tag>
      </tags>
  </entry>
  <entry>
    <title>从发票信息中获取位置信息</title>
    <url>/posts/Get_location_from_invoice_information.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间要做<a href="https://github.com/Ahaochan/invoice" target="_blank" rel="noopener">毕业设计</a>, 需要了解发票的相关知识。<br>需要做地理位置分析, 画个地图。<br>其中,</p>
<ol>
<li><code>统一社会信用代码</code>可以获取购销单位的<code>行政区划代码</code>。</li>
<li><code>发票代码</code>可以获取发票所属地的<code>行政区划代码</code>。</li>
</ol>
<a id="more"></a>
<h1 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h1><p>查阅资料都写的很清楚, 这里再说简单点。<br>获取行政区划代码可以参考我写的一个<a href="https://greasyfork.org/zh-CN/scripts/31888" target="_blank" rel="noopener">油猴脚本</a>。</p>
<p><strong>统一社会信用代码</strong><br>在【<a href="/posts/The_validation_of_the_unified_social_credit_identifier.html" title="统一社会信用代码的校验码验证">统一社会信用代码的校验码验证</a>】一文中有提到, 统一社会信用代码是纳税人的唯一标识。<br>而18位的统一社会信用代码中, 第3-8位就是行政区划代码。<br>比如<code>91350100M000100Y43</code>的行政区划代码为<code>350100</code>, 为福建省福州市。</p>
<p><strong>发票代码</strong><br>注意, <code>发票代码</code>和<code>发票号码</code>是两回事。</p>
<p>增值税发票共10位, 第1-4位为市级行政区划代码, 后两位补0即可。<br>比如<code>3100164320</code>的行政区划代码为<code>3100</code>, 补零为<code>310000</code>, 为上海市。</p>
<p>普通发票共12位, 第2-5位为市级行政区划代码, 后两位补0即可。<br>比如<code>144031601133</code>的行政区划代码为<code>4403</code>, 补零为<code>440300</code>, 为广东省深圳市。</p>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>发票</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo多图并排显示</title>
    <url>/posts/Hexo_multiple_images_side_by_side.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo有时候需要进行多图并排显示对比。<br>fancybox默认一张图占据一行。需要自己修改Css样式。<br><del>本文默认使用<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">七牛云插件</a>。</del><br>测试域名被收回了, 再次感受到国内开发者巨大的政策风险。</p>
<a id="more"></a>
<style type="text/css">
    .fancybox {
        display: inline-block;
    }
</style>

<h1 id="插入Css样式"><a href="#插入Css样式" class="headerlink" title="插入Css样式"></a>插入Css样式</h1><p>在<code>&lt;!-- more --&gt;</code>之后插入样式, 避免将样式写入<code>description</code>。<br>注意, 因为渲染问题, 请尽量使用回车隔离以下代码块。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fancybox</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% img /images/最短路径_01.png 200 %&#125;</span><br><span class="line">&#123;% img /images/最短路径_02.png 200 %&#125;</span><br></pre></td></tr></table></figure></p>
<img src="/images/最短路径_01.png" width="200">
<img src="/images/最短路径_02.png" width="200">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>统一社会信用代码的校验码验证</title>
    <url>/posts/The_validation_of_the_unified_social_credit_identifier.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间要做<a href="https://github.com/Ahaochan/invoice" target="_blank" rel="noopener">毕业设计</a>, 需要了解发票的相关知识。<br>而购销单位必须要有统一社会信用代码。<br>在<a href="http://qyj.saic.gov.cn/zyfb/gszjfb/201612/t20161208_232473.html" target="_blank" rel="noopener">中国企业登记网</a>上有详细的介绍。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>统一社会信用代码由18位<code>数字</code>或<code>大写字母</code>组成。<br>详细的介绍在<a href="http://qyj.saic.gov.cn/zyfb/gszjfb/201612/t20161208_232473.html" target="_blank" rel="noopener">中国企业登记网</a>中。</p>
<table style="text-align: center;"><tr><th>代码序号</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td></tr><tr><th>代码</th><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><th>说明</th><td>登记管理部门代码1位</td><td>机构类别代码1位</td><td colspan="6">登记关机机关行政区划码6位</td><td colspan="9">主题标识码(组织机构代码9位)</td><td>校验码1位</td></tr></table>

<h1 id="校验码计算"><a href="#校验码计算" class="headerlink" title="校验码计算"></a>校验码计算</h1><p>下面是js的计算代码。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// value = 91350100M000100Y43;</span></span><br><span class="line">    <span class="comment">// value = 12440200455904030C;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断字符串长度是否为18</span></span><br><span class="line">    <span class="keyword">if</span> (!$.isString(value) || value.length !== <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转化为大写字母</span></span><br><span class="line">    value = value.toUpperCase();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> valid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> dist = &#123;</span><br><span class="line">        <span class="comment">// 基础值</span></span><br><span class="line">        <span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">'A'</span>: <span class="number">10</span>, <span class="string">'B'</span>: <span class="number">11</span>, <span class="string">'C'</span>: <span class="number">12</span>, <span class="string">'D'</span>: <span class="number">13</span>, <span class="string">'E'</span>: <span class="number">14</span>, <span class="string">'F'</span>: <span class="number">15</span>, <span class="string">'G'</span>: <span class="number">16</span>, <span class="string">'H'</span>: <span class="number">17</span>, <span class="string">'J'</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">'K'</span>: <span class="number">19</span>, <span class="string">'L'</span>: <span class="number">20</span>, <span class="string">'M'</span>: <span class="number">21</span>, <span class="string">'N'</span>: <span class="number">22</span>, <span class="string">'P'</span>: <span class="number">23</span>, <span class="string">'Q'</span>: <span class="number">24</span>, <span class="string">'R'</span>: <span class="number">25</span>, <span class="string">'T'</span>: <span class="number">26</span>, <span class="string">'U'</span>: <span class="number">27</span>,</span><br><span class="line">        <span class="string">'W'</span>: <span class="number">28</span>, <span class="string">'X'</span>: <span class="number">29</span>, <span class="string">'Y'</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="comment">// 权值对应字母</span></span><br><span class="line">        <span class="string">'10'</span>: <span class="string">'A'</span>, <span class="string">'11'</span>: <span class="string">'B'</span>, <span class="string">'12'</span>: <span class="string">'C'</span>, <span class="string">'13'</span>: <span class="string">'D'</span>, <span class="string">'14'</span>: <span class="string">'E'</span>, <span class="string">'15'</span>: <span class="string">'F'</span>,</span><br><span class="line">        <span class="string">'16'</span>: <span class="string">'G'</span>, <span class="string">'17'</span>: <span class="string">'H'</span>, <span class="string">'18'</span>: <span class="string">'J'</span>, <span class="string">'19'</span>: <span class="string">'K'</span>, <span class="string">'20'</span>: <span class="string">'L'</span>, <span class="string">'21'</span>: <span class="string">'M'</span>,</span><br><span class="line">        <span class="string">'22'</span>: <span class="string">'N'</span>, <span class="string">'23'</span>: <span class="string">'P'</span>, <span class="string">'24'</span>: <span class="string">'Q'</span>, <span class="string">'25'</span>: <span class="string">'R'</span>, <span class="string">'26'</span>: <span class="string">'T'</span>, <span class="string">'27'</span>: <span class="string">'U'</span>,</span><br><span class="line">        <span class="string">'28'</span>: <span class="string">'W'</span>, <span class="string">'29'</span>: <span class="string">'X'</span>, <span class="string">'30'</span>: <span class="string">'Y'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 17位权值</span></span><br><span class="line">    <span class="keyword">var</span> power = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">29</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">28</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取前17位的基础值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = value.length - <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = dist[value[i]];</span><br><span class="line">        <span class="keyword">if</span> (num === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 获取前17位的权值的和</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">        sum += array[i] * power[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 将(31-权值和)%31的值转化为字母, 和第18位进行比较</span></span><br><span class="line">    <span class="keyword">if</span> (dist[<span class="number">31</span> - sum % <span class="number">31</span>] + <span class="string">''</span> === value.charAt(value.length - <span class="number">1</span>)) &#123;</span><br><span class="line">        valid = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机的网络连接方式</title>
    <url>/posts/VMware_virtual_machine_network_connection.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装VMware后, 可以在网络适配器看到两个虚拟网卡<code>VMnet1</code>和<code>VMnet8</code>。<br><a id="more"></a></p>
<h1 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h1><p>打开<code>网络与共享中心</code>, 点击左侧<code>更改适配器设置</code>, 右键<code>VMnet1</code>或<code>VMnet8</code>, 选择<code>属性</code>。<br>确保两个网卡都开启<code>VMware Bridge Protocal</code>协议。</p>
<p>打开VMware, 点击菜单栏<code>编辑</code>, 选择<code>虚拟网络编辑器</code>, 可以看到三种配置。</p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>使用真实网卡连接, 选择可以<code>上网</code>的一块网卡。<br>推荐指定具体网卡, 不选择自动。</p>
<p>只要和真实机相同<code>网段</code>即可通信。<br>需要<code>占用</code>真实网段的ip地址。</p>
<h2 id="NAT连接模式"><a href="#NAT连接模式" class="headerlink" title="NAT连接模式"></a>NAT连接模式</h2><p>使用VMnet8虚拟网卡连接。<br>只能和真实机通信, 不能连接局域网其他设备。<br>可以访问互联网。</p>
<h2 id="Host-only连接方式"><a href="#Host-only连接方式" class="headerlink" title="Host-only连接方式"></a>Host-only连接方式</h2><p>使用VMnet1虚拟网卡连接。<br>只能和真实机通信, 不能连接局域网其他设备。<br>只能连接真实机。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是链式调用</title>
    <url>/posts/what_is_Methods_Chaining_in_Java.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java8流行的函数式编程使用的方式类似于<code>a.b().c().d()</code>, 仿佛能无穷无尽点下去。<br>其实这个代码很简单, 换一种写法大概就懂了<code>this.getClass().getSimpleName().length();</code>。<br>在wiki上也有介绍: <a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="noopener">Fluent_interface</a><br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>其实链式调用很简单, 就是一个<code>return 对象;</code>的事情。<br>比如<code>return this;</code>等。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 普通的设置属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age; <span class="comment">// 普通的设置属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 链式的设置属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 链式的设置属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用结果如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">"stu1"</span>);</span><br><span class="line">        s1.setAge(<span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 明显链式调用方法比较优雅</span></span><br><span class="line">        Student s2 = Student.create().name(<span class="string">"stu2"</span>).age(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="优势和缺陷"><a href="#优势和缺陷" class="headerlink" title="优势和缺陷"></a>优势和缺陷</h1><p>显而易见, 使用链式调用的代码更加简洁优雅, 方法间的关联度紧密。<br>同样缺陷也在这里, 每个方法都依赖上一个方法, 如果有一个返回空指针, 那么就会报错。需要代码编写人员的功底比较强。<br>当然, <code>return this;</code>是不可能空指针异常的。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用静态构造器取代new</title>
    <url>/posts/use_static_method_to_replace_new_object.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般创建对象都是new出来的, Spring提供的是xml反射(或者使用注解)创建, 将创建对象的任务交给Spring完成。<br>不懂Spring可以将其理解为一个存储对象的容器。<br>控制反转并不是什么高大上的东西,  我们也可以做一个小的控制反转的例子。<br><a id="more"></a></p>
<h1 id="使用静态构造器取代new"><a href="#使用静态构造器取代new" class="headerlink" title="使用静态构造器取代new"></a>使用静态构造器取代new</h1><p>比如有个学生类, 将<code>构造函数</code>私有化, 同时创建一个静态的<code>create</code>方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样做有什么好处呢?<br>很明显, 我们能给构造函数<strong>命名</strong>了。<br>维护者不再需要去猜测<code>new Student(true)</code>是什么意思。</p>
<p>还体现了职责分离, 创建对象的具体过程交给了对象类自己完成, 外部调用者不需要关心创建对象的流程。<br>这里为了体现差异, 将方法名写为中文, 实际开发不推荐写中文。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> 优秀;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(<span class="keyword">boolean</span> status)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.优秀 = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student 获得一个优秀学生()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student 获得一个不好学生()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux为什么拥有w权限却不能删除文件</title>
    <url>/posts/Why_have_write_permission_but_can_not_delete_the_file.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux中万物皆文件, 目录是文件, 硬件是文件.<br>这里的文件和Windows的概念可完全不一样.<br>经常遇到的是, 对文件拥有w写权限, 可是却提示没有删除权限.</p>
<a id="more"></a>
<h1 id="初始化情景"><a href="#初始化情景" class="headerlink" title="初始化情景"></a>初始化情景</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ahao@localhost ~]$ su -                    <span class="comment"># 切换为root用户</span></span><br><span class="line">[ahao@localhost ~]$ mkdir testDir           <span class="comment"># 创建testDir目录</span></span><br><span class="line">[ahao@localhost ~]$ <span class="built_in">echo</span> 123 &gt; testDir/file <span class="comment"># 创建testDir目录下的file文件</span></span><br><span class="line">[ahao@localhost ~]$ chmod 555 testDir/      <span class="comment"># 取消testDir目录的w写权限</span></span><br><span class="line">[ahao@localhost tmp]$ rm testDir/file       <span class="comment"># 删除testDir目录下的file文件, 失败</span></span><br><span class="line">rm: 无法删除<span class="string">"testDir/file"</span>: 权限不够</span><br></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>先查看文件和文件夹的权限信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dr-xr-xr-x. 2 ahao ahao 18 10月 31 23:30 testDir</span><br><span class="line">-rw-rw-r--. 1 ahao ahao  4 10月 31 23:30 file</span><br></pre></td></tr></table></figure></p>
<p><code>testDir目录文件</code>和<code>file文件</code>的拥有者和用户组毫无疑问是<code>ahao</code>.<br>那么对应的权限应该是<code>r-x</code>和<code>rw-</code>, 也就是<code>第2-4位</code>.</p>
<p>那么用户<code>ahao</code>对<code>file文件</code>是有<code>w</code>写权限的, 为什么不能删除呢?<br><strong>原因在于</strong><br>删除<code>file文件</code>, 是对<code>testDir目录文件</code>进行<code>w</code>写操作, 而不是对<code>file文件</code>进行<code>w</code>写操作.<br>对于<code>Windows</code>用户来说, 这是有点绕, 很难理解的.<br><img src="https://yuml.me/diagram/nofunky/class/[testDir目录文件]-&gt;[file文件],[file文件]-&gt;[123字符串]" alt="文件结构"><br><code>Linux</code>的<code>w</code>写权限的意思是, 允许对其<strong>子数据</strong>进行写入.<br><code>file文件</code>的w写权限是允许修改<code>123字符串</code>.<br><code>testDir目录文件</code>的<code>w</code>写权限是允许修改<code>file文件</code>.</p>
<p>从文件和文件夹的权限信息可以看出,<br><code>用户ahao</code>是没有<code>testDir目录文件</code>的<code>w</code>写权限的.<br>换句话说, 就是不能操作<code>testDir目录文件</code>下的<code>file文件</code>, 自然也就不能删除了。<br>但是, <code>用户ahao</code>有<code>file文件</code>的<code>w</code>写权限, 所以可以编辑<code>file文件</code>里的文本内容。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dr-xr-xr-x. 2 ahao ahao 18 10月 31 23:30 testDir</span><br><span class="line">-rw-rw-r--. 1 ahao ahao 4 10月 31 23:30 file</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git同步一个fork</title>
    <url>/posts/how_to_update_fork_by_git.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭了个Hexo博客, 然后把NexT主题<a href="https://github.com/Ahaochan/hexo-theme-next" target="_blank" rel="noopener">fork</a>了一下。<br>本文记录下从被fork的项目更新fork的操作。<br><a id="more"></a></p>
<h1 id="添加一个远程仓库"><a href="#添加一个远程仓库" class="headerlink" title="添加一个远程仓库"></a>添加一个远程仓库</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git remote add upstream 原始项目地址  <span class="comment"># 添加一个名为upstream的远程项目</span></span><br><span class="line">$ git remote -v <span class="comment"># 查看远程仓库, origin是默认仓库名, 一般是自己的github项目</span></span><br><span class="line">  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br><span class="line">  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</span><br><span class="line">  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</span><br></pre></td></tr></table></figure>
<h1 id="从原始项目同步"><a href="#从原始项目同步" class="headerlink" title="从原始项目同步"></a>从原始项目同步</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git fetch upstream  <span class="comment"># 下载原始项目upstream的所有变动</span></span><br><span class="line">$ git checkout master <span class="comment"># 确保切换到本地master分支</span></span><br><span class="line">$ git merge upstream/master <span class="comment"># 合并upstream仓库的master分支到当前分支</span></span><br></pre></td></tr></table></figure>
<h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>一般可以自动解决冲突问题。<br>但是复杂的冲突就需要手动解决。</p>
<p><strong>直接编辑文件</strong><br>手动打开冲突的文件, 冲突的部分是<code>bbbbbbb</code>和<code>ccccccc</code>, 也就是特殊符号之间的字符串。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaa</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">bbbbbbb</span><br><span class="line">=======</span><br><span class="line">ccccccc</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; ddddddd</span><br><span class="line">eeeeeee</span><br></pre></td></tr></table></figure></p>
<p><strong>图形界面</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git mergetool <span class="comment"># 用预先配置的Beyond Compare解决冲突</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://gaohaoyang.github.io/2015/04/12/Syncing-a-fork/" target="_blank" rel="noopener">同步一个 fork</a></li>
<li><a href="http://www.cnblogs.com/sinojelly/archive/2011/08/07/2130172.html" target="_blank" rel="noopener">Git下的冲突解决</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之SSH协议</title>
    <url>/posts/Linux_SSH_protocol.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>SSH</code> 为 <code>Secure Shell</code> 的缩写。在使用远程工具连接 <code>Linux</code> 时使用的就是 <code>SSH协议</code>。<br><code>SSH协议</code> 使用的是非对称加密算法。<br>简单的说, 有一个管道, 用来传递数据, A和B在管道的两端, A和B各自拥有一把锁和一把钥匙。<br>B要传数据给A, 那么B先把自己的锁给A。<br>A用自己的A锁加上B锁给数据上锁, 这时候只有A的A钥匙和B的B钥匙能解开这个锁获取数据。<br>A和B使用不同的锁和钥匙, 这就是非对称加密。</p>
<a id="more"></a>
<h1 id="Linux下的SSH"><a href="#Linux下的SSH" class="headerlink" title="Linux下的SSH"></a>Linux下的SSH</h1><p>这里使用 <code>127.0.0.1</code> 回环地址进行测试。<br>除了远程操作之外, 还可以使用 <code>SSH</code> 进行文件的上传和下载。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ahao@localhost ~]$ ssh username@IP             # 远程管理指定Linux服务器</span><br><span class="line">[ahao@localhost ~]$ ssh root@127.0.0.1           # 连接本机的root用户</span><br><span class="line">The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.</span><br><span class="line">ECDSA key fingerprint is 60:18:c3:85:f3:2e:f9:34:4d:2f:9a:0e:cf:e9:85:64.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes                  # 选择yes进行连接</span><br><span class="line">Warning: Permanently added '127.0.0.1' (ECDSA) to the list of known hosts.</span><br><span class="line">root@127.0.0.1's password:                               # 输入密码</span><br><span class="line">Last login: Tue Oct 10 00:06:25 2017</span><br><span class="line">[root@localhost ~]# exit                                    # 退出</span><br><span class="line"></span><br><span class="line">[ahao@localhost ~]$ scp [-r] 用户名@IP:文件路径 本地路径       # 下载文件</span><br><span class="line">[ahao@localhost ~]$ scp [-r] 本地文件 用户名@IP:上传路径       # 上传文件</span><br></pre></td></tr></table></figure></p>
<h1 id="Windows下的SSH"><a href="#Windows下的SSH" class="headerlink" title="Windows下的SSH"></a>Windows下的SSH</h1><p>借助SSH工具<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">xshell</a><br>使用 <code>ifconfig</code> 查看Linux的IP地址, 照着软件配置就好了, 百度很多使用教程。</p>
<h1 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h1><p>Linux的SSH公钥存储在 <code>~/.ssh/known_hosts</code>。<br>Windows的SSH公钥存储在 <code>%HOMEPATH%/.ssh/known_hosts</code>。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之IP地址、子网掩码、网关详解</title>
    <url>/posts/IP_address,_subnet_mask,_gateway_Introduction.html</url>
    <content><![CDATA[<h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><p>由于IPv6尚未普及，这里的 IP地址为IPv4地址。<br>IP地址相当于互联网上的门牌号, 由 <code>4字节</code>, 也就是 <code>32位</code> 的二进制码组成，包含了网络号( <code>net-id</code> )和主机号( <code>host-id</code> )。</p>
<ul>
<li>网络号( <code>net-id</code> ): 标志主机(或路由器)所连接到的网络。</li>
<li>主机号( <code>host-id</code> ): 网络号范围内唯一的主机(或路由器)。</li>
</ul>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">IP地址种类</th>
<th style="text-align:center">二进制组成(前缀位+网络位+主机位)</th>
<th style="text-align:center">IP范围</th>
<th style="text-align:center">网络数</th>
<th style="text-align:center">主机数/网络</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A类地址</td>
<td style="text-align:center">0+7位网络号+24位主机号</td>
<td style="text-align:center">1.0.0.0 - 127.255.255.255</td>
<td style="text-align:center">2^7-2</td>
<td style="text-align:center">2^24-2</td>
</tr>
<tr>
<td style="text-align:center">B类地址</td>
<td style="text-align:center">10+14位网络号+16位主机号</td>
<td style="text-align:center">128.0.0.0 - 191.255.255.255</td>
<td style="text-align:center">2^14-1</td>
<td style="text-align:center">2^16-2</td>
</tr>
<tr>
<td style="text-align:center">C类地址</td>
<td style="text-align:center">110+21位网络号+8位主机号</td>
<td style="text-align:center">192.0.0.0 - 223.255.255.255</td>
<td style="text-align:center">2^21-1</td>
<td style="text-align:center">2^8-2</td>
</tr>
<tr>
<td style="text-align:center">D类地址</td>
<td style="text-align:center">1110+多播地址(用于多播)</td>
<td style="text-align:center">224.0.0.0 - 239.255.255.255</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">E类地址</td>
<td style="text-align:center">1111+保留位(不开放, 保留使用)</td>
<td style="text-align:center">240.0.0.0-249.255.255.255</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<p>前缀位标识是什么种类的网络, 0为A类地址, 10为B类地址, 110为C类地址, 依次类推。</p>
<h2 id="网络数计算"><a href="#网络数计算" class="headerlink" title="网络数计算"></a>网络数计算</h2><p>网络数就是一种网络的子网数, 比如A类地址, 可以分为多少个子网。<br>看表格可以推出网络数的计算公式为:  <code>2^网络号位数</code>。<br>规定网络地址全为 <code>0</code> 的IP地址是保留地址，意思是“本网络”。</p>
<ul>
<li>在A类地址中，实际上 <code>0.0.0.0</code> 是不指派的，而可以指派的最小网络是 <code>1.0.0.0</code>；网络地址为 <code>127</code> 的A类IP地址(比如常用的 <code>127.0.0.1</code>)保留作为本地软件环回测试本主机的进程之间的通信。所以A类地址网络数为 <code>2^7-2</code>。</li>
<li>在B类地址中，实际上 <code>128.0.0.0</code> 是不指派的，而可以指派的最小网络是 <code>128.1.0.0</code>，所以B类地址网络数是 <code>2^14-1</code>。</li>
<li>在C类地址中，实际上 <code>192.0.0.0</code> 是不指派的，而可以指派的最小网络是 <code>192.0.1.0</code>，所以C类地址网络数是 <code>2^21-1</code>。</li>
</ul>
<h2 id="主机数计算"><a href="#主机数计算" class="headerlink" title="主机数计算"></a>主机数计算</h2><p>主机数就是一个子网里面可以容纳多少台主机。<br>看表格可以推出主机数的计算公式为:  <code>2^主机号位数-2</code>。<br>主机号全为0表示该网络，而主机号全为1表示广播地址, 排除掉这两个。<br>比如A类地址 <code>1.0.0.0</code> 表示主机所在的网段的网络地址,  <code>1.255.255.255</code> 为该网段的广播地址。</p>
<h2 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h2><p>经常可以看到 <code>192.168.1.101</code> 这类的IP地址, 这些是私有IP地址, 专用地址, 也就是局域网分配的地址。<br>公网IP地址是需要掏钱申请的，私有IP地址不用掏钱, 但是仅限内网使用, 目的是为了节约公网IP。</p>
<table>
<thead>
<tr>
<th style="text-align:center">IP地址种类</th>
<th style="text-align:center">私有IP范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A类地址</td>
<td style="text-align:center">10.0.0.0 - 10.255.255.255</td>
</tr>
<tr>
<td style="text-align:center">B类地址</td>
<td style="text-align:center">172.16.0.0 - 172.31.255.255</td>
</tr>
<tr>
<td style="text-align:center">C类地址</td>
<td style="text-align:center">192.168.0.0 - 192.168.255.255</td>
</tr>
</tbody>
</table>
<p>路由器看到专用地址就不转发，所以说专用地址作为目的地址是不可能在因特网上传送的。专用IP地址也可叫做可重用地址。那好，问题来了，如果配置了这些专用地址的主机想和因特网上的主机通信，怎么办呢？NAT(network address translation: 网络地址转换)在这种情况下就应运而生了。NAT就是将这种地址转换成有效的外部全球IP地址，使得整个专用网只需要一个全球IP地址就可以与因特网联通。</p>
<p>使用NAT技术，需要在专用网(整个网络内部都是使用的这种地址)连接到因特网的路由器上安装NAT软件。装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址。但是NAT并不能从根本上解决IP地址的耗尽问题，因为NAT并不能从根本上解决IP地址的耗尽问题，因为NAT并没有增加IP地址的个数。而真正解决IP地址耗尽问题的是IPv6。</p>
<h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><p>计算网络地址就是判断网络中的计算机在不在同一网段,在就能通,不在就不能通。<br>将IP地址和子网掩码都换算成二进制,然后进行与运算,结果就是网络地址, 也就是网络号。<br>子网掩码的1和0必须连续, 比如 <code>11111111.00000000.00000000.00000000</code>, 即 <code>255.0.0.0</code>。</p>
<p>以上的主机数和网络数都是使用标准子网掩码算出来的, 比如A类地址的标准子网掩码为 <code>255.0.0.0</code>, B类地址的标准子网掩码为 <code>255.255.0.0</code>, C类地址的标准子网掩码为 <code>255.255.255.0</code>。</p>
<p>比如 <code>126.1.2.3</code> 和 <code>255.0.0.0</code>进行二进制的按位与运算, 得到网络地址 <code>126.0.0.0</code>。这个 <code>126.0.0.0</code>也就是上面计算主机数排除掉的该网段内其中一位IP地址。</p>
<p>当然还有非标准的子网掩码。具体参考 <code>常用计算例子</code> 章节的第1题。</p>
<h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p>网关是用来进行跨网段通信的工具, 本质是一个IP地址。</p>
<p>比如一个C类网 A<code>192.168.1.101</code> 想要和 B<code>192.168.0.101</code> 通信, 标准的子网掩码是 <code>255.255.255.0</code>, 进行按位与运算获得的网络地址为 <code>192.168.1.0</code> 和 <code>192.168.0.0</code>, 也就是不在同一个网段内, 那么只通过交换机是不能进行通信的, 必须借助路由器。</p>
<p>可以把网关想象一个国家的外交部。A想要和B通信, 但是A在中国, B在美国, 那么就不能直接面对面谈话(借助交换机), 这时候, A可以把信息传递给中国的外交部X, 由X交给美国的外交部Y, 再由Y交给B。</p>
<p>也就是说, 如果内网IP地址想要访问不是同一网段的主机, 那么必须借助网关. 将数据发送到另一个网关。</p>
<h1 id="常用计算例子"><a href="#常用计算例子" class="headerlink" title="常用计算例子"></a>常用计算例子</h1><p>1、利用子网数目计算子网掩码<br>把B类地址 <code>172.16.0.0</code> 划分成 <code>30</code> 个子网络，它的子网掩码是多少？<br>①将子网络数目 <code>30</code> 转换成二进制表示 <code>11110</code><br>②统计一下这个二进制的数共有 <code>5</code> 位<br>③注意：当二进制数中只有一个1的时候，所统计的位数需要减1（例如：10000要统计为4位）<br>④将B类地址的子网掩码 <code>255.255.0.0</code> 主机地址部分的前 <code>5</code> 位变成 <code>1</code><br>⑤这就得到了所要的子网掩码<code>（11111111.11111111.11111000.00000000 ）255.255.248.0</code>。</p>
<p>2、利用主机数目计算子网掩码<br>把B类地址 <code>172.16.0.0</code> 划分成若干子网络，每个子网络能容纳 <code>500</code> 台主机，它的子网掩码是多少？<br>①把 <code>500</code> 转换成二进制表示 <code>111110100</code><br>②统计一下这个二进制的数共有 <code>9</code> 位<br>③将子网掩码 <code>255.255.255.255</code> 从后向前的 <code>9</code> 位变成 <code>0</code><br>④这就得到了所要的子网掩码<code>（11111111.11111111.11111110.00000000）255.255.254.0</code>。</p>
<p>3、利用子网掩码计算最大有效子网数<br>A类IP地址，子网掩码为 <code>255.224.0.0</code> ，它所能划分的最大有效子网数是多少？<br>①将子网掩码转换成二进制表示 <code>11111111.11100000.00000000.00000000</code><br>②统计一下它的网络位共有 <code>11</code> 位<br>③A类地址网络位的基础数是 <code>8</code> ，二者之间的位数差是 <code>3</code><br>④最大有效子网数就是<code>2^3</code>，即最多可以划分 <code>8</code> 个子网络。</p>
<p>4、利用子网掩码计算最大可用主机数<br>A类IP地址，子网掩码为 <code>255.252.0.0</code> ，将它划分成若干子网络，每个子网络中可用主机数有多少？<br>①将子网掩码转换成二进制表示 <code>11111111.11111100.00000000.00000000</code><br>②统计一下它的主机位共有 <code>18</code> 位<br>③最大可用主机数就是 <code>2^18-2</code>（除去全是0的网络地址和全是1广播地址），即每个子网络最多有 <code>262142</code> 台主机可用。</p>
<p>5、利用子网掩码确定子网络的起止地址<br>B类IP地址 <code>172.16.0.0</code> ，子网掩码为 <code>255.255.192.0</code> ，它所能划分的子网络起止地址是多少？<br>①利用子网掩码计算，最多可以划分 <code>4</code> 个子网络<br>②利用子网掩码计算，每个子网络可容纳 <code>16384</code> 台主机（包括网络地址和广播地址）<br>③用 <code>16384</code> 除以 <code>256</code> （网段内包括网络地址和广播地址的全部主机数），结果是 <code>64</code><br>④具体划分网络起止方法如下：<br>172.16.0.0～172.16.63.255<br>172.16.64.0～172.16.127.255<br>172.16.128.0～172.16.191.255<br>172.16.192.0～172.16.255.255</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.sciencenet.cn/blog-2355761-1036878.html" target="_blank" rel="noopener">TCP/IP之IP地址详解</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5753d0930101fxdf.html" target="_blank" rel="noopener">子网数、主机数与子网掩码的关系</a></li>
<li><a href="http://www.cnblogs.com/JuneWang/p/3917697.html" target="_blank" rel="noopener">IP地址，子网掩码，默认网关，DNS服务器详解</a></li>
</ul>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz之整合Spring</title>
    <url>/posts/Quartz_and_Spring_combination.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为Web开发者, Spring是必不可少的一个框架, 自然需要把Quartz整合进去。所幸网上已有很多教程, 我这里也只是简单的整合一下, 用于以后项目的CV大法。<br><code>Quartz</code> 有调度器<code>Scheduler</code>、触发器 <code>Trigger</code>、任务 <code>JobDetail</code>三个组件。一个任务可以给多个调度器执行，触发器在指定时间运行任务，调度器操作触发器执行定时任务。</p>
<a id="more"></a>
<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><p>这里的 <code>Spring</code> 版本是 <code>4.3.9.RELEASE</code> ,  <code>Quartz</code> 版本是 <code>2.3.0</code>。</p>
<ul>
<li><a href="https://mvnrepository.com/artifact/org.springframework/spring-tx" target="_blank" rel="noopener">spring-tx</a>: 定时任务依赖于事务, 引入<a href="https://mvnrepository.com/artifact/org.springframework/spring-jdbc" target="_blank" rel="noopener">spring-jdbc</a>即可, 自带<a href="https://mvnrepository.com/artifact/org.springframework/spring-tx" target="_blank" rel="noopener">spring-tx</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework/spring-context-support" target="_blank" rel="noopener">spring-context-support</a>: 提供对Quartz定时任务的支持</li>
<li><a href="https://mvnrepository.com/artifact/org.quartz-scheduler/quartz" target="_blank" rel="noopener">quartz</a>: 定时任务框架</li>
</ul>
<h1 id="创建任务JobDetail的两种方法"><a href="#创建任务JobDetail的两种方法" class="headerlink" title="创建任务JobDetail的两种方法"></a>创建任务JobDetail的两种方法</h1><ol>
<li>使用 <code>MethodInvokingJobDetailFactoryBean</code> 通过反射调用 <code>Bean的方法</code>。</li>
<li>使用 <code>JobDetailFactoryBean</code>, 必须搭配 <code>QuartzJobBean</code>。</li>
</ol>
<p>推荐用第一种方法, 低侵入式, 降低耦合性。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种创建任务的方法, 不依赖框架的Java Bean形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">" : "</span>+ DateFormatUtils.format(System.currentTimeMillis(),<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)+<span class="string">" : "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种创建任务的方法, 依赖spring-context-support</span></span><br><span class="line"><span class="comment">// org.springframework.scheduling.quartz.QuartzJobBean </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean2</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">" : "</span>+ DateFormatUtils.format(System.currentTimeMillis(), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBean1"</span> <span class="attr">class</span>=<span class="string">"com.ahao.MyBean1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 反射调用Bean的某个方法, 传入arguments参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanJob1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"myBean1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hello World!<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖QuartzJobBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanJob2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBean2必须继承QuartzJobBean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> <span class="attr">value</span>=<span class="string">"com.ahao.MyBean2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数通过setter方法注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDataAsMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"value"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 未绑定Trigger时不会抛出异常 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"durability"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="创建触发器Trigger的两种方法"><a href="#创建触发器Trigger的两种方法" class="headerlink" title="创建触发器Trigger的两种方法"></a>创建触发器Trigger的两种方法</h1><p>关于cron表达式，请参照另一篇文章<a href="/posts/cron_expression_of_Quartz.html" title="Quartz之cron表达式详解">Quartz之cron表达式详解</a><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"myBeanJob1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 延迟1秒启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startDelay"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每2秒触发一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"repeatInterval"</span> <span class="attr">value</span>=<span class="string">"2000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"myBeanJob2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- cron表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0/5 * * * * ?"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="创建调度器"><a href="#创建调度器" class="headerlink" title="创建调度器"></a>创建调度器</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>启动Tomcat服务器, 看到控制台有输出即可。<br>完整的 <code>spring-quartz.xml</code>如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBean1"</span> <span class="attr">class</span>=<span class="string">"com.ahao.MyBean1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 反射调用Bean的某个方法, 传入arguments参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanJob1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"myBean1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hello World!<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖QuartzJobBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanJob2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBean2必须继承QuartzJobBean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> <span class="attr">value</span>=<span class="string">"com.ahao.MyBean2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数通过setter方法注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDataAsMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"value"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 未绑定Trigger时不会抛出异常 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"durability"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"myBeanJob1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 延迟1秒启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startDelay"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每2秒触发一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"repeatInterval"</span> <span class="attr">value</span>=<span class="string">"2000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"myBeanJob2"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- cron表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0/5 * * * * ?"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz之cron表达式详解</title>
    <url>/posts/cron_expression_of_Quartz.html</url>
    <content><![CDATA[<h1 id="前言cron-expression"><a href="#前言cron-expression" class="headerlink" title="前言cron expression"></a>前言cron expression</h1><p>使用过 <code>Quartz</code> 定时调度框架的都知道常用的有两种触发器。 <code>SimpleTrigger</code> 和 <code>CronTrigger</code>, 本章的主角 <code>CronTrigger</code> 通过 <code>cron表达式</code> 来设置什么时候触发任务。</p>
<a id="more"></a>
<h1 id="表达式格式"><a href="#表达式格式" class="headerlink" title="表达式格式"></a>表达式格式</h1><p><code>crontab</code> 命令常见于 <code>Unix</code> 和 <code>类Unix</code> 的操作系统之中，用于设置周期性被执行的指令。 <code>CronTrigger</code> 使用的就是 <code>cron表达式</code>。<br>格式：<code>[秒] [分] [时] [日] [月] [周] [年]</code><br>共7个子表达式, 用空格隔开。</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:center">允许值</th>
<th style="text-align:center">允许的特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">秒</td>
<td style="text-align:center">是</td>
<td style="text-align:center">0~59</td>
<td style="text-align:center">,-*/</td>
</tr>
<tr>
<td style="text-align:center">分</td>
<td style="text-align:center">是</td>
<td style="text-align:center">0~59</td>
<td style="text-align:center">,-*/</td>
</tr>
<tr>
<td style="text-align:center">时</td>
<td style="text-align:center">是</td>
<td style="text-align:center">0~23</td>
<td style="text-align:center">,-*/</td>
</tr>
<tr>
<td style="text-align:center">日</td>
<td style="text-align:center">是</td>
<td style="text-align:center">1~31</td>
<td style="text-align:center">,-*?/LWC</td>
</tr>
<tr>
<td style="text-align:center">月</td>
<td style="text-align:center">是</td>
<td style="text-align:center">1~12或者JAN-DEC</td>
<td style="text-align:center">,-*/</td>
</tr>
<tr>
<td style="text-align:center">周</td>
<td style="text-align:center">是</td>
<td style="text-align:center">1~7或者SUN-SAT</td>
<td style="text-align:center">,-*?/LC#</td>
</tr>
<tr>
<td style="text-align:center">年</td>
<td style="text-align:center">否</td>
<td style="text-align:center">empty,1970~2099</td>
<td style="text-align:center">,-*/</td>
</tr>
</tbody>
</table>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><ul>
<li>“?”字符：表示不确定的值</li>
<li>“,”字符：指定数个值</li>
<li>“-“字符：指定一个值的范围</li>
<li>“/“字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m</li>
<li>“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li>
<li>“W”字符：指定离给定日期最近的工作日(周一到周五)</li>
<li>“#”字符：表示该月第几个周X。6#3表示该月第3个周五</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li>每天10点15分: <code>0 15 10 ? * *</code></li>
<li>每天下午的2点到2点59分(整点开始, 每隔5分触发): <code>0 0/5 14 * * ?</code></li>
<li>周一到周五每天上午的10点15分: <code>0 15 10 ？ * MON-FRI</code></li>
<li>每月的第三周的星期五: <code>0 15 10 ? * 6#3</code></li>
<li>2016年到2017年每月最后一周的星期五的10点15分: <code>0 15 10 ？ * 6L 2016-2017</code></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Environment详解</title>
    <url>/posts/Environment_of_Spring_MVC.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>HttpServletBean</code> 实现了 <code>EnvironmentCapable</code> 和 <code>EnvironmentAware</code> 接口。<br>Environment可以对一些应用变量进行初始化, 存储到内存中。方便 <code>Bean</code> 进行获取。</p>
<a id="more"></a>
<h1 id="Environment-初始化"><a href="#Environment-初始化" class="headerlink" title="Environment 初始化"></a>Environment 初始化</h1><p>查看 <code>DispatcherServlet</code> 的父类 <code>HttpServletBean</code> 的源码, 可以看到 <code>HttpServletBean</code> 的属性 <code>ConfigurableEnvironment</code> 接口的实现类是 <code>StandardServletEnvironment</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.HttpServletBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletBean</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">EnvironmentCapable</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConfigurableEnvironment environment;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = (ConfigurableEnvironment) environment;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.environment = createEnvironment();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ConfigurableEnvironment <span class="title">createEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认实现类是 StandardServletEnvironment</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>继承树</strong><br><img src="https://yuml.me/diagram/nofunky/class/[StandardEnvironment]^-[StandardServletEnvironment],[AbstractEnvironment]^-[StandardEnvironment],[&lt;&lt;ConfigurableWebEnvironment&gt;&gt;;interface]^-[StandardServletEnvironment],[&lt;&lt;ConfigurableEnvironment&gt;&gt;;interface]^-[&lt;&lt;ConfigurableWebEnvironment&gt;&gt;;interface],[&lt;&lt;ConfigurableEnvironment&gt;&gt;;interface]^-[AbstractEnvironment]" alt="Environment 继承树"></p>
<p>先明确一个概念, Environment 是用来装载 <code>属性</code> 的。<br> <code>StandardServletEnvironment</code> 的父类 <code>AbstractEnvironment</code><br> 里面的 <code>MutablePropertySources</code> 属性（可以看成 <code>LinkedHashMap&lt;String, String&gt;</code>）封装了 5 个属性(稍后说明为什么)</p>
<ul>
<li>ServletContext ( 封装 context-param )</li>
<li>ServletConfig ( 封装 init-param )</li>
<li>JndiProperty</li>
<li>系统环境变量</li>
<li>JVM 系统属性变量</li>
</ul>
<p>那么观察下子类 <code>StandardServletEnvironment</code> 的源码，以及父类<code>StandardEnvironment</code> 的源码, 发现主要的方法就是 <code>customizePropertySources()</code> , 也就是对 <code>MutablePropertySources</code> 属性进行操作<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardServletEnvironment</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">StandardEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableWebEnvironment</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// propertySources 可以看成 LinkedHashMap</span></span><br><span class="line">        <span class="comment">// 装载 ServletConfig 的占位符, 延迟载入</span></span><br><span class="line">        propertySources.addLast(<span class="keyword">new</span> StubPropertySource(<span class="string">"servletConfigInitParams"</span>));</span><br><span class="line">        <span class="comment">// 装载 ServletContext 的占位符, 延迟载入</span></span><br><span class="line">        propertySources.addLast(<span class="keyword">new</span> StubPropertySource(<span class="string">"servletContextInitParams"</span>));</span><br><span class="line">        <span class="comment">// 装载 JndiProperties</span></span><br><span class="line">        <span class="keyword">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class="line">            propertySources.addLast(<span class="keyword">new</span> JndiPropertySource(<span class="string">"jndiProperties"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父类StandardEnvironment 负责装载 系统环境变量 和 JVM 系统属性变量</span></span><br><span class="line">        <span class="keyword">super</span>.customizePropertySources(propertySources);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">(ServletContext servletContext, ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// FrameworkServlet 在刷新时调用, 延迟载入</span></span><br><span class="line">        <span class="comment">// 将ServletContext和ServletConfig注入PropertySources中</span></span><br><span class="line">        WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// org.springframework.core.env.StandardEnvironment</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardEnvironment</span> <span class="keyword">extends</span> <span class="title">AbstractEnvironment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 装载 系统环境变量</span></span><br><span class="line">        propertySources.addLast(<span class="keyword">new</span> MapPropertySource(<span class="string">"systemEnvironment"</span>, getSystemProperties()));</span><br><span class="line">        <span class="comment">// 装载 JVM 系统属性变量</span></span><br><span class="line">        propertySources.addLast(<span class="keyword">new</span> SystemEnvironmentPropertySource(<span class="string">"systemProperties"</span>, getSystemEnvironment()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getSystemProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map) System.getProperties();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map) <span class="keyword">new</span> ReadOnlySystemAttributesMap() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> String <span class="title">getSystemAttribute</span><span class="params">(String attributeName)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> System.getProperty(attributeName);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getSystemEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (suppressGetenvAccess()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125; <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map) System.getenv();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map) <span class="keyword">new</span> ReadOnlySystemAttributesMap() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> String <span class="title">getSystemAttribute</span><span class="params">(String attributeName)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> System.getenv(attributeName);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以猜测出方法的参数 <code>propertySources</code> 是一个装载 <code>属性</code> 的集合。那么 <code>customizePropertySources</code> 的参数 <code>propertySources</code> 一定不为 <code>null</code> , 也就是 <code>propertySources</code> 被初始化过。<br>初始化一般发生在 <code>构造方法</code> 或者 <code>field 直接 new</code> 中。<br>但是 <code>StandardServletEnvironment</code> 并没有构造方法, 其父类<br> <code>StandardEnvironment</code> 也没有构造方法。<br>那么只能看最顶层的父类 <code>AbstractEnvironment</code> 。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.core.env.AbstractEnvironment</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableEnvironment</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MutablePropertySources propertySources = <span class="keyword">new</span> MutablePropertySources(<span class="keyword">this</span>.logger);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customizePropertySources(<span class="keyword">this</span>.propertySources);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>又看到了熟悉的 <code>customizePropertySources()</code> 方法。<br>可以看到 <code>propertySources</code> 是在 field 直接 <code>new</code> 出来的。<br> <code>propertySources</code> 的实现类是 <code>MutablePropertySources</code> , 里面有一个<br> <code>CopyOnWriteArrayList</code> 集合，集合中的 <code>PropertySource</code> 是一个  <code>键值对</code> , 可以看成是 <code>Map.Entry</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.core.env.MutablePropertySources</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutablePropertySources</span> <span class="keyword">implements</span> <span class="title">PropertySources</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.core.env.PropertySources</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertySources</span> <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String name)</span></span>;</span><br><span class="line">    PropertySource&lt;?&gt; get(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.core.env.PropertySource</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySource</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以 键值对 形式存储</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> T source;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 构造器 和 getter 和 setter 方法</span></span><br><span class="line">    <span class="comment">// hashcode 和 equals 只判断 name 属性</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (getProperty(name) != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交给内部类子类 StubPropertySource 和 ComparisonPropertySource 实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">getProperty</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似占位符, 在实际的属性不能被及时初始化时保留，并在 Context 刷新时进行替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StubPropertySource</span> <span class="keyword">extends</span> <span class="title">PropertySource</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StubPropertySource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name, <span class="keyword">new</span> Object());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似占位符, 在实际的属性不能被及时初始化时保留，并在 Context 刷新时进行替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparisonPropertySource</span> <span class="keyword">extends</span> <span class="title">StubPropertySource</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ComparisonPropertySource(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总结说, 就是 <code>AbstractEnvironment</code> 类的 <code>MutablePropertySources</code> 中的<br> <code>CopyOnWriteArrayList</code> 集合中, 装载了 5 个属性</p>
<ul>
<li>ServletContext ( StandardServletEnvironment 装载, 封装 context-param )</li>
<li>ServletConfig ( StandardServletEnvironment 装载, 封装 init-param )</li>
<li>JndiProperty ( StandardServletEnvironment 装载 )</li>
<li>系统环境变量 ( StandardEnvironment 装载 )</li>
<li>JVM 系统属性变量 ( StandardEnvironment 装载 )、</li>
</ul>
<p>需要注意的是，这里 <code>ServletContext</code> 和 <code>ServletConfig</code> 要等到<br> <code>FrameworkServlet</code> 刷新的时候调用 <code>StandardServletEnvironment</code> 的 <code>initPropertySources</code> 方法, 来刷新这两个属性。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardServletEnvironment</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">StandardEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableWebEnvironment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">(ServletContext servletContext, ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// FrameworkServlet 在刷新时调用</span></span><br><span class="line">        <span class="comment">// 将ServletContext和ServletConfig注入PropertySources中</span></span><br><span class="line">        WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// org.springframework.web.context.support.WebApplicationContextUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationContextUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initServletPropertySources</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        propertySources.replace(<span class="string">"servletContextInitParams"</span>,</span><br><span class="line">					<span class="keyword">new</span> ServletContextPropertySource(<span class="string">"servletContextInitParams"</span>, servletContext));</span><br><span class="line">        propertySources.replace(<span class="string">"servletConfigInitParams"</span>,</span><br><span class="line">					<span class="keyword">new</span> ServletConfigPropertySource(<span class="string">"servletConfigInitParams"</span>, servletConfig));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Environment-的使用"><a href="#Environment-的使用" class="headerlink" title="Environment 的使用"></a>Environment 的使用</h1><p><code>Spring</code> 开放了 <code>EnvironmentAware</code> 和 <code>EnvironmentCapable</code>接口。</p>
<ul>
<li><code>EnvironmentAware</code> 由 Spring 框架往 Bean 内 <code>注入Environment</code> </li>
<li><code>EnvironmentCapable</code>  通过 getEnvironment 往外面 <code>暴露Environment</code></li>
</ul>
<p>开发者只需要实现这两个接口，Spring就会自动注入。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml 省略部分代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>myConfig<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span>, <span class="title">EnvironmentCapable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> environment.getProperty(<span class="string">"myConfig"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注入 Environment </span></span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Environment <span class="title">getEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暴露 Environment </span></span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件权限</title>
    <url>/posts/Linux_File_Permissions.html</url>
    <content><![CDATA[<h1 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h1><p>在Linux使用 <code>ll -ah</code> 可以看到以下命令。<br>文件权限就存储在 <code>drwxr-xr-x</code> 这十个字符之中。</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">drwx------ 21 ahao ahao 4.0K 09-22 04:06 .</span><br><span class="line">drwxr-xr-x  4 root root 4.0K 09-21 19:26 ..</span><br><span class="line">-rw-------  1 ahao ahao 2.0K 09-22 02:59 .bash_history</span><br><span class="line">-rw-r--r--  1 ahao ahao   33 2009-01-22 .bash_logout</span><br><span class="line">-rw-r--r--  1 ahao ahao  176 2009-01-22 .bash_profile</span><br><span class="line">-rw-r--r--  1 ahao ahao  124 2009-01-22 .bashrc</span><br><span class="line">drwx------  2 ahao ahao 4.0K 09-21 19:29 .chewing</span><br><span class="line">drwxr-xr-x  2 ahao ahao 4.0K 09-21 19:42 Desktop</span><br></pre></td></tr></table></figure>
<h1 id="权限分析"><a href="#权限分析" class="headerlink" title="权限分析"></a>权限分析</h1><p>Linux的文件权限分为<code>用户权限user</code> 、 <code>用户所在群组权限group</code> 、 <code>其他用户权限other</code>。<br>分别对应各个权限对这个文件的权限。<br>权限也分为 <code>读r</code> 、<code>写w</code> 、 <code>执行x</code> 三种。<br>所以<code>3*3=9</code>, 对应 <code>drwxr-xr-x</code> 后面九个字符。<br>最前面的字符, 则对应着文件的类型, <code>Linux</code>不是以文件后缀名来确定文件类型的。</p>
<ol>
<li>第1位是文件类型</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">文件类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">Directory、目录、文件夹</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">普通文件</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td style="text-align:center">软链接文件, Link快捷方式</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">区块(block)文件, 储存数据, 以提供系统随机存取的接口设备</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">字符(character)设备文件, 一些串行端口的接口设备, 例如键盘、鼠标(一次性读取装置)</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">数据接口文件(sockets), 通常被用在网络上的数据传输</td>
</tr>
<tr>
<td style="text-align:center">f</td>
<td style="text-align:center">数据输送文件(FIFO, pipe), 解决多个程序同时存取一个文件所造成的错误问题</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>后面九个字符, 三个为一组, 分别是 <code>用户权限user</code> 、 <code>用户所在群组权限group</code> 、 <code>其他用户权限other</code>。每一组有三个权限 <code>读r</code> 、<code>写w</code> 、 <code>执行x</code>, 如果没有权限, 则用 <code>-</code> 代替。</li>
</ol>
<p>比如 <code>drwxr-xr-x</code><br>说明这是一个目录, 文件所有者有读、写、执行的权限。<br>文件拥有者所在的群组有读、执行权限, 没有写的权限。<br>不在文件拥有者所在群组的用户具有读、执行权限, 没有写的权限。</p>
<h1 id="普通权限"><a href="#普通权限" class="headerlink" title="普通权限"></a>普通权限</h1><h2 id="修改群组和拥有者"><a href="#修改群组和拥有者" class="headerlink" title="修改群组和拥有者"></a>修改群组和拥有者</h2><ul>
<li>修改群组change group, <code>chgrp [选项] 群组名 文件名</code>, 群组必须在 <code>/etc/group</code> 中存在。 使用 <code>-R</code> 可以递归recursive修改。</li>
<li>修改拥有者change owner, <code>chown [选项] 用户名 文件名</code>, 用户必须在 <code>/etc/passwd</code> 中存在。 使用 <code>-R</code> 可以递归recursive修改。</li>
</ul>
<h2 id="修改文件权限-数字形式"><a href="#修改文件权限-数字形式" class="headerlink" title="修改文件权限(数字形式)"></a>修改文件权限(数字形式)</h2><p>经常可以看到 <code>chmod [选项] 770 文件名</code>这种形式。 使用 <code>-R</code> 可以递归recursive修改。<br><code>Linux</code>将读、写、执行的权限赋予了权值。<code>读4</code> 、 <code>写2</code> 、 <code>执行1</code>。<br>为什么这样赋值, 这和二进制有关。<code>1</code>为<code>001</code>, <code>2</code>为<code>010</code>, <code>4</code>为<code>100</code>。组合后不会产生冲突。<br>比如说<code>drwxr-xr-x</code></p>
<ol>
<li><code>rwx</code> , 读写执行, <code>r+w+x=4+2+1=7</code></li>
<li><code>r-x</code> , 读执行, <code>r+x=4+1=5</code></li>
</ol>
<p>所以修改权限的命令为 <code>chmod 755 文件名</code>。</p>
<h2 id="修改文件权限-字符形式"><a href="#修改文件权限-字符形式" class="headerlink" title="修改文件权限(字符形式)"></a>修改文件权限(字符形式)</h2><p>有人说算术记不住, Linux还提供了字符的形式赋予权限。<br>范围有 <code>用户u</code>、<code>用户所在群组g</code>、<code>其他用户o</code>、<code>以上三个a</code>。<br>权限有 <code>读r</code> 、<code>写w</code> 、 <code>执行x</code>。<br>操作运算符有 <code>新增+</code>、<code>移除-</code> 、 <code>赋予=</code>。<br>比如，要设定 <code>drwx------</code> 为 <code>dr-xr-xr-x</code>。<br>则使用<code>chomd u-w,g+rx,o=rx 文件名</code></p>
<h1 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h1><p>使用<code>umask</code>命令查看或修改默认权限掩码。默认权限掩码影响创建文件时赋予的默认权限。<br><code>umask</code>命令是临时修改重启失效, 永久修改在<code>/etc/profile</code>文件中修改。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ahao@localhost ~]$ <span class="built_in">umask</span> </span><br><span class="line">0002</span><br><span class="line">[ahao@localhost tmp]$ touch file1</span><br><span class="line">[ahao@localhost tmp]$ mkdir dir</span><br><span class="line">[ahao@localhost tmp]$ <span class="built_in">umask</span> 0022 &amp;&amp; touch file2</span><br><span class="line">[ahao@localhost tmp]$ ll</span><br><span class="line">总用量 2</span><br><span class="line">drwxrwxr-x. 2 ahao ahao   6 11月  4 16:17 dir</span><br><span class="line">-rw-rw-r--. 1 ahao ahao   0 11月  4 16:16 file1</span><br><span class="line">-rw-r--r--. 1 ahao ahao   0 11月  4 16:16 file2</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>0002</code>的第一位代表特殊权限(稍后介绍), 后三位代表读写执行的权限掩码。<br>先看后<code>3</code>位。</p>
<ol>
<li>文件默认权限最大为<code>666</code>, 也就是<code>rw-rw-rw-</code>, 不能被执行。出于安全性考虑。</li>
<li>目录默认权限最大为<code>777</code>, 也就是<code>rwxrwxrwx</code>, 可以被执行, 也就是进入目录。</li>
<li><code>umask</code>权限用来和最大权限换算成字母后进行相减运算, <code>-</code>位不允许再减。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如文件默认最大权限为666, umask为022</span><br><span class="line">换算成字母, 666(rw-rw-rw-) 减去 022(----w--w-) 得到默认权限 644(rw-r--r--)</span><br><span class="line"></span><br><span class="line">比如文件默认最大权限为666, umask为033</span><br><span class="line">换算成字母, 666(rw-rw-rw-) 减去 033(---wx-wx-) 得到默认权限 644(rw-r--r--)</span><br></pre></td></tr></table></figure>
<p>所以可以看到上面的运算, 不能简单的使用数字运算, 需要转为字母进行运算, 或者进行二进制的不借位减法。</p>
<h1 id="特殊权限-不安全"><a href="#特殊权限-不安全" class="headerlink" title="特殊权限(不安全)"></a>特殊权限(不安全)</h1><p><strong>特殊权限尽量少修改! 不安全!</strong><br>给执行该文件的用户临时赋予另一个用户(组)的权限, 比如<code>root</code>权限。<br>特殊权限也有<code>421</code>的值, <code>4</code>为<code>SUID</code>, <code>2</code>为<code>SGID</code>, <code>1</code>为<code>SBIT</code>。</p>
<h2 id="SUID-SET-USER-ID"><a href="#SUID-SET-USER-ID" class="headerlink" title="SUID(SET USER ID)"></a>SUID(SET USER ID)</h2><ol>
<li><code>SUID</code>权限仅对二进制程序有效</li>
<li>执行者对于该程序需要具有<code>x</code>的可执行权限</li>
<li>本权限仅在执行该程序的过程中有效</li>
<li>执行者将具有该程序<strong>所有者</strong>的权限</li>
</ol>
<p>比如<strong>设置密码</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ahao@localhost tmp]$ ll /etc/shadow /usr/bin/passwd </span><br><span class="line">----------. 1 root root  1232 10月  6 05:47 /etc/shadow</span><br><span class="line">-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure></p>
<p><code>/etc/shadow</code>文件只能被<code>root</code>用户修改。<br>但是执行<code>passwd</code>二进制文件的普通用户, 可以临时变成<code>passwd</code>拥有者<code>root</code>, 来修改<code>/etc/shadow</code>文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建两个文件</span></span><br><span class="line">[ahao@localhost tmp]$ touch file1 file2</span><br><span class="line">[ahao@localhost tmp]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file1</span><br><span class="line">-rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建脚本打印文件, 添加SUID权限, 或者chmod u+s  file</span></span><br><span class="line">[ahao@localhost tmp]$ chmod 4755 file1 </span><br><span class="line">[ahao@localhost tmp]$ chmod 4655 file2</span><br><span class="line">[ahao@localhost tmp]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">-rwsr-xr-x. 1 root root 0 11月  6 23:53 file1</span><br><span class="line">-rwSr-xr-x. 1 root root 0 11月  6 23:54 file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 取消SUID权限, 或者chmod u-s  file</span></span><br><span class="line">[ahao@localhost tmp]$ chmod 0755 file1</span><br><span class="line">[ahao@localhost tmp]$ chmod 0655 file2</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>x</code>执行权限的位置被<code>s</code>替换了。<br><code>4755</code>和<code>4655</code>的区别在于文件本身有没有<code>x</code>执行权限。<br>并且可以得知<code>s=S+x</code>。大写<code>S</code>是没有意义的。<br>只有小写<code>s</code>才能正确设定<code>SUID</code>权限。</p>
<h2 id="SGID-SET-GROUP-ID"><a href="#SGID-SET-GROUP-ID" class="headerlink" title="SGID(SET GROUP ID)"></a>SGID(SET GROUP ID)</h2><p>和<code>SUID</code>一样, 区别在于用户会临时赋予文件所属用户组<code>group</code>的身份, 而不是用户<code>user</code>身份。</p>
<ol>
<li><code>SGID</code>对二进制程序有用</li>
<li>程序执行者对该程序需具备<code>x</code>权限</li>
<li>执行者在执行过程中会获得该程序<strong>用户组</strong>的支持</li>
</ol>
<p>比如<strong>locate命令</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /usr/bin/locate /var/lib/mlocate/mlocate.db </span></span><br><span class="line">-rwx--s--x. 1 root slocate   40512 11月  5 2016 /usr/bin/locate</span><br><span class="line">-rw-r-----. 1 root slocate 3678432 11月 21 23:21 /var/lib/mlocate/mlocate.db</span><br></pre></td></tr></table></figure></p>
<p><code>/var/lib/mlocate/mlocate.db</code>文件只能被<code>slocate</code>组查看。<br>但是借助<code>locate</code>命令, 普通用户可以临时变成<code>slocate</code><strong>(<code>s</code>在group权限的范围)</strong>来查看<code>/var/lib/mlocate/mlocate.db</code>文件。</p>
<p>除了和<code>SUID</code>差不多的功能外。<br><code>SGID</code>对目录还有另一个功能。<br>就是<strong>进入该目录后</strong>, 用户的用户组会变成<strong>SGID对应的用户组</strong>。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir ~ahao/test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 777 ~ahao/test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -d ~ahao/test</span></span><br><span class="line">drwxrwxrwx. 2 root root 6 11月 21 23:39 /home/ahao/<span class="built_in">test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ahao用户在test目录下创建file1</span></span><br><span class="line">[ahao@localhost ~]$ touch ~ahao/<span class="built_in">test</span>/file1</span><br><span class="line">[ahao@localhost ~]$ ll ~ahao/<span class="built_in">test</span>/file1</span><br><span class="line">总用量 0</span><br><span class="line">-rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. root用户为test目录赋予SGID权限</span></span><br><span class="line">[ahao@localhost <span class="built_in">test</span>]$ su -c <span class="string">"chmod 2777 ~ahao/test"</span> root</span><br><span class="line">[ahao@localhost <span class="built_in">test</span>]$ ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line">drwxrwsrwx. 2 root root 19 11月 21 23:43 /home/ahao/<span class="built_in">test</span>/</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. ahao用户在赋予SGID的test目录下创建file2</span></span><br><span class="line">[ahao@localhost <span class="built_in">test</span>]$ touch file2</span><br><span class="line">[ahao@localhost <span class="built_in">test</span>]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span><br><span class="line">-rw-rw-r--. 1 ahao root 0 11月 21 23:45 file2</span><br></pre></td></tr></table></figure></p>
<p>可以看到赋予<code>SGID</code>后, <code>ahao</code>用户创建的<code>file2</code>的所属组是<code>root</code>。</p>
<h2 id="SBIT-sticky-bit"><a href="#SBIT-sticky-bit" class="headerlink" title="SBIT(sticky bit)"></a>SBIT(sticky bit)</h2><p>除了<code>user</code>的<code>SUID</code>、<code>group</code>的<code>SGID</code>外, 还有<code>other</code>的<code>sticky bit</code>。</p>
<p><code>sticky bit</code>有两个要求</p>
<ol>
<li>只对目录有效。</li>
<li>文件权限为<code>rwxrwxrwx</code>, 也就是<code>777</code>的权限。<br>比如<code>/tmp</code>目录。</li>
</ol>
<p>那么任何用户都能对目录下的文件进行读写执行操作, 这是很不安全的。<br>比如一个目录, 允许用户(<code>other</code>)创建文件(写权限), 拥有了写权限的用户也同样拥有了删除权限。<br>也就是说在<code>777</code>权限的目录下, A用户创建的文件可能被B用户删除。<br><code>sticky bit</code>就是为了解决这个问题。<br>赋予目录<code>sticky bit</code>后。</p>
<ol>
<li>只有<code>root</code>有删除权限。</li>
<li>其他用户只能删除自己创建的文件。</li>
<li>其他用户拥有写权限。</li>
</ol>
<p>下面举个例子<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir ~ahao/test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 777 ~ahao/test/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -d ~ahao/test/</span></span><br><span class="line">drwxrwxrwx. 2 root root 6 11月 22 23:23 /home/ahao/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. root用户创建file文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo "hello" &gt; ~ahao/test/file</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll ~ahao/test/</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root 6 11月 22 23:26 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ahao用户删除file文件成功, 因为ahao用户对test目录有w写权限</span></span><br><span class="line">[ahao@localhost ~]$ rm -rf ~ahao/<span class="built_in">test</span>/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. root用户对test目录赋予sticky bit权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 0777 ~ahao/test/ # 取消sticky bit, 或chmod o-t ~ahao/test/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 1777 ~ahao/test/ # 赋予sticky bit, 或chmod o+t ~ahao/test/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -d ~ahao/test/</span></span><br><span class="line">drwxrwxrwt. 2 root root 6 11月 22 23:27 /home/ahao/<span class="built_in">test</span>/</span><br><span class="line">         ^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. root用户创建file文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo "hello" &gt; ~ahao/test/file</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll ~ahao/test/</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root 6 11月 22 23:32 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. ahao用户删除file文件失败, 即使ahao用户对test目录有w写权限</span></span><br><span class="line">[ahao@localhost ~]$ rm -rf ~ahao/<span class="built_in">test</span>/file</span><br><span class="line">rm: 无法删除<span class="string">"/home/ahao/test/file"</span>: 不允许的操作</span><br></pre></td></tr></table></figure></p>
<h2 id="检查系统新增的SUID和SGID文件"><a href="#检查系统新增的SUID和SGID文件" class="headerlink" title="检查系统新增的SUID和SGID文件"></a>检查系统新增的SUID和SGID文件</h2><p>特殊权限太危险了, 当有人使用特殊权限, 需要及时的发现。<br>将以下脚本加入定时任务中, 即可及时发现新增的特殊权限文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先查找所有拥有SUID(4)和SGID(2)的文件</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编写Shell脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 2.1 查找所有拥有SUID(4)或SGID(2)的文件, 并保存到临时文件suid.check中</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.check</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> $(cat /tmp/suid.check)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 2.3 遍历临时文件suid.check中的记录, 和最初查找到的文件/tmp/suid.list进行比较。</span></span><br><span class="line">    grep <span class="variable">$line</span> /tmp/suid.list &gt; /dev/null</span><br><span class="line">    <span class="comment"># 2.4 不存在则写入log文件中</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"$?"</span> != <span class="string">"0"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span> isn't in listfile! "</span> &gt;&gt; /tmp/suid_log_$(date +%F)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rm -rf /tmp/suid.check</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/tmp/suid_log_<span class="variable">$(date +%F)</span>"</span></span><br><span class="line">cat /tmp/suid_log_$(date +%F)</span><br></pre></td></tr></table></figure></p>
<h1 id="隐藏权限-chattr"><a href="#隐藏权限-chattr" class="headerlink" title="隐藏权限 chattr"></a>隐藏权限 chattr</h1><p><code>SBIT</code>只是防止删除的情况。<br>但是不排除被篡改文件的情况出现。</p>
<p>如果用户对文件有<code>w</code>写权限, 即使加了<code>SBIT</code>权限, 用户依然可以把文件内容清空, 虽然没删除, 但也和删除的情况差不多了。</p>
<p>如果对<strong>文件</strong>设置<code>i</code>属性, 那么不允许对文件进行删除、改名, 也不能添加和删除数据;<br>如果对<strong>目录</strong>设置<code>i</code>属性, 那么只能修改目录下文件的数据, 但不允许建立和删除文件。</p>
<p>如果对<strong>文件</strong>设置<code>a</code>属性, 那么只能在文件中增加数据, 但是不能删除也不能修改数据;<br>如果对<strong>目录</strong>设置<code>a</code>属性, 那么只允许目录中建立和修改文件, 但是不允许删除。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建隐藏权限文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch ~ahao/test/file1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chattr +i ~ahao/test/file1 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsattr ~ahao/test/file1 </span></span><br><span class="line">----i----------- /home/ahao/<span class="built_in">test</span>/file1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. root也不能修改文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo "hello" &gt;&gt; ~ahao/test/file1 </span></span><br><span class="line">-bash: /home/ahao/<span class="built_in">test</span>/file1: 权限不够</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 去掉隐藏权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chattr -i ~ahao/test/file1</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://cn.linux.vbird.org/linux_basic/0210filepermission_2.php" target="_blank" rel="noopener">鸟哥的Linux私房菜 - 第六章、Linux 的文件权限与目录配置</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Utils工具类的最佳实践</title>
    <url>/posts/The_Best_practice_for_create_Utils_class.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有些类我们不希望实例化, 比如 <code>ArrayUtils</code>。<br>实例化这些工具类是没有意义的。<br><a id="more"></a></p>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ol>
<li>使用 <code>final</code> 、 <code>abstract</code> 修饰 <code>class</code>。</li>
<li>私有化构造函数</li>
<li>构造函数抛出异常<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// abstract类不能直接实例化, 只能由子类实例化</span></span><br><span class="line"><span class="comment">// final类不能实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有化构造函数, 子类必须调用父类的构造函数, 但是又调用不了</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 防止反射创建, 抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"工具类不允许实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工具方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Integer... arr)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>社保卡办理</title>
    <url>/posts/apply_for_social_security_card.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司说要办社保卡, 给了我个电脑号, 叫我自己去银行办。然后就请了个假去办社保了。</p>
<a id="more"></a>
<h1 id="办理材料"><a href="#办理材料" class="headerlink" title="办理材料"></a>办理材料</h1><ol>
<li>身份证</li>
<li>数码照相回执(随便找个照相馆说要照社保卡的数码回执)</li>
<li>电脑号</li>
</ol>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>请了一天假, 跑到建行去办社保卡, 结果说要4个月才能办成, 推荐我到隔壁的招行去办理, 1个月搞定。</p>
<p><img src="https://pic1.zhimg.com/3c77c63b18cafd0f1d0706f332b88574_b.jpg" alt="黑人问号"><br>What ???????? 你确定你不是招行派来的奸细 ????</p>
<p>然后跑到招行去, 以为要拿号等好久, 没想到前台叫我打开微信, 找个<strong>【电子社保卡】</strong>的公众号。</p>
<p>没想到现在的银行竟然也支持微信办理社保卡了。</p>
<p>照着微信公众号的流程办理就好了。</p>
<p><img src="https://pic1.zhimg.com/3c77c63b18cafd0f1d0706f332b88574_b.jpg" alt="黑人问号"><br>所以我请假过来是干嘛的????? 一天的工资就这样打水漂了。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Collectors.reducing压缩List&lt;Map&gt;为Map</title>
    <url>/posts/how_to_use_Collectors.reducing_method_to_reducing_List%5BMap%5D_to_Map.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>reduce</code>操作可以实现从一组元素中生成一个值, 也可以作为<code>downstream</code>下游处理器。本文默认读者已经掌握基本的<code>Stream</code>知识。</p>
<a id="more"></a>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>先大致看下结论, 不懂可以看下面的解释。</p>
<ol>
<li><code>identity</code> 只会初始化一次。</li>
<li><code>identity</code> 在每次 <code>downstream</code> 的时候会重新放到 <strong>左值(left)</strong> 中。</li>
<li>如果操作 <code>identity</code> 的话, 将会影响下次 <code>downstream</code> 的第一次的 <strong>左值(left)</strong></li>
</ol>
<h1 id="情景重现"><a href="#情景重现" class="headerlink" title="情景重现"></a>情景重现</h1><p>假设有一个邮递员业务的数据。用json展示。可以复制到<a href="http://www.json.cn/" target="_blank" rel="noopener">【JSON在线解析及格式化验证】</a>进行格式化。<br>就是一个数组，每个元素都包含<strong>日期</strong>、<strong>邮件数量</strong>、<strong>发送地区的行政区划代码</strong>、<strong>是否大件行李</strong>。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-01"</span>,  <span class="comment">// 日期</span></span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"1"</span>,      <span class="comment">// 邮件数量</span></span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"420000"</span>,   <span class="comment">// 发送地区的行政区划代码</span></span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span>     <span class="comment">// 是否大件行李</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-01"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"440000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-02"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"420000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-03"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"4"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"420000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"true"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-03"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"5"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"410000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-03"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"6"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"440000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"true"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-04"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"7"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"420000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2016-04"</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"8"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"440000"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"false"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>目标是根据 <strong>日期</strong> 分组, 根据 <strong>是否大件行李</strong> 分区, 把结果 <code>List&lt;Map&gt;</code> 压缩成一个 <code>Map&lt;行政区划代码， 数量&gt;</code>。</p>
<h1 id="进行编码"><a href="#进行编码" class="headerlink" title="进行编码"></a>进行编码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; postmans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "420000" :行政区划代码, "false": 是否为大件行李</span></span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-01"</span>, <span class="string">"1"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-01"</span>, <span class="string">"2"</span>, <span class="string">"440000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-02"</span>, <span class="string">"3"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"4"</span>, <span class="string">"420000"</span>, <span class="string">"true"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"5"</span>, <span class="string">"410000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"6"</span>, <span class="string">"440000"</span>, <span class="string">"true"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-04"</span>, <span class="string">"7"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-04"</span>, <span class="string">"8"</span>, <span class="string">"440000"</span>, <span class="string">"false"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 fastjson 打印输出 原始数据</span></span><br><span class="line">        System.out.println(JSONObject.toJSONString(postmans));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Map&lt;Boolean, Map&gt;&gt; data = postmans.stream()</span><br><span class="line">                .collect(</span><br><span class="line">                    Collectors.groupingBy(    <span class="comment">// 分组</span></span><br><span class="line">                        d -&gt; d.get(<span class="string">"date"</span>),   <span class="comment">// 根据 日期 分组</span></span><br><span class="line">                        TreeMap::<span class="keyword">new</span>,         <span class="comment">// 使用 TreeMap 构造有序 Map</span></span><br><span class="line">                        Collectors.partitioningBy(</span><br><span class="line">                            d-&gt; d.get(<span class="string">"type"</span>).equals(<span class="string">"true"</span>), <span class="comment">// 根据 是否大件行李 分区</span></span><br><span class="line">                            Collectors.reducing(<span class="keyword">new</span> HashMap(), (left, right)-&gt;&#123; <span class="comment">// 压缩 List&lt;Map&gt; 为 Map</span></span><br><span class="line">                                Object code = right.get(<span class="string">"code"</span>);</span><br><span class="line">                                Object number = right.get(<span class="string">"number"</span>);</span><br><span class="line">                                left.put(code, number);</span><br><span class="line">                                <span class="comment">// 这里不应该修改left, 也就是identity</span></span><br><span class="line">                                <span class="keyword">return</span> left;</span><br><span class="line">                            &#125;))));</span><br><span class="line">        <span class="comment">// 使用 fastjson 打印输出 格式化后的数据</span></span><br><span class="line">        System.out.println(JSONObject.toJSONString(data));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">createMap</span><span class="params">(String date, String number, String code, String type)</span></span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"date"</span>, date);</span><br><span class="line">        map.put(<span class="string">"number"</span>, number);</span><br><span class="line">        map.put(<span class="string">"code"</span>, code);</span><br><span class="line">        map.put(<span class="string">"type"</span>, type);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="预期和实际的结果不同"><a href="#预期和实际的结果不同" class="headerlink" title="预期和实际的结果不同"></a>预期和实际的结果不同</h1><p>很明显, 每次最新的 <strong>行政区划代码</strong> 和 <strong>对应的数量</strong> 覆盖了之前的值。<br>可以复制到<a href="http://www.json.cn/" target="_blank" rel="noopener">【JSON在线解析及格式化验证】</a>进行格式化。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 预期结果 = &#123;</span><br><span class="line">  <span class="string">"2016-01"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-02"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-03"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"true"</span>: &#123;</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"4"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"6"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-04"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> 实际结果= &#123;</span><br><span class="line">  <span class="string">"2016-01"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"true"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-02"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"true"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-03"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"true"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"2016-04"</span>: &#123;</span><br><span class="line">    <span class="string">"false"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"true"</span>: &#123;</span><br><span class="line">      <span class="string">"410000"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"420000"</span>: <span class="string">"7"</span>,</span><br><span class="line">      <span class="string">"440000"</span>: <span class="string">"8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>上<a href="https://stackoverflow.com/questions/46143242/" target="_blank" rel="noopener">【stackoverflow】</a>问了下，有人给出了正确的代码。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collectors.reducing(</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;&gt;(),</span><br><span class="line">    (left, right) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 注意这里 new 了个 Map</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String leftCode = left.get(<span class="string">"code"</span>);</span><br><span class="line">        String leftNumber = left.get(<span class="string">"number"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.putAll(left);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(leftCode, leftNumber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String rightCode = right.get(<span class="string">"code"</span>);</span><br><span class="line">        String rightNumber = right.get(<span class="string">"number"</span>);</span><br><span class="line"></span><br><span class="line">        map.put(rightCode, rightNumber);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>
<p>再结合自己调试之后，发现了几点</p>
<ol>
<li><code>identity</code> 只会初始化一次。</li>
<li><code>identity</code> 在每次 <code>downstream</code> 的时候会重新放到 <strong>左值(left)</strong> 中。</li>
<li>如果操作 <code>identity</code> 的话, 将会影响下次 <code>downstream</code> 的第一次的 <strong>左值(left)</strong></li>
</ol>
<p>注意我的代码, 我修改了 <code>identity</code> 的值, 造成了之后每次 <code>downstream</code> 重新放到 <strong>左值</strong> 的  <code>identity</code> 携带了上一次<code>downstream</code> 处理过的参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collectors.reducing(</span><br><span class="line">    <span class="keyword">new</span> HashMap(), </span><br><span class="line">    (left, right)-&gt;&#123; <span class="comment">// 压缩 List&lt;Map&gt; 为 Map</span></span><br><span class="line">        Object code = right.get(<span class="string">"code"</span>);</span><br><span class="line">        Object number = right.get(<span class="string">"number"</span>);</span><br><span class="line">        left.put(code, number);</span><br><span class="line">        <span class="comment">// 我修改了 identity 的值</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>而新的代码, 是重新 new 了个 Map, 没有修改 <code>identity</code> 。保持了 <code>identity</code> 的纯净。</p>
<h1 id="具体调试代码"><a href="#具体调试代码" class="headerlink" title="具体调试代码"></a>具体调试代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; postmans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "420000" : post area code, "false": just paper(without goods)</span></span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-01"</span>, <span class="string">"1"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-01"</span>, <span class="string">"2"</span>, <span class="string">"440000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-02"</span>, <span class="string">"3"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"4"</span>, <span class="string">"420000"</span>, <span class="string">"true"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"5"</span>, <span class="string">"410000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-03"</span>, <span class="string">"6"</span>, <span class="string">"440000"</span>, <span class="string">"true"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-04"</span>, <span class="string">"7"</span>, <span class="string">"420000"</span>, <span class="string">"false"</span>));</span><br><span class="line">        postmans.add(createMap(<span class="string">"2016-04"</span>, <span class="string">"8"</span>, <span class="string">"440000"</span>, <span class="string">"false"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// before, I use fastjson Library</span></span><br><span class="line">        System.out.println(JSONObject.toJSONString(postmans));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Map&lt;Boolean, Map&gt;&gt; data = postmans.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(d -&gt; d.get(<span class="string">"date"</span>), TreeMap::<span class="keyword">new</span>,</span><br><span class="line">                        Collectors.partitioningBy(d-&gt; d.get(<span class="string">"type"</span>).equals(<span class="string">"true"</span>),</span><br><span class="line">                                Collectors.reducing(newHashMap(), (left, right)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                                    System.out.println(<span class="string">"开始:"</span>+JSONObject.toJSONString(left)+<span class="string">","</span>+JSONObject.toJSONString(right));</span><br><span class="line"></span><br><span class="line">                                    Object code = right.get(<span class="string">"code"</span>);</span><br><span class="line">                                    Object number = right.get(<span class="string">"number"</span>);</span><br><span class="line">                                    <span class="comment">// I think bug in reducing</span></span><br><span class="line">                                    left.put(code, number);</span><br><span class="line">                                    System.out.println(<span class="string">"结果:"</span>+JSONObject.toJSONString(left)+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">return</span> left;</span><br><span class="line">                                &#125;))));</span><br><span class="line">        <span class="comment">// after, I use fastjson Library</span></span><br><span class="line">        System.out.println(JSONObject.toJSONString(data));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Map&lt;Boolean, Map&lt;String, String&gt;&gt;&gt; test = postmans.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(d -&gt; d.get(<span class="string">"date"</span>), TreeMap::<span class="keyword">new</span>,</span><br><span class="line">                        Collectors.partitioningBy(d -&gt; d.get(<span class="string">"type"</span>).equals(<span class="string">"true"</span>),</span><br><span class="line">                                Collectors.reducing(newHashMap(), (left, right) -&gt; &#123;</span><br><span class="line">                                            Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                                            System.out.println(<span class="string">"开始:"</span>+JSONObject.toJSONString(left)+<span class="string">","</span>+JSONObject.toJSONString(right));</span><br><span class="line"></span><br><span class="line">                                            String leftCode = left.get(<span class="string">"code"</span>);</span><br><span class="line">                                            String leftNumber = left.get(<span class="string">"number"</span>);</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span> (leftCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                map.putAll(left);</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                map.put(leftCode, leftNumber);</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            String rightCode = right.get(<span class="string">"code"</span>);</span><br><span class="line">                                            String rightNumber = right.get(<span class="string">"number"</span>);</span><br><span class="line"></span><br><span class="line">                                            map.put(rightCode, rightNumber);</span><br><span class="line"></span><br><span class="line">                                            System.out.println(<span class="string">"结果:"</span>+JSONObject.toJSONString(map)+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">return</span> map;</span><br><span class="line">                                        &#125;))));</span><br><span class="line">        System.out.println(JSONObject.toJSONString(test));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">newHashMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"time"</span>+System.currentTimeMillis(), <span class="string">"测试:"</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">createMap</span><span class="params">(String date, String number, String code, String type)</span></span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"date"</span>, date);</span><br><span class="line">        map.put(<span class="string">"number"</span>, number);</span><br><span class="line">        map.put(<span class="string">"code"</span>, code);</span><br><span class="line">        map.put(<span class="string">"type"</span>, type);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h1><ol>
<li><code>identity</code> 只会初始化一次。</li>
<li><code>identity</code> 在每次 <code>downstream</code> 的时候会重新放到 <strong>左值(left)</strong> 中。</li>
<li>如果操作 <code>identity</code> 的话, 将会影响下次 <code>downstream</code> 的第一次的 <strong>左值(left)</strong></li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/46143242/" target="_blank" rel="noopener">java8 Stream List<map> how to covert a Map after groupingBy</map></a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro.ini异常Line argument must contain a key and a value.  Only one string token was found.</title>
    <url>/posts/Line_argument_must_contain_a_key_and_a_value._Only_one_string_token_was_found..html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在读取<a href="https://shiro.apache.org/" target="_blank" rel="noopener">shiro.ini</a>的时候, 抛出了如下异常<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">user1</span>=password1</span><br><span class="line"><span class="attr">user2</span>=password2</span><br><span class="line"><span class="comment">;抛出Line argument must contain a key and a value.  Only one string token was found.</span></span><br></pre></td></tr></table></figure></p>
<p>不科学啊, 我这里都是有键值对的。怎么会说我没有完整的键值对呢?<br><a id="more"></a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在<a href="http://learningtogrowup.iteye.com/blog/2232917" target="_blank" rel="noopener">这篇博客</a>找到了解决方案。<br>原来我的 <code>shiro.ini</code> 是 <code>UTF-8</code> 编码的, windows会自动给 <code>UTF-8</code> 编码加上 <code>BOM</code> 。<br>所以使用windows默认笔记本编辑的小伙伴就有福啦~, 被坑了。<br>用 <code>Notepad++</code> 打开, 点击 <code>编码-&gt;转为UTF-8无BOM编码格式</code> 即可。</p>
<h1 id="为什么改成-无BOM编码-就可以呢"><a href="#为什么改成-无BOM编码-就可以呢" class="headerlink" title="为什么改成 无BOM编码 就可以呢?"></a>为什么改成 无BOM编码 就可以呢?</h1><p>以下是引用或整合的一些信息。</p>
<ul>
<li><p>ANSI:</p>
<ol>
<li>ANSI编码表示英文字符时用一个字节，表示中文用两个或四个字节。</li>
<li>ANSI有很多个分支, 比较熟悉的有GB2312、GBK、GB18030、Big5, 这些使用多个字节表示一个字符的编码方式称为ANSI编码。</li>
<li>简体中文Windows是GBK编码。</li>
</ol>
</li>
<li><p>UTF-8 无BOM 和 UTF-8</p>
<ol>
<li>这里的BOM不是javascript的Browser Object Model浏览器对象模型。而是Byte Order Mark字节顺序标记</li>
<li>BOM会在文件的开头加入U+FEFF, 相当于一个【看不见的长度为0的空白字符】, 用于区分UTF-8和ASCII编码</li>
<li>windows会自动给UTF-8编码加上BOM。</li>
<li>UTF-8本身是没有字节序的问题的（因为它是以单个字节为最小单位）</li>
</ol>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://learningtogrowup.iteye.com/blog/2232917" target="_blank" rel="noopener">java.lang.IllegalArgumentException: Line argument must contain a key and a value</a></li>
<li><a href="https://baike.baidu.com/item/ANSI" target="_blank" rel="noopener">百度百科-ANSI</a></li>
<li><a href="https://zh.wikipedia.org/wiki/字节顺序标记" target="_blank" rel="noopener">维基百科-字节顺序标记</a></li>
<li><a href="https://www.zhihu.com/question/20167122" target="_blank" rel="noopener">「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？</a></li>
<li><a href="http://jimliu.net/2015/03/07/something-about-encoding-extra/" target="_blank" rel="noopener">编码歪传——番外篇</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC支持跨域访问</title>
    <url>/posts/Cross_domain_access_in_Spring_MVC.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ajax的跨域访问, Spring MVC提供了使用AOP的解决方案。</p>
<a id="more"></a>
<h1 id="什么是跨域访问"><a href="#什么是跨域访问" class="headerlink" title="什么是跨域访问"></a>什么是跨域访问</h1><p>比如我现在在 <code>http://a.com</code> 中, 要访问 <code>http://b.com</code>, 这就是跨域访问。<br>而一般的 <code>AJAX</code> 是不允许跨域访问的。<br>网上关于跨域的说明有很多, 简单的说, 只要 <code>com</code> 之前的内容不一致, 就叫跨域访问。</p>
<h1 id="JSONP的解决方案-只支持GET"><a href="#JSONP的解决方案-只支持GET" class="headerlink" title="JSONP的解决方案(只支持GET)"></a>JSONP的解决方案(只支持GET)</h1><h2 id="Spring-MVC解决方案"><a href="#Spring-MVC解决方案" class="headerlink" title="Spring MVC解决方案"></a>Spring MVC解决方案</h2><p><strong>注意Spring MVC的版本要4.1以上</strong><br>先配置 <code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描aop相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.nine.rivers.galaxy"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只扫描aop --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加一个 <code>Advice</code> 和一个 <code>Controller</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"com.ahao.module.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> <span class="keyword">extends</span> <span class="title">AbstractJsonpResponseBodyAdvice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdvice</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 和下面 ajax 的 jsonp 属性的值要一致</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"callback"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.ahao.module.controller.TestController</span></span><br><span class="line"><span class="comment">// 注意在 MyAdvice 扫描的包下</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只支持GET, 使用 fastjson 方便输出</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">(@RequestParam(<span class="string">"size"</span>)</span> Integer size) </span>&#123;</span><br><span class="line">        JSONObject json = <span class="keyword">new</span> JSONObject(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            json.put(<span class="string">"key"</span>+i, <span class="string">"value"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到 <code>Controller</code> 是一个很普通的 <code>Controller</code>, 那么主要的就是 <code>AbstractJsonpResponseBodyAdvice</code>。<br>从名字看就知道是和 <code>AOP</code> 有关。<br>值的注意的是, 如果把 <code>basePackages</code> 设置为 <code>com</code> 的话, 也就是很大范围的话,<br>那么该范围内所有的 <code>Controller</code> 都将支持 <code>JSONP</code>, 这样违背了<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">最小权限原则</a>。<br>所以 <code>basePackages</code> 范围要尽可能小。<br>配置好后, 启动<code>Tomcat</code>, 新建一个静态页面使用 <code>AJAX</code> 请求。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">        type:<span class="string">"get"</span>,</span></span><br><span class="line"><span class="actionscript">        dataType:<span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="actionscript">        url:<span class="string">"http://localhost:8080/test"</span>,</span></span><br><span class="line"><span class="actionscript">        jsonp:<span class="string">"callback"</span>, <span class="comment">// 和 MyAdvice 配置的值要一致</span></span></span><br><span class="line"><span class="actionscript">        data: &#123;size: <span class="string">'5'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        success : <span class="function"><span class="keyword">function</span><span class="params">(json)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'div'</span>).html(<span class="string">"成功:"</span>+<span class="built_in">JSON</span>.stringify(json));</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        error: <span class="function"><span class="keyword">function</span><span class="params">(xhr)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'div'</span>).html(<span class="string">"失败:"</span>+<span class="built_in">JSON</span>.stringify(xhr));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>成功:&#123;"key4":"value4","key3":"value3","key0":"value0","key2":"value2","key1":"value1"&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="为什么不支持POST"><a href="#为什么不支持POST" class="headerlink" title="为什么不支持POST"></a>为什么不支持POST</h3><p><strong>没有支持<code>post</code>的<code>script</code>标签!!!</strong><br><code>JSONP</code>的本质, 是通过<code>script</code>标签, 以函数传参的形式来调用。<br>从响应头<code>Content-Type: application/javascript;charset=utf-8</code>就可以看出。<br>如本例中的<code>JSONP</code>请求, 等价于<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://localhost:8080/szlh/sdlyzwgk/test?callback=jQuery33108767440327735769_1521685929769&amp;size=5&amp;_=1521685929770"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>后台处理后, 将数据封装成一个<code>JSON对象</code>，返回一串函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery33108767440327735769_1521685929769(&#123;<span class="string">"key4"</span>:<span class="string">"value4"</span>,<span class="string">"key3"</span>:<span class="string">"value3"</span>,<span class="string">"key0"</span>:<span class="string">"value0"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>,<span class="string">"key1"</span>:<span class="string">"value1"</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>jQuery33108767440327735769_1521685929769</code>是函数名, 后台返回的数据封装成了<code>JSON对象</code>参数, 然后浏览器会调用这个函数, 走到<code>success</code>这个方法里面。</p>
<h1 id="CORS的解决方案"><a href="#CORS的解决方案" class="headerlink" title="CORS的解决方案"></a>CORS的解决方案</h1><p><code>CORS</code>是一个<a href="https://developer.mozilla.org/zh/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">W3C标准</a>，全称是”跨域资源共享”(Cross-origin resource)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许http://localhost:8081对本机发起CORS访问</span></span><br><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line"><span class="comment">// 3628800秒内，不需要再发送预检验请求，可以缓存该结果</span></span><br><span class="line">Access-Control-Max-Age: <span class="number">3628800</span></span><br><span class="line"><span class="comment">// 允许各种方式的请求</span></span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT, DELETE</span><br><span class="line"><span class="comment">// 允许包含的请求头</span></span><br><span class="line">Access-Control-Allow-Headers: content-type</span><br></pre></td></tr></table></figure>
<h2 id="原生解决方案"><a href="#原生解决方案" class="headerlink" title="原生解决方案"></a>原生解决方案</h2><p>使用过滤器<code>Filter</code>解决, 注册这个过滤器即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.ahao.core.filter.CORSFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="SpringMVC解决方案"><a href="#SpringMVC解决方案" class="headerlink" title="SpringMVC解决方案"></a>SpringMVC解决方案</h2><p><strong>注意Spring MVC的版本要4.2以上</strong><br>使用<code>CrossOrigin</code>注解, 指定允许进行跨域的远程地址<code>http://localhost:8081</code>。<br>如果不指定, 则默认允许所有外来地址跨域访问。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.ahao.module.controller.TestController</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 支持GET、POST, 使用 fastjson 方便输出</span></span><br><span class="line">    <span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:8081"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">(@RequestParam(<span class="string">"size"</span>)</span> Integer size) </span>&#123;</span><br><span class="line">        JSONObject json = <span class="keyword">new</span> JSONObject(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            json.put(<span class="string">"key"</span>+i, <span class="string">"value"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>CrossOrigin</code>注解可以加在类上, 也可以加在方法上。<br>如果需要全局都注解的话, 需要在<code>spring</code>配置文件上添加<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> <span class="attr">allowed-origins</span>=<span class="string">"http://localhost:8081"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://spring.io/guides/gs/rest-service-cors/" target="_blank" rel="noopener">CORS support in Spring Framework</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的LiveTempleate自动生成代码</title>
    <url>/posts/IDEA_LiveTempleate_Setting.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Live Template是IDEA提供的一个自动生成代码的工具, 可以自定义一段小代码, 比如最常见的 <code>System.out.println(&quot;&quot;);</code> ,  当然这已经被内置了, 输入 <code>sout</code>即可输出。</p>
<a id="more"></a>
<h1 id="自定义xml的存储位置"><a href="#自定义xml的存储位置" class="headerlink" title="自定义xml的存储位置"></a>自定义xml的存储位置</h1><ul>
<li>Windows: 用户目录/.IntelliJ IDEA/config/templates</li>
<li>Linux: ~IntelliJ IDEA/config/templates</li>
<li>macOS: ~/Library/Preferences/IntelliJ IDEA/templates</li>
</ul>
<p>当然这在<a href="https://www.jetbrains.com/help/idea/live-templates.html" target="_blank" rel="noopener">官方文档</a>中有提到</p>
<h1 id="自定义Live-Template"><a href="#自定义Live-Template" class="headerlink" title="自定义Live Template"></a>自定义Live Template</h1><p>打开IDEA, 点击工具栏File -&gt; Settings -&gt; Editor -&gt; Live Template, 点击右边的加号+。<br>输入下面的代码。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">$END$</span><br></pre></td></tr></table></figure></p>
<p>再点击右边的 <code>Edit variables</code>, 选择 <code>Expression</code> 为 <code>className()</code><br>在代码中输入 <code>logg</code> 即可生成自动生成上面的代码, <code>$CLASS_NAME$</code> 表示当前的类名。</p>
<h1 id="自用的Live-Template"><a href="#自用的Live-Template" class="headerlink" title="自用的Live Template"></a>自用的Live Template</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">templateSet</span> <span class="attr">group</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logg"</span> <span class="attr">value</span>=<span class="string">"private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);&amp;#10;$END$"</span> <span class="attr">description</span>=<span class="string">"log日志输出器"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"CLASS_NAME"</span> <span class="attr">expression</span>=<span class="string">"className()"</span> <span class="attr">defaultValue</span>=<span class="string">""</span> <span class="attr">alwaysStopAt</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"loge"</span> <span class="attr">value</span>=<span class="string">"logger.error(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志error级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logw"</span> <span class="attr">value</span>=<span class="string">"logger.warn(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志warn级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logi"</span> <span class="attr">value</span>=<span class="string">"logger.info(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志info级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logd"</span> <span class="attr">value</span>=<span class="string">"logger.debug(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志debug级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"can"</span> <span class="attr">value</span>=<span class="string">"java.util.Scanner in = new java.util.Scanner(System.in);&amp;#10;int n = in.nextInt();&amp;#10;$END$"</span> <span class="attr">description</span>=<span class="string">"控制台输入"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"pra"</span> <span class="attr">value</span>=<span class="string">"java.util.Arrays.toString($END$)"</span> <span class="attr">description</span>=<span class="string">"打印数组"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"prm"</span> <span class="attr">value</span>=<span class="string">"for(java.util.Map.Entry entry : $VAR$.entrySet())&#123;&amp;#10;    System.out.println(entry.getKey()+&amp;quot; : &amp;quot;+entry.getValue());&amp;#10;&#125;"</span> <span class="attr">description</span>=<span class="string">"打印Map集合"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"VAR"</span> <span class="attr">expression</span>=<span class="string">""</span> <span class="attr">defaultValue</span>=<span class="string">""</span> <span class="attr">alwaysStopAt</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templateSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.jetbrains.com/help/idea/live-templates.html" target="_blank" rel="noopener">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的基本配置</title>
    <url>/posts/IDEA_common_setting.html</url>
    <content><![CDATA[<h1 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h1><p>选择: <a href="https://www.jetbrains.com/idea/download/previous.html" target="_blank" rel="noopener">2017.3</a><br>激活: <a href="http://idea.liyang.io/" target="_blank" rel="noopener">http://idea.liyang.io/</a></p>
<a id="more"></a>
<h1 id="字体颜色设置"><a href="#字体颜色设置" class="headerlink" title="字体颜色设置"></a>字体颜色设置</h1><ol>
<li>设置主题: File -&gt; Settings -&gt; Appearence&amp;Behavior -&gt; Appearence, 选择 <code>Darcula</code>暗色背景</li>
<li>设置代码字体: File -&gt; Settings -&gt; Editor -&gt; Font, 设置 <code>font</code> 为 <code>Consolas</code> ,  <code>Size</code> 为 <code>16</code>。</li>
<li>设置控制台字体: File -&gt; Settings -&gt; Editor -&gt; Color Scheme -&gt; Console Font, 设置 <code>font</code> 为 <code>Consolas</code> ,  <code>Size</code> 为 <code>14</code>。</li>
</ol>
<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><p>在 File -&gt; Settings -&gt; Version Control -&gt; Git -&gt; Path to Git executable 添加 <code>Git路径\bin\git.exe</code>。</p>
<h1 id="中文输入法配置"><a href="#中文输入法配置" class="headerlink" title="中文输入法配置"></a>中文输入法配置</h1><p><code>2017.2</code>不支持中文输入法候选框的显示。</p>
<ol>
<li>找到IDEA在本地安装路径(先把IDEA关闭)</li>
<li>在IDEA安装路径中把jre64文件删除,或者重命名(万一不行可以再改回来…)</li>
<li>找到本地java安装路径,把jre文件夹复制一份.(java安装路径里有jdk和jre的文件夹)</li>
<li>把复制的jre文件夹粘贴在刚才修改jre64位置,重命名为jre64(这样IDEA启动就能找到它)</li>
<li>在java安装路径中找到jdk文件-再找到lib文件-找到tools.jar文件,复制一份</li>
<li>把jar包粘贴到已经重命名过的jre64/lib下</li>
<li>打开IDEA,写一段代码,然后写一段中文注释试试,问题解决~</li>
</ol>
<h1 id="maven设置"><a href="#maven设置" class="headerlink" title="maven设置"></a>maven设置</h1><p>在 <code>IntelliJ IDEA</code> 文件夹下新建文件夹 <code>mvnlib</code>,<br>打开 <code>IntelliJ IDEA\plugins\maven\lib\maven2\conf\settings.xml</code> (maven3同理) , 添加如下xml, 注意层级结构<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maven的下载路径, 默认下载在C盘用户目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>mvnlib的目录<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 阿里云的maven镜像仓库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul>
<li><a href="https://plugins.jetbrains.com/plugin/4441-jrebel-for-intellij" target="_blank" rel="noopener">热部署jrebel</a>: 用Twitter或者Facebook登录<a href="https://my.jrebel.com/account/how-to-activate" target="_blank" rel="noopener">获取注册码</a>即可。</li>
<li><a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea" target="_blank" rel="noopener">findbugs</a>: 找到隐藏比较深的bug</li>
<li><a href="https://plugins.jetbrains.com/plugin/7125-grep-console" target="_blank" rel="noopener">Grep Console</a>: 输出彩色日志</li>
<li><a href="https://github.com/Skykai521/ECTranslation" target="_blank" rel="noopener">ECTranslation</a>: 翻译插件</li>
<li><a href="https://github.com/jansorg/BashSupport" target="_blank" rel="noopener">BashSupport</a>: 执行shell</li>
<li><a href="https://github.com/zielu/GitToolBox" target="_blank" rel="noopener">GitToolBox</a>: <code>Git</code>功能扩展</li>
<li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper" target="_blank" rel="noopener">Maven Helper</a>: <code>Maven</code>功能扩展</li>
<li><a href="https://plugins.jetbrains.com/plugin/4455-key-promoter" target="_blank" rel="noopener">Key promoter</a>: 帮助记住<code>IDEA</code>快捷键</li>
<li><a href="https://plugins.jetbrains.com/plugin/10292-restfultoolkit" target="_blank" rel="noopener">RestfulToolkit</a>: 根据<code>URL</code>快速找到<code>Controller</code>所在位置</li>
<li><a href="https://github.com/gejun123456/intellij-generateAllSetMethod" target="_blank" rel="noopener">GenerateAllSetter</a>: 快速生成<code>set</code>方法</li>
</ul>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/7293-mybatis-plugin" target="_blank" rel="noopener">MyBatis插件</a>: 照着说明复制粘贴即可破解, <a href="https://github.com/myoss/profile" target="_blank" rel="noopener">github地址</a>(失效)</li>
</ul>
<h1 id="Live-Template"><a href="#Live-Template" class="headerlink" title="Live Template"></a>Live Template</h1><ul>
<li>Windows: 用户目录/.IntelliJ IDEA/config/templates</li>
<li>Linux: ~IntelliJ IDEA/config/templates</li>
<li>macOS: ~/Library/Preferences/IntelliJ IDEA/templates<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">templateSet</span> <span class="attr">group</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logg"</span> <span class="attr">value</span>=<span class="string">"private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);&amp;#10;$END$"</span> <span class="attr">description</span>=<span class="string">"log日志输出器"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"CLASS_NAME"</span> <span class="attr">expression</span>=<span class="string">"className()"</span> <span class="attr">defaultValue</span>=<span class="string">""</span> <span class="attr">alwaysStopAt</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"loge"</span> <span class="attr">value</span>=<span class="string">"logger.error(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志error级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logw"</span> <span class="attr">value</span>=<span class="string">"logger.warn(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志warn级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logi"</span> <span class="attr">value</span>=<span class="string">"logger.info(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志info级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"logd"</span> <span class="attr">value</span>=<span class="string">"logger.debug(&amp;quot;$END$&amp;quot;);"</span> <span class="attr">description</span>=<span class="string">"log日志debug级别"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"can"</span> <span class="attr">value</span>=<span class="string">"java.util.Scanner in = new java.util.Scanner(System.in);&amp;#10;int n = in.nextInt();&amp;#10;$END$"</span> <span class="attr">description</span>=<span class="string">"控制台输入"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"pra"</span> <span class="attr">value</span>=<span class="string">"java.util.Arrays.toString($END$)"</span> <span class="attr">description</span>=<span class="string">"打印数组"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"prm"</span> <span class="attr">value</span>=<span class="string">"for(java.util.Map.Entry entry : $VAR$.entrySet())&#123;&amp;#10;    System.out.println(entry.getKey()+&amp;quot; : &amp;quot;+entry.getValue());&amp;#10;&#125;"</span> <span class="attr">description</span>=<span class="string">"打印Map集合"</span> <span class="attr">toReformat</span>=<span class="string">"false"</span> <span class="attr">toShortenFQNames</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"VAR"</span> <span class="attr">expression</span>=<span class="string">""</span> <span class="attr">defaultValue</span>=<span class="string">""</span> <span class="attr">alwaysStopAt</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"JAVA_CODE"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templateSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/weixin_39641494/article/details/78435941" target="_blank" rel="noopener">IntelliJ IDEA 2017.2.5 中文输入后,输入框文字不随指针显示问题</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback日志配置</title>
    <url>/posts/Logback_xml_configuration.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回想以前都是用 <code>System.out.println</code> 作为调试的主要手段的, 但是当部署到服务器时, 我们不可能一直盯着控制台看, 并且这种方法也不能进行分级输出。 <code>System.out.println</code> 也就满足不了需求了。<br><code>Logback</code> 是一个 Java 领域的日志框架。它被认为是 <code>Log4J</code> 的继承人，实现了 <code>SLF4J</code> 标准。反正就是个特好用的东西。</p>
<a id="more"></a>
<h1 id="导入maven"><a href="#导入maven" class="headerlink" title="导入maven"></a>导入maven</h1><ul>
<li><a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api" target="_blank" rel="noopener">slf4j-api</a></li>
<li><a href="https://mvnrepository.com/artifact/ch.qos.logback/logback-classic" target="_blank" rel="noopener">logback-classic</a> : 包含了<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api" target="_blank" rel="noopener">slf4j-api</a>、<a href="https://mvnrepository.com/artifact/ch.qos.logback/logback-core" target="_blank" rel="noopener">logback-core</a></li>
<li><a href="https://mvnrepository.com/artifact/org.logback-extensions/logback-ext-spring" target="_blank" rel="noopener">logback-ext-spring</a>: 提供的对Spring的支持</li>
<li><a href="https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j" target="_blank" rel="noopener">jcl-over-slf4j</a>: 打印Spring框架本身打印的日志</li>
</ul>
<h1 id="Spring-配置"><a href="#Spring-配置" class="headerlink" title="Spring 配置"></a>Spring 配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logbackConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:logback.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring Boot直接放在 <code>resource/logback.xml</code>即可, 会自动配置加载。</p>
<h1 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h1><p>直接复制粘贴进去即可, 一些基本常识请看官方文档或下面的参考资料。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上下文名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.context.name"</span> <span class="attr">value</span>=<span class="string">"MyApp"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log文件最大历史 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.history.max"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log文件输出路径, 相对路径LOG在Tomcat 8.5\bin\LOG下, 绝对路径/LOG在D:\LOG下 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐绝对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"LOG"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Log4j: [S][%d&#123;yyyyMMdd HH:mm:ss&#125;][%-5p][%C:%L] - %m%n --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern.short"</span> <span class="attr">value</span>=<span class="string">"%date&#123;yyyyMMdd HH:mm:ss.SSS&#125;-%msg%n"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置上下文名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;log.context.name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到控制台 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender用于输出log日志, name是appender的唯一标识, class指定实现类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoder是编码器, charset指定编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式, 在上面有提到 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT_SHORT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern.short&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ERROR级别日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_ERROR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录ERROR级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配则处理这个日志, 不经过其他过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配则抛弃这个日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span></span><br><span class="line"><span class="comment">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.history.max&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- WARN级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_WARN"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录WARN级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配则处理这个日志, 不经过其他过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配则抛弃这个日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span></span><br><span class="line"><span class="comment">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.history.max&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- INFO级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_INFO"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录INFO级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配则处理这个日志, 不经过其他过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配则抛弃这个日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span></span><br><span class="line"><span class="comment">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.history.max&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DEBUG级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_DEBUG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录DEBUG级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配则处理这个日志, 不经过其他过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配则抛弃这个日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span></span><br><span class="line"><span class="comment">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.history.max&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- TRACE级别日志 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE_TRACE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，只记录TRACE级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配则处理这个日志, 不经过其他过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配则抛弃这个日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志输出位置  可相对、和绝对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/trace/log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且&lt;maxHistory&gt;是6，</span></span><br><span class="line"><span class="comment">            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.history.max&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.ahao.project"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- root级别 INFO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_ERROR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_INFO"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_WARN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_DEBUG"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_TRACE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://justcode.ikeepstudying.com/wp-content/uploads/2017/04/logback-中文手册.pdf" target="_blank" rel="noopener">logback 中文手册下载</a></li>
<li><a href="http://aub.iteye.com/blog/1101222" target="_blank" rel="noopener">logback 常用配置详解（序）logback 简介</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback输出异常堆栈</title>
    <url>/posts/Logback_how_to_output_exception_stack.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来到公司, 老大和我说SpringBoot的短信项目没有日志输出, 赶紧火急火燎的排错。<br><a id="more"></a></p>
<h1 id="先排查logback-xml"><a href="#先排查logback-xml" class="headerlink" title="先排查logback.xml"></a>先排查logback.xml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- root级别 INFO --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_TRACE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_DEBUG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_INFO"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_WARN"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_ERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>日志输出级别是 <code>INFO</code>, 按理是没什么问题的, 为了稳妥起见, 改为 <code>DEBUG</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- root级别 DEBUG --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_TRACE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_DEBUG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_INFO"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_WARN"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE_ERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="检查application-yml"><a href="#检查application-yml" class="headerlink" title="检查application.yml"></a>检查application.yml</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志 配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.nine.rivers.galaxy:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure>
<p>发现了这一段, 估计是在摸石头过河阶段加入的, 后来用 <code>logback.xml</code> 的时候没有删除掉。<br>有句话说得好, 如果你自己都搞不清楚程序要做什么, 程序自己肯定也会搞糊涂<br>统一一个日志配置文件, 把 <code>application.yml</code> 中的这一段删掉。</p>
<h1 id="异常日志输出"><a href="#异常日志输出" class="headerlink" title="异常日志输出"></a>异常日志输出</h1><p>改完后发现普通的日志输出没有问题, 但是不能输出异常堆栈。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do Something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace(); <span class="comment">// 注意这里</span></span><br><span class="line">    logger.error(<span class="string">"反射获取参数错误, 请检查field的权限修饰符:"</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在使用 <code>System.out.println()</code> 输出日志的阶段, 我一直都是使用 <code>e.printStackTrace()</code> 输出的。<br>改用 <code>log</code> 输出日志之后, 没有意识到 <code>e.printStackTrace()</code> 其实是 <code>System.err.println()</code>, 没有输出到日志。<br>改为如下代码即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// do Something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    logger.error(<span class="string">"反射获取参数错误, 请检查field的权限修饰符:"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="初探源码"><a href="#初探源码" class="headerlink" title="初探源码"></a>初探源码</h2><p><code>e.printStackTrace()</code> 这个方法是在父类 <code>Throwable</code> 中实现的。<br>很明显看到 <code>System.err</code> 的字样。更深入异常的体系结构暂不分析。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Throwable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Throwable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是不是和System.out很像</span></span><br><span class="line">        <span class="comment">// 调用第9行的代码</span></span><br><span class="line">        printStackTrace(System.err);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStream s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// WrappedPrintStream 是 Throwable 的私有静态内部类, 包装了一个PrintStream对象</span></span><br><span class="line">        <span class="comment">// 调用第15行的代码</span></span><br><span class="line">        printStackTrace(<span class="keyword">new</span> WrappedPrintStream(s));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStreamOrWriter s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Guard against malicious overrides of Throwable.equals by</span></span><br><span class="line">        <span class="comment">// using a Set with identity equality semantics.</span></span><br><span class="line">        Set&lt;Throwable&gt; dejaVu = Collections.newSetFromMap(<span class="keyword">new</span> IdentityHashMap&lt;Throwable, Boolean&gt;());</span><br><span class="line">        dejaVu.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (s.lock()) &#123;</span><br><span class="line">            <span class="comment">// 打印自身</span></span><br><span class="line">            s.println(<span class="keyword">this</span>);</span><br><span class="line">            StackTraceElement[] trace = getOurStackTrace();</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement traceElement : trace)</span><br><span class="line">                <span class="comment">// 打印当前的异常信息</span></span><br><span class="line">                s.println(<span class="string">"\tat "</span> + traceElement);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印被抑制（可能是try住的）的所有的异常信息</span></span><br><span class="line">            <span class="keyword">for</span> (Throwable se : getSuppressed())</span><br><span class="line">                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, <span class="string">"\t"</span>, dejaVu);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印异常的原因</span></span><br><span class="line">            Throwable ourCause = getCause();</span><br><span class="line">            <span class="keyword">if</span> (ourCause != <span class="keyword">null</span>)</span><br><span class="line">                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, <span class="string">""</span>, dejaVu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot彩色日志的配置</title>
    <url>/posts/Spring_Boot_color_log_configuration.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="/images/SpringBoot彩色日志的配置_01.png">
<a id="more"></a>
<p>Spring Boot提供了彩色日志的功能, 可以达到上面的效果</p>
<h1 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h1><p>在 <code>resource</code> 文件夹加入 <code>logback.xml</code>, Spring Boot 会自动去加载配置文件。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上下文名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;log.context.name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATH"</span> <span class="attr">value</span>=<span class="string">"/LOG"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.context.name"</span> <span class="attr">value</span>=<span class="string">"MyApp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.charset"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Log4j: [S][%d&#123;yyyyMMdd HH:mm:ss&#125;][%-5p][%C:%L] - %m%n --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern.short"</span> <span class="attr">value</span>=<span class="string">"%date&#123;yyyyMMdd HH:mm:ss.SSS&#125;-%msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern.color"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT_SHORT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern.short&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Console 输出设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT_COLOR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"$&#123;log.charset&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern.color&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis log configure--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT_COLOR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="在application-yml启用彩色日志"><a href="#在application-yml启用彩色日志" class="headerlink" title="在application.yml启用彩色日志"></a>在application.yml启用彩色日志</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.output.ansi.enabled:</span> <span class="string">detect</span></span><br></pre></td></tr></table></figure>
<p><code>spring.output.ansi.enabled</code> 有三个候选项</p>
<ol>
<li>NEVER：禁用ANSI-colored输出（默认项）</li>
<li>DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）</li>
<li>ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用</li>
</ol>
<h1 id="Tomcat不支持彩色日志"><a href="#Tomcat不支持彩色日志" class="headerlink" title="Tomcat不支持彩色日志"></a>Tomcat不支持彩色日志</h1><p>直接运行 <code>main</code> 函数的话,日志可以彩色输出, 但是在IDEA部署到 <code>Tomcat</code> 的时候, IDEA的控制台没有彩色日志, 如果强制打开彩色日志, 则会出现很多干扰信息。</p>
<p>IDEA提供了个曲线救国的插件<a href="https://plugins.jetbrains.com/plugin/7125-grep-console" target="_blank" rel="noopener">Grep Console</a>, 安装即可, 在IDEA的控制台渲染彩色日志, 在Tomcat不显示彩色日志。<br><img src="/images/SpringBoot彩色日志的配置_02.png"></p>
<p>如果在Linux上使用, 还有另一种曲线救国的方法。这种就不详细讨论了。<br><a href="https://github.com/cornet/ccze" target="_blank" rel="noopener">Linux 日志高亮工具 CCZE</a></p>
<h1 id="有趣的Banner"><a href="#有趣的Banner" class="headerlink" title="有趣的Banner"></a>有趣的Banner</h1><p>使用过Spring Boot就会发现每次项目启动时，控制台都会有一个大大的<strong>Spring</strong>的字符画。<br>Spring Boot也提供了自定义的方法, 在 <code>resource/banner.txt</code> 写入想显示的字符画, 就可以自动加载并显示出来。<br><strong>注意Tomcat不支持彩色日志</strong></p>
<h2 id="佛祖保佑"><a href="#佛祖保佑" class="headerlink" title="佛祖保佑"></a>佛祖保佑</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">////////////////////////////////////////////////////////////////////</span><br><span class="line">//                          _ooOoo_                               //</span><br><span class="line">//                         o8888888o                              //</span><br><span class="line">//                         88&quot; . &quot;88                              //</span><br><span class="line">//                         (| ^_^ |)                              //</span><br><span class="line">//                         O\  =  /O                              //</span><br><span class="line">//                      ____/`---&apos;\____                           //</span><br><span class="line">//                    .&apos;  \\|     |//  `.                         //</span><br><span class="line">//                   /  \\|||  :  |||//  \                        //</span><br><span class="line">//                  /  _||||| -:- |||||-  \                       //</span><br><span class="line">//                  |   | \\\  -  /// |   |                       //</span><br><span class="line">//                  | \_|  &apos;&apos;\---/&apos;&apos;  |   |                       //</span><br><span class="line">//                  \  .-\__  `-`  ___/-. /                       //</span><br><span class="line">//                ___`. .&apos;  /--.--\  `. . ___                     //</span><br><span class="line">//              .&quot;&quot; &apos;&lt;  `.___\_&lt;|&gt;_/___.&apos;  &gt;&apos;&quot;&quot;.                  //</span><br><span class="line">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span><br><span class="line">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span><br><span class="line">//      ========`-.____`-.___\_____/___.-`____.-&apos;========         //</span><br><span class="line">//                           `=---=&apos;                              //</span><br><span class="line">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span><br><span class="line">//            佛祖保佑       永不宕机     永无BUG                  //</span><br><span class="line">////////////////////////////////////////////////////////////////////</span><br></pre></td></tr></table></figure>
<h2 id="jhipster-不支持Tomcat"><a href="#jhipster-不支持Tomcat" class="headerlink" title="jhipster(不支持Tomcat)"></a>jhipster(不支持Tomcat)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;AnsiColor.GREEN&#125;      ██╗$&#123;AnsiColor.RED&#125; ██╗   ██╗ ████████╗ ███████╗   ██████╗ ████████╗ ████████╗ ███████╗</span><br><span class="line">$&#123;AnsiColor.GREEN&#125;      ██║$&#123;AnsiColor.RED&#125; ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔════╝ ╚══██╔══╝ ██╔═════╝ ██╔═══██╗</span><br><span class="line">$&#123;AnsiColor.GREEN&#125;      ██║$&#123;AnsiColor.RED&#125; ████████║    ██║    ███████╔╝ ╚█████╗     ██║    ██████╗   ███████╔╝</span><br><span class="line">$&#123;AnsiColor.GREEN&#125;██╗   ██║$&#123;AnsiColor.RED&#125; ██╔═══██║    ██║    ██╔════╝   ╚═══██╗    ██║    ██╔═══╝   ██╔══██║</span><br><span class="line">$&#123;AnsiColor.GREEN&#125;╚██████╔╝$&#123;AnsiColor.RED&#125; ██║   ██║ ████████╗ ██║       ██████╔╝    ██║    ████████╗ ██║  ╚██╗</span><br><span class="line">$&#123;AnsiColor.GREEN&#125; ╚═════╝ $&#123;AnsiColor.RED&#125; ╚═╝   ╚═╝ ╚═══════╝ ╚═╝       ╚═════╝     ╚═╝    ╚═══════╝ ╚═╝   ╚═╝</span><br></pre></td></tr></table></figure>
<h2 id="彩虹猫-不支持Tomcat"><a href="#彩虹猫-不支持Tomcat" class="headerlink" title="彩虹猫(不支持Tomcat)"></a>彩虹猫(不支持Tomcat)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">$&#123;AnsiColor.RED&#125;██████████████████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████$&#123;AnsiColor.BLACK&#125;██████████████████████████████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████</span><br><span class="line">$&#123;AnsiColor.RED&#125;████████████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_RED&#125;████$&#123;AnsiColor.RED&#125;██████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.MAGENTA&#125;██████████████████████$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_RED&#125;██████████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.MAGENTA&#125;████████████████$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.MAGENTA&#125;██████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.BRIGHT_BLUE&#125;██████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_RED&#125;██████████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.MAGENTA&#125;██████$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_YELLOW&#125;██████████████████$&#123;AnsiColor.BRIGHT_RED&#125;████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.MAGENTA&#125;██████$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_YELLOW&#125;██████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_YELLOW&#125;██████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;████████$&#123;AnsiColor.WHITE&#125;████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_YELLOW&#125;████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_YELLOW&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_GREEN&#125;██████████████████$&#123;AnsiColor.BRIGHT_YELLOW&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;████████$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██</span><br><span class="line">$&#123;AnsiColor.BRIGHT_GREEN&#125;██████████████████████$&#123;AnsiColor.WHITE&#125;████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BRIGHT_YELLOW&#125;██$&#123;AnsiColor.WHITE&#125;██████████$&#123;AnsiColor.BRIGHT_YELLOW&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██</span><br><span class="line">$&#123;AnsiColor.BRIGHT_GREEN&#125;██████████████████████$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██</span><br><span class="line">$&#123;AnsiColor.BLUE&#125;██████████████████$&#123;AnsiColor.BRIGHT_GREEN&#125;████████$&#123;AnsiColor.BLACK&#125;██████$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.MAGENTA&#125;████$&#123;AnsiColor.WHITE&#125;████████████████$&#123;AnsiColor.MAGENTA&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██</span><br><span class="line">$&#123;AnsiColor.BLUE&#125;██████████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;████████████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;██████████████████$&#123;AnsiColor.BLUE&#125;████$&#123;AnsiColor.BLUE&#125;██████$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.MAGENTA&#125;██████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;██████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;████████████████████$&#123;AnsiColor.BLACK&#125;██████████████████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;██████$&#123;AnsiColor.BLACK&#125;████████████████████████████████$&#123;AnsiColor.WHITE&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;██$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;████$&#123;AnsiColor.WHITE&#125;████$&#123;AnsiColor.BLACK&#125;██$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████████████████$&#123;AnsiColor.BLACK&#125;██████$&#123;AnsiColor.BRIGHT_BLUE&#125;████$&#123;AnsiColor.BLACK&#125;██████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████$&#123;AnsiColor.BLACK&#125;██████$&#123;AnsiColor.BRIGHT_BLUE&#125;████$&#123;AnsiColor.BLACK&#125;██████$&#123;AnsiColor.BRIGHT_BLUE&#125;████████████</span><br><span class="line">████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">$&#123;AnsiColor.BRIGHT_BLUE&#125;:: Meow :: Running Spring Boot $&#123;spring-boot.version&#125; :: \ö/$&#123;AnsiColor.BLACK&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://devops.datenkollektiv.de/banner.txt/index.html" target="_blank" rel="noopener">Banner 生成器</a></li>
<li><a href="https://github.com/PierreBesson/generator-jhipster-banner/blob/master/generators/app/templates/_banner.txt" target="_blank" rel="noopener">jhipster</a></li>
<li><a href="https://github.com/snicoll-demos/spring-boot-4tw-uni/blob/master/spring-boot-4tw-web/src/main/resources/banner.txt" target="_blank" rel="noopener">彩虹猫</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>获取FlashMap的3种方法</title>
    <url>/posts/How_to_get_FlashMap_in_Spring_MVC.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>FlashMap</code> 是传递重定向参数的时候要用到的一个类。<br><a id="more"></a></p>
<h1 id="getAttributes-笨重-不推荐"><a href="#getAttributes-笨重-不推荐" class="headerlink" title="getAttributes(笨重, 不推荐)"></a>getAttributes(笨重, 不推荐)</h1><p>在源码 <code>DispatcherServlet</code> 的 <code>doService</code> 方法中注入了 <code>FlashMap</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.DispatcherServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.INPUT_FLASH_MAP"</span>, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.OUTPUT_FLASH_MAP"</span>, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.FLASH_MAP_MANAGER"</span>, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以我们可以使用 <code>getAttributes</code> 获取<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/redirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlashMap redirectAttributes = (FlashMap) ((ServletRequestAttributes) (RequestContextHolder.getRequestAttributes()))</span><br><span class="line">                .getRequest().getAttribute(<span class="string">"org.springframework.web.servlet.DispatcherServlet.OUTPUT_FLASH_MAP"</span>);</span><br><span class="line">        redirectAttributes.put(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/demo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"view.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="通过-RequestContextUtils-获取"><a href="#通过-RequestContextUtils-获取" class="headerlink" title="通过 RequestContextUtils 获取"></a>通过 RequestContextUtils 获取</h1><p><code>Spring</code>早已将上面的获取代码封装到 <code>RequestContextUtils</code> 中<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/redirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        FlashMap redirectAttributes = RequestContextUtils.getOutputFlashMap(request);</span><br><span class="line">        redirectAttributes.put(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/demo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"view.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.support.RequestContextUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContextUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FlashMap <span class="title">getOutputFlashMap</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Spring-MVC-在-Controller-注入形参"><a href="#Spring-MVC-在-Controller-注入形参" class="headerlink" title="Spring MVC 在 Controller 注入形参"></a>Spring MVC 在 Controller 注入形参</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/redirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">(RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 和上面一样, 保存到 OUTPUT_FLASH_MAP 中</span></span><br><span class="line">        redirectAttributes.addFlashAttribute(<span class="string">"key1"</span>, <span class="string">"value2"</span>);</span><br><span class="line">        <span class="comment">// 不保存到 flashMap 中, 拼接到 url 中</span></span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/demo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"view.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot在Tomcat上使用</title>
    <url>/posts/deploy_Spring_Boot_project_with_Tomcat.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般的教程都是直接运行<code>main</code>方法, 看似脱离了<code>Tomcat</code>运行<br>实际上是使用的是内嵌的<code>Tomcat</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>而且打包出来的是<code>jar</code>包, 虽然可以直接运行, 但是如果想放在外部的<code>Tomcat</code>下, 就不太好了。</p>
<h1 id="解决方案是"><a href="#解决方案是" class="headerlink" title="解决方案是"></a>解决方案是</h1><ol>
<li><p>继承 <code>SpringBootServletInitializer</code> 并重写 <code>configure</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可有可无的方法, 之后有解释</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的 <code>pom.xml</code> 设置 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code>, 注意, 多模块项目只需要在该模块的 <code>pom.xml</code> 设置即可</p>
</li>
<li><p>添加<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat/" target="_blank" rel="noopener">spring-boot-starter-tomcat依赖</a>, 并设置 <code>&lt;scope&gt;provided&lt;/scope&gt;</code> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打<code>war包</code>部署到<code>Tomcat</code></p>
</li>
</ol>
<h1 id="为什么要-继承SpringBootServletInitializer"><a href="#为什么要-继承SpringBootServletInitializer" class="headerlink" title="为什么要 继承SpringBootServletInitializer ?"></a>为什么要 继承SpringBootServletInitializer ?</h1><p><img src="https://yuml.me/diagram/nofunky/class/[WebApplicationInitializer]^-[SpringBootServletInitializer],[SpringBootServletInitializer]^-[我的启动类]" alt="继承树 "><br>首先明确一点, <code>Spring Boot</code>只是许多个<code>Spring</code>项目和其他项目整合起来, 并不是一个额外的项目, 你可以理解成一个封装了<code>Spring</code>、<code>SpringMVC</code>等项目的新项目。<br>那么, <code>Spring</code>有入口<code>ContextLoaderListener</code>、 <code>Spring MVC</code>有入口<code>DispatcherServlet</code>。那<code>Spring Boot</code>的入口当然就是<code>SpringBootServletInitializer</code>。<br>(当然如果你不用<code>war包</code>可以忽略这段话, 也不用看这篇文章)</p>
<p>看到熟悉的<code>ServletInitializer</code>, 这是<a href="https://ahaochan.github.io/Java/JavaWeb/JSP/Servlet3.0新特性.html#通过ServletContainerInitializer注册" target="_blank" rel="noopener">Servlet3.0新特性</a>,  <code>Tomcat</code>会自动查找并运行实现了 <code>ServletContainerInitializer</code> 接口的类。<br>但是能自动加载的是 <code>ServletContainerInitializer</code> 及其子类, 和<code>SpringBootServletInitializer</code>及其父类<code>WebApplicationInitializer</code><br>可是丝毫没有联系的, 能想到的就是有<strong>另一个类</strong>连接了这两个类。<br>这个类就是<code>SpringServletContainerInitializer</code>, 它会去加载所有的<code>WebApplicationInitializer</code>及其子类<code>SpringBootServletInitializer</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.SpringServletContainerInitializer</span></span><br><span class="line"><span class="meta">@HandlesTypes</span>(WebApplicationInitializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// 继承了 <span class="title">ServletContainerInitializer</span> , 所以能自动加载</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 1. 扫描HandlesTypes注解中的类或它的子类, 注入Set集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> LinkedList&lt;WebApplicationInitializer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; waiClass : webAppInitializerClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!waiClass.isInterface() &amp;&amp; !Modifier.isAbstract(waiClass.getModifiers()) &amp;&amp;</span><br><span class="line">                    WebApplicationInitializer<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">waiClass</span>)) </span>&#123;</span><br><span class="line">                initializers.add((WebApplicationInitializer) waiClass.newInstance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AnnotationAwareOrderComparator.sort(initializers);</span><br><span class="line">        <span class="keyword">for</span> (WebApplicationInitializer initializer : initializers) &#123;</span><br><span class="line">            <span class="comment">// 2. 核心方法, 调用WebApplicationInitializer的onStartup方法</span></span><br><span class="line">            initializer.onStartup(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>HandlesTypes</code> 注解中的 <code>WebApplicationInitializer</code> 被注入到 <code>Set集合</code>中, 然后调用 <code>WebApplicationInitializer</code>的<code>onStartup</code>方法。<br>至此, <code>SpringBootServletInitializer</code> 已经能随着<code>Tomcat</code>的启动而启动了。</p>
<h1 id="为什么不用重写configure方法"><a href="#为什么不用重写configure方法" class="headerlink" title="为什么不用重写configure方法"></a>为什么不用重写configure方法</h1><p>很多网上的文章, 都说要重写 <code>configure方法</code>, 但是这对我上面那个<code>Hello world</code>例子是不需要的, 从源码中可以窥视一二。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.support.SpringBootServletInitializer</span></span><br><span class="line"><span class="comment">// 实现了 WebApplicationInitializer 接口, 所以也能间接的自动加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 入口</span></span><br><span class="line">        WebApplicationContext rootAppContext = createRootApplicationContext(servletContext);</span><br><span class="line">        <span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 由于 application context 已被初始化，因此无操作</span></span><br><span class="line">            <span class="comment">// 这里加载了 ContextLoaderListener , 所以也不能自己再去实现 ContextLoaderListener</span></span><br><span class="line">            servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建 ApplicationContext</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计模式 之 建造器Builder模式</span></span><br><span class="line">        SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">        builder.main(getClass());</span><br><span class="line">        ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">            servletContext.setAttribute(</span><br><span class="line">                    WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">            builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">        &#125;</span><br><span class="line">        builder.initializers(</span><br><span class="line">                <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">        builder.listeners(<span class="keyword">new</span> ServletContextApplicationListener(servletContext));</span><br><span class="line">        builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 调用 configure 方法, 默认不操作builder</span></span><br><span class="line">        builder = configure(builder);</span><br><span class="line">        SpringApplication application = builder.build();</span><br><span class="line">        <span class="comment">// 如果没有重写 configure 方法给 builder 添加 source </span></span><br><span class="line">        <span class="comment">// 即 application 的 source(Set集合) 为空</span></span><br><span class="line">        <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">                .findAnnotation(getClass(), Configuration<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 且继承 SpringBootServletInitializer 自身的子类添加了 Configuration 注解</span></span><br><span class="line">            <span class="comment">// 因为 SpringBootApplication 注解继承了 Configuration 注解</span></span><br><span class="line">            <span class="comment">// 所以不用重写 configure方法 也可以加入 source 中</span></span><br><span class="line">            application.getSources().add(getClass());</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">                <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">                        + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">        <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">            application.getSources().add(ErrorPageFilterConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> run(application);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认不操作builder</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>Configuration</code>注解的<strong>类</strong>可以注入 <code>source</code> 发现, 这个 <code>source</code> 就是存储<code>Spring</code>配置的, 当然, <strong>不是<code>xml</code></strong>, 而是<code>java</code>配置。<br>也就是说</p>
<ol>
<li>只有一个<code>Java</code>配置类, 则直接继承 <code>SpringBootServletInitializer</code> 即可。</li>
<li>如果有多个<code>Java</code>配置类, 则继承 <code>SpringBootServletInitializer</code> 之外，还要重写 <code>configure</code> 方法, 将配置类都注入进去, 包括 <code>SpringBootServletInitializer</code> 的子类。</li>
</ol>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Tomcat</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat部署外部应用最佳实践</title>
    <url>/posts/Best_Practices_of_deploys_Outside_Application_with_Tomcat.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Tomcat有一个扩展点, 可以配置环境变量<br><code>Tomcat 8.5\bin\setenv.sh</code>, 如果没有可以手动创建。</p>
<ul>
<li>Windows用 <code>bat</code> 后缀</li>
<li>Linux用 <code>sh</code> 后缀</li>
</ul>
<a id="more"></a>
<h1 id="配置setenv-bat"><a href="#配置setenv-bat" class="headerlink" title="配置setenv.bat"></a>配置setenv.bat</h1><p>在 <code>Tomcat\bin</code> 目录下新建 <code>setenv.bat</code>文件。<br>输入如下配置<br>Windows<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set JAVA_HOME=D:\Java\jdk1.8.0_112(替换为jdk的路径)</span><br><span class="line">set JAVA_OPTS=-Xmx512m</span><br><span class="line">set TITLE=自定义的标题</span><br></pre></td></tr></table></figure></p>
<p>Linux<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/opt/jdk/jdk1.8.0_181</span><br><span class="line">JAVA_OPTS=-Xmx512m</span><br><span class="line">CATALINA_PID=$CATALINA_HOME/bin/CATALINA_PID # shutdown.sh -force 必须参数</span><br></pre></td></tr></table></figure></p>
<h1 id="配置ahao-xml"><a href="#配置ahao-xml" class="headerlink" title="配置ahao.xml"></a>配置ahao.xml</h1><p>在 <code>Tomcat\conf\Catalina\localhost</code> 目录下(没有则创建), 创建 <code>ahao.xml</code> 文件。<br>输入如下配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"F:\ahao"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>docBase</code> 是 <code>war</code> 包的解压路径。<br>通俗讲, 就是包含子目录为 <code>WEB-INF</code> 、 <code>META-INF</code> 的一个目录。</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>打开 <code>Tomcat\bin\startup.bat</code> 即可。<br>输入 <code>http://localhost:8080/ahao</code> 。<br>这里的项目名就是之前配置的 <code>xml</code> 的名称。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在catalina.sh文件中会自动载入环境变量<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -r "$CATALINA_BASE/bin/setenv.sh" ]; then</span><br><span class="line">  . "$CATALINA_BASE/bin/setenv.sh"</span><br><span class="line">elif [ -r "$CATALINA_HOME/bin/setenv.sh" ]; then</span><br><span class="line">  . "$CATALINA_HOME/bin/setenv.sh"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat部署web项目的方法</title>
    <url>/posts/The_ways_of_deploy_Web_project_with_Tomcat.html</url>
    <content><![CDATA[<h1 id="内部应用"><a href="#内部应用" class="headerlink" title="内部应用"></a>内部应用</h1><p>直接把war包复制粘贴到<code>Tomcat 8.5/webapps</code>目录下, 然后执行<code>Tomcat 8.5/bin/startup.bat</code>即可。</p>
<a id="more"></a>
<h1 id="外部应用"><a href="#外部应用" class="headerlink" title="外部应用"></a>外部应用</h1><ul>
<li>docBase: 项目文件夹实际的位置, 子目录为<code>WEB-INF</code>、<code>META-INF</code>的一个目录。</li>
<li>path: 虚拟路径, 浏览器访问本项目的路径, 上面例子为<code>http://本机地址:端口/hello</code></li>
</ul>
<h2 id="配置conf-server-xml-官方不推荐"><a href="#配置conf-server-xml-官方不推荐" class="headerlink" title="配置conf/server.xml(官方不推荐)"></a>配置conf/server.xml(官方不推荐)</h2><p>打开<code>Tomcat 8.5/conf/server.xml</code>, 在<code>&lt;Host&gt;</code>标签插入<code>&lt;Context&gt;</code>标签。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;Context path="url路径名"　docBase="实际项目在磁盘中地址" /&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">docBase</span>=<span class="string">"war包解压路径"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置conf-context-xml"><a href="#配置conf-context-xml" class="headerlink" title="配置conf/context.xml"></a>配置conf/context.xml</h2><p>打开<code>conf/context.xml</code>可以看到里面已经配置了一个<code>Context</code>.<br>如果一个<code>Tomcat</code>只配置一个<code>Web</code>应用程序, 则可以直接修改这里的代码.<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>$&#123;catalina.base&#125;/conf/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">docBase</span>=<span class="string">"war包解压路径"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>$&#123;catalina.base&#125;/conf/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置conf-enginename-hostname-test-xml-推荐"><a href="#配置conf-enginename-hostname-test-xml-推荐" class="headerlink" title="配置conf/enginename/hostname/test.xml(推荐)"></a>配置conf/enginename/hostname/test.xml(推荐)</h2><p>其实就是将<code>conf/server.xml</code>翻译一下。</p>
<p>打开<code>Tomcat 8.5/conf/Catalina/localhost</code>, 没有则自己创建目录, 新建一个<code>test.xml</code>文件。<br>这里的<code>Catalina</code>对应上面的<code>Engine</code>名, <code>localhost</code>对应上面的<code>Host</code>名.<br>访问路径为<code>http://localhost:8080/test</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"war包解压路径"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/wjx85840948/article/details/6749964" target="_blank" rel="noopener">tomcat部署web项目的3种方法</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>maven打包war包时出现了pom不存在的jar包</title>
    <url>/posts/maven_will_import_WEB-INF_lib_jar_to_war.html</url>
    <content><![CDATA[<p>标题是有点绕。<br>这几天在搞一个 <code>SpringBoot</code> 的短信项目, 在打包 <code>war</code> 包的时候,<br>发现war包中的 <code>commons-lang</code> 包有两个版本, 一个 <code>1.0.1</code> , 一个 <code>2.6</code> 。<br>在 <code>pom.xml</code> 中我只导入了 <code>2.6</code> 的版本, 那么 <code>1.0.1</code> 的jar包是从哪来的呢?<br><a id="more"></a></p>
<h1 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h1><p><code>maven</code> 的 <code>package</code> 命令会把 <code>WEB-INF/lib</code> 中的jar包也打包进war包中。</p>
<h1 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h1><ol>
<li><p>首先先看maven的依赖, 使用的是IDEA。<br>点击 <code>View -&gt; Tool Windows -&gt; Maven Projects</code>, 在右边出现的窗口, 点击 <code>Show Dependencies</code>。<br>点击<code>Alt</code>可以打开放大镜。<br>并没有找到<code>commons-lang 1.0.1</code>。</p>
</li>
<li><p>接下来把<code>pom.xml</code>的依赖全部注释掉, 只留下 <code>spring-boot-starter-web</code><br>运行<code>Hello world</code> 成功。<br>打包, 还是发现了<code>commons-lang 1.0.1</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手动排除<code>commons-lang</code>, 打包, 还是有<code>commons-lang 1.0.1</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发现war包的<code>commons-lang 1.0.1</code>是在<code>WEB-INF/lib</code>下的<br>于是在<code>src/main/webapp/WEB-INF/lib</code>下, 果然发现了<code>commons-lang 1.0.1</code>的包</p>
</li>
</ol>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><code>maven</code> 的 <code>package</code> 命令会把 <code>WEB-INF/lib</code> 中的jar包也会打包进war包中。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常捕捉顺序</title>
    <url>/posts/The_capture_order_of_Java_Exception.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直对异常捕捉都是<code>e.printStackTrace()</code>就完事了, 突然对异常捕捉顺序很好奇, 就做了个测试, 直接看代码。</p>
<a id="more"></a>
<h1 id="从小到大捕捉"><a href="#从小到大捕捉" class="headerlink" title="从小到大捕捉"></a>从小到大捕捉</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件没找到"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">            <span class="comment">// 结果输出 ` FileNotFoundException `</span></span><br><span class="line">            System.out.println(<span class="string">"FileNotFoundException "</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">// 不执行, 已被FileNotFoundException捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"IOException"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 不执行, 已被FileNotFoundException捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"Exception "</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            <span class="comment">// 不执行, 已被FileNotFoundException捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"Throwable "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="从大到小捕捉"><a href="#从大到小捕捉" class="headerlink" title="从大到小捕捉"></a>从大到小捕捉</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件没找到"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Throwable "</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">            <span class="comment">// 编译错误, 提示异常已被 Throwable 捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"FileNotFoundException "</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">// 编译错误, 提示异常已被 Throwable 捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"IOException"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 编译错误, 提示异常已被 Throwable 捕捉</span></span><br><span class="line">            System.out.println(<span class="string">"Exception "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Java异常捕捉顺序是</p>
<ol>
<li>从上到下</li>
<li>从小到大</li>
</ol>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>解析String为数字用valueOf还是parseXxx?</title>
    <url>/posts/valueOf_method_and_parseXxx_method.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>findBuds真是一个好插件, 找到了许多平时都不知道的高危bug。<br>在我解析字符串时<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Long.valueOf(key == <span class="keyword">null</span> ? <span class="string">"0"</span> : key.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>给我爆了这个警告<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Boxing/unboxing to parse a primitive</span><br><span class="line">A boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.</span><br></pre></td></tr></table></figure></p>
<p>意思是<code>一个包装类由字符串创建, 只是为了获取基本数据类型的值, 调用parseXxx更有效</code>。</p>
<h1 id="两个方法的返回值不同"><a href="#两个方法的返回值不同" class="headerlink" title="两个方法的返回值不同"></a>两个方法的返回值不同</h1><p>jdk7提供的自动拆装箱语法糖是很不错的。<br>但是过份依赖语法糖就会出现一些 <code>常识性</code> 问题。<br>两个方法如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static long parseLong(String s);</span><br><span class="line">public static Long valueOf(String s);</span><br></pre></td></tr></table></figure></p>
<p>先说结论</p>
<ul>
<li>要获取基本数据类型就使用 <code>parseXxx</code> </li>
<li>要获取包装数据类型就使用 <code>valueOf</code></li>
</ul>
<p>看返回类型就知道了, 滥用会导致一些性能问题, 毕竟拆装箱多了一步操作。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>我们先看 <code>valueOf</code> 的源码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Long</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Long</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 parseLong 方法解析字符串</span></span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(parseLong(s, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// 从缓存中获取</span></span><br><span class="line">            <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很明显 <code>valueOf</code> 是调用了 <code>parseLong</code> 方法的。<br>所以这个解析字符串的实现是交由 <code>parseLong</code> 完成的。<br>然后再从 <code>缓存</code> 中获取, 缓存中没有这个值的话, 再去 <code>new</code> 一个。</p>
<p>再看 <code>parseLong</code> 方法。<br>在此之前, 先复习下进制转换的算法。<br><img src="https://latex.codecogs.com/svg.latex?abc_{16}=10*16^2+11*16^1+12*16^0=2748" alt="abc_16=10*16^2+11*16^1+12*16^0=2748"><br>下面的算法公式为<br><img src="https://latex.codecogs.com/svg.latex?abc_{16}=-%28%28%28-10*16%29-11%29*16-12%29=2748" alt="abc_16=-(((-10*16)-11)*16-12)=2748"><br>这项算法是<a href="https://zh.wikipedia.org/zh-hans/%E7%A7%A6%E4%B9%9D%E9%9F%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">秦九韶公式</a><br>简单的说, 就是降低了多项式的计算复杂度(叹服古人的智慧, 居然应用到计算机领域)</p>
<p>为了避免溢出, 是基于 <code>负数</code> 进行运算的。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Long</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Long</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parseLong</span><span class="params">(String s, <span class="keyword">int</span> radix)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">        <span class="comment">// 省略抛出异常的代码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>; <span class="comment">// 结果值</span></span><br><span class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>; <span class="comment">// 是否为负数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, len = s.length(); <span class="comment">// i 为字符串下标, len为字符串长度</span></span><br><span class="line">        <span class="keyword">long</span> limit = -Long.MAX_VALUE; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">long</span> multmin; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">int</span> digit; <span class="comment">// 进制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第一个字符</span></span><br><span class="line">        <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (firstChar &lt; <span class="string">'0'</span>) &#123; <span class="comment">// 非数字和字母</span></span><br><span class="line">            <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123; <span class="comment">// 判断是否为负号</span></span><br><span class="line">                negative = <span class="keyword">true</span>; <span class="comment">// 标记为负数</span></span><br><span class="line">                limit = Long.MIN_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar != <span class="string">'+'</span>)&#123;</span><br><span class="line">                <span class="comment">// 不是数字, 不是字母, 不是负号, 不是正号, 那肯定不是数字</span></span><br><span class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 字符串长度为1, 则只有一个符号, 不能解析</span></span><br><span class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</span><br><span class="line">            &#125;</span><br><span class="line">            i++; <span class="comment">// 下标移到下一个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        multmin = limit / radix; <span class="comment">// 设定不同进制下的极限值</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class="line">            <span class="comment">// 负数运算避免大于MAX_VALUE发生溢出</span></span><br><span class="line">            digit = Character.digit(s.charAt(i++),radix); <span class="comment">// 获取radix进制下的值, 5=&gt;5, A=&gt;10</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 秦九韶公式的核心算法</span></span><br><span class="line">            result *= radix;</span><br><span class="line">            result -= digit;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最后把负数转为正数(或者负数转为正数)</span></span><br><span class="line">        <span class="keyword">return</span> negative ? result : -result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC返回json乱码</title>
    <url>/posts/how_to_correctly_parsing_json_in_Spring_MVC.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>json又双叒叕返回乱码了!<br>乱码一般都是编码问题，比如一个字符串<code>你好世界</code>, 用<code>GBK</code>编码后, 再用<code>UTF-8</code>解码, 就会出现乱码问题。<br><a id="more"></a></p>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好世界"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用CharacterEncodingFilter过滤器-没用"><a href="#使用CharacterEncodingFilter过滤器-没用" class="headerlink" title="使用CharacterEncodingFilter过滤器(没用)"></a>使用CharacterEncodingFilter过滤器(没用)</h1><p>在 web.xml 中加入<code>CharacterEncodingFilter</code>过滤器, 对request和response进行编码转换。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>源码很简单, 就是调用<code>setCharacterEncoding</code>方法设置编码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String encoding = getEncoding();</span><br><span class="line">		<span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">				request.setCharacterEncoding(encoding);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">				response.setCharacterEncoding(encoding);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		filterChain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CV大法重写StringHttpMessageConverter类"><a href="#CV大法重写StringHttpMessageConverter类" class="headerlink" title="CV大法重写StringHttpMessageConverter类"></a>CV大法重写StringHttpMessageConverter类</h1><p>行吧, 自己解决不了, 上stackoverflow看看,<br>在使用<code>&lt;mvc:annotation-driven /&gt;</code>自动驱动的前提下,<br>发现<code>@ResponseBody</code>返回值是<code>String</code>类型的话。<br>会调用<code>StringHttpMessageConverter</code>这个类进行转换。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"ISO-8859-1"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;Charset&gt; availableCharsets;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> writeAcceptCharset = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认是<code>ISO-8859-1</code>编码, 而且是<code>final</code>修饰的。这就意味这不能继承这个方法了。<br>那就用CV大法吧。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;Charset&gt; availableCharsets;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> writeAcceptCharset = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>并且在<code>&lt;mvc:annotation-driven /&gt;</code>内注入这个Bean<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.chuanliu.platform.activity.basic.converter.MyStringHttpMessageConverter"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="使用produces属性完成"><a href="#使用produces属性完成" class="headerlink" title="使用produces属性完成"></a>使用produces属性完成</h1><p>使用CV大法是很不好的习惯,<br>【<a href="http://blog.csdn.net/lsx1984/article/details/8803296" target="_blank" rel="noopener">解决spring-mvc @responseBody注解返回json 乱码问题</a>】这篇文章提出可以使用produces属性完成<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/test"</span>, produces=<span class="string">"text/html;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好世界"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>省了一大堆配置, 但还是要在每个<code>@ResponseBody</code>方法使用CV大法, 写入<code>produces=&quot;text/html;charset=UTF-8&quot;</code>。</p>
<h1 id="直接返回对象"><a href="#直接返回对象" class="headerlink" title="直接返回对象"></a>直接返回对象</h1><p>【<a href="http://josh-persistence.iteye.com/blog/2085015" target="_blank" rel="noopener">（二）Java 中文乱码学习 与Spring @ResponseBody中的乱码 - Spring @ResponseBody中的乱码</a>】中提到<br>在使用<code>&lt;mvc:annotation-driven /&gt;</code>自动驱动的前提下,<br>如果直接返回String类型, 则会调用<code>StringHttpMessageConverter</code>。<br>如果直接返回对象类型, 则会调用<code>MappingJackson2HttpMessageConverter</code>。</p>
<p>在<code>MappingJackson2HttpMessageConverter</code>的父类<code>AbstractJackson2HttpMessageConverter</code>中。<br>可以看到使用了<code>UTF-8</code>编码。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractGenericHttpMessageConverter</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/lsx1984/article/details/8803296" target="_blank" rel="noopener">解决spring-mvc @responseBody注解返回json 乱码问题</a></li>
<li><a href="http://josh-persistence.iteye.com/blog/2085015" target="_blank" rel="noopener">（二）Java 中文乱码学习 与Spring @ResponseBody中的乱码 - Spring @ResponseBody中的乱码</a>中提到</li>
<li><a href="https://my.oschina.net/alexgaoyh/blog/316314" target="_blank" rel="noopener">springmvc 4.x 处理json 数据时中文乱码</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>trim为什么失效了</title>
    <url>/posts/Why_did_trim_fail_execute.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以为<code>String#trim()</code>是去掉字符串两边空格的。但是以下代码却与预期不同。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"测试:["</span>+<span class="string">"820000    "</span>.trim()+<span class="string">"]"</span>); <span class="comment">// ASCII码 160 的空格</span></span><br><span class="line">System.out.println(<span class="string">"测试:["</span>+<span class="string">"　市辖区"</span>+<span class="string">"]"</span>); <span class="comment">// ASCII码 12288 的空格</span></span><br><span class="line"><span class="comment">// 测试:[820000    ]</span></span><br><span class="line"><span class="comment">// 测试:[　市辖区]</span></span><br></pre></td></tr></table></figure></p>
<p>这段数字加空格是我从<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201703/t20170310_1471429.html" target="_blank" rel="noopener">最新县及县以上行政区划代码</a>爬取的。</p>
<a id="more"></a>
<h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><p>很明显, 算法就是</p>
<ol>
<li>从前往后, 找到第一个非空格的字符</li>
<li>从后往前, 找到第一个非空格的字符</li>
<li>使用substring截取字符串</li>
<li>substring使用构造复制函数进行拷贝<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">            : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>明显没毛病, 要我写我也差不多是这样写。</p>
<h1 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h1><p>给<code>trim</code>加上断点, 保险起见, 每条语句加上断点。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">·    <span class="keyword">int</span> len = value.length;</span><br><span class="line">·    <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">·    <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line">·</span><br><span class="line">·    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">·        st++;</span><br><span class="line">·    &#125;</span><br><span class="line">·    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">·        len--;</span><br><span class="line">·    &#125;</span><br><span class="line">·    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调试结果如下, 代码走到第9行, 进不去这个<code>while</code>。<br>那明显是<code>(val[len - 1] &lt;= &#39; &#39;)</code>出了问题。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len (slot_1) = 10</span><br><span class="line">st (slot_2) = 0</span><br><span class="line">value = &#123;</span><br><span class="line">    0 = &apos;8&apos; 56</span><br><span class="line">    1 = &apos;2&apos; 50</span><br><span class="line">    2 = &apos;0&apos; 48</span><br><span class="line">    3 = &apos;0&apos; 48</span><br><span class="line">    4 = &apos;0&apos; 48</span><br><span class="line">    5 = &apos;0&apos; 48</span><br><span class="line">    6 = &apos; &apos; 160</span><br><span class="line">    7 = &apos; &apos; 160</span><br><span class="line">    8 = &apos; &apos; 160</span><br><span class="line">    9 = &apos; &apos; 160</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候注意<code>value[9]</code>的ASCII码为<code>160</code>。<br>查阅<a href="http://ascii.911cha.com/" target="_blank" rel="noopener">ASCII码表</a>可以知道, 空格的ASCII码应该为<code>32</code>。<br>可是这明显是空格啊! 为什么是160呢!</p>
<h1 id="为什么眼见不为实"><a href="#为什么眼见不为实" class="headerlink" title="为什么眼见不为实"></a>为什么眼见不为实</h1><p>web中有一个常识是, 要使用连续空格, 必须使用<code>&amp;nbsp;</code>。<br>如果只按住<code>space</code>输入空格的话, 会被压缩为<code>一个</code>空格。</p>
<p>很明显, 这个<code>&amp;nbsp;</code>的ASCII码就是<code>160</code>。<br>而<code>trim</code>方法只判断了ASCII码为<code>32</code>的空格。<br>就算是apache的<code>StringUtils#trim()</code>, 底层也是调用<code>String#trim()</code>的。</p>
<p>后来还发现了一个ASCII码为<code>12288</code>的空格, 一个汉字宽度的空格。</p>
<h1 id="自己动手丰衣足食"><a href="#自己动手丰衣足食" class="headerlink" title="自己动手丰衣足食"></a>自己动手丰衣足食</h1><p>参考源码, 进行改造<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHelper</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去除字符串首尾空格</span></span><br><span class="line"><span class="comment">     * 32 为 普通空格</span></span><br><span class="line"><span class="comment">     * 160 为 html的空格 &amp;nbsp;</span></span><br><span class="line"><span class="comment">     * 12288 为 一个汉字宽度的空格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trim</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] val = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> len = val.length;</span><br><span class="line">        <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp;</span><br><span class="line">                StringUtils.equalsAny(val[st] + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">32</span>) + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">160</span>) + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">12288</span>) + <span class="string">""</span>)) &#123;</span><br><span class="line">            st++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp;</span><br><span class="line">                StringUtils.equalsAny(val[len - <span class="number">1</span>] + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">32</span>) + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">160</span>) + <span class="string">""</span>,</span><br><span class="line">                        (<span class="keyword">char</span>) (<span class="number">12288</span>) + <span class="string">""</span>)) &#123;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; val.length)) ? str.substring(st, len) : str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>如何高效的获取一个数字的首位数字</title>
    <url>/posts/How_to_efficiently_get_the_first_digit_of_a_number.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都是通过转化为String的方式来获得首位数字, 但是直觉告诉我, 这个肯定不是最高效的。<br>在stackoverflow上找到了这篇文章。虽然看标题是C#的, 但是算法没有语言之分。同样适用于java<br><a href="https://stackoverflow.com/questions/701322" target="_blank" rel="noopener">How can you get the first digit in an int (C#)?</a></p>
<a id="more"></a>
<h1 id="解法-效率从低到高"><a href="#解法-效率从低到高" class="headerlink" title="解法(效率从低到高)"></a>解法(效率从低到高)</h1><h2 id="转化为字符串"><a href="#转化为字符串" class="headerlink" title="转化为字符串"></a>转化为字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> firstDigit = String.valueOf(num).charAt(<span class="number">0</span>) - <span class="string">'0'</span>;</span><br></pre></td></tr></table></figure>
<p>Result: <code>9,165,089 ticks</code></p>
<h2 id="循环除10"><a href="#循环除10" class="headerlink" title="循环除10"></a>循环除10</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(num &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Results: <code>6,001,570 ticks</code></p>
<h2 id="暴力if"><a href="#暴力if" class="headerlink" title="暴力if"></a>暴力if</h2><p>因为int的取值范围有限, 所以可以使用这种暴力枚举的方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> firstdigit;</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">     firstdigit = num;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">100</span>)</span><br><span class="line">     firstdigit = num / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">10000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">100000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">10000000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">100000000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">1000000000</span>)</span><br><span class="line">     firstdigit = num / <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     firstdigit = num / <span class="number">1000000000</span>;</span><br></pre></td></tr></table></figure></p>
<p>Results: <code>1,421,659 ticks</code></p>
<h2 id="二分if"><a href="#二分if" class="headerlink" title="二分if"></a>二分if</h2><p>因为int的取值范围有限, 所以可以使用这种暴力枚举的方法。<br>对上面的暴力枚举使用二分法进行优化。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">100000000</span>) num /= <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">10000</span>) num /= <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">100</span>) num /= <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">10</span>) num /= <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<p>Results: <code>1,399,788 ticks</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/701322" target="_blank" rel="noopener">How can you get the first digit in an int (C#)?</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么jQuery选择器只返回一个元素?</title>
    <url>/posts/why_jQuery_selector_return_only_one_element.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>稍有常识的人都知道, 如果我们使用形如<code>$(&#39;p&#39;)</code>、<code>$(&#39;.myclass&#39;)</code>之类的选择器，会返回一个数组。<br>但今天在<a href="https://www.bing.com" target="_blank" rel="noopener">必应</a>中进行控制台js调试时, 却发现不管怎么用, 都只返回<code>第一个</code>元素。</p>
<a id="more"></a>
<h1 id="Chrome的坑"><a href="#Chrome的坑" class="headerlink" title="Chrome的坑"></a>Chrome的坑</h1><p><a href="https://stackoverflow.com/questions/44769950/why-does-jquery-class-selector-only-return-one-element" target="_blank" rel="noopener">Why does jQuery class selector only return one element?</a>提到<br>该网页根本没有引入jQuery。在F12控制台中, <code>$</code>其实是<code>debugger</code>调试器的快捷方式<code>document.querySelector()</code>。<br>如果想要获取所有元素的话, 使用<code>$$(.myclass)</code>即可。</p>
<h1 id="检查页面是否引入jQuery"><a href="#检查页面是否引入jQuery" class="headerlink" title="检查页面是否引入jQuery"></a>检查页面是否引入jQuery</h1><p>使用<code>console.log($)</code>调试。<br>如果引入了jQuery, 则输出<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> n.fn.init(a,b)&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果没有引入jQuery, 则输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function $(selector, [startNode]) &#123; [Command Line API] &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://stackoverflow.com/questions/44769950/why-does-jquery-class-selector-only-return-one-element" target="_blank" rel="noopener">Why does jQuery class selector only return one element?</a>提到</li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/console/expressions" target="_blank" rel="noopener">google developers</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>康托展开</title>
    <url>/posts/cantor_algorithm.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>康托展开是一个全排列到一个自然数的双射, 常用于构建哈希表时的空间压缩,  康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。<br><a id="more"></a></p>
<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><p><code>3 5 7 4 1 2 9 6 8</code>展开为<code>98884</code>。<br><code>98884 = 2*8!+3*7!+4*6!+2*5!+0*4!+0*3!+2*2!+0*1!+0*0!</code><br>排列的第一位是3，比3小的数有两个，以这样的数开始的排列有8!个，因此第一项为2<em>8!<br>排列的第二位是5，比5小的数有1、2、3、4，由于3已经出现，因此共有3个比5小的数，这样的排列有7!个，因此第二项为3</em>7!<br>以此类推，直至0*0!</p>
<h1 id="逆运算"><a href="#逆运算" class="headerlink" title="逆运算"></a>逆运算</h1><p>如n=5,x=96时：<br>首先用96-1得到95，说明x之前有95个排列.(将此数本身减去1)<br>用95去除4! 得到3余23，说明有3个数比第1位小，所以第一位是4.<br>用23去除3! 得到3余5，说明有3个数比第2位小，所以是4，但是4已出现过，因此是5.<br>用5去除2!得到2余1，类似地，这一位是3.<br>用1去除1!得到1余0，这一位是2.<br>最后一位只能是1.<br>所以这个数是45321.</p>
<h1 id="java-代码实现"><a href="#java-代码实现" class="headerlink" title="java 代码实现"></a>java 代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] factorial = <span class="keyword">new</span> Integer[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        factorial[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        factorial[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, len = factorial.length; i &lt; len; i++)&#123;</span><br><span class="line">            factorial[i] = factorial[i-<span class="number">1</span>]*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将cantor逆康托展开, 返回一个全排列</span></span><br><span class="line"><span class="comment">     * 如[1,2,3],1</span></span><br><span class="line"><span class="comment">     * 如[3,2,1],6</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sequence 全排列中的元素序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cantor 康拓展开值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 全排列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] deCantor(<span class="keyword">int</span>[] sequence, <span class="keyword">int</span> cantor)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = sequence.length;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"确保"</span>+len+<span class="string">"不大于10"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cantor&lt;=<span class="number">0</span> || cantor&gt;factorial[len])&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"确保"</span>+cantor+<span class="string">"在[0,"</span>+factorial[len]+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(sequence);</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">boolean</span>[] mark = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line"></span><br><span class="line">        cantor--;</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(len!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = cantor/factorial[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mark[i])&#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num[idx++] = sequence[k];</span><br><span class="line">            mark[k] = <span class="keyword">true</span>;</span><br><span class="line">            cantor %= factorial[len--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = mark.length; i&lt;k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!mark[i])&#123;</span><br><span class="line">                num[k-<span class="number">1</span>] = sequence[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回chars[]在全排列中是第几大的排列</span></span><br><span class="line"><span class="comment">     * 如[1,2,3]返回1</span></span><br><span class="line"><span class="comment">     * 如[3,2,1]返回6</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chars 全排列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 康托展开的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">enCantor</span><span class="params">(<span class="keyword">int</span>... chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = chars.length;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"确保"</span>+len+<span class="string">"不大于10"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] low = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(chars[j]&lt;chars[i] &amp;&amp; j&gt;i)&#123;</span><br><span class="line">                    low[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            num += low[i] == <span class="number">0</span> ? <span class="number">0</span> : low[i] * factorial[len-<span class="number">1</span>-i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = factorial.length;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;len)&#123;</span><br><span class="line">            <span class="keyword">return</span> BigInteger.valueOf(factorial[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger result = BigInteger.valueOf(factorial[len-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len; i &lt;= n; i++)&#123;</span><br><span class="line">            result = result.multiply(BigInteger.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/康托展开" target="_blank" rel="noopener">康托展开-维基百科</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次SpringMVC访问静态资源405错误修复</title>
    <url>/posts/why_Spring_MVC_ask_the_static_resource_return_405.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>访问静态资源出现405错误<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">警告 [http-nio-8080-exec-8] org.springframework.web.servlet.PageNotFound.handleHttpRequestMethodNotSupported Request method &apos;GET&apos; not supported</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP Status 405 - Request method &apos;GET&apos; not supported</span><br><span class="line">type Status report</span><br><span class="line">message Request method &apos;GET&apos; not supported</span><br><span class="line">description The specified HTTP method is not allowed for the requested resource.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="stackoverflow解释"><a href="#stackoverflow解释" class="headerlink" title="stackoverflow解释"></a>stackoverflow解释</h1><p>开启<code>DefaultServletHandlerConfigurer</code><br>或者配置<code>ResourceHandler</code><br>二选一<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">//        registry.addResourceHandler("/static/**").addResourceLocations("/static/**");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/path&quot;, method = RequestMethod.GET)</span><br></pre></td></tr></table></figure></p>
<p>替换<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/path&quot;, method = RequestMethod.POST)</span><br></pre></td></tr></table></figure></p>
<p>问题是<br>第一步我明显配置好的了。<br>第二步我还不至于犯这么低级的错误(事实上就是这么低级的错误)</p>
<h1 id="修bug之路"><a href="#修bug之路" class="headerlink" title="修bug之路"></a>修bug之路</h1><ol>
<li>以为是IDEA的bug, 像Android Studio一样, 需要隔三差五的<code>ReBuild</code>一下。(405)</li>
<li>删除项目目录下的<code>out</code>和<code>target</code>文件夹, 重新编译运行。(405)</li>
<li>新建项目, 将<code>Initializer</code>、<code>WebConfig</code>复制到新项目, 编译运行。(成功)</li>
<li>将全部代码复制一遍到新目录。(405)</li>
<li>将所有<code>@Compontent</code>注释, 保留一个简单的HelloWorld的<code>@Controller</code>。(成功)</li>
<li>一个个<code>@Compontent</code>恢复，终于找到bug所在。</li>
</ol>
<h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>我在之前添加了个<code>PostMapping</code>, 加上了<code>TODO</code>后, 就忘记这件事了。<br>之后就开始出现访问静态资源<code>405</code>错误。页面能正常打开，就是样式丢失。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="meta">@PostMapping</span>()</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO 增加用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原因就在这, <code>name</code>的默认值是<code>&quot;&quot;</code>，会拦截所有不经过其他<code>RequestMapping</code>的<code>url</code>。<br>静态资源也因此被拦截, 需要通过<code>Post</code>方式获取。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PostMapping &#123;</span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = RequestMapping<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">	String name() default "";</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将这段代码注释掉, 或者将<code>PostMapping</code>的<code>name</code>设置下。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"><span class="comment">//    @PostMapping("/admin/user")</span></span><br><span class="line"><span class="comment">//    public String addUser()&#123;</span></span><br><span class="line"><span class="comment">//        //TODO 增加用户</span></span><br><span class="line"><span class="comment">//        return "";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/posts/Redis_simple_use.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Redis</code>是一种NoSQL(No Only SQL) 非关系型数据库，是高性能<code>键值对</code>数据库。<br>常用于缓存、分布式Session分离，或者任务队列，网站访问统计。<br><code>Redis</code>建议运行于<code>Linux</code>上。Java推荐<code>JRedis</code><br><a id="more"></a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><code>/usr/local/redis/bin</code>有以下可执行文件<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 性能测试工具</span></span><br><span class="line">redis-benchmark</span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF文件修复工具</span></span><br><span class="line">redis-check-aof</span><br><span class="line"><span class="meta">#</span><span class="bash"> RDB文件检查工具</span></span><br><span class="line">redis-check-dump</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令行客户端</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> redis服务器启动命令</span></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure></p>
<p>在<code>/usr/local/redis/redis.conf</code>中修改配置信息<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 允许后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置服务启动端口为 6379</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码为 foobared</span></span><br><span class="line">requirepass foobared</span><br></pre></td></tr></table></figure></p>
<p>常用命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过配置信息启动Redis, 后台启动redis</span></span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf --port 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis控制台</span></span><br><span class="line">/usr/local/redis/bin/redis-cli -p 6379 -h 127.0.0.1 -a 密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭redis</span></span><br><span class="line">/usr/local/redis/bin/redis-cli -p 6379 -h 127.0.0.1 -a 密码 shutdown</span><br></pre></td></tr></table></figure></p>
<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>Redis有<code>string</code>、<code>hash</code>、<code>list</code>、<code>set</code>、<code>sorted-set</code>五种存储方式.</p>
<h2 id="字符串存储"><a href="#字符串存储" class="headerlink" title="字符串存储"></a>字符串存储</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set mykey value1 // 存储键值对</span><br><span class="line"></span><br><span class="line">get mykey // 输出value1</span><br><span class="line">getset mykey value2 // 输出value1，存入value2</span><br><span class="line"></span><br><span class="line">del mykey // 删除键为mykey的键值对，返回nil</span><br><span class="line"></span><br><span class="line">incr mykey // 自增1，若mykey不存在，则创建key为0，并自增1</span><br><span class="line">decr mykey // 自减1，若mykey不存在，则创建key为0，并自减1</span><br><span class="line">incrby mykey 5 // 自增5</span><br><span class="line">decrby mykey 5 // 自减5</span><br><span class="line"></span><br><span class="line">append mykey value // 在字符串末尾追加value</span><br></pre></td></tr></table></figure>
<h2 id="hash存储"><a href="#hash存储" class="headerlink" title="hash存储"></a>hash存储</h2><p>Hash存储一个对象，对象中可以创建属性。类似<code>Map&lt;Object, Collection&lt;Object&gt;&gt;</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset mykey field1 value1</span><br><span class="line">hmset mykey field1 value1 [fieldN valueN]</span><br><span class="line"></span><br><span class="line">hget mykey [field1]</span><br><span class="line">hmget mykey field1 [fieldN]</span><br><span class="line">hgetall mykey // 获取所有属性及属性值</span><br><span class="line"></span><br><span class="line">hdel mykey field1 [fieldN]</span><br><span class="line">del mykey // 删除整个key集合</span><br><span class="line"></span><br><span class="line">hincr by mykey field1 5 // key的field1属性自增5</span><br><span class="line">hexists mykey field1 // 判断mykey中的field1属性是否存在</span><br><span class="line">hlen mykey // 获取mykey中属性的数量</span><br><span class="line">hkeys mykey // 获取mykey中所有的属性名</span><br><span class="line">kvals mykey // 获取mykey中所有的属性值</span><br></pre></td></tr></table></figure></p>
<h2 id="list存储"><a href="#list存储" class="headerlink" title="list存储"></a>list存储</h2><p>按插入顺序排序的字符串链表，用于<code>消息队列</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush mylist a b c // 往mylist左侧依次插入a b c</span><br><span class="line">lpushx mylist a b c // 只有mylist存在才插入</span><br><span class="line">rpush mylist 1 2 3 // 往mylist右侧依次插入1 2 3</span><br><span class="line">rpushx mylist 1 2 3 // 只有mylist存在才插入</span><br><span class="line">lset mylist index value // 往mylist下标为index插入value</span><br><span class="line">linsert mylist before b x // 往mylist的第1个b元素之前插入x</span><br><span class="line">linsert mylist after b x // 往mylist的第1个b元素之后插入x</span><br><span class="line">rpoplpush mylist1 mylist2 // 弹出mylist1最后一个元素插入mylist2第一个元素</span><br><span class="line"></span><br><span class="line">lpop mylist // 弹出mylist左侧的第一个元素</span><br><span class="line">rpop mylist // 弹出mylist右侧的第一个元素</span><br><span class="line"></span><br><span class="line">lrange mylist 0 -1 // 查看链表第0个元素到倒数第1个元素</span><br><span class="line">llen mylist // mylist元素个数</span><br><span class="line"></span><br><span class="line">lrem mylist 2 value // 从左往右删除2个value</span><br><span class="line">lrem mylist -2 value // 从右往左删除2个value</span><br><span class="line">lrem mylist 0 value // 删除所有value</span><br></pre></td></tr></table></figure></p>
<h2 id="set存储"><a href="#set存储" class="headerlink" title="set存储"></a>set存储</h2><p>无排序的字符集合，类似<code>Set&lt;Object&gt;</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd myset a b c // 往myset中插入a b c</span><br><span class="line">srem myset a b // 删除元素a b </span><br><span class="line">smembers myset // 查看所有元素</span><br><span class="line">scard myset // 元素数量</span><br><span class="line">sismember myset a // set是否存在元素a</span><br><span class="line">srandmember myset // 返回set中随机一个成员</span><br><span class="line"></span><br><span class="line">sdiff myset1 myset2 // 差集运算</span><br><span class="line">sdiffstore myset3 myset1 myset2 // 将myset1和myset2差集运算结果存储到myset3</span><br><span class="line">sinter myset1 myset2 // 交集运算</span><br><span class="line">sinterstore myset3 myset1 myset2 // 将myset1和myset2交集运算结果存储到myset3</span><br><span class="line">sunion myset1 myset2 // 并集运算</span><br><span class="line">sunionstore myset3 myset1 myset2 // 将myset1和myset2并集运算结果存储到myset3</span><br></pre></td></tr></table></figure></p>
<h2 id="sorted-set存储"><a href="#sorted-set存储" class="headerlink" title="sorted-set存储"></a>sorted-set存储</h2><p>使用<code>分数</code>排序的set，常用于排行榜、构建索引数据<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd myset 90 a 80 b 60 c</span><br><span class="line"></span><br><span class="line">zscore myset a // 获取myset中a的分数</span><br><span class="line">zcard myset // 元素数量</span><br><span class="line"></span><br><span class="line">zrange myset 0 -1 // 查看myset第0个元素到倒数第1个元素</span><br><span class="line">zrange myset 0 -1 withscores// 包括分数，从小到大排序</span><br><span class="line">zrevrange myset 0 -1 withscores// 从大到小排序</span><br><span class="line">zrangebyscore myset 0 100 withscores limit 0 2 // 查看myset分数在0-100之间第0-2个元素</span><br><span class="line">zcount myset 80 90 // 分数在80-90之间的元素个数</span><br><span class="line"></span><br><span class="line">zrem myset b c // 删除元素a b</span><br><span class="line">zremrangebyrank myset 0 -1 // 删除myset第0个元素到倒数第1个元素</span><br><span class="line">zremrangebyscore myset 80 100 // 删除分数在80-100之间的元素</span><br><span class="line"></span><br><span class="line">zincrby myset 5 a // a元素自增5</span><br></pre></td></tr></table></figure></p>
<h1 id="keys操作"><a href="#keys操作" class="headerlink" title="keys操作"></a>keys操作</h1><p>这里的key，相当于关系型数据库的table<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys my* // 获取所有的my开头的key</span><br><span class="line">del myset1 myset2 myset3 </span><br><span class="line">exists myset</span><br><span class="line">rename myset newset</span><br><span class="line">expire myset 1000 // 1000秒后过期</span><br><span class="line">ttl myset // 剩余超时时间</span><br><span class="line">type myset // 获取myset的类型, 如string、hash、set等</span><br></pre></td></tr></table></figure></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>一个Redis实例可以提供16个数据库(下标0-15)<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select 0 // 选择0号数据库(默认)</span><br><span class="line">move myset 1 // 移动myset到1号数据库</span><br></pre></td></tr></table></figure></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multi // 开启事务</span><br><span class="line">exec // 提交事务</span><br><span class="line">discard // 回滚事务</span><br></pre></td></tr></table></figure>
<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>分为<code>RDB持久化</code>和<code>AOF持久化</code>两种</p>
<h2 id="RDB持久化-默认"><a href="#RDB持久化-默认" class="headerlink" title="RDB持久化(默认)"></a>RDB持久化(默认)</h2><p>指定时间间隔内将数据库写入磁盘<br>优势, 只包含一个备份文件, 性能最大化, 通过fork进程让子进程完成持久化操作, 启动效率比AOF高.<br>劣势, 不能最大限度避免数据丢失.<br><code>/usr/local/redis/redis.conf</code><br>save 900 1 900秒至少有一个key发生变化就持久化一次</p>
<p>dbfilename dump.rdb<br>dir ./<br>保存在当前目录的dump.rdb文件中</p>
<h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>以日志形式记录服务器每次操作<br>优势, 更高的数据安全性, 每秒同步、每修改同步、不同步, 当日志文件过大, 重写日志文件.<br>劣势, 运行效率低<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认关闭AOF方式</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta">#</span><span class="bash"> 产生日志文件名</span></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"><span class="meta">#</span><span class="bash"> appendsync always</span></span><br><span class="line">appendsync everysec</span><br><span class="line"><span class="meta">#</span><span class="bash"> appendsync no 三种同步策略</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>复制构造函数与clone</title>
    <url>/posts/copy_constructor_and_clone_method.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对一个对象的复制，通常实现<code>Cloneable</code>接口使用<code>clone</code>方法。<br>但这有一个设计缺陷。<code>Cloneable</code>没有<code>clone</code>方法，反而在<code>Object</code>里面调用了<code>native</code>修饰的<code>clone</code>方法。</p>
<a id="more"></a>
<h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显看到，<code>Cloneable</code>是一个空接口，实现<code>Cloneable</code>只是为了在调用<code>clone</code>方法时，不抛出<code>CloneNotSupportedException</code>异常。<br>而且使用的是<code>native</code>修饰的<code>clone</code>方法，对应用开发者是透明的，开发者对<code>clone</code>方法不可控。</p>
<h1 id="使用复制构造函数解决"><a href="#使用复制构造函数解决" class="headerlink" title="使用复制构造函数解决"></a>使用复制构造函数解决</h1><p>Josh Bloch推荐使用复制构造函数来实现<code>clone</code>功能，实际上，<code>HashMap</code>也通过复制构造函数进行clone。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.artima.com/intv/bloch13.html" target="_blank" rel="noopener">Copy Constructor versus Cloning</a></li>
</ul>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴Java开发手册学习笔记</title>
    <url>/posts/Alibaba_Java_Development_Handbook.html</url>
    <content><![CDATA[<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="https://yq.aliyun.com/articles/69327" target="_blank" rel="noopener">【Java编码规范】《阿里巴巴Java开发手册（正式版）》更新（v1.2.0版）——迄今最完善版本</a><br><a id="more"></a></p>
<h1 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><ol>
<li><p>【强制】类名使用UpperCamelCase风格，类名使用 UpperCamelCase 风格，必须遵从驼峰形式。但以下情形例外。<br>但以下情形例外： <code>DO</code> /  <code>BO</code>  / <code>DTO</code> /  <code>VO</code> /  <code>AO</code><br>正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion<br>反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion</p>
</li>
<li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>正例：  <code>MAX_STOCK_COUNT</code><br>反例：  <code>MAX_COUNT</code></p>
</li>
<li><p>【强制】抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头 ； 异常类命名使用 <code>Exception</code> 结尾 ； 测试类命名以它要测试的类的名称开始，以 <code>Test</code> 结尾。</p>
</li>
<li><p>【强制】 POJO 类中布尔类型的变量，都不要加 <code>is</code> ，否则部分框架解析会引起序列化错误。<br>反例：定义为基本数据类型 <code>Boolean isDeleted;</code> 的属性，它的方法也是 <code>isDeleted()</code> ，<br>RPC框架在反向解析的时候，“以为”对应的属性名称是 deleted ，导致属性获取不到，进而抛出异常。</p>
</li>
<li><p>【强制】包名统一使用小写，点分隔符之间有且仅有<code>一个</code>自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>正例： 应用工具类包名为 <code>com.alibaba.open.util</code> 、类名为 <code>MessageUtils</code>（ 此规则参考spring 的框架结构 ）</p>
</li>
<li><p>【参考】各层命名规约：</p>
<ul>
<li>获取<code>单个</code>对象的方法用 <code>get</code> 做前缀。</li>
<li>获取<code>多个</code>对象的方法用 <code>list</code> 做前缀。</li>
<li>获取<code>统计值</code>的方法用 <code>count</code> 做前缀。</li>
<li><code>插入</code>的方法用 <code>save</code>（ 推荐 ） 或 <code>insert</code> 做前缀。</li>
<li><code>删除</code>的方法用 <code>remove</code>（ 推荐 ） 或 <code>delete</code> 做前缀。</li>
<li><code>修改</code>的方法用 <code>update</code> 做前缀。</li>
</ul>
</li>
<li><p>【参考】领域模型命名规约:</p>
<ul>
<li>数据对象： xxxDO ， xxx 即为数据表名。</li>
<li>数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。</li>
<li>展示对象： xxxVO ， xxx 一般为网页名称。</li>
<li>POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</li>
</ul>
</li>
</ol>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><ol>
<li><p>【强制】不允许任何魔法值 （ 即未经定义的常量 ） 直接出现在代码中。<br>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String key  = <span class="string">" Id # taobao_"</span> +  tradeId;</span><br><span class="line">cache.put(key ,  value);</span><br></pre></td></tr></table></figure>
</li>
<li><p>【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。<br>如：缓存相关的常量放在类： <code>CacheConsts</code> 下 ； 系统配置相关的常量放在类： <code>ConfigConsts</code> 下。<br>说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</p>
<blockquote>
<p>一方库：本工程中的各模块的相互依赖<br>二方库：公司内部的依赖库，一般指公司内部的其他项目发布的jar包<br>三方库：公司之外的开源库， 比如apache、ibm、google等发布的依赖</p>
</blockquote>
</li>
</ol>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><ol>
<li><p>【强制】单行字符数限制不超过 <code>120</code> 个，超出需要换行，换行时遵循如下原则：</p>
<ul>
<li>第二行相对第一行缩进 <code>4 个空格</code>，从第三行开始，不再继续缩进。</li>
<li>运算符与下文一起换行。</li>
<li>方法调用的<code>点</code>符号与下文一起换行。</li>
<li>在多个参数超长，在<code>逗号</code>后换行。</li>
<li>在括号前不要换行。</li>
</ul>
</li>
<li><p>【强制】 IDE 的 <code>text file encoding</code> 设置为 <code>UTF-8</code>; IDE 中文件的<code>换行符</code>使用 <code>Unix</code>格式，不要使用 windows 格式。</p>
</li>
<li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。</p>
</li>
</ol>
<h2 id="OOP规约"><a href="#OOP规约" class="headerlink" title="OOP规约"></a>OOP规约</h2><ol>
<li><p>关于基本数据类型与包装数据类型的使用标准如下：</p>
<ul>
<li>【强制】所有的 <code>POJO</code> 类属性必须使用包装数据类型。</li>
<li>【强制】 <code>RPC</code> 方法的返回值和参数必须使用包装数据类型。</li>
<li>【推荐】所有的<code>局部变量</code>使用基本数据类型。<br>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<code>NPE</code> 问题，或者入库检查，都由使用者来保证。<br>正例：数据库的查询结果可能是 <code>null</code> ，因为自动拆箱，用基本数据类型接收有 <code>NPE</code> 风险。<br>反例：比如显示成交总额涨跌情况，即正负 <code>x %</code>， <code>x</code> 为基本数据类型，调用的 <code>RPC</code> 服务，<br>调用不成功时，返回的是默认值，页面显示：<code>0%</code>，这是不合理的，应该显示成中划线-。<br>所以包装数据类型的 <code>null</code> 值，能够表示额外的信息，如：远程调用失败，异常退出。</li>
</ul>
</li>
<li><p>【强制】定义 <code>DO / DTO / VO</code> 等 POJO 类时，不要设定任何属性默认值。<br>反例： POJO 类的 <code>gmtCreate</code> 默认值为 <code>new Date();</code><br> 但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>
</li>
<li><p>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 <code>init</code> 方法中。</p>
</li>
<li><p>【推荐】 类内方法定义顺序依次是：<code>公有方法或保护方法</code> &gt; <code>私有方法</code> &gt;  <code>getter / setter方法</code>。<br>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好 ； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法 ；<br> 而私有方法外部一般不需要特别关心，是一个黑盒实现 ；<br> 因为方法信息价值较低，所有 Service 和 DAO 的 getter / setter 方法放在类体最后。</p>
</li>
</ol>
<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><ol>
<li><p>【强制】泛型通配符<code>&lt;?  extends T &gt;</code>来接收返回的数据，此写法的泛型集合不能使用 <code>add</code> 方法，<br>而 <code>&lt;? super T&gt;</code> 不能使用 <code>get</code> 方法，做为接口调用赋值时易出错。<br>说明：扩展说一下 <code>PECS(Producer Extends Consumer Super)</code><br>原则：1）频繁往外读取内容的，适合用上界 <code>Extends</code> 。2）经常往里插入的，适合用下界 <code>Super</code> 。</p>
</li>
<li><p>【推荐】集合初始化时，指定集合初始值大小。<br>正例： <code>initialCapacity = (需要存储的元素个数 / 负载因子) + 1</code>。<br>注意负载因子（即loaderfactor）默认为 <code>0.75</code>， 如果暂时无法确定初始值大小，请设置为 <code>16</code>。</p>
</li>
</ol>
<h2 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h2><ol>
<li><p>【强制】线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明： Executors 返回的线程池对象的弊端如下：</p>
<ul>
<li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code> :允许的<code>请求队列</code>长度为 <code>Integer.MAX_VALUE</code> ，可能会堆积大量的请求，从而导致 OOM 。</li>
<li><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code> :允许的<code>创建线程</code>数量为 <code>Integer.MAX_VALUE</code> ，可能会创建大量的线程，从而导致 OOM 。</li>
</ul>
</li>
<li><p>【强制】 <code>SimpleDateFormat</code> 是线程不安全的类，一般不要定义为 <code>static</code> 变量，如果定义为<code>static</code> ，必须<code>加锁</code>，或者使用 <code>DateUtils</code> 工具类。<br>正例：注意线程安全，使用 <code>DateUtils</code> 。<br>亦推荐如下处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">    @ Override</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>说明：如果是 JDK 8 的应用，可以使用 <code>Instant</code> 代替 <code>Date</code> ， <code>LocalDateTime</code> 代替 <code>Calendar</code> ，<br><code>DateTimeFormatter</code> 代替 <code>Simpledateformatter</code> ，官方给出的解释： simple beautiful strong immutable thread-safe 。</p>
<ol>
<li>【强制】多线程并行处理定时任务时， <code>Timer</code> 运行多个 <code>TimeTask</code> 时，<br>只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，<br>使用 <code>ScheduledExecutorService</code> 则没有这个问题。</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>【强制】后台输送给页面的变量必须加 <code>$!{var}</code> ——中间的感叹号。<br>说明：如果 <code>var = null</code> 或者<code>不存在</code>，那么 <code>${var}</code> 会直接显示在页面上。</li>
</ol>
<h1 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h1><h2 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h2><ol>
<li><p>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p>
</li>
<li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 <code>log4j.xml</code> 中设置 <code>additivity = false</code> 。<br>正例： <code>&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</code></p>
</li>
</ol>
<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h2><ol>
<li><p>【强制】表达是与否概念的字段，必须使用 <code>is_xxx</code> 的方式命名，数据类型是 <code>unsigned tinyint</code>（ 1 表示是，0 表示否 ） 。</p>
</li>
<li><p>【强制】主键索引名为 <code>pk_字段名</code>；唯一索引名为 <code>uk_字段名</code> ； 普通索引名则为 <code>idx_字段名</code>。</p>
</li>
<li><p>【强制】小数类型为 <code>decimal</code> ，禁止使用 <code>float</code> 和 <code>double</code> 。<br>说明： <code>float</code> 和 <code>double</code> 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。<br>如果存储的数据范围超过 <code>decimal</code> 的范围，建议将数据拆成整数和小数分开存储。</p>
</li>
<li><p>【强制】表必备三字段： <code>id</code> ,  <code>gmt_create</code> ,  <code>gmt_modified</code>。<br>说明：其中 <code>id</code> 必为主键，类型为 <code>unsigned bigint</code> 、单表时自增、步长为 <code>1</code>。 <code>gmt_create</code> ,<code>gmt_modified</code> 的类型均为 <code>date_time</code> 类型。</p>
</li>
</ol>
<h2 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h2><ol>
<li><p>【强制】 超过三个表禁止 <code>join</code> 。需要 <code>join</code> 的字段，数据类型必须绝对一致 ；<br>多表关联查询时，保证被关联的字段需要有索引。<br>说明：即使双表 join 也要注意表索引、 SQL 性能。</p>
</li>
<li><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。<br>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，<br>区分度会高达 90%以上，可以使用 <code>count(distinct left( 列名, 索引长度 )) / count( * )</code> 的区分度来确定。</p>
</li>
<li><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
</li>
<li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。<br>说明： MySQL 并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回N 行，<br>那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。<br>正例：先快速定位需要获取的 id 段，然后再关联：<br><code>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</code></p>
</li>
<li><p>【推荐】建组合索引的时候，区分度最高的在最左边。<br>正例：如果 <code>where a =?  and b =?</code> ， a 列的几乎接近于唯一值，那么只需要单建 <code>idx_a</code> 索引即可。<br>说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： <code>where a &gt;? and b =?</code><br>那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p>
</li>
</ol>
<h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><ol>
<li><p>【强制】不要使用 <code>count(列名)</code> 或 <code>count(常量)</code> 来替代 <code>count(*)</code> ， <code>count(*)</code> 是SQL92定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br>说明： <code>count(*)</code> 会统计值为 NULL 的行，而 <code>count(列名)</code> 不会统计此列为 NULL 值的行。</p>
</li>
<li><p>【强制】当某一列的值全是 <code>NULL</code> 时， <code>count(col)</code> 的返回结果为 <code>0</code>，但 <code>sum(col)</code> 的返回结果为NULL ，因此使用 sum() 时需注意 NPE 问题。<br>正例：可以使用如下方式来避免 sum 的 NPE 问题： <code>SELECT IF(ISNULL(SUM(g)) ,0, SUM(g)) FROM table;</code></p>
</li>
<li><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。<br>说明： （ 概念解释 ） 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。<br>如果更新学生表中的 student_id ，同时触发成绩表中的 student_id 更新，则为级联更新。<br>外键与级联更新适用于单机低并发，不适合分布式、高并发集群 ； 级联更新是强阻塞，存在数据库更新风暴的风险；<br>外键影响数据库的插入速度。</p>
</li>
<li><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>
</li>
<li><p>【强制】数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执行更新语句。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpServlet源码详解</title>
    <url>/posts/HttpServlet_source_code.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Servlet是Servlet+Applet的缩写，表示一个服务器应用。<br>Servlet是一个接口，是javaweb开发的一套规范。<br><a id="more"></a></p>
<h1 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h1><p><img src="https://yuml.me/diagram/nofunky/class/[<<ServletConfig>>;interface]^-[GenericServlet], [<<Servlet>>;interface]^-[GenericServlet], [GenericServlet]^-[HttpServlet]"></p>
<h1 id="GenericServlet详解"><a href="#GenericServlet详解" class="headerlink" title="GenericServlet详解"></a>GenericServlet详解</h1><p>GenericServlet是与具体协议无关的。<br>可以看到<code>GenericServlet</code>是一个抽象类，实现了<code>Servlet</code>和<code>ServletConfig</code>接口。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line">    <span class="comment">/** 省略部分代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Servlet接口在GenericServlet中的实现"><a href="#Servlet接口在GenericServlet中的实现" class="headerlink" title="Servlet接口在GenericServlet中的实现"></a>Servlet接口在GenericServlet中的实现</h2><p>先看<code>Servlet</code>接口，它实现了以下方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span></span>;     <span class="comment">// Web容器调用时，初始化方法，只调用一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;  <span class="comment">// 关闭Web容器时销毁，只调用一次</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;    <span class="comment">// 暴露获取ServletConfig对象的方法</span></span><br><span class="line">    <span class="comment">// 容器注入request和response，处理业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>; <span class="comment">// 获取Servlet的信息，如作者，版权等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>根据这些方法，在<code>GenericeServlet</code>中找到其实现。<br>主要是对<code>init</code>进行了实现。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 省略部分代码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line">    <span class="comment">// 在序列化时，不对transient修饰的field进行序列化。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;   <span class="comment">// 获取Web容器注入的ServletConfig对象</span></span><br><span class="line">        <span class="keyword">this</span>.init(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用模板方法模式，自定义一个无参的init方法，并暴露给子类实现。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config; <span class="comment">// 暴露获取ServletConfig对象的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> <span class="string">""</span>;  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ServletConfig接口在GenericServlet中的实现"><a href="#ServletConfig接口在GenericServlet中的实现" class="headerlink" title="ServletConfig接口在GenericServlet中的实现"></a>ServletConfig接口在GenericServlet中的实现</h2><p>先看<code>ServletConfig</code>接口，它实现了以下方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span></span>; <span class="comment">// 获取Servlet的名字，即web.xml中&lt;servlet-name&gt;的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;  <span class="comment">// 暴露获取ServletContext对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>;    <span class="comment">// 根据name获取初始化参数，即web.xml中&lt;context-param&gt;的键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>; <span class="comment">// 获取所有的&lt;context-param&gt;的键值对</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>根据这些方法，在<code>GenericeServlet</code>中找到其实现。<br>全部都是通过<code>ServletConfig</code>对象进行实现的，而<code>ServletConfig</code>是由Web容器注入的,由<a href="#Servlet接口在GenericServlet中的实现">Servlet</a>实现。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 省略部分代码 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="HttpServlet详解"><a href="#HttpServlet详解" class="headerlink" title="HttpServlet详解"></a>HttpServlet详解</h1><p>很明显，GenericServlet只留下了<code>service</code>这个方法给HttpServlet进行重写。<br>并根据不同的请求类型，调用不同的<code>doXxx</code>方法。<br><code>doXxx</code>必须重写，否则在调用时会出现异常。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 省略部分代码 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span>&#123;</span><br><span class="line">        HttpServletRequest  request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 核心方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        String method = req.getMethod(); <span class="comment">// 获取请求类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据请求类型，调用不同的doXxx方法</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Http的各种请求类型"><a href="#Http的各种请求类型" class="headerlink" title="Http的各种请求类型"></a>Http的各种请求类型</h2><table>
<thead>
<tr>
<th style="text-align:left">请求类型</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Get</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Post</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Put</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Delete</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Head</td>
<td style="text-align:left">调用doGet方法，返回空body的Response</td>
</tr>
<tr>
<td style="text-align:left">Options</td>
<td style="text-align:left">调试工作，返回所有支持的处理类型的集合</td>
</tr>
<tr>
<td style="text-align:left">Trace</td>
<td style="text-align:left">调试工作，远程诊断服务器，将接收到的header原封不动地返回</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>java8函数式编程Lambda表达式</title>
    <url>/posts/java8_lambda_foundation.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发安卓的时候就通过<code>RxJava</code>进行过函数式编程。java源码中的建造者模式也是类似函数式编程的玩意。<br>举个例子<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = builder.baseUrl(url)</span><br><span class="line">                    .param(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                    .param(<span class="string">"password"</span>, <span class="string">"admin"</span>)</span><br><span class="line">                    .build();</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="Lambda表达式-使代码更简洁"><a href="#Lambda表达式-使代码更简洁" class="headerlink" title="Lambda表达式-使代码更简洁"></a>Lambda表达式-使代码更简洁</h1><p>通过<code>匿名内部类</code>，我们可以减少类的数量，并且逻辑更清晰。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"测试"</span>);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是，这明显还不够简洁。<code>Runable</code>只有一个方法<code>run()</code>，每次都要重复相同的代码。<br>java8提供了Lambda表达式。用于满足这种<code>只有一个方法的接口</code>的简洁写法。<br>原本<code>5</code>行代码浓缩成了<code>1</code>行！<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"测试"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>常见的表达式<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runable noArguments = () -&gt; System.out.println(<span class="string">"无参Lambda"</span>);</span><br><span class="line">ActionListener oneArguments = event -&gt; System.out.println(<span class="string">"含有一个参数的Lambda"</span>);</span><br><span class="line">Runable multiStatement = () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"含有多行"</span>);</span><br><span class="line">    System.out.println(<span class="string">"代码的Lambda"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">BinaryOperator(Long) multiArgument = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"含有多个参数的Lambda"</span>);</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">BinaryOperator(Long) multiArgument = (Long x, Long y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"含有多个指定类型的参数的Lambda"</span>);</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Stream流-新的迭代方式"><a href="#Stream流-新的迭代方式" class="headerlink" title="Stream流-新的迭代方式"></a>Stream流-新的迭代方式</h1><p>在java8以前，迭代一般都是通过<code>for</code>或者<code>while</code>实现。<br>在java5，产生了<code>foreach</code>的迭代方式。<br>现在，java8提供了新的<code>Stream</code>的迭代方式。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong>collect(toList())创建集合</strong><br>通过<code></code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);<span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>filter()过滤</strong><br>有时候需要获取满足条件的集合元素。<br>比如大于5的元素<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">            .filter(x -&gt; x&gt;<span class="number">5</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);<span class="comment">//[6, 7, 8, 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>max()最大值与min()最小值</strong><br>这里的最大值最小值不只是指长度或数值上的大小。可以进行自定义排序的指标。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    String max = Stream.of(&quot;i&quot;,&quot;love&quot;,&quot;you&quot;).max(Comparator.comparing(String::length)).get();</span><br><span class="line">    String min = Stream.of(&quot;i&quot;,&quot;love&quot;,&quot;you&quot;).min(Comparator.comparing(String::length)).get();</span><br><span class="line">    System.out.println(max+&quot;,&quot;+min);// love, i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Map转换"><a href="#Map转换" class="headerlink" title="Map转换"></a>Map转换</h2><p><strong>map()转换类型</strong><br>将<code>int</code>转换为<code>String</code>类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    List&lt;String&gt; list = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line">            .map(x -&gt; &quot;数字&quot;+x)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    //[数字1, 数字2, 数字3, 数字4, 数字5, 数字6, 数字7, 数字8, 数字9]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>flatMap()转换类型</strong><br>将<code>多个Stream</code>压缩成<code>一个Stream</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).collect(Collectors.toList());</span><br><span class="line">    List&lt;Character&gt; list2 = Stream.of(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>).collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line">    System.out.println(Stream.of(list1, list2)</span><br><span class="line">                                .flatMap(list -&gt; list.stream())</span><br><span class="line">                              <span class="comment">//.flatMap(Collection::stream) //方法引用</span></span><br><span class="line">                                .collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="reduce-一组数据生成一个数据"><a href="#reduce-一组数据生成一个数据" class="headerlink" title="reduce()一组数据生成一个数据"></a>reduce()一组数据生成一个数据</h2><p>上面的<code>max()</code>和<code>min()</code>都是<code>reduce操作</code><br>求和例子，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    int sum = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line">                    .reduce(0, (acc, element) -&gt; acc+element);</span><br><span class="line">//  long sum2 = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9).mapToInt(x -&gt; x).summaryStatistics().getSum();                    </span><br><span class="line">//  开发时应使用这种方式求和</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="::方法引用"></a>::方法引用</h1><p>上面的flatMap方法中，使用了<code>Collection::stream</code>，类似C++的语法。<br>等价于<code>list -&gt; list.stream()</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list1 = Stream.of(<span class="string">"i"</span>, <span class="string">"love"</span>,<span class="string">"you"</span>).collect(Collectors.toList());</span><br><span class="line">    String max = list1.stream().max(Comparator.comparing(String::length)).get();</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="collect收集器的使用"><a href="#collect收集器的使用" class="headerlink" title="collect收集器的使用"></a>collect收集器的使用</h1><p>上面的例子中有一个<code>collect</code>方法，可以将<code>Stream</code>转化为<code>List</code>等集合对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Stream.of(<span class="string">"i"</span>, <span class="string">"love"</span>,<span class="string">"you"</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 转化为指定集合类型 </strong><br>有时候需要指定特定的集合比如<code>TreeSet</code>之类的。需要手动指定产生集合。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; set = Stream.of(<span class="string">"i"</span>, <span class="string">"love"</span>,<span class="string">"you"</span>)</span><br><span class="line">                .collect(Collectors.toCollection(TreeSet::<span class="keyword">new</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 转化为值 </strong><br>有时候需要按照某种顺序找到一个值。比如找一个最长的单词。<br>这个例子在实际开发中不使用。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String max = Stream.of(<span class="string">"i"</span>, <span class="string">"love"</span>,<span class="string">"you"</span>)</span><br><span class="line">            .collect(Collectors.maxBy(</span><br><span class="line">                                Comparator.comparing(String::length)</span><br><span class="line">                    ))</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 集合生成字符串 </strong><br>有时候需要将集合的所有字符提取出来，组合在一起<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = Stream.of(<span class="string">"i"</span>, <span class="string">"love"</span>,<span class="string">"you"</span>).collect(Collectors.joining(<span class="string">"*"</span>,<span class="string">"("</span>,<span class="string">")"</span>));</span><br><span class="line">    System.out.println(str);<span class="comment">//(i*love*you)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 数据分块分组 </strong><br><code>partitioningBy</code>将Stream分成两个部分，存储在一个Map中，以<code>true</code>和<code>false</code>为键。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    Map&lt;Boolean, List&lt;String&gt;&gt; map = Stream.of(&quot;i&quot;, &quot;love&quot;,&quot;you&quot;)</span><br><span class="line">            .collect(Collectors.partitioningBy(str-&gt;str.length()&gt;3));</span><br><span class="line">    for(Map.Entry entry : map.entrySet())&#123;</span><br><span class="line">        System.out.println(entry.getKey()+&quot;,&quot;+entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大部分情况需要分成不止两个部分，可能更多。<br><code>groupingBy</code>可以将Stream分成多个部分，下面的例子是将相同长度的字符串存储到一起。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; map = Stream.of(&quot;i&quot;, &quot;love&quot;,&quot;you&quot;, &quot;hhh&quot;)</span><br><span class="line">        .collect(Collectors.groupingBy(String::length));</span><br><span class="line">    for(Map.Entry entry : map.entrySet())&#123;</span><br><span class="line">        System.out.println(entry.getKey()+&quot;,&quot;+entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 下游收集器 </strong><br>使用<code>groupingBy</code>的时候发现有多个重载方法。<br><code>groupingBy(Function classifier, Collector downstream)</code>提供了一个下游收集器<code>downstream</code>。<br>可以将<code>classifier</code>收集的流，通过downstream转化。<br>如下面代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    List&lt;String&gt; list = Stream.of(&quot;i&quot;,&quot;love&quot;,&quot;you&quot;,&quot;too&quot;).collect(Collectors.toList());</span><br><span class="line">    Map&lt;Integer, Long&gt; map = list.stream().collect(</span><br><span class="line">        Collectors.groupingBy(String::length,   //根据字符串长度转化为map集合</span><br><span class="line">                                Collectors.counting()));    //处理上游的map集合，转化为集合的个数</span><br><span class="line">    for(Map.Entry entry : map.entrySet())&#123;</span><br><span class="line">        System.out.println(entry.getKey()+&quot;,&quot;+entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    // 1, 1</span><br><span class="line">    // 3, 2</span><br><span class="line">    // 4, 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL获取字段注释comment</title>
    <url>/posts/MySQL_how_to_get_comment_of_table.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>web开发经常需要用到<code>&lt;table&gt;</code>显示数据。而<code>&lt;th&gt;</code>经常使用的是硬编码方式写死在代码中。<br>MySQL支持将添加字段注释，可获取注释信息，用来动态修改<code>&lt;th&gt;</code>的标题。<br><a id="more"></a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>现在有一张学生表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'student_id'</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">comment</span> <span class="string">'student_name'</span></span><br><span class="line">    tid <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'teacher_id'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>需要获取字段注释<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; comments = studentDao.getComments();</span><br><span class="line">//[student_id, student_name, teacher_id]</span><br></pre></td></tr></table></figure></p>
<p>通过以下sql语句即可完成<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_comment</span><br><span class="line"><span class="keyword">from</span> information_schema.columns</span><br><span class="line"><span class="keyword">where</span> table_schema = <span class="keyword">database</span>()</span><br><span class="line"><span class="keyword">and</span> table_name = <span class="string">'student'</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自动装配@Autowired的三种方式</title>
    <url>/posts/Spring_uses_@Autowired_in_three_ways.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在IDEA升级2017版后，发现以前使用的<code>@Autowired</code>出现了个警告<code>Field injection is not recommended</code>。<br>虽然不是异常，但就是看着不舒服，所以google了一下，发现了<a href="http://stackoverflow.com/questions/39890849/what-exactly-is-field-injection-and-how-to-avoid-it" target="_blank" rel="noopener">stackoverflow</a> 已经有人提了这个问题，并得到了解答。<br><a id="more"></a></p>
<h1 id="Autowired的不推荐用法"><a href="#Autowired的不推荐用法" class="headerlink" title="@Autowired的不推荐用法"></a>@Autowired的不推荐用法</h1><p>在一个Bean内，可以使用<code>@Autowired</code>注入另一个Bean。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependency</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DI</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dependency dependency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>事实上，这就是我平常使用的方式，直接在<code>Field</code>上添加注解，简洁又好看。<br>但这是不推荐的使用方法。</p>
<h1 id="Autowired的三种使用方式"><a href="#Autowired的三种使用方式" class="headerlink" title="@Autowired的三种使用方式"></a>@Autowired的三种使用方式</h1><ol>
<li>通过构造器注入</li>
<li>通过setter方法注入</li>
<li>通过field反射注入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DI</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过构造器注入</span></span><br><span class="line">    <span class="keyword">private</span> DependencyA a;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DI</span><span class="params">(DependencyA a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过setter方法注入</span></span><br><span class="line">    <span class="keyword">private</span> DependencyB b;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDependencyB</span><span class="params">(DependencyB b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过field反射注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DependencyC c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h1><p><strong>如果你使用的是构造器注入</strong><br>恭喜你，当你有十几个甚至更多对象需要注入时，你的构造函数的<code>参数个数</code>可能会长到无法想像。</p>
<p><strong>如果你使用的是field反射注入</strong><br>如果不使用Spring框架，这个属性只能通过反射注入，太麻烦了！这根本不符合<code>JavaBean</code>规范。<br>还有，当你不是用过<code>Spring</code>创建的对象时，还可能引起<code>NullPointerException</code>。<br>并且，你不能用<code>final</code>修饰这个属性。</p>
<p><strong>如果你使用的是setter方法注入</strong><br>那么你将不能将属性设置为<code>final</code>。</p>
<h1 id="两者取其轻"><a href="#两者取其轻" class="headerlink" title="两者取其轻"></a>两者取其轻</h1><p>Spring3.0官方文档建议使用setter注入覆盖构造器注入。<br>Spring4.0官方文档建议使用构造器注入。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>如果注入的属性是<code>必选</code>的属性，则通过构造器注入。<br>如果注入的属性是<code>可选</code>的属性，则通过setter方法注入。<br>至于field注入，不建议使用。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://vojtechruzicka.com/field-dependency-injection-considered-harmful/" target="_blank" rel="noopener">Field Dependency Injection Considered Harmful</a></li>
<li><a href="http://stackoverflow.com/questions/39890849/what-exactly-is-field-injection-and-how-to-avoid-it" target="_blank" rel="noopener">What exactly is Field Injection and how to avoid it?</a></li>
</ol>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet3.0新特性</title>
    <url>/posts/Servlet3.0.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Servlet3.0</code>使用了注解来配置<code>web</code>应用，极大缩减了<code>web.xml</code>的配置。<br><a id="more"></a></p>
<h1 id="新增注解"><a href="#新增注解" class="headerlink" title="新增注解"></a>新增注解</h1><table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>@WebServlet</code></td>
<td style="text-align:left">修饰一个<code>Servlet</code>类</td>
</tr>
<tr>
<td style="text-align:left"><code>@WebFilter</code></td>
<td style="text-align:left">修饰一个<code>Filter</code>类</td>
</tr>
<tr>
<td style="text-align:left"><code>@WebListener</code></td>
<td style="text-align:left">修饰一个<code>Listener</code>类</td>
</tr>
<tr>
<td style="text-align:left"><code>@WebInitParam</code></td>
<td style="text-align:left">为<code>Servlet</code>、<code>Filter</code>类配置参数</td>
</tr>
<tr>
<td style="text-align:left"><code>@MultipartConfig</code></td>
<td style="text-align:left">指定<code>Servlet</code>处理文件上传</td>
</tr>
</tbody>
</table>
<h1 id="对Web模块支持"><a href="#对Web模块支持" class="headerlink" title="对Web模块支持"></a>对Web模块支持</h1><p><code>Servlet3.0</code>不再要求所有<code>Web</code>组件全部写在<code>web.xml</code>中。</p>
<p>需要在<code>META-INF</code>中添加<code>Web</code>模块部署描述符<code>web-fragment.xml</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="GBK" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-fragment</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">              version="</span><span class="attr">3.0</span>"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>模块名<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ordering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">after</span>&gt;</span><span class="comment">&lt;!-- 在哪些模块后加载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>模块1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">others</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- others --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">before</span>&gt;</span><span class="comment">&lt;!-- 在哪些模块前加载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>模块2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">others</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- others --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ordering</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Servlet、Filter、Listener --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-fragment</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以在<code>web.xml</code>中指定加载顺序<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">absolute-ordering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>模块名<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">others</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">absolute-ordering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="注解配置Web组件"><a href="#注解配置Web组件" class="headerlink" title="注解配置Web组件"></a>注解配置Web组件</h1><blockquote>
<p>不能在<code>web.xml</code>的<code>&lt;web-app/&gt;</code>指定<code>metadata-complete=&quot;true&quot;</code></p>
</blockquote>
<p>如果<code>metadata-complete</code>设置为<code>true</code>，部署工具必须必须忽略存在于应用的类文件中的所有<code>servlet</code>注解和<code>web fragments</code>。<br>如果<code>metadata-complete</code>属性没有指定或设置为<code>false</code>，部署工具必须检查应用的类文件的注解，并扫描<code>web fragments</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@WebFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="动态注册Web组件"><a href="#动态注册Web组件" class="headerlink" title="动态注册Web组件"></a>动态注册Web组件</h1><p><code>Servlet3.0</code>提供了<code>ServletContext</code>添加组件的方式<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 添加Servlet */</span> </span><br><span class="line"><span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, </span></span></span><br><span class="line"><span class="function"><span class="params">    String className)</span></span>; </span><br><span class="line"><span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, </span></span></span><br><span class="line"><span class="function"><span class="params">    Servlet servlet)</span></span>; </span><br><span class="line"><span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, </span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;? extends Servlet&gt; servletClass)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 添加Filter */</span> </span><br><span class="line"><span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName, </span></span></span><br><span class="line"><span class="function"><span class="params">    String className)</span></span>; </span><br><span class="line"><span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName, Filter filter)</span></span>; </span><br><span class="line"><span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName, </span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;? extends Filter&gt; filterClass)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 添加Listener */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(String className)</span></span>; </span><br><span class="line"><span class="keyword">public</span> &lt;T extends EventListener&gt; <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(T t)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Class&lt;? extends EventListener&gt; listenerClass)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="通过ServletContextListener注册"><a href="#通过ServletContextListener注册" class="headerlink" title="通过ServletContextListener注册"></a>通过ServletContextListener注册</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里不用@Servlet注解配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"服务器关闭时会调用该方法"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"服务器启动时会调用该方法"</span>);  </span><br><span class="line">        ServletContext context = contextEvent.getServletContext();  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//注册一个没有使用@WebServlet注解的类为Servlet</span></span><br><span class="line">        ServletRegistration register = context.addServlet(<span class="string">"helloServlet"</span>, HelloServlet<span class="class">.<span class="keyword">class</span>)</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//为动态注册的Servlet设定访问URL(可设定多个)  </span></span><br><span class="line">        register.addMapping(<span class="string">"/hello"</span>, <span class="string">"/servlet/hello"</span>);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//为动态注册的Servlet设定初始参数</span></span><br><span class="line">        <span class="comment">//相当于以前的&lt;init-param&gt;</span></span><br><span class="line">        register.setInitParameter(<span class="string">"logPath"</span>, <span class="string">"/app/log"</span>);  </span><br><span class="line">        register.setInitParameter(<span class="string">"savePath"</span>, <span class="string">"/app/upload"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过ServletContainerInitializer注册"><a href="#通过ServletContainerInitializer注册" class="headerlink" title="通过ServletContainerInitializer注册"></a>通过ServletContainerInitializer注册</h2><p>添加<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>文件。<br>文件内容为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.ahao.demo.MyServletContainerInitializer</span><br></pre></td></tr></table></figure></p>
<p>指定自定义的<code>ServletContainerInitializer</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(&#123; WebApplicationInitializer<span class="class">.<span class="keyword">class</span> &#125;) </span></span><br><span class="line"><span class="class">//@<span class="title">HandlesTypes</span>(</span>&#123; HttpServlet<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class">//实现或者继承<span class="title">HandlesTypes</span>注解中的类的都会被加载</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//以Set集合的方式传递注解中指定的类型的所有子类(包括子接口、实现类等)的class对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">                            <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 动态注册Servlet</span></span><br><span class="line">        ServletContext context = sce.getServletContext();</span><br><span class="line">        ServletRegistration.Dynamic servlet = context.addServlet(<span class="string">"myServlet"</span>, MyServlet<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        dynamicServlet.addMapping(<span class="string">"/myServlet"</span>);</span><br><span class="line">        dynamicServlet.setAsyncSupported(<span class="keyword">true</span>);</span><br><span class="line">        dynamicServlet.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 动态注册Filter</span></span><br><span class="line">        FilterRegistration.Dynamic filter = context.addFilter(<span class="string">"MyFilter"</span>, MyFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 动态注册Listener</span></span><br><span class="line">        context.addListener(<span class="string">"com.ahao.demo.MyListener"</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p><code>HttpServletRequest</code>提供处理文件上传的支持。</p>
<ol>
<li><code>Part getPart(String name)</code></li>
<li><code>Collection&lt;Part&gt; getParts()</code></li>
</ol>
<p><code>Part</code>对应一个文件上传域，支持访问文件类型、大小、输入流等。<br>文件上传需要给<code>form</code>表单添加<code>enctype</code>属性，该属性有三个值：</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>application/x-www-form-urlencoded</code></td>
<td style="text-align:left">默认编码方式，对<code>form</code>的<code>value</code>属性进行<code>URL</code>编码</td>
</tr>
<tr>
<td style="text-align:left"><code>multipart/form-data</code></td>
<td style="text-align:left">二进制方式处理表单数据，上传文件用</td>
</tr>
<tr>
<td style="text-align:left"><code>text/plain</code></td>
<td style="text-align:left">适用于直接通过表单发送邮件</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>Servlet</code>中处理上传数据，使用<code>@MultipartConfig</code>修饰，或者在<code>web.xml</code>中<code>&lt;servlet&gt;</code>标签中添加<code>&lt;multipart-config/&gt;</code>子标签<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"upload"</span>,urlPatterns=&#123;<span class="string">"/upload"</span>&#125;)</span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        Part part = request.getPart(<span class="string">"myfile"</span>);</span><br><span class="line">        out.println(<span class="string">"文件类型:"</span>+part.getContentType()+<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"文件大小:"</span>+part.getSize()+<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        part.write(getServletContext().getRealPath(<span class="string">"/uploadFiles"</span>)+<span class="string">"/"</span>+<span class="string">"myfile"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h1><blockquote>
<p>支持<code>Servlet</code>、<code>Filter</code>。</p>
</blockquote>
<p>当<code>Servlet</code>执行耗时操作时，必须等完成操作才能生成响应。<br><code>Servlet3.0</code>允许<code>Servlet</code>创建一个线程去执行耗时操作。</p>
<h2 id="先要给Servlet配置允许异步操作"><a href="#先要给Servlet配置允许异步操作" class="headerlink" title="先要给Servlet配置允许异步操作"></a>先要给<code>Servlet</code>配置允许异步操作</h2><ul>
<li><p>在<code>xml</code>中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在注解中配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPattern=<span class="string">"/async"</span>,asyncSupported=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="通过ServletRequest创建AsyncContext对象"><a href="#通过ServletRequest创建AsyncContext对象" class="headerlink" title="通过ServletRequest创建AsyncContext对象"></a>通过ServletRequest创建AsyncContext对象</h2><p>通过<code>AsyncContext</code>类实现，重复调用创建方法得到同一个<code>AsyncContext</code>对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPattern=<span class="string">"/async"</span>,asyncSupported=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        AsyncContext actx = request.startAsync();</span><br><span class="line">        <span class="comment">//AsyncContext actx = reuqets.startAsync(request,response);</span></span><br><span class="line">        actx.setTimeout(<span class="number">3000</span>);<span class="comment">//设置超时时间</span></span><br><span class="line">        actx.start(<span class="keyword">new</span> Executor(actx));<span class="comment">//启用线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="异步监听"><a href="#异步监听" class="headerlink" title="异步监听"></a>异步监听</h2><p>当需要了解异步操作执行细节时，可以使用<code>AsyncListener</code>监听器。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//actx.addListener(new MyAsyncListener());</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncListener</span> <span class="keyword">implements</span> <span class="title">AsyncListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartAsync</span><span class="params">(AsyncContext event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异步调用开始"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(AsyncContext event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异步调用完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(AsyncContext event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异步调用异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(AsyncContext event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异步调用超时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC简单使用</title>
    <url>/posts/Spring_MVC_simple_use.html</url>
    <content><![CDATA[<h1 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h1><h2 id="导入maven"><a href="#导入maven" class="headerlink" title="导入maven"></a>导入maven</h2><ul>
<li><a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc" target="_blank" rel="noopener">spring-webmvc</a></li>
<li><a href="https://mvnrepository.com/artifact/javax.servlet/jstl" target="_blank" rel="noopener">jstl</a></li>
<li><a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12" target="_blank" rel="noopener">slf4j-log4j12</a></li>
<li><a href="https://mvnrepository.com/artifact/javax.servlet/servlet-api/3.0.1" target="_blank" rel="noopener">servlet-api</a></li>
</ul>
<a id="more"></a>
<h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>JavaeeDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/configs/spring/spring-bean.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring webmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/configs/spring/mvc-dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置spring的xml"><a href="#配置spring的xml" class="headerlink" title="配置spring的xml"></a>配置spring的xml</h2><p><code>/WEB-INF/configs/spring/mvc-dispatcher-servlet.xml</code>的配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span><span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ahao.javaeeDemo"</span>&gt;</span><span class="comment">&lt;!--扫描包下的Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span><span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:resources mapping="/resources/**" location="/resources"/&gt;--&gt;</span><span class="comment">&lt;!--导入静态资源css等--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ViewResolver--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span><span class="comment">&lt;!--配置多个Resolver，InternalResourceViewResolver要排在最后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>/WEB-INF/configs/spring/spring-bean.xml</code>的配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span><span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ahao.javaeeDemo"</span>&gt;</span><span class="comment">&lt;!--扫描包下的注解，排除Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="url映射"><a href="#url映射" class="headerlink" title="url映射"></a>url映射</h1><h2 id="get、post方式匹配"><a href="#get、post方式匹配" class="headerlink" title="get、post方式匹配"></a>get、post方式匹配</h2><p>使用<code>@RequestParam</code>注入参数，封装成对象再传入<code>model</code>，在<code>jsp</code>页面中用<code>EL</code>表达式获取即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>) <span class="comment">// 匹配http://localhost:8080/hello路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/mvc"</span>, method = RequestMethod.GET) <span class="comment">// 匹配http://localhost:8080/hello/mvc，只接收get请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, <span class="comment">// 匹配http://localhost:8080/hello/mvc?name=?</span></span></span><br><span class="line"><span class="function">                                Model model)</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(name);</span><br><span class="line">        model.addAttribute(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用ServletAPI"><a href="#使用ServletAPI" class="headerlink" title="使用ServletAPI"></a>使用ServletAPI</h2><p>直接注入<code>HttpServletRequest</code>或者<code>HttpSession</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/mvc"</span>, method=RequestMathod.GET) <span class="comment">// 匹配http://localhost:8080/hello/mvc?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);  <span class="comment">// 从request中获得请求参数</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(name);</span><br><span class="line">        request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="restful方式匹配"><a href="#restful方式匹配" class="headerlink" title="restful方式匹配"></a>restful方式匹配</h2><p>使用<code>@PathVariable</code>注入参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/mvc/&#123;name&#125;"</span>, method=RequestMethod.GET) <span class="comment">// 匹配http://localhost:8080/hello/mvc/hhh</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name, Map&lt;String,Object&gt; model)</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(name);</span><br><span class="line">        model.put(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> home;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>jsp提交页面<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;%=request.getContextPath()%&gt;/hello/doUpload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置spring<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--推迟文件解析，用以捕获文件大小异常--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置Controller<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;name&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name, Model model)</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/doUpload"</span>,method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件名:"</span>+file.getOriginalFilename());</span><br><span class="line">            FileUtils.copyInputStreamToFile(file.getInputStream(), <span class="keyword">new</span> File(<span class="string">"D:\\"</span>, file.getOriginalFilename+<span class="string">".bak"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span>+file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="返回json格式数据"><a href="#返回json格式数据" class="headerlink" title="返回json格式数据"></a>返回json格式数据</h1><p>配置spring<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contentNegotiationManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.accept.ContentNegotiationManagerFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"htm"</span> <span class="attr">value</span>=<span class="string">"text/html"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiationViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentNegotiationManager"</span> <span class="attr">ref</span>=<span class="string">"contentNegotiationManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置Controller<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/json1/&#123;name&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">getUserJson1</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"value"</span>/json2/&#123;name&#125;<span class="string">", method=ReuqestMethod.GET)</span></span><br><span class="line"><span class="string">    public ResponseEntity&lt;User&gt; getUserJson2(@PathVariable String name)&#123;</span></span><br><span class="line"><span class="string">        return new ResponseEntity&lt;User&gt;(new User(name), HttpStatus.OK)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><ul>
<li>实现<code>HandlerInterceptor</code>接口</li>
<li>实现<code>WebRequestInterceptor</code>接口 : 不能拦截请求</li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务管理</title>
    <url>/posts/Spring_Transaction_Management.html</url>
    <content><![CDATA[<h1 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h1><ul>
<li>PlatformTransactionManager事务管理器</li>
<li>TransactionDefinition事务定义信息<ul>
<li>ISOLATION隔离级别</li>
<li>PROPAGATION传播行为</li>
<li>TIMEOUT超时信息</li>
</ul>
</li>
<li>TransactionStatus事务具体运行状态</li>
</ul>
<a id="more"></a>
<h1 id="编程式事务管理（很少应用）"><a href="#编程式事务管理（很少应用）" class="headerlink" title="编程式事务管理（很少应用）"></a>编程式事务管理（很少应用）</h1><p>通过<code>TransactionTemplate</code>手动管理事务，在<code>service</code>使用<code>TransactonTemplate</code>，依赖<code>DataSourceTransactionManager</code>，依赖<code>DataSource</code>构造<br><code>spring</code>配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池DataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimeZone=GMT&amp;useUnicode=true&amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span><span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--在service层注入事务管理模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span><span class="comment">&lt;!--注入事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span><span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>service</code>层编写<code>java</code>代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao dao;</span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    <span class="comment">// getter And Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String out, String in, Double money)</span></span>&#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">                dao.outMoney(out, money);</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;<span class="comment">//引发异常，事务回滚</span></span><br><span class="line">                dao.inMoney (in, money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h1><p>通过<code>XML</code>配置，代码侵入性小，通过<code>AOP</code>实现<br>需要导入</p>
<ul>
<li><a href="http://mvnrepository.com/artifact/aopalliance/aopalliance" target="_blank" rel="noopener">http://mvnrepository.com/artifact/aopalliance/aopalliance</a></li>
<li><a href="http://mvnrepository.com/artifact/org.springframework/spring-aop" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.springframework/spring-aop</a> </li>
</ul>
<h2 id="基于TransactionProxyFactoryBean的方式（很少应用）"><a href="#基于TransactionProxyFactoryBean的方式（很少应用）" class="headerlink" title="基于TransactionProxyFactoryBean的方式（很少应用）"></a>基于TransactionProxyFactoryBean的方式（很少应用）</h2><p>缺点是要为每个增强类添加一个<code>TransactionProxyFactoryBean</code>配置。<br><code>spring</code>配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池DataSource--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountServiceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>/&gt;</span><span class="comment">&lt;!--注入被增强的对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span><span class="comment">&lt;!--注入事务管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;prop key"save*表示以save开头的方法"&gt;PROPAGATION(事务传播行为),ISOLATION(事务隔离级别),readOnly(只读),-Exception(发生某些异常回滚),+Exception(发生某些异常不回滚)&lt;/prop&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transfer"</span>&gt;</span>PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span><span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基于AspectJ的XML方式（推荐）"><a href="#基于AspectJ的XML方式（推荐）" class="headerlink" title="基于AspectJ的XML方式（推荐）"></a>基于AspectJ的XML方式（推荐）</h2><p>需要导入    </p>
<ul>
<li><a href="http://mvnrepository.com/artifact/org.aspectj/aspectjweaver" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.aspectj/aspectjweaver</a> </li>
<li><a href="http://mvnrepository.com/artifact/org.springframework/spring-aop" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.springframework/spring-aop</a></li>
</ul>
<p><code>spring</code>配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池DataSource--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">no-rollback-for</span>=<span class="string">"MyException1"</span> <span class="attr">rollback-for</span>=<span class="string">"MyException2"</span> <span class="attr">timeout</span>=<span class="string">"-1"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.ahao.javaeeDemo.service.AccountService+.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span><span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基于注解的方式（代码侵入性强，配置简单）"><a href="#基于注解的方式（代码侵入性强，配置简单）" class="headerlink" title="基于注解的方式（代码侵入性强，配置简单）"></a>基于注解的方式（代码侵入性强，配置简单）</h2><p><code>spring</code>配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池DataSource--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.service"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span><span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在类上添加注解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT,readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDaoImpl dao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(AccountDaoImpl dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String out, String in, Double money)</span> </span>&#123;</span><br><span class="line">        dao.outMoney(out, money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        dao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax详解</title>
    <url>/posts/Ajax_simple_use.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>AJAX</code>即<code>Asynchronous Javascript And XML（异步JavaScript和XML）</code>，是指一种创建交互式网页应用的网页开发技术。<br><code>AJAX</code> = 异步 <code>JavaScript</code>和<code>XML</code>（标准通用标记语言的子集）。<br><code>AJAX</code> 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，<code>AJAX</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 <code>AJAX</code>）如果需要更新内容，必须重载整个网页页面。</p>
<a id="more"></a>
<h1 id="获取XMLHttpRequest对象"><a href="#获取XMLHttpRequest对象" class="headerlink" title="获取XMLHttpRequest对象"></a>获取XMLHttpRequest对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXMLHttpRequest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr;</span><br><span class="line">    <span class="keyword">try</span>&#123;    </span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//firfox, Opera 8.0+, Safari</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = getXMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://localhost:8080/test'</span>, <span class="literal">true</span>);<span class="comment">//true是异步提交</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);<span class="comment">//post提交表单必须</span></span><br><span class="line">xhr.send(<span class="string">'username=张三&amp;sex=男'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span> &amp;&amp; request.status===<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>).innerHTML = xhr.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="jQuery实现AJAX"><a href="#jQuery实现AJAX" class="headerlink" title="jQuery实现AJAX"></a>jQuery实现AJAX</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#id'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            contentType : <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">            timeout : <span class="number">100000</span>, </span><br><span class="line">            url: <span class="string">'http://localhost:8080/test'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                name:<span class="string">'张三'</span>,</span><br><span class="line">                sex:<span class="string">'男'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">'加载中'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> json = <span class="built_in">eval</span>(data);</span><br><span class="line">                alert(json);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">               alert(<span class="string">'失败'</span>+xhr.status);<span class="comment">//传入XMLHttpRequest对象</span></span><br><span class="line">            &#125;,</span><br><span class="line">            done : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'DONE'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2学习总结</title>
    <url>/posts/Struts2_summarize.html</url>
    <content><![CDATA[<h1 id="Action搜索顺序"><a href="#Action搜索顺序" class="headerlink" title="Action搜索顺序"></a>Action搜索顺序</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"myAction"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>访问<code>http://localhost:8080/test/aaa/bbb/ccc/myAction</code>时，先查找<code>ccc</code>命名空间的包下有没有<code>myAction</code>。没有再找到<code>bbb</code>，再找<code>aaa</code>。都找不到<code>myAction</code>。这时找到<code>test</code>命名空间的包下，找到了<code>myAction</code>，搜索结束。如果还是没有找到<code>myAction</code>，则往默认命名空间下找，找不到抛出。</p>
<h1 id="result的type属性"><a href="#result的type属性" class="headerlink" title="result的type属性"></a>result的type属性</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"myAction"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/index.jsp?username=$&#123;username&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下是转发（<code>dispatcher</code>）。</p>
<ul>
<li>重定向是<code>redirect</code>，可以用<code>${username}</code>传递<code>Action</code>中的属性，中文记得使用<code>URLEncoder.encode(&quot;中文&quot;, &quot;UTF-8&quot;)</code>。</li>
<li>重定向<code>Action</code>是<code>redirectAction</code>，在<code>result</code>标签下的<code>namespace</code>标签可以指定其他命名空间的<code>Action</code>。</li>
<li>查看源码是<code>plainText</code>，中文要在<code>result</code>标签加上<code>&lt;param name=&quot;charSet&quot;&gt;UTF-8&lt;/param&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS背景</title>
    <url>/posts/css_how_to_set_background.html</url>
    <content><![CDATA[<h1 id="设置纯色背景"><a href="#设置纯色背景" class="headerlink" title="设置纯色背景"></a>设置纯色背景</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:gray</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="设置图片背景"><a href="#设置图片背景" class="headerlink" title="设置图片背景"></a>设置图片背景</h1><p>如果同时设置纯色背景和图片背景，则纯色背景在图片背景之下。并且图片背景会平铺整个屏幕。</p>
<ul>
<li><code>background-repeat</code>属性可以设置平铺方式，<code>repeat-x</code>、<code>repeat-y</code>、<code>no-repeat</code>。</li>
<li><code>background-position</code>属性可以设置图片背景的位置。<code>top</code>、<code>bottom</code>等。</li>
<li><code>background-attachment</code>属性可以设置图片是否随文档滚动。<code>fixed</code>、<code>scroll</code>。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        background-image:url(http://cn.bing.com/sa/simg/CN_Logo_Gray.png);</span><br><span class="line"><span class="css">        <span class="selector-tag">background-repeat</span><span class="selector-pseudo">:no-repeat</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-position</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBean详解</title>
    <url>/posts/Spring_Bean.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<code>Spring</code>中，类的创建不再由<code>new</code>进行，而是交给<code>Spring</code>通过<code>xml</code>文件进行反射创建，这种叫做控制反转<code>IoC</code>(<code>Inversion of Control</code>)，也叫做依赖注入<code>DI</code>(<code>Dependency Injection</code>)。<br><a id="more"></a></p>
<h1 id="简单的Bean例子"><a href="#简单的Bean例子" class="headerlink" title="简单的Bean例子"></a>简单的Bean例子</h1><p>导入<a href="https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.6.RELEASE" target="_blank" rel="noopener">maven项目</a><br>创建一个<code>Person</code>类，并在xml中配置bean信息<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="gbk"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personId"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在测试类中通过<code>ApplicationContext</code>进行创建对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-bean.xml"</span>);</span><br><span class="line">    Person p1 = ac.getBean(<span class="string">"personId"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(p1.getName()+<span class="string">","</span>+p1.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><ol>
<li>Bean先new进行<code>实例化</code></li>
<li>然后<code>注入属性</code>。</li>
<li>若实现了<code>BeanNameAware</code>接口，将Bean的<code>ID</code>传入<code>setBeanName()</code>方法。</li>
<li>若实现了<code>BeanFactoryAware</code>接口，将BeanFactory容器实例传入<code>setBeanFactory()</code>方法。</li>
<li>若实现了<code>ApplicationContextAware</code>接口，通过<code>setApplicationContext()</code>方法获取应用上下文。</li>
<li>调用<code>BeanPostProcessor</code>后处理器的预初始化方法。</li>
<li>调用<code>InitializingBean</code>接口<code>afterPropertiesSet()</code>方法。</li>
<li>配置文件<code>bean</code>标签下的<code>init-method</code>属性指定的<code>方法</code>。</li>
<li>配置文件<code>beans</code>标签下的<code>default-init-method</code>全局属性指定的<code>方法</code>。</li>
<li>调用<code>BeanPostProcessor</code>后处理器的预初始化后方法。</li>
<li>使用Bean</li>
<li>调用<code>DisposableBean</code>接口<code>destory</code>方法。</li>
<li>配置文件<code>bean</code>标签下的<code>destory-method</code>属性指定的<code>方法</code>。</li>
<li>配置文件<code>beans</code>标签下的<code>default-destory-method</code>全局属性指定的<code>方法</code>。</li>
</ol>
<h1 id="Bean的创建"><a href="#Bean的创建" class="headerlink" title="Bean的创建"></a>Bean的创建</h1><p><code>Bean</code>的创建都交由<code>xml</code>配置文件执行，获取<code>Bean</code>实例都是通过<code>getBean</code>方法进行。</p>
<h2 id="普通new创建"><a href="#普通new创建" class="headerlink" title="普通new创建"></a>普通new创建</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.Person"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="静态工厂创建"><a href="#静态工厂创建" class="headerlink" title="静态工厂创建"></a>静态工厂创建</h2><p>需要一个静态工厂类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">"chinese"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Chinese();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>xml</code>文件中配置，指定<code>factory-method</code>属性，获取实例用<code>getBean()</code>方法即可<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"chinese"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.factory.PersonFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPerson"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"chinese"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"axe"</span> <span class="attr">ref</span>=<span class="string">"steelAxe"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="实例工厂创建"><a href="#实例工厂创建" class="headerlink" title="实例工厂创建"></a>实例工厂创建</h2><p>需要一个工厂类，注意这里和静态工厂的不同是不用<code>static</code>修饰方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">"chinese"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Chinese();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>xml</code>文件中配置，指定<code>factory-method</code>属性，获取实例用<code>getBean()</code>方法即可<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personFactory"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.factory.PersonFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"chinese"</span> <span class="attr">factory-bean</span>=<span class="string">"personFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPerson"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"chinese"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"axe"</span> <span class="attr">ref</span>=<span class="string">"steelAxe"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="工厂Bean创建"><a href="#工厂Bean创建" class="headerlink" title="工厂Bean创建"></a>工厂Bean创建</h2><p>工厂<code>Bean</code>继承自<code>FactoryBean</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(person == <span class="keyword">null</span>)&#123;</span><br><span class="line">            person = <span class="keyword">new</span> Chinese();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> person.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>spring-bean.xml</code>中配置，获取<code>BeanFactory</code>时使用<code>&amp;chinese</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"chinese"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.factory.PersonFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>和上面一样使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-bean.xml"</span>);</span><br><span class="line">    Person p1 = ac.getBean(<span class="string">"chinese"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    p1.setAxe(<span class="keyword">new</span> StoneAxe());</span><br><span class="line">    p1.useAxe();</span><br><span class="line">    System.out.print(ac.getBean(<span class="string">"&amp;chinese"</span>));<span class="comment">//获取BeanFactory</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="scope作用域"><a href="#scope作用域" class="headerlink" title="scope作用域"></a>scope作用域</h1><p>在<code>bean</code>标签中的<code>scope</code>属性有五个值</p>
<ul>
<li><code>singleton</code>：单例模式，整个Spring容器中只有一个实例</li>
<li><code>prototype</code>：原型模式，每次通过getBean方法都将产生一个新的实例</li>
<li><code>request</code>：对每次request请求，都会产生一个新的实例</li>
<li><code>session</code>：对每次session会话，都会产生一个新的实例</li>
<li><code>global session</code>：<a href="https://stackoverflow.com/questions/15407038/spring-bean-scopes-session-and-globalsession" target="_blank" rel="noopener">spring-bean-scopes-session-and-globalsession</a><br>其中<code>request</code>、<code>session</code><br>在<code>Servlet2.4</code>以上要在<code>web.xml</code>中配置<code>Listener</code><br>在<code>Servlet2.4</code>以下要在<code>web.xml</code>中配置<code>Filter</code><br>并且要导入<a href="https://mvnrepository.com/artifact/org.springframework/spring-web" target="_blank" rel="noopener">maven项目</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="comment">&lt;!--Servlet2.4以上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span><span class="comment">&lt;!--Servlet2.4以下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>requestContextFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.RequestContextFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>requestContextFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="自动装配注入"><a href="#自动装配注入" class="headerlink" title="自动装配注入"></a>自动装配注入</h1><p>自动装配减少了配置文件的工作量，但降低了依赖关系的透明性和清晰性。<br>显示指定的依赖会覆盖自动装配的依赖</p>
<h2 id="byName规则"><a href="#byName规则" class="headerlink" title="byName规则"></a>byName规则</h2><p>在<code>bean</code>标签添加<code>autowire=&quot;byName&quot;</code>属性，当<code>A</code>类中有<code>setB</code>方法，且<code>beans</code>中有<code>id</code>为<code>b</code>的<code>bean</code>，则自动装配注入。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.Person"</span> <span class="attr">autoWire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"axe"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.StoneAxe"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="byType规则"><a href="#byType规则" class="headerlink" title="byType规则"></a>byType规则</h2><p>在<code>bean</code>标签添加<code>autowire=&quot;byType&quot;</code>属性，当<code>A</code>类中有<code>B</code>类型的<code>Field</code>，且<code>beans</code>中只有一个<code>B</code>类型或者<code>B</code>的子类型的<code>bean</code>，则自动装配注入。<br>如果有多个匹配的<code>bean</code>，则抛出异常，使用<code>autowire-candidate=&quot;false&quot;</code>即可忽略该<code>bean</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.Person"</span> <span class="attr">autoWire</span>=<span class="string">"byType"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.StoneAxe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"steelAxe"</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.bean.SteelAxe"</span> <span class="attr">autowire-candidate</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ApplicationContext的事件机制</title>
    <url>/posts/The_event_mechanism_of_ApplicationContext.html</url>
    <content><![CDATA[<h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><p>完成事件机制首先需要一个事件源和事件监听器<br><code>ApplicationEvent</code>事件和<code>ApplicationListener</code>监听器<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getSource()+<span class="string">" : hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">SayEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SayEvent sayEvent)</span> </span>&#123;</span><br><span class="line">        sayEvent.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>并且要在<code>xml</code>文件中配置好<code>ApplicationListener</code>监听器<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.SayListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过<code>ApplicationContext</code>发布事件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-bean.xml"</span>);</span><br><span class="line">    SayEvent event = <span class="keyword">new</span> SayEvent(<span class="string">"由testEvent()发出"</span>);</span><br><span class="line">    ac.publishEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Spring</code>的事件监听机制是<strong>观察者模式</strong>的实现。<br>监听器可以监听任何事件。<br>输出结果：<code>由testEvent()发出 : hello world</code></p>
<h1 id="内置事件"><a href="#内置事件" class="headerlink" title="内置事件"></a>内置事件</h1><p>Spring提供如下几个内置事件：</p>
<ol>
<li><p><code>ContextRefreshedEvent</code>：<code>ApplicationContext</code>容器初始化或刷新时触发该事件。此处的初始化是指：所有的<code>Bean</code>被成功装载，后处理<code>Bean</code>被检测并激活，所有<code>Singleton Bean</code> 被预实例化，<code>ApplicationContext</code>容器已就绪可用</p>
</li>
<li><p><code>ContextStartedEvent</code>：当使用<code>ConfigurableApplicationContext</code>(<code>ApplicationContext</code>的子接口）接口的<code>start()</code>方法启动<code>ApplicationContext</code>容器时触发该事件。容器管理声明周期的<code>Bean</code>实例将获得一个指定的启动信号，这在经常需要停止后重新启动的场合比较常见</p>
</li>
<li><p><code>ContextClosedEvent</code>：当使用<code>ConfigurableApplicationContext</code>接口的<code>close()</code>方法关闭<code>ApplicationContext</code>时触发该事件</p>
</li>
<li><p><code>ContextStoppedEvent</code>：当使用<code>ConfigurableApplicationContext</code>接口的<code>stop()</code>方法使<code>ApplicationContext</code>容器停止时触发该事件。此处的停止，意味着容器管理生命周期的<code>Bean</code>实例将获得一个指定的停止信号，被停止的<code>Spring</code>容器可再次调用<code>start()</code>方法重新启动</p>
</li>
<li><p><code>RequestHandledEvent</code>：<code>Web</code>相关事件，只能应用于使用<code>DispatcherServlet</code>的<code>Web</code>应用。在使用<code>Spring</code>作为前端的<code>MVC</code>控制器时，当<code>Spring</code>处理用户请求结束后，系统会自动触发该事件。</p>
</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://my.oschina.net/itblog/blog/203744" target="_blank" rel="noopener">Spring中ApplicationContext的事件机制</a></li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基本使用</title>
    <url>/posts/Servlet_usage.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Servlet</code>是用<code>Java</code>编写的服务器端程序。<br>其主要功能在于交互式地浏览和修改数据，生成动态<code>Web</code>内容。<br>狭义的<code>Servlet</code>是指<code>Java</code>语言实现的一个接口，广义的<code>Servlet</code>是指任何实现了这个<code>Servlet</code>接口的类，<br>一般情况下，人们将<code>Servlet</code>理解为后者。<br><a id="more"></a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>实现<code>javax.servlet.Servlet</code>接口</li>
<li>继承<code>javax.servlet.GenericServlet</code>抽象类（实现了<code>Servlet</code>接口）</li>
<li>继承<code>javax.servlet.http.HttpServlet</code>类（继承自<code>GenericServlet</code>类）（推荐）</li>
</ul>
<p>先写一个类继承自<code>HttpServlet</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理get请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理post请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>并在<code>web.xml</code>中配置<code>Servlet</code>，对应在<code>ServletConfig</code>类中<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>                                   <span class="comment">&lt;!--自己命名的Servlet名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ahao.javaeeDemo.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> <span class="comment">&lt;!--Servlet所对应的类，用于反射创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span> <span class="comment">&lt;!--服务器开始就创建Servlet，整型数代表加载优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> <span class="comment">&lt;!--一个参数对应一个init-param标签--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>myParam<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> <span class="comment">&lt;!--初始化参数名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>第一个参数<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> <span class="comment">&lt;!--初始化参数值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!--自己命名的Servlet名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>      <span class="comment">&lt;!--访问Servlet的url路径，可以设置多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="web-xml介绍"><a href="#web-xml介绍" class="headerlink" title="web.xml介绍"></a>web.xml介绍</h1><p>所有项目的<code>web.xml</code>都有一个父的<code>web.xml</code>，位于<code>Tomcat/conf/web.xml</code><br>其中有两个默认的<code>Servlet</code></p>
<ul>
<li><code>default</code>：解析<code>/</code>的<code>url</code>地址，即所有<code>servlet</code>都不匹配时，执行<code>default</code>，返回<code>404</code>等各种错误</li>
<li><code>jsp</code>：解析<code>jsp</code>后缀的<code>url</code>地址</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==================default Servlet======================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==================default Servlet======================--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--==================JSP Servlet======================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==================JSP Servlet======================--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>反射详解</title>
    <url>/posts/Java_Reflection.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习框架底层必须要掌握反射。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 属性 */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 构造器 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/** getter And Setter */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="获取类对象的三种方法"><a href="#获取类对象的三种方法" class="headerlink" title="获取类对象的三种方法"></a>获取类对象的三种方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClass</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    Class c1 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class c2 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line">    Class c3 = Class.forName(<span class="string">"com.ahao.javaeeDemo.Person"</span>);</span><br><span class="line">    System.out.print(c1+<span class="string">"\n"</span>+c2+<span class="string">"\n"</span>+c3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNew</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">		IllegalAccessException, InstantiationException,</span></span><br><span class="line"><span class="function">		NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">    Class clazz = Class.forName(<span class="string">"com.ahao.javaeeDemo.Person"</span>);</span><br><span class="line">    Person p1 = (Person) clazz.newInstance();</span><br><span class="line">    System.out.println(<span class="string">"无参构造方法："</span>+p1.toString());</span><br><span class="line">    Person p2 = (Person) clazz.getConstructor(String.class, int.class).newInstance("张三", 12);</span><br><span class="line">    System.out.println(<span class="string">"有参构造方法："</span>+p2.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="操作Field"><a href="#操作Field" class="headerlink" title="操作Field"></a>操作Field</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testField</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">		NoSuchFieldException,</span></span><br><span class="line"><span class="function">		IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">    Class clazz = Class.forName(<span class="string">"com.ahao.javaeeDemo.Person"</span>);</span><br><span class="line">    Person p1 = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">"name"</span>);<span class="comment">//获取一个自己声明的Field，要访问父类Field要用getField()</span></span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);<span class="comment">//默认只能操作public，如果要操作其他权限，需要使用这个方法</span></span><br><span class="line">    name.set(p1, <span class="string">"张三"</span>);<span class="comment">//相当于p1.name = "张三"</span></span><br><span class="line">    System.out.println(p1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="操作Method"><a href="#操作Method" class="headerlink" title="操作Method"></a>操作Method</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">		IllegalAccessException, InstantiationException,</span></span><br><span class="line"><span class="function">		NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">    Class clazz = Class.forName(<span class="string">"com.ahao.javaeeDemo.Person"</span>);</span><br><span class="line">    Person p1 = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    Method method = clazz.getDeclaredMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//获取一个自己声明的Method，要访问父类Field要用getMethod()</span></span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);<span class="comment">//默认只能操作public，如果要操作其他权限，需要使用这个方法</span></span><br><span class="line">    method.invoke(p1, <span class="string">"张三"</span>);<span class="comment">//相当于p1.setName("张三")</span></span><br><span class="line">    System.out.println(p1.toString());</span><br><span class="line">    <span class="comment">//method.invoke(null, args);//当对象为null时，操作static方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat常用操作</title>
    <url>/posts/Tomcat_common_setting.html</url>
    <content><![CDATA[<h1 id="更改端口号"><a href="#更改端口号" class="headerlink" title="更改端口号"></a>更改端口号</h1><p><code>Tomcat</code>默认端口号为<code>8080</code>，在<code>Tomcat</code>目录的<code>/conf/server.xml</code>中配置。<br>找到如下代码，将<code>8080</code>改为想要修改的端口号即可<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略无关代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略无关代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="外部应用"><a href="#外部应用" class="headerlink" title="外部应用"></a>外部应用</h1><p><code>Tomcat</code>默认应用在<code>webapps</code>文件夹中，如果在外部编写<code>javaweb</code>应用，需要在<code>/conf/server.xml</code>编写代码，或者<code>/conf/Catalina/localhost</code>中创建<code>xml</code>文件。<br>在地址栏输入对应<code>url</code>即可访问。</p>
<h2 id="在server-xml中配置"><a href="#在server-xml中配置" class="headerlink" title="在server.xml中配置"></a>在server.xml中配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;Context path="url路径名"　docBase="实际项目在磁盘中地址" /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"helloWorld"</span>　<span class="attr">docBase</span>=<span class="string">"C:/HelloWorld"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在catalina-localhost中配置"><a href="#在catalina-localhost中配置" class="headerlink" title="在catalina/localhost中配置"></a>在catalina/localhost中配置</h2><p>创建一个以<code>url</code>路径名命名的<code>xml</code>文件<code>helloWorld.xml</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"C:/HelloWorld"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="映射虚拟主机"><a href="#映射虚拟主机" class="headerlink" title="映射虚拟主机"></a>映射虚拟主机</h1><p>浏览器使用<code>80</code>端口，如<code>http://www.test.com</code>和<code>http://www.test.com:80</code>等价。<br>在<code>%windir%\system32\drivers\etc\hosts</code>中添加<code>127.0.0.1 http://www.test.com</code><br>在<code>server.xml</code>中配置新的<code>host</code>信息<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.test.com"</span>  <span class="attr">appBase</span>=<span class="string">"C:/helloworld"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>XML语法详解</title>
    <url>/posts/XML_syntax.html</url>
    <content><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>目前<code>XML</code>有<code>1.0</code>和<code>1.1</code>两个版本，但是<code>1.1</code>不向下兼容，常用的是<code>1.0</code>版本<br>只能有一个根标签元素<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h1><p>语法<code>&lt;![CDATA[内容]]&gt;</code>，解决频繁转义字符的问题，当成文本内容<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>&lt;![CDATA[(1&lt;2)&amp;&amp;(2&lt;3)?true:false;]]&gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="PI指令设置XML样式"><a href="#PI指令设置XML样式" class="headerlink" title="PI指令设置XML样式"></a>PI指令设置XML样式</h1><p>语法<code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;test.css&quot;?&gt;</code><br>将<code>css</code>样式应用于<code>XML</code>文档</p>
<h1 id="xml约束"><a href="#xml约束" class="headerlink" title="xml约束"></a>xml约束</h1><p>限制xml中出现的标签名</p>
<h2 id="dtd约束"><a href="#dtd约束" class="headerlink" title="dtd约束"></a>dtd约束</h2><h3 id="dtd引入方式"><a href="#dtd引入方式" class="headerlink" title="dtd引入方式"></a>dtd引入方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名 SYSTEM "dtd路径"&gt;</span>                <span class="comment">&lt;!--第一种，外部引用本地dtd--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名 [约束内容]&gt;</span>                      <span class="comment">&lt;!--第二种，内部引用dtd--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名 PUBLIC "dtd名称" "dtd的url路径"&gt;</span> <span class="comment">&lt;!--第三种，外部引用网络dtd--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="dtd语法"><a href="#dtd语法" class="headerlink" title="dtd语法"></a>dtd语法</h3><p>先创建一个<code>DTD</code>文件<code>personDTD.dtd</code>，</p>
<ol>
<li>元素的语法格式为<code>&lt;!ELEMENT 元素名 ([子元素名|#PCDATA|EMPTY|ANY])(+|*|?)&gt;</code></li>
<li>属性的语法格式为<code>&lt;!ATTLIST 元素名 属性名 属性类型 约束&gt;</code></li>
<li>实体的语法格式为<code>&lt;!ENTITY 实体名 实体值&gt;</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义元素-&gt;</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT person (name+, age?)&gt;&lt;!--含有子元素的元素，+出现不少于一次，？出现不多于一次，*出现任意多次--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">person</span> (<span class="attr">name</span> | <span class="attr">age</span>)&gt;</span><span class="comment">&lt;!--含有子元素的元素，表示只能出现一个nama或者age</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT name (#PCDATA)&gt;&lt;!--不含有子元素的元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">isMan</span> <span class="attr">EMPTY</span>&gt;</span><span class="comment">&lt;!--不含有内容的元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">school</span> <span class="attr">ANY</span>&gt;</span><span class="comment">&lt;!--任意的元素--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义属性--&gt;</span></span><br><span class="line">&lt;!ATTLIST name nameAttr CDATA #REQUIRED  &lt;!--CDATA是字符串，#REQUIRED是必须出现--&gt;</span><br><span class="line">               pid ID #REQUIRED          <span class="comment">&lt;!--ID是只能字母和下划线开头--&gt;</span></span><br><span class="line">               sex CDATA "男"            <span class="comment">&lt;!--直接在后面加上字符串，表示默认值--&gt;</span></span><br><span class="line">&gt;     </span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">food</span> <span class="attr">like</span> (苹果|香蕉|橘子) #<span class="attr">IMPLIED</span>&gt;</span> <span class="comment">&lt;!--枚举，#IMPLIED是可有可无--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ATTLIST</span> <span class="attr">school</span> <span class="attr">CDATA</span> #<span class="attr">FIXED</span> "学校"&gt;</span>         <span class="comment">&lt;!--固定值，#FIXED只能选择固定属性值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义实体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">copyright</span> "版权所有不得抄袭"&gt;</span><span class="comment">&lt;!--在xml中可用&amp;copyright;引用该实体--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE person SYSTEM "personDTD.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;error&gt;编译出错&lt;/error&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="schema约束"><a href="#schema约束" class="headerlink" title="schema约束"></a>schema约束</h2><p><code>schema</code>是<code>xml</code>格式的一个约束文件。<br>需要先在命名空间引入<code>http://www.w3.org/2001/XMLSchema</code>，在<code>targetNamespace</code>中定义<code>schema</code>的引用地址名，用于在<code>xml</code>文件中引入。<br>和<code>xml</code>文件类似，每个子元素都在父元素之中。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetNamespace</span>=<span class="string">"http://mySchemaUrl"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"store"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">complexType</span>&gt;</span><span class="comment">&lt;!--表示store元素有子元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sequence</span>&gt;</span><span class="comment">&lt;!--子元素严格按顺序显示--&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span><span class="comment">&lt;!--maxOccurs表示元素出现次数--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span><span class="comment">&lt;!--book的属性，必须在最后声明--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>xml</code>中引入时，先引入别名为<code>xsi</code>的<code>http://www.w3.org/2001/XMLSchema-instance</code>命名空间，<br>再引入自定义<code>schema</code>的引用地址，及<code>schema</code>文件名<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">store</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://mySchemaUrl"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://mySchemaUrl 1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"01"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>第一本书<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"02"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>第二本书<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>第三本书<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">store</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器</title>
    <url>/posts/css_selector.html</url>
    <content><![CDATA[<h1 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h1><h2 id="标签元素选择器"><a href="#标签元素选择器" class="headerlink" title="标签元素选择器"></a>标签元素选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="class类选择器"><a href="#class类选择器" class="headerlink" title="class类选择器"></a>class类选择器</h2><p>以<code>.</code>开头<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">div.test1&#123; // 满足class为test1，且标签为div的形式，div可省略</span><br><span class="line">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span><br><span class="line">&#125;</span><br><span class="line">// &lt;div class="test1"&gt;测试&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p>以<code>#</code>开头<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">div#test2 &#123; // 满足id为test2，且标签为div的形式，div可省略</span><br><span class="line">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span><br><span class="line">&#125;</span><br><span class="line">// &lt;div id="test2"&gt;测试&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="扩展选择器"><a href="#扩展选择器" class="headerlink" title="扩展选择器"></a>扩展选择器</h1><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>格式<code>元素名[属性名]{样式}</code><br>给拥有某个属性的元素标签设置特定样式<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href="http://www.w3school.com.cn/about_us.asp"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="关联选择器"><a href="#关联选择器" class="headerlink" title="关联选择器"></a>关联选择器</h2><p>在标签嵌套时使用，比如特定<code>div</code>标签中的<code>p</code>标签<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; <span class="comment">/* 用空格隔开 */</span></span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &lt;div&gt;&lt;p&gt;测试&lt;/p&gt;&lt;/div&gt; */</span></span><br></pre></td></tr></table></figure></p>
<h2 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h2><p>把不同标签设置相同的样式<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span> &#123; <span class="comment">/* 用,隔开 */</span></span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &lt;div&gt;测试&lt;/div&gt;&lt;p&gt;测试&lt;/p&gt; */</span></span><br></pre></td></tr></table></figure></p>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p><a href="http://www.w3school.com.cn/css/css_pseudo_classes.asp" target="_blank" rel="noopener">伪类选择器</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/posts/css_foundation.html</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>格式为<code>属性名:属性值;</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:red;color:white;"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<div style="background-color:red;color:white;">测试</div>

<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><p>由上到下，由外到内，优先级由低到高。<br><code>style</code> &gt; <code>id选择器</code> &gt; <code>class类选择器</code> &gt; <code>标签选择器</code>，优先级由低到高</p>
<h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"test/css"</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"test/css"</span>&gt;</span></span><br><span class="line"><span class="xml">        @import url(div.css);<span class="comment">&lt;!--外部引用，兼容性差，不使用--&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"div.css"</span>/&gt;</span><span class="comment">&lt;!--外部引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:red;color:white;"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC简单使用</title>
    <url>/posts/JDBC_simple_use.html</url>
    <content><![CDATA[<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>先<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">下载jar包</a> ，或者<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java" target="_blank" rel="noopener">导入maven</a><br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//    private static final String driver = "com.mysql.jdbc.Driver";//已过时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String driver = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String username = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String schema = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> port = <span class="number">3306</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"jdbc:mysql://localhost:"</span></span><br><span class="line">            + port + <span class="string">"/"</span> + schema+<span class="string">"?serverTimezone=GMT&amp;useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">    <span class="comment">//最好使用properties文件存储配置信息，或者使用数据库连接池</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;<span class="comment">//建立连接</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initJDBC</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(driver);<span class="comment">//加载驱动</span></span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);<span class="comment">//建立数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Statement s = conn.createStatement();</span><br><span class="line">            ResultSet rs = s.executeQuery(<span class="string">"SELECT * FROM stu;"</span>)<span class="comment">//查询数据表返回结果集</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();<span class="comment">//获取结果集的元数据</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;<span class="comment">//如果有下一条记录</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rsmd.getColumnCount(); i++) &#123;</span><br><span class="line">                    System.out.print(rs.getString(i)+<span class="string">"\t"</span>);<span class="comment">//将每列打印输出</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destoryJDBC</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        conn.close();<span class="comment">//释放连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="执行SQL语句的Statement"><a href="#执行SQL语句的Statement" class="headerlink" title="执行SQL语句的Statement"></a>执行SQL语句的Statement</h1><h2 id="Statement的基本用法"><a href="#Statement的基本用法" class="headerlink" title="Statement的基本用法"></a>Statement的基本用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecuteUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Statement s = conn.createStatement();</span><br><span class="line">        )&#123;</span><br><span class="line">            s.executeUpdate(<span class="string">"CREATE TABLE stu("</span> +</span><br><span class="line">                    <span class="string">"sid INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,"</span> +</span><br><span class="line">                    <span class="string">"sname VARCHAR(20),"</span> + <span class="string">"age INT ,"</span> + <span class="string">"tid INT )"</span>);</span><br><span class="line">            System.out.println(<span class="string">"共有"</span>+<span class="number">0</span>+<span class="string">"条记录受影响"</span>);<span class="comment">//执行DDL语句时返回0</span></span><br><span class="line">            <span class="keyword">int</span> records = s.executeUpdate(<span class="string">"UPDATE stu SET age=age+1"</span>);</span><br><span class="line">            System.out.println(<span class="string">"共有"</span>+records+<span class="string">"条记录受影响"</span>);<span class="comment">//执行DML语句时返回受影响记录数目</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Statement s = conn.createStatement();</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">boolean</span> hasResultSet = s.execute(<span class="string">"SELECT * FROM stu;"</span>);<span class="comment">//判断有没有结果集</span></span><br><span class="line">            <span class="keyword">if</span>(hasResultSet)&#123;</span><br><span class="line">                <span class="keyword">try</span>(ResultSet rs = s.getResultSet())&#123;<span class="comment">//获取结果集</span></span><br><span class="line">                    ResultSetMetaData rsmd = rs.getMetaData();<span class="comment">//获取结果集元数据</span></span><br><span class="line">                    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rsmd.getColumnCount(); i++) &#123;</span><br><span class="line">                            System.out.print(rs.getString(i)+<span class="string">"\t"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="预编译的PreparedStatement"><a href="#预编译的PreparedStatement" class="headerlink" title="预编译的PreparedStatement"></a>预编译的PreparedStatement</h2><p><code>PreparedStatement</code>是<code>Statement</code>的子接口，可以预编译<code>SQL</code>语句，效率高，还可以防注入。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreparedStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(PreparedStatement ps = conn.prepareStatement(</span><br><span class="line">                <span class="string">"INSERT INTO stu(sname, age) VALUES(?,?) "</span>);<span class="comment">//预编译SQL语句</span></span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">                ps.setString(<span class="number">1</span>,<span class="string">"stu"</span>+i);<span class="comment">//填充占位符</span></span><br><span class="line">                ps.setInt(<span class="number">2</span>, <span class="number">20</span>+i);<span class="comment">//填充占位符</span></span><br><span class="line">                ps.executeUpdate();<span class="comment">//提交</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="调用存储过程的CallableStatement"><a href="#调用存储过程的CallableStatement" class="headerlink" title="调用存储过程的CallableStatement"></a>调用存储过程的CallableStatement</h2><a href="/posts/common_MySQL_command.html" title="MySQL常用语句">MySQL常用语句</a>
<p>自定义一个加法的存储过程<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> add_num(<span class="keyword">in</span> a <span class="built_in">int</span>, <span class="keyword">in</span> b <span class="built_in">int</span>, <span class="keyword">out</span> <span class="keyword">sum</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">sum</span> = a + b;</span><br><span class="line"><span class="keyword">end</span>//</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallableStatement</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(CallableStatement cs = conn.prepareCall(<span class="string">"&#123;CALL add_num(?,?,?)&#125;"</span>);)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br><span class="line">            cs.setInt(<span class="number">1</span>, a);</span><br><span class="line">            cs.setInt(<span class="number">2</span>, b);</span><br><span class="line">            cs.registerOutParameter(<span class="number">3</span>, Types.INTEGER);</span><br><span class="line">            cs.execute();</span><br><span class="line">            System.out.println(a+<span class="string">"+"</span>+b+<span class="string">"="</span>+cs.getInt(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 关闭事务自动提交</span></span><br><span class="line">        Statement s = conn.createStatement();</span><br><span class="line">        s.executeUpdate(<span class="string">"INSERT INTO stu(sname) VALUES ('stu1');"</span>);</span><br><span class="line">        s.executeUpdate(<span class="string">"INSERT INTO stu(sname) VALUES ('stu2');"</span>);</span><br><span class="line">        Savepoint sp = conn.setSavepoint(<span class="string">"事务中间点"</span>); <span class="comment">// 设置事务中间点</span></span><br><span class="line">        s.executeUpdate(<span class="string">"INSERT INTO stu(sname) VALUES ('stu3');"</span>);</span><br><span class="line">        conn.rollback(sp); <span class="comment">// 回滚事务</span></span><br><span class="line">        conn.commit();     <span class="comment">// 提交事务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><h2 id="DBCP数据源"><a href="#DBCP数据源" class="headerlink" title="DBCP数据源"></a>DBCP数据源</h2><p><code>Tomcat</code>的连接池使用<code>DBCP</code>连接池。<br>在<a href="https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp/1.4" target="_blank" rel="noopener">maven中导入</a><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从数据库连接池中获取数据库连接<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDBCP</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//BasicDataSource bds = BasicDataSourceFactory.createDataSource(properties);//另一种创建方式</span></span><br><span class="line">        BasicDataSource bds = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">        bds.setDriverClassName(driver); <span class="comment">// 加载驱动</span></span><br><span class="line">        bds.setUrl(url);                <span class="comment">// 设置url</span></span><br><span class="line">        bds.setUsername(username);      <span class="comment">// 设置用户名</span></span><br><span class="line">        bds.setPassword(password);      <span class="comment">// 设置密码</span></span><br><span class="line">        bds.setInitialSize(<span class="number">5</span>);          <span class="comment">//设置连接池的初始连接数</span></span><br><span class="line">        bds.setMaxActive(<span class="number">20</span>);           <span class="comment">//设置连接池最多可有20个活动连接数</span></span><br><span class="line">        bds.setMinIdle(<span class="number">2</span>);              <span class="comment">//设置连接池中最少有2个空闲的连接</span></span><br><span class="line">        Connection conn = bds.getConnection();</span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        conn.close();<span class="comment">//释放连接，归还连接池</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="C3P0数据源"><a href="#C3P0数据源" class="headerlink" title="C3P0数据源"></a>C3P0数据源</h2><p><code>Hibernate</code>的连接池使用<code>C3P0</code>连接池。<br>在<a href="https://mvnrepository.com/artifact/c3p0/c3p0/0.9.1.2" target="_blank" rel="noopener">maven中导入</a><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从数据库连接池中获取数据库连接<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException, SQLException </span>&#123;</span><br><span class="line">        ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        cpds.setDriverClass(driver); <span class="comment">// 加载驱动</span></span><br><span class="line">        cpds.setJdbcUrl(url);        <span class="comment">// 设置url</span></span><br><span class="line">        cpds.setUser(username);      <span class="comment">// 设置用户名</span></span><br><span class="line">        cpds.setPassword(password);  <span class="comment">// 设置密码</span></span><br><span class="line">        cpds.setMaxPoolSize(<span class="number">40</span>);     <span class="comment">//设置连接池的最大连接数</span></span><br><span class="line">        cpds.setMinPoolSize(<span class="number">2</span>);      <span class="comment">//设置连接池的最小连接数</span></span><br><span class="line">        cpds.setInitialPoolSize(<span class="number">10</span>); <span class="comment">//设置连接池的初始连接数</span></span><br><span class="line">        cpds.setMaxStatements(<span class="number">190</span>);  <span class="comment">//设置连接池的缓存Statement的最大数</span></span><br><span class="line">        Connection conn = cpds.getConnection();</span><br><span class="line">        <span class="comment">//执行SQL语句</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;    <span class="comment">//省略释放资源代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2自定义拦截器</title>
    <url>/posts/Struts2_how_to_Custom_interceptors.html</url>
    <content><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="实现Interceptor接口"><a href="#实现Interceptor接口" class="headerlink" title="实现Interceptor接口"></a>实现Interceptor接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;<span class="comment">//初始化拦截器所需资源</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;<span class="comment">//释放在init()中分配的资源</span></span><br><span class="line">    <span class="function">String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="comment">//实现拦截器功能</span></span><br><span class="line">    <span class="comment">//利用invocation.getAction()获取Action状态</span></span><br><span class="line">    <span class="comment">//返回result作为逻辑视图名，比如success</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="继承AbstractInterceptor抽象类"><a href="#继承AbstractInterceptor抽象类" class="headerlink" title="继承AbstractInterceptor抽象类"></a>继承AbstractInterceptor抽象类</h2><p><code>AbstractInterceptor</code>类实现了<code>Interceptor</code>接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//空实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//空实现</span></span><br><span class="line">    <span class="function">String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在<code>struts.xml</code>中注册拦截器<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span><span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"包名.MyInterceptor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"myAction"</span> <span class="attr">class</span>=<span class="string">"包名.MyAction"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> /&gt;</span><span class="comment">&lt;!--引用拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="内置拦截器"><a href="#内置拦截器" class="headerlink" title="内置拦截器"></a>内置拦截器</h1><p>在<code>struts-default.xml</code>中</p>
<table>
<thead>
<tr>
<th style="text-align:left">拦截器</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">params拦截器</td>
<td style="text-align:left">负责将请求参数设置为Action属性</td>
</tr>
<tr>
<td style="text-align:left">staticParams拦截器</td>
<td style="text-align:left">将配置文件中action元素的子元素param参数设置为Action属性</td>
</tr>
<tr>
<td style="text-align:left">servletConfig拦截器</td>
<td style="text-align:left">将源于ServletAPI的各种对象注入到Action，必须实现对应接口</td>
</tr>
<tr>
<td style="text-align:left">fileUpload拦截器</td>
<td style="text-align:left">对文件上传提供支持，将文件和元数据设置到对应的Action属性</td>
</tr>
<tr>
<td style="text-align:left">exception拦截器</td>
<td style="text-align:left">捕获异常，并且将异常映射到用户自定义的错误界面</td>
</tr>
<tr>
<td style="text-align:left">validation拦截器</td>
<td style="text-align:left">调用验证框架进行数据验证</td>
</tr>
</tbody>
</table>
<h1 id="简单功能"><a href="#简单功能" class="headerlink" title="简单功能"></a>简单功能</h1><h2 id="计算Action执行时间"><a href="#计算Action执行时间" class="headerlink" title="计算Action执行时间"></a>计算Action执行时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        String result = invocation.invoke();<span class="comment">//执行下一个拦截器，如果没有拦截器就执行Action，返回视图名，如"success"</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"时间："</span>+(end-start)/<span class="number">1000</span>+<span class="string">"s"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        Map&lt;String, Object&gt; session = context.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.get(<span class="string">"loginInfo"</span>)!=<span class="keyword">null</span>) &#123; <span class="comment">//已登录</span></span><br><span class="line">            <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//未登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;<span class="comment">//需要登录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate简单使用</title>
    <url>/posts/Hibernate_simple_use.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用IDEA+Maven进行搭建Hibernate5<br><a id="more"></a></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>在pom.mxl中加入maven项目<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-search-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在<code>/src/main/resources/hibernate.cfg.xml</code>中配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--访问数据库的url地址，带参数防止编译错误--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test?serverTimezone=GMT&amp;useUnicode=true&amp;characterEncoding=utf8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--数据库的JDBC驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--连接数据库的用户名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--连接数据库的用户密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--指定使用mysql数据库的方言--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--在控制台输出sql语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--在控制台格式化sql语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--生成表结构的策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"students.hbm.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.ahao.javaeeDemo.Students"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Students.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="comment">//构造器、getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--students.hbm.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.ahao.javaeeDemo.Students"</span> <span class="attr">table</span>=<span class="string">"students"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"increment"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sname"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServiceRegistry serviceRegistry;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Transaction transaction;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建服务注册对象</span></span><br><span class="line">        serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</span><br><span class="line">                .configure(<span class="string">"hibernate.cfg.xml"</span>).build();</span><br><span class="line">        <span class="comment">//创建会话工厂对象</span></span><br><span class="line">        sessionFactory = <span class="keyword">new</span> MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line">        <span class="comment">//创建会话对象</span></span><br><span class="line">        session = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        transaction = session.beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Students s = <span class="keyword">new</span> Students();</span><br><span class="line">        s.setSname(<span class="string">"zhangsan"</span>);</span><br><span class="line">        s.setBirthday(<span class="keyword">new</span> java.sql.Date(System.currentTimeMillis()));</span><br><span class="line">        session.save(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destoryClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="comment">//关闭会话工厂</span></span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>使用<code>save()</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Students s = <span class="keyword">new</span> Students();</span><br><span class="line">        s.setSname(<span class="string">"zhangsan"</span>);</span><br><span class="line">        s.setBirthday(<span class="keyword">new</span> java.sql.Date(System.currentTimeMillis()));</span><br><span class="line">        session.save(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略销毁代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p>使用<code>update()</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sid = <span class="number">1</span>;</span><br><span class="line">        Students s = session.get(Students<span class="class">.<span class="keyword">class</span>, <span class="title">sid</span>)</span>;</span><br><span class="line">        s.setSname(<span class="string">"Cat"</span>);</span><br><span class="line">        session.update(s);</span><br><span class="line"><span class="comment">//        session.saveOrUpdate(s);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略销毁代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>使用<code>delete()</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sid = <span class="number">1</span>;</span><br><span class="line">        Students s = session.get(Students<span class="class">.<span class="keyword">class</span>, <span class="title">sid</span>)</span>;</span><br><span class="line">        session.delete(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略销毁代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="查询单个记录"><a href="#查询单个记录" class="headerlink" title="查询单个记录"></a>查询单个记录</h3><p>使用<code>get()</code>或<code>load()</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略初始化代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sid = <span class="number">1</span>;</span><br><span class="line">        Students s1 = session.get(Students<span class="class">.<span class="keyword">class</span>, <span class="title">sid</span>)</span>;<span class="comment">//发送sql语句，获取Students对象</span></span><br><span class="line">        System.out.println(s1.toString());<span class="comment">//打印输出</span></span><br><span class="line">        Students s2 = session.load(Students<span class="class">.<span class="keyword">class</span>, <span class="title">sid</span>)</span>;<span class="comment">//不发送sql语句，获取一个代理对象</span></span><br><span class="line">        System.out.println(s2.toString());<span class="comment">//使用的时候才发送sql语句，获取Students对象</span></span><br><span class="line">    &#125;    <span class="comment">//省略销毁代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径</title>
    <url>/posts/The_Shortest_path.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最短路径算法一般是广搜算法。有多种情况，单源最短路径，多源最短路径，负权回路等问题<br><a id="more"></a></p>
<style type="text/css">
    .fancybox {
        display: inline-block;
    }
</style>

<h1 id="多源最短路径Floyd-Warshall算法"><a href="#多源最短路径Floyd-Warshall算法" class="headerlink" title="多源最短路径Floyd-Warshall算法"></a>多源最短路径Floyd-Warshall算法</h1><ul>
<li>优点：实现简单，代码量少</li>
<li>缺点：时间复杂度为O(n^3)，不能解决负权回路的问题</li>
</ul>
<p>使用邻接矩阵存储法存储图</p>
<img src="/images/最短路径_01.png" width="200">
<img src="/images/最短路径_02.png" width="200">
<p>遍历每个节点作为中转点，取距离的最小值<br>比如1到3，<code>a[1][3]=6</code><br>以2作为中转点，即<code>a[1][2]+a[2][3]=5&lt;a[1][3]</code></p>
<p><strong>伪代码</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">floyd</span><span class="params">(map, length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(k <span class="keyword">for</span> <span class="number">0</span> to length)&#123;<span class="comment">//k为中转点，每个点都可以是中转点</span></span><br><span class="line">        <span class="keyword">for</span>(i <span class="keyword">for</span> <span class="number">0</span> to length)&#123;<span class="comment">//起点i</span></span><br><span class="line">            <span class="keyword">for</span>(j <span class="keyword">for</span> <span class="number">0</span> to length)&#123;<span class="comment">//终点j</span></span><br><span class="line">                map[i][j] = min(map[i][j], map[i][k]+map[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="单源最短路径Dijkstra算法"><a href="#单源最短路径Dijkstra算法" class="headerlink" title="单源最短路径Dijkstra算法"></a>单源最短路径Dijkstra算法</h1><img src="/images/最短路径_03.png" width="200">
<img src="/images/最短路径_04.png" width="200">
<img src="/images/最短路径_05.gif" width="200">
<p>假设有一个数组 <code>dis[]</code>，存储第一个点能到达的所有点的距离，<code>{0,1,12,∞,∞,∞}</code>,<br>那么, <code>dis[]</code> 就是 <code>第一个点1</code> 到达所有点的最短距离。<br><code>dis[]</code> 为 <code>{0,1,12,∞,∞,∞}</code>。</p>
<p>从<code>dis[]数组</code>可以看出, 距离<code>第一个点1</code>最近的点是<code>第二个点2</code>, 将其作为中转点。<br>再从矩阵<code>map[2][j]</code>中获取所有与<code>第二个点B</code>邻接的点, 即<code>第三个点3</code>和<code>第四个点4</code>,<br>用<code>dis[j]</code>加上<code>3、4</code>和<code>2</code>的距离，如果小于最小值<code>dis[j]</code>, 则更新<code>dis[j]</code>的值。<br><code>dis[]</code> 为 <code>{0,1,10,4,∞,∞}</code>。</p>
<p>再找<code>dis[]数组</code>的最小点, 因为<code>点2</code>已经使用过了, 所以选择 <code>点4</code>作为中转点。<br><code>dis[]</code> 为 <code>{0,1,8,4,17,19}</code>。</p>
<p>以此类推<br>以<code>点3</code>作为中转点, <code>dis[]</code> 为 <code>{0,1,8,4,13,19}</code>。<br>以<code>点5</code>作为中转点, <code>dis[]</code> 为 <code>{0,1,8,4,13,17}</code>。<br>还剩下最后一个 <code>点6</code>, 没必要找了, 因为没有另一个点可以到达了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_STEP = <span class="number">1000</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);    </span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();<span class="comment">//顶点数</span></span><br><span class="line">		<span class="keyword">int</span> m = in.nextInt();<span class="comment">//边数</span></span><br><span class="line">		<span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];<span class="comment">//存储图的邻接矩阵</span></span><br><span class="line">		<span class="keyword">boolean</span>[] book = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];<span class="comment">//标记某个点是否走过</span></span><br><span class="line">		<span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//存储最短距离的数组</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i==j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span>     map[i][j] = MAX_STEP;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">			map[in.nextInt()][in.nextInt()] = in.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			dis[i] = map[<span class="number">1</span>][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//初始化完毕</span></span><br><span class="line">		</span><br><span class="line">		book[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n-<span class="number">1</span>; i++)&#123;<span class="comment">//遍历第1到n-1个点</span></span><br><span class="line">			<span class="keyword">int</span> min = MAX_STEP;</span><br><span class="line">			<span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=n; j++)&#123;<span class="comment">//找到距离第i个点最近的一个点作为中转点</span></span><br><span class="line">				<span class="keyword">if</span>(book[j]==<span class="keyword">false</span> &amp;&amp; dis[j]&lt;min)&#123;</span><br><span class="line">					min = dis[j];</span><br><span class="line">					next = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			book[next] = <span class="keyword">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;<span class="comment">//根据中转点获得新的距离，用来更新dis</span></span><br><span class="line">				dis[j] = Math.min(dis[j], dis[next]+map[next][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			printf(dis);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还有邻接表存储图的算法(看不懂, 弃了)</p>
<h1 id="单源最短路径Bellman-Ford算法"><a href="#单源最短路径Bellman-Ford算法" class="headerlink" title="单源最短路径Bellman-Ford算法"></a>单源最短路径Bellman-Ford算法</h1><img src="/images/最短路径_03.png" width="200">
<img src="/images/最短路径_04.png" width="200">
<p>和Dijkstra算法一样, 假设有一个数组 <code>dis[]</code>,<br>存储第一个点能到达的所有点的距离，<code>{0,∞,∞,∞,∞,∞}</code>,<br>那么, <code>dis[]</code> 就是 <code>第一个点0</code> 到达所有点的最短距离。<br><code>dis[]</code> 为 <code>{0,∞,∞,∞,∞,∞}</code>, 注意这里和Dijkstra算法不一样。</p>
<p>扫描第一条边<code>0 1 1</code>, <code>点0</code> 到 <code>点1</code> 的权值为 <code>1</code>。<br>因为 <code>点0</code>是起点, 所以<code>原先的dis[0]+第一条边的权值w[1]&lt;原先的dis[1]</code>, 也就是<code>0+1&lt;∞</code>。<br>通过第一条边, 可以把 <code>dis[]</code>更新为<code>{0,1,∞,∞,∞,∞}</code>。</p>
<p>扫描第二条边<code>0 2 12</code>, <code>点0</code> 到 <code>点2</code> 的权值为 <code>12</code>。<br>因为 <code>点0</code>是起点, 所以<code>原先的dis[0]+第二条边的权值w[2]&lt;原先的dis[2]</code>, 也就是<code>0+12&lt;∞</code>。<br>通过第一条边, 可以把 <code>dis[]</code>更新为<code>{0,1,12,∞,∞,∞}</code>。</p>
<p>扫描第三条边<code>1 2 9</code>, <code>点1</code> 到 <code>点2</code> 的权值为 <code>9</code>。<br>因为 <code>点1</code>是起点, 所以<code>原先的dis[1]+第三条边的权值w[3]&lt;原先的dis[2]</code>, 也就是<code>1+9&lt;12</code>。<br>通过第一条边, 可以把 <code>dis[]</code>更新为<code>{0,1,10,∞,∞,∞}</code>。</p>
<p>依次类推,<br>扫描第4条边<code>1 3 3</code>, <code>dis[]数组</code> 为 <code>{0,1,10,4,∞,∞}</code>。<br>扫描第5条边<code>2 4 5</code>, <code>dis[]数组</code> 为 <code>{0,1,10,4,15,∞}</code>。<br>扫描第6条边<code>3 2 4</code>, <code>dis[]数组</code> 为 <code>{0,1,8,4,15,∞}</code>。<br>扫描第7条边<code>3 4 13</code>, <code>dis[]数组</code> 为 <code>{0,1,8,4,15,∞}</code>。<br>扫描第8条边<code>3 5 15</code>, <code>dis[]数组</code> 为 <code>{0,1,8,4,15,19}</code>。<br>扫描第9条边<code>4 5 4</code>,<code>dis[]数组</code> 为 <code>{0,1,8,4,15,19}</code>。</p>
<p>第一轮扫描完毕, 一共要扫描 <code>顶点数-1</code>轮。<br>因为任意两点之间最多包含<code>顶点数-1</code>条边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        6 9</span></span><br><span class="line"><span class="comment">        0 1 1</span></span><br><span class="line"><span class="comment">        0 2 12</span></span><br><span class="line"><span class="comment">        1 2 9</span></span><br><span class="line"><span class="comment">        1 3 3</span></span><br><span class="line"><span class="comment">        2 4 5</span></span><br><span class="line"><span class="comment">        3 2 4</span></span><br><span class="line"><span class="comment">        3 4 13</span></span><br><span class="line"><span class="comment">        3 5 15</span></span><br><span class="line"><span class="comment">        4 5 4</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt(), m = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">// 第0个顶点距离其他顶点的距离</span></span><br><span class="line">        <span class="keyword">int</span>[] u = <span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">// 第i条边的起点</span></span><br><span class="line">        <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">// 第i条边的终点</span></span><br><span class="line">        <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">// 第i条边的权值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            u[i] = in.nextInt();</span><br><span class="line">            v[i] = in.nextInt();</span><br><span class="line">            w[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dis[i] = <span class="number">999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化完毕</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> equals = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] backupDis = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扫描 顶点数-1 轮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n-<span class="number">1</span> &amp;&amp; !equals; k++)&#123;</span><br><span class="line">            backup(dis, backupDis); <span class="comment">// 备份距离数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">                dis[v[i]] = Math.min(dis[v[i]], dis[u[i]]+w[i]); <span class="comment">// 扫描每条边, 更新dis数组</span></span><br><span class="line">            &#125;</span><br><span class="line">            equals = equals(dis, backupDis); <span class="comment">// 扫描后dis数组是否有变化, 没有则已经是最短路径</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isLoop = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; !isLoop; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[v[i]] &gt; dis[u[i]]+w[i])&#123; </span><br><span class="line">                isLoop = <span class="keyword">true</span>; <span class="comment">// 如果还能继续更新, 说明有负权回路</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(isLoop?<span class="string">'有'</span>:<span class="string">'无'</span>+<span class="string">"负权回路"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isLoop)&#123;</span><br><span class="line">            System.out.println(Arrays.toString(dis));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backup</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] backup)</span></span>&#123;</span><br><span class="line">        System.arraycopy(src, <span class="number">0</span>, backup, <span class="number">0</span>, src.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] other)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(src.length!=other.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, len = src.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(src[i]!=other[i]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">单、多源</th>
<th style="text-align:center">算法核心</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">适用情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Floyd-Warshall</td>
<td style="text-align:center">多源</td>
<td style="text-align:center">中转点</td>
<td style="text-align:center">O(N^2)</td>
<td style="text-align:center">O(N^3)</td>
<td style="text-align:center">稠密图, 解决负权回路</td>
</tr>
<tr>
<td style="text-align:center">Dijkstra</td>
<td style="text-align:center">单源</td>
<td style="text-align:center">中转点</td>
<td style="text-align:center">O(M)</td>
<td style="text-align:center">O((M+N)logN)</td>
<td style="text-align:center">稠密图</td>
</tr>
<tr>
<td style="text-align:center">Bellman-Ford</td>
<td style="text-align:center">单源</td>
<td style="text-align:center">边</td>
<td style="text-align:center">O(M)</td>
<td style="text-align:center">O(NM)</td>
<td style="text-align:center">稀疏图, 解决负权回路</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深搜广搜算法</title>
    <url>/posts/DFS_and_BFS.html</url>
    <content><![CDATA[<h1 id="深搜"><a href="#深搜" class="headerlink" title="深搜"></a>深搜</h1><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>现有n个字符，要求进行全排列，比如<code>abc</code>三个字符，则有<code>abc</code>，<code>acb</code>，<code>bac</code>，<code>bca</code>，<code>cab</code>，<code>cba</code>，6种排列。<br><a id="more"></a><br><img src="/images/深搜广搜算法_01.png"></p>
<p><strong>java代码</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] arr;<span class="comment">//待全排列字符数组</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] box;<span class="comment">//盒子</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] flag;<span class="comment">//标记</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		arr = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">		box = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">		flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">			arr[i] = in.next().charAt(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(<span class="number">0</span>);	<span class="comment">//核心算法</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;<span class="comment">//前step个字符已排列，正在排列第step个字符</span></span><br><span class="line">		<span class="keyword">if</span>(step == box.length) &#123;<span class="comment">//当全部字符排列完毕，输出并return</span></span><br><span class="line">			printf(box);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; box.length; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag[i]==<span class="keyword">true</span>) <span class="keyword">continue</span>;<span class="comment">//第i个字符已使用则跳出</span></span><br><span class="line">			box[step] = arr[i];<span class="comment">//将第i个字符放入第step个盒子</span></span><br><span class="line">			flag[i] = <span class="keyword">true</span>;<span class="comment">//标记第i个字符已使用</span></span><br><span class="line">			dfs(step+<span class="number">1</span>);</span><br><span class="line">			flag[i] = <span class="keyword">false</span>;<span class="comment">//标记第i个字符未使用</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span>[] flag)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flag.length; i++)&#123;</span><br><span class="line">			System.out.print(flag[i]+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h2><p>现有一个n*m的迷宫，标记从起点(startx,starty)到终点(endx,endy)的一条路径<br>例如，0为可行，1为墙壁，2为走过的路径标记，起点为(0,0)，终点为(3,3)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 0 1</span><br><span class="line">0 0 0 1</span><br><span class="line">0 0 0 0</span><br><span class="line">1 0 0 0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> startx = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> starty = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> endx = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> endy = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span>[][] maze = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">				maze[i][j] = in.nextInt();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		maze[startx][starty] = <span class="number">2</span>;</span><br><span class="line">		dfs(startx,starty,endx,endy,maze);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy, <span class="keyword">int</span>[][] maze)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(startx==endx&amp;&amp;starty==endy)&#123;</span><br><span class="line">			printf(maze);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(startx-<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; maze[startx-<span class="number">1</span>][starty]==<span class="number">0</span>)&#123;<span class="comment">//往上走</span></span><br><span class="line">			maze[startx-<span class="number">1</span>][starty]=<span class="number">2</span>;</span><br><span class="line">			dfs(startx-<span class="number">1</span>,starty,endx,endy,maze);</span><br><span class="line">			maze[startx-<span class="number">1</span>][starty] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(startx+<span class="number">1</span> &lt;= maze.length-<span class="number">1</span> &amp;&amp; maze[startx+<span class="number">1</span>][starty]==<span class="number">0</span>)&#123;<span class="comment">//往下走</span></span><br><span class="line">			maze[startx+<span class="number">1</span>][starty]=<span class="number">2</span>;</span><br><span class="line">			dfs(startx+<span class="number">1</span>,starty,endx,endy,maze);</span><br><span class="line">			maze[startx+<span class="number">1</span>][starty]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(starty-<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; maze[startx][starty-<span class="number">1</span>]==<span class="number">0</span>)&#123;<span class="comment">//往左走</span></span><br><span class="line">			maze[startx][starty-<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">			dfs(startx,starty-<span class="number">1</span>,endx,endy,maze);</span><br><span class="line">			maze[startx][starty-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(starty+<span class="number">1</span> &lt;= maze[startx].length-<span class="number">1</span> &amp;&amp; maze[startx][starty+<span class="number">1</span>]==<span class="number">0</span>)&#123;<span class="comment">//往右走</span></span><br><span class="line">			maze[startx][starty+<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">			dfs(startx,starty+<span class="number">1</span>,endx,endy,maze);</span><br><span class="line">			maze[startx][starty+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span>[][] arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</span><br><span class="line">				System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="广搜"><a href="#广搜" class="headerlink" title="广搜"></a>广搜</h1><h2 id="走迷宫之最短路径"><a href="#走迷宫之最短路径" class="headerlink" title="走迷宫之最短路径"></a>走迷宫之最短路径</h2><p>现有一个n*m的迷宫，输出从起点(startx,starty)到终点(endx,endy)的最短路径步数<br>例如，0为可行，*为墙壁，起点为(0,0)，终点为(3,3)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 0 1</span><br><span class="line">0 0 0 1</span><br><span class="line">0 0 0 0</span><br><span class="line">1 0 0 0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> startX = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> startY = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> endX = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> endY = in.nextInt();</span><br><span class="line">		<span class="keyword">char</span>[][] maze = <span class="keyword">new</span> <span class="keyword">char</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">				maze[i][j] = in.next().charAt(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span>[] queueX = <span class="keyword">new</span> <span class="keyword">int</span>[n*n];<span class="comment">//x坐标队列</span></span><br><span class="line">		<span class="keyword">int</span>[] queueY = <span class="keyword">new</span> <span class="keyword">int</span>[n*n];<span class="comment">//y坐标队列</span></span><br><span class="line">		<span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//头指针</span></span><br><span class="line">		<span class="keyword">int</span> tail = <span class="number">1</span>;<span class="comment">//尾指针</span></span><br><span class="line">		queueX[head] = startX;<span class="comment">//起点入队</span></span><br><span class="line">		queueY[head] = startY;</span><br><span class="line">		maze[queueX[head]][queueY[head]] = (<span class="keyword">char</span>)(<span class="string">'a'</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(tail-head&gt;<span class="number">0</span>)&#123;<span class="comment">//判断队列不为空</span></span><br><span class="line">			<span class="keyword">int</span> x = queueX[head];</span><br><span class="line">			<span class="keyword">int</span> y = queueY[head];</span><br><span class="line">			printf(maze);</span><br><span class="line">			<span class="keyword">if</span>(x==endX &amp;&amp; y==endY)&#123;<span class="comment">//到达终点</span></span><br><span class="line">				System.out.println(maze[endX][endY]-<span class="string">'a'</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(x-<span class="number">1</span>&gt;=<span class="number">1</span> &amp;&amp; maze[x-<span class="number">1</span>][y]==<span class="string">'0'</span>)&#123;<span class="comment">//往左走</span></span><br><span class="line">				maze[x-<span class="number">1</span>][y] = (<span class="keyword">char</span>) (maze[x][y]+<span class="number">1</span>);</span><br><span class="line">				queueX[tail] = x-<span class="number">1</span>;<span class="comment">//入队</span></span><br><span class="line">				queueY[tail] = y;</span><br><span class="line">				tail++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(x+<span class="number">1</span>&lt;=maze.length-<span class="number">1</span> &amp;&amp; maze[x+<span class="number">1</span>][y]==<span class="string">'0'</span>)&#123;<span class="comment">//往右走</span></span><br><span class="line">				maze[x+<span class="number">1</span>][y] = (<span class="keyword">char</span>) (maze[x][y]+<span class="number">1</span>);</span><br><span class="line">				queueX[tail] = x+<span class="number">1</span>;<span class="comment">//入队</span></span><br><span class="line">				queueY[tail] = y;</span><br><span class="line">				tail++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(y-<span class="number">1</span>&gt;=<span class="number">1</span> &amp;&amp; maze[x][y-<span class="number">1</span>]==<span class="string">'0'</span>)&#123;<span class="comment">//往上走</span></span><br><span class="line">				maze[x][y-<span class="number">1</span>] = (<span class="keyword">char</span>) (maze[x][y]+<span class="number">1</span>);</span><br><span class="line">				queueX[tail] = x;<span class="comment">//入队</span></span><br><span class="line">				queueY[tail] = y-<span class="number">1</span>;</span><br><span class="line">				tail++;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(y+<span class="number">1</span>&lt;=maze[x].length-<span class="number">1</span> &amp;&amp; maze[x][y+<span class="number">1</span>]==<span class="string">'0'</span>)&#123;<span class="comment">//往下走</span></span><br><span class="line">				System.out.println((y+<span class="number">1</span>)+<span class="string">","</span>+maze[x].length+<span class="string">","</span>+maze[x][y+<span class="number">1</span>]);</span><br><span class="line">				maze[x][y+<span class="number">1</span>] = (<span class="keyword">char</span>) (maze[x][y]+<span class="number">1</span>);</span><br><span class="line">				queueX[tail] = x;<span class="comment">//入队</span></span><br><span class="line">				queueY[tail] = y+<span class="number">1</span>;</span><br><span class="line">				tail++;</span><br><span class="line">			&#125;</span><br><span class="line">			head++;<span class="comment">//出队</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span>[][] maze)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maze.length; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; maze[i].length; j++)&#123;</span><br><span class="line">				System.out.print(maze[i][j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit单元测试</title>
    <url>/posts/junit_foundation.html</url>
    <content><![CDATA[<h1 id="常规的单元测试"><a href="#常规的单元测试" class="headerlink" title="常规的单元测试"></a>常规的单元测试</h1><h2 id="编写被测试类"><a href="#编写被测试类" class="headerlink" title="编写被测试类"></a>编写被测试类</h2><p>进行单元测试首先需要一个被测试类和被测试方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Div</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initClass</span><span class="params">()</span></span>&#123;    System.out.println(<span class="string">"加载类前执行"</span>);    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;    System.out.println(<span class="string">"执行每个方法前执行"</span>);    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       TestCase.assertEquals(<span class="number">3</span>, Div.div(<span class="number">6</span>,<span class="number">2</span>));</span><br><span class="line">       System.out.println(<span class="string">"预期值为3,实际值为3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;    System.out.println(<span class="string">"执行每个方法后执行"</span>);    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destoryClass</span><span class="params">()</span></span>&#123;    System.out.println(<span class="string">"执行完所有Test方法后执行"</span>);    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="其他常用注释"><a href="#其他常用注释" class="headerlink" title="其他常用注释"></a>其他常用注释</h1><h2 id="Test"><a href="#Test" class="headerlink" title="@Test"></a>@Test</h2><ul>
<li><code>expected</code>：预期会抛出某个异常</li>
<li><code>timeout</code>：预期运行时间不超过<code>xx</code>毫秒</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span>(expected = ArithmeticException<span class="class">.<span class="keyword">class</span>, <span class="title">timeout</span> </span>= <span class="number">2000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TestCase.assertEquals(<span class="number">3</span>, Div.div(<span class="number">6</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//会抛出ArithmeticException异常，由于expected捕获了异常，所以不会抛出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Ignore"><a href="#Ignore" class="headerlink" title="@Ignore"></a>@Ignore</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="meta">@Test</span>()</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TestCase.assertEquals(<span class="number">3</span>, Div.div(<span class="number">6</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//这个方法不执行，被忽略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试套件的使用（多个测试类一起执行）"><a href="#测试套件的使用（多个测试类一起执行）" class="headerlink" title="测试套件的使用（多个测试类一起执行）"></a>测试套件的使用（多个测试类一起执行）</h1><p>有时候需要将几个测试类一起测试，需要用到测试套件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)//修改<span class="title">JUnit</span>的默认执行类,默认值为<span class="title">Suite</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;DivTest<span class="class">.<span class="keyword">class</span>,<span class="title">DivTest</span>.<span class="title">class</span>&#125;)//接收一个<span class="title">Class</span>数组，表示要测试的类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SuiteTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//空类体，本测试套件将执行DivTest两次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参数化设置（编写测试用例）"><a href="#参数化设置（编写测试用例）" class="headerlink" title="参数化设置（编写测试用例）"></a>参数化设置（编写测试用例）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)//修改<span class="title">JUnit</span>的默认执行类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ParameterizdTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> expected = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> input1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> input2 = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterizdTest</span><span class="params">(<span class="keyword">int</span> expected, <span class="keyword">int</span> input1, <span class="keyword">int</span> input2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">        <span class="keyword">this</span>.input1 = input1;</span><br><span class="line">        <span class="keyword">this</span>.input2 = input2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现一个被@Parameterized.Parameters注解修饰的返回Collection的方法</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object[]&gt; t()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TestCase.assertEquals(expected, Div.div(input1, input2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2访问ServletAPI</title>
    <url>/posts/Struts2_how_to_aware_ServletAPI.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Servlet API就是HttpServletRequest(Request)、HttpSession(Session)、ServletContext(Application)<br><a id="more"></a></p>
<h1 id="通过ActionContext类访问"><a href="#通过ActionContext类访问" class="headerlink" title="通过ActionContext类访问"></a>通过ActionContext类访问</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActionContext ctx = ActionContext.getContext();<span class="comment">//单例模式</span></span><br><span class="line"><span class="comment">//访问application</span></span><br><span class="line">Map&lt;String, Object&gt; application = ctx.getApplication();<span class="comment">//Map对象模拟ServletContext实例</span></span><br><span class="line">application.put(<span class="string">"key"</span>, value);</span><br><span class="line">Object value = application.get(<span class="string">"key"</span>);</span><br><span class="line">ctx.setApplication(map);<span class="comment">//传入一个新的Map</span></span><br><span class="line"><span class="comment">//访问Session</span></span><br><span class="line">Map&lt;String, Object&gt; session= ctx.getSession();<span class="comment">//Map对象模拟ServletContext实例</span></span><br><span class="line">application.put(<span class="string">"key"</span>, value);</span><br><span class="line">Object value = application.get(<span class="string">"key"</span>);</span><br><span class="line">ctx.setSession(map);<span class="comment">//传入一个新的Map</span></span><br><span class="line"><span class="comment">//访问Request</span></span><br><span class="line">ctx.put(<span class="string">"key"</span>, value);<span class="comment">//类似调用request.putAttribute("key", value)</span></span><br><span class="line">Object value = ctx.get(<span class="string">"key"</span>);<span class="comment">//类似调用request.getAttribute("key")</span></span><br><span class="line">Map&lt;String, Object&gt; request = ctx.getParameters();<span class="comment">//类似调用request.getParameterMap()</span></span><br></pre></td></tr></table></figure>
<h1 id="实现XxxAware接口"><a href="#实现XxxAware接口" class="headerlink" title="实现XxxAware接口"></a>实现XxxAware接口</h1><ol>
<li><code>ServletContextAware</code> ：直接访问<code>ServletContext(application)</code>  实例</li>
<li><code>ServletRequestAware</code> ：直接访问<code>HttpServletRequest(request)</code>  实例</li>
<li><code>ServletResponseAware</code>：直接访问<code>HttpServletResponse(response)</code>实例</li>
</ol>
<h1 id="通过ServletActionContext类访问"><a href="#通过ServletActionContext类访问" class="headerlink" title="通过ServletActionContext类访问"></a>通过ServletActionContext类访问</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageContext pageContext      = ServletActionContext.getPageContext();</span><br><span class="line">HttpServletRequest request   = ServletActionContext.getRequest();</span><br><span class="line">HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line">ServletContext application   = ServletActionContext.getServletContext();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2修改url后缀</title>
    <url>/posts/Struts2_how_to_custom_url_suffix.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用struts2的url一般为<code>http://localhost:8080/test.action</code><br>有时候需要改为<code>http://localhost:8080/test.html</code><br><a id="more"></a></p>
<h1 id="在struts-xml中配置"><a href="#在struts-xml中配置" class="headerlink" title="在struts.xml中配置"></a>在struts.xml中配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在struts-properties中配置"><a href="#在struts-properties中配置" class="headerlink" title="在struts.properties中配置"></a>在struts.properties中配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struts.action.extension=action,do,struts2,</span><br></pre></td></tr></table></figure>
<h1 id="在web-xml的filter中配置"><a href="#在web-xml的filter中配置" class="headerlink" title="在web.xml的filter中配置"></a>在web.xml的filter中配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>struts.action.extension<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>action,do,struts2,<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2接收参数</title>
    <url>/posts/Struts2_how_to_access_parameters.html</url>
    <content><![CDATA[<h1 id="使用Action的属性接收参数"><a href="#使用Action的属性接收参数" class="headerlink" title="使用Action的属性接收参数"></a>使用Action的属性接收参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单loginJSP.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"myAction"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(getUsername()+<span class="string">":"</span>+getPassword());</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter和setter方法，重要！Struts2是通过反射完成的！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用Domain-Model接收参数"><a href="#使用Domain-Model接收参数" class="headerlink" title="使用Domain Model接收参数"></a>使用Domain Model接收参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单loginJSP.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"myAction"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.username"</span>/&gt;</span><span class="comment">&lt;!--指定对象名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user.password"</span> /&gt;</span><span class="comment">&lt;!--指定对象名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//getter和setter方法，重要！Struts2是通过反射完成的！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(user.getUsername()+<span class="string">":"</span>+user.getPassword());</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter和setter方法，重要！Struts2是通过反射完成的！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实现ModelDriven接口接收参数"><a href="#实现ModelDriven接口接收参数" class="headerlink" title="实现ModelDriven接口接收参数"></a>实现ModelDriven接口接收参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单loginJSP.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"myAction"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="comment">&lt;!--不用指定对象名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="comment">&lt;!--不用指定对象名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//getter和setter方法，重要！Struts2是通过反射完成的！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(user.getUsername()+<span class="string">":"</span>+user.getPassword());</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去掉getter和setter方法，需自己new User</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Annotation学习笔记</title>
    <url>/posts/how_to_custom_annotation.html</url>
    <content><![CDATA[<h1 id="JDK元注解"><a href="#JDK元注解" class="headerlink" title="JDK元注解"></a>JDK元注解</h1><p>对注解使用的注解又称为<strong>元注解</strong>。<br><a id="more"></a></p>
<h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><p><code>Retention</code>意思是保留，声明这个注解的生存时间，包含了一个<code>RetentionPolicy</code>的枚举类的<code>value</code>成员变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span><span class="comment">//1.3节知识</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)<span class="comment">//1.2节知识</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">RetentionPolicy枚举</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CLASS</td>
<td style="text-align:left">将Annotation记录在class文件中，运行时抛弃，这是默认值</td>
</tr>
<tr>
<td style="text-align:left">RUNTIME</td>
<td style="text-align:left">将Annotation记录在class文件中，运行时保留，可以使用反射</td>
</tr>
<tr>
<td style="text-align:left">SOURCE</td>
<td style="text-align:left">只将Annotation记录在java源代码中，用于编译提示报错</td>
</tr>
</tbody>
</table>
<h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p><code>Target</code>意思是目标，表示这个注解可以用于<code>类</code>、<code>方法</code>、<code>Field</code>等不同地方。<br>可以看到<code>value</code>是一个<code>ElementType</code>枚举类的数组，即可以接收多个参数。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span><span class="comment">//1.3节知识</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//1.1节知识</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:left">ElementType枚举</th>
<th style="text-align:left">修饰范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ANNOTATION_TYPE</td>
<td style="text-align:left">注解Annotation</td>
</tr>
<tr>
<td style="text-align:left">PACKAGE</td>
<td style="text-align:left">包</td>
</tr>
<tr>
<td style="text-align:left">TYPE</td>
<td style="text-align:left">类、接口、注释、枚举</td>
</tr>
<tr>
<td style="text-align:left">CONSTRUCTOR</td>
<td style="text-align:left">类构造器</td>
</tr>
<tr>
<td style="text-align:left">METHOD</td>
<td style="text-align:left">方法</td>
</tr>
<tr>
<td style="text-align:left">FIELD</td>
<td style="text-align:left">成员变量</td>
</tr>
<tr>
<td style="text-align:left">LOCAL_VARIABLE</td>
<td style="text-align:left">局部变量</td>
</tr>
<tr>
<td style="text-align:left">PARAMETER</td>
<td style="text-align:left">形式参数</td>
</tr>
</tbody>
</table>
<h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><p><code>Documented</code>意思是文档，修饰的<code>Annotation</code>将被<code>javadoc</code>提取成文档<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p><code>Inherited</code>意思是遗传，修饰的<code>Annotation</code>所修饰的类将具有继承性。即如果<code>A注解</code>被<code>@Inherited</code>修饰，那么被<code>A注解</code>修饰的<code>B类</code>的子类<code>C类</code>将默认被<code>A注解</code>修饰。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="自定义Annotation"><a href="#自定义Annotation" class="headerlink" title="自定义Annotation"></a>自定义Annotation</h1><p>有了元注解，就可以自定义注解</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>和普通的类、接口声明一样，使用<code>@interface</code>关键字即可。还可以添加成员变量(以方法的形式)，指定默认值。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(name = <span class="string">"小明"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test.test(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(name = <span class="string">"小行"</span>, age=<span class="number">12</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(name=<span class="string">"小明"</span>, age = <span class="number">21</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Class c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Method m : c.getMethods())&#123;</span><br><span class="line">            <span class="keyword">for</span>(Annotation a : m.getAnnotations())&#123;</span><br><span class="line">                <span class="keyword">if</span>(a <span class="keyword">instanceof</span> MyAnnotation)&#123;</span><br><span class="line">                    MyAnnotation ma = (MyAnnotation) a;</span><br><span class="line">                    System.out.println(m.getName()+<span class="string">":"</span>+ma.name()+<span class="string">","</span>+ma.age());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用语句</title>
    <url>/posts/common_MySQL_command.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文记录常用MySQL语句</p>
<a id="more"></a>
<h1 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户, 用户通过指定ip地址登录 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名@ip_address <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="comment"># 创建用户, 用户通过任意ip地址登录 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名@<span class="string">'%'</span>        <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql.user(Host,<span class="keyword">User</span>,<span class="keyword">Password</span>) <span class="keyword">values</span> (<span class="string">'127.0.0.1'</span>, <span class="string">'用户名'</span>, <span class="keyword">password</span>(<span class="string">'密码'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户user1</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> user1@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>; </span><br><span class="line"><span class="comment"># 删除匿名用户</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> mysql.user <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">''</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配mydb所有表的指定权限给user1</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span>,<span class="keyword">alter</span>,<span class="keyword">drop</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span>,<span class="keyword">select</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> user1@localhost; </span><br><span class="line"><span class="comment"># 分配mydb数据库所有表的所有权限给user2</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> user2@localhost; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销user1对mydb所有表的create权限 </span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">create</span> <span class="keyword">on</span> mydb.* <span class="keyword">from</span> user1@localhost; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看user1的权限 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> user1@localhost; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户密码, 需要指定用户名和登录ip</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>=<span class="keyword">password</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] db_name [<span class="keyword">charset</span>=utf8] [<span class="keyword">collate</span> utf8_general_ci];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] db_name;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据库编码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> db_name <span class="built_in">character</span> <span class="keyword">set</span> utf8</span><br></pre></td></tr></table></figure>
<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [模式名.]表名</span><br><span class="line">(</span><br><span class="line">    <span class="comment">/* 可以有多个列定义 */</span></span><br><span class="line">    <span class="comment">/* 列名 数据类型 [列级约束] */</span></span><br><span class="line">    columnName1 datatype [<span class="keyword">default</span> expr]</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'备注'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子查询建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [模式名.]表名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">subquery <span class="comment"># 如 select * from 表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改表结构</span></span><br><span class="line"><span class="comment">## 表改名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加列</span></span><br><span class="line"><span class="comment">## 新增列不可指定非空约束，除非有默认约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">/* 可以有多个列定义 */</span></span><br><span class="line">    <span class="comment">/* 列名 数据类型 [列级约束] */</span></span><br><span class="line">    columnName1 datatype [<span class="keyword">default</span> expr]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改列</span></span><br><span class="line"><span class="comment">## modify一次只能修改一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 [新列名] 数据类型 [<span class="keyword">default</span> expr] [<span class="keyword">first</span>|<span class="keyword">after</span> 列名]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除表, 表数据、约束、索引也被删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空数据，保留表结构</span></span><br><span class="line"><span class="keyword">truncate</span> 表名</span><br></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引是存放在<code>模式</code>中的一个数据库对象，在数据字典中独立存放，属于某个表，作用是加速对表的查询。</p>
<p><strong>创建的两种方式</strong></p>
<ol>
<li>自动：当在表上定义主键约束、唯一约束、外键约束时，会自动创建</li>
<li>手动：通过<code>create index index_name on table_name(column[,column]...)</code>语句创建</li>
</ol>
<p><strong>删除的两种方式</strong></p>
<ol>
<li>自动：数据表被删除时，该表的索引被删除</li>
<li>手动：通过<code>drop index index_name on table_name</code>语句删除</li>
</ol>
<h1 id="插入更新删除"><a href="#插入更新删除" class="headerlink" title="插入更新删除"></a>插入更新删除</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name [ ( <span class="keyword">column</span> [, column...] ) ]</span><br><span class="line"><span class="keyword">values</span> ( <span class="keyword">value</span> [, value...]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用子查询插入数据，要求插入数据列和数据类型匹配</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name [ ( <span class="keyword">column</span> [, column...] ) ]</span><br><span class="line">subquery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line"><span class="keyword">update</span> table_name</span><br><span class="line"><span class="keyword">set</span> column1 = value1 [ , column2 = value2 ]...</span><br><span class="line">[<span class="keyword">where</span> condition];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name [<span class="keyword">where</span> condition];</span><br></pre></td></tr></table></figure>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p><strong>单表查询</strong><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找不重复姓名的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sname <span class="keyword">from</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="comment"># not取反</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sname <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">sid</span>=<span class="number">2</span>; <span class="comment"># 查找sid不等于2的学生信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># between...and之间</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span>; <span class="comment"># 查找学号在[2,4]区间中的学生信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in集合</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment"># 查找学号在(2, 3, 4)集合中的学生信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># like模糊查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'张_'</span>;  <span class="comment"># 查找姓名为两个字开头为张的学生信息 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'张%'</span>;  <span class="comment"># 查找姓名为张开头的学生信息 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'张\%'</span>; <span class="comment"># 查找姓名为张%的学生信息，转义字符，标准SQL中没有转义字符 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'张\%'</span> escape <span class="string">'\';   #'</span><span class="comment"># 标准SQL使用escape声明转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># limit限制查询数量</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">limit</span> <span class="number">0</span>, <span class="number">5</span>; <span class="comment"># 查询stu表中从第0行开始的5条记录 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外连接查询</span></span><br><span class="line"><span class="keyword">select</span> s.*,t.* <span class="keyword">from</span> stu s <span class="keyword">left</span>  <span class="keyword">outer</span> <span class="keyword">join</span> teacher t <span class="keyword">on</span> s.tid=t.tid; <span class="comment"># 左外连接，左表为基础，右表数据可为null </span></span><br><span class="line"><span class="keyword">select</span> s.*,t.* <span class="keyword">from</span> stu s <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> teacher t <span class="keyword">on</span> s.tid=t.tid; <span class="comment"># 右外连接，右表为基础，左表数据可为null </span></span><br><span class="line"><span class="keyword">select</span> s.*,t.* <span class="keyword">from</span> stu s <span class="keyword">full</span>  <span class="keyword">outer</span> <span class="keyword">join</span> teacher t <span class="keyword">on</span> s.tid=t.tid; <span class="comment"># 全外连接，MySQL不支持</span></span><br></pre></td></tr></table></figure></p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>不得使用外键与级联, 一切外键概念必须在应用层解决。<br>外键与级联更新适用于单机低并发, 不适合分布式、高并发集群;<br>级联更新是强阻塞, 存在数据库更新风暴的风险;<br>外键影响数据库的插入速度。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># not null约束</span></span><br><span class="line"><span class="comment"># 非空约束，确保指定列不为空，只能作为列级约束。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu ( <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> );   <span class="comment">/* 建表时指定非空约束   */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">modify</span> <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>; <span class="comment">/* 修改表时指定非空约束 */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">modify</span> <span class="keyword">sid</span> <span class="built_in">int</span> <span class="literal">null</span>;     <span class="comment">/* 修改表时取消非空约束 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unique约束</span></span><br><span class="line"><span class="comment"># 唯一约束，确保指定列或多列组合不允许出现重复值，可作为表级约束和列级约束。</span></span><br><span class="line"><span class="comment"># 多列唯一约束只能用表级约束语法。</span></span><br><span class="line"><span class="comment"># 创建唯一约束时，`MySQL`会对应创建唯一索引，默认与列名相同。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu ( <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">unique</span> ); <span class="comment">/* 建表时指定列级唯一约束 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="comment">/* 使用表级约束语法建立唯一约束 */</span></span><br><span class="line">    <span class="keyword">unique</span> (<span class="keyword">sid</span>),</span><br><span class="line">    <span class="comment">/* 使用表级约束语法建立唯一约束并指定约束名 */</span></span><br><span class="line">    <span class="comment">/* constraint uk_1 unique (sid), */</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> <span class="keyword">unique</span>(<span class="keyword">sid</span>);       <span class="comment">/* 修改表结构增加唯一约束 */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">modify</span> <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">unique</span>; <span class="comment">/* 修改表结构增加唯一约束 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> <span class="keyword">index</span> 约束名;     <span class="comment">/* 修改表结构删除唯一约束 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># primary key约束</span></span><br><span class="line"><span class="comment"># 主键约束=非空约束+唯一约束，唯一标识一条记录，可作为表级约束和列级约束。</span></span><br><span class="line"><span class="comment"># 多列主键约束只能用表级约束语法。</span></span><br><span class="line"><span class="comment"># 可以为主键约束指定约束名，但没有用，最后`MySQL`都改为`PRIMARY`。</span></span><br><span class="line"><span class="comment"># 还可以设置为自增长`auto_increment`</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu ( <span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment ); <span class="comment">/* 建表时指定列级主键约束 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="comment">/* 使用表级约束语法建立主键约束 */</span></span><br><span class="line">    primary <span class="keyword">key</span> ( <span class="keyword">sid</span> ),</span><br><span class="line">    <span class="comment">/* 使用表级约束语法建立主键约束并指定约束名，对MySQL无效，最后都为PRIMARY */</span></span><br><span class="line">    <span class="comment">/* constraint pk_1 primary key ( sid ) */</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">sid</span>);       <span class="comment">/* 修改表结构增加主键约束 */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">modify</span> <span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>; <span class="comment">/* 修改表结构增加主键约束 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> primary <span class="keyword">key</span>; <span class="comment">/* 修改表结构删除主键约束 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># foreign key约束</span></span><br><span class="line"><span class="comment"># 外键确保了两个表之间的参照完整性。MySQL只支持表级约束</span></span><br><span class="line"><span class="comment"># on delete cascade ：级联删除，删除所有表的相关的记录</span></span><br><span class="line"><span class="comment"># on delete set null：置空删除，将所有表的相关记录的对应字段置null</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="comment">/* 列级约束，MySQL支持，但不生效 */</span></span><br><span class="line">    <span class="comment">/* tid int reference teacher(tid) # stu.tid参照teacher.tid */</span></span><br><span class="line">    tid <span class="built_in">int</span>,</span><br><span class="line">    <span class="comment">/* 使用表级约束建立外键约束，默认为 表名_ibfk_n，n是从1开始的整数 */</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(tid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">/* 使用表级约束建立外键约束并指定约束名stu_tea_fk */</span></span><br><span class="line">    <span class="comment">/* constraint stu_tea_fk foreign key (tid) references teacher(tid) */</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">/* 修改表结构增加外键约束 */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(tid); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除外键约束 */</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> 约束名; </span><br><span class="line"></span><br><span class="line"><span class="comment"># check约束</span></span><br><span class="line">`MySQL`无效</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span>,</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">check</span>(age&gt;<span class="number">0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>字符函数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">concat(var… args)</td>
<td style="text-align:left">将所有字符串连接成一个字符串</td>
</tr>
<tr>
<td style="text-align:left">concat_ws(var delimiter, var… args)</td>
<td style="text-align:left">将所有字符串连接成一个字符串，子串之间用delimiter分割</td>
</tr>
<tr>
<td style="text-align:left">format(var num, var decimal)</td>
<td style="text-align:left">将数字格式化，四舍五入保留decimal位小数</td>
</tr>
<tr>
<td style="text-align:left">lower(var str)</td>
<td style="text-align:left">将所有字符转化为小写</td>
</tr>
<tr>
<td style="text-align:left">upper(var str)</td>
<td style="text-align:left">将所有字符转化为大写</td>
</tr>
<tr>
<td style="text-align:left">left(var str, var left)</td>
<td style="text-align:left">取字符串前left个字符</td>
</tr>
<tr>
<td style="text-align:left">right(var str, var right)</td>
<td style="text-align:left">取字符串后right个字符</td>
</tr>
<tr>
<td style="text-align:left">length(var str)</td>
<td style="text-align:left">计算字符串的长度</td>
</tr>
<tr>
<td style="text-align:left">ltrim(var str)</td>
<td style="text-align:left">删除字符串前导空格</td>
</tr>
<tr>
<td style="text-align:left">rtrim(var str)</td>
<td style="text-align:left">删除字符串后续空格</td>
</tr>
<tr>
<td style="text-align:left">trim(var str)</td>
<td style="text-align:left">删除字符串前导和后续空格，不能删除中间空格</td>
</tr>
<tr>
<td style="text-align:left">substring(var str, var start, var length)</td>
<td style="text-align:left">截取字符串从start个字符开始长度为length的字符<br>start负值为倒数，length默认全部</td>
</tr>
<tr>
<td style="text-align:left">replace(var str, var old, var new)</td>
<td style="text-align:left">将字符串中的old字符串替换为new字符串</td>
</tr>
</tbody>
</table>
<p><strong>数值运算函数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ceil(var num)</td>
<td style="text-align:left">向上取整，2.6得3，2.1得3</td>
</tr>
<tr>
<td style="text-align:left">div</td>
<td style="text-align:left">整数除法，4/3==1，select 4 div 3;</td>
</tr>
<tr>
<td style="text-align:left">floor()</td>
<td style="text-align:left">向下取整，2.6得2，2.1得2</td>
</tr>
<tr>
<td style="text-align:left">mod</td>
<td style="text-align:left">取余数，5%3==2，select 5 mod 3;</td>
</tr>
<tr>
<td style="text-align:left">power(var base, var exponent)</td>
<td style="text-align:left">幂运算，2^3==8</td>
</tr>
<tr>
<td style="text-align:left">round(var num, var decimal)</td>
<td style="text-align:left">四舍五入保留decimal位小数，默认保留整数</td>
</tr>
<tr>
<td style="text-align:left">truncate(var num, var decimal)</td>
<td style="text-align:left">不四舍五入，直接截断保留decimal位小数，负数往前截断</td>
</tr>
</tbody>
</table>
<p><strong>日期时间函数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">now()</td>
<td style="text-align:left">当前的日期和时间，2016-12-20 17:08:31</td>
</tr>
<tr>
<td style="text-align:left">curdate()</td>
<td style="text-align:left">当前日期，2016-12-20</td>
</tr>
<tr>
<td style="text-align:left">curtime()</td>
<td style="text-align:left">当前时间，17:08:31</td>
</tr>
<tr>
<td style="text-align:left">date_add(var now, interval var datetime)</td>
<td style="text-align:left">日期增减(正负)datetime单位时间，select date_add(‘2016-12-20’,interval 3 day)</td>
</tr>
<tr>
<td style="text-align:left">datediff(var now, var diff)</td>
<td style="text-align:left">计算now-diff的时间差，以天为单位</td>
</tr>
<tr>
<td style="text-align:left">date_format(var now, var format)</td>
<td style="text-align:left">日期格式转换为format格式<br>select date_format(now(),’%Y年%m月%d日%H时%i分%s秒’);</td>
</tr>
</tbody>
</table>
<p><strong>数据库信息函数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">connection_id()</td>
<td style="text-align:left">连接ID</td>
</tr>
<tr>
<td style="text-align:left">database()</td>
<td style="text-align:left">当前数据库名称</td>
</tr>
<tr>
<td style="text-align:left">last_insert_id()</td>
<td style="text-align:left">最后插入的记录的ID</td>
</tr>
<tr>
<td style="text-align:left">user()</td>
<td style="text-align:left">当前用户和地址</td>
</tr>
<tr>
<td style="text-align:left">version()</td>
<td style="text-align:left">版本号</td>
</tr>
</tbody>
</table>
<p><strong>加密函数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">md5(var msg)</td>
<td style="text-align:left">信息摘要算法加密</td>
</tr>
<tr>
<td style="text-align:left">password(var msg)</td>
<td style="text-align:left">密码算法加密</td>
</tr>
</tbody>
</table>
<p><strong>自定义函数</strong><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除函数</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> 函数名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建无参函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> now_cn() <span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">date_format</span>(<span class="keyword">now</span>(), <span class="string">'%Y年%m月%d日 %H时%i分%s秒'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建有参函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> <span class="keyword">avg</span>(num1 <span class="built_in">int</span>, num2 <span class="built_in">int</span>) <span class="keyword">returns</span> <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> (num1+num2)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建复合结构函数体的函数</span></span><br><span class="line"><span class="comment"># 首先以`//`为结尾，替换;</span></span><br><span class="line"><span class="comment"># 再在`begin`和`end`之间编写函数体</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> adduser(user_name <span class="built_in">varchar</span>(<span class="number">30</span>)) <span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(username) <span class="keyword">values</span>(user_name);</span><br><span class="line">return last_insert_id();</span><br><span class="line"><span class="keyword">end</span>//</span><br></pre></td></tr></table></figure></p>
<h1 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># union并运算</span></span><br><span class="line"><span class="comment"># 查找名字为张三的学生和年龄大于10的学生的并集</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> sname=<span class="string">'张三'</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> age&gt;<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># minus减运算</span></span><br><span class="line"><span class="comment"># 查找年龄大于15但不大于20的学生的集合</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> age&gt;<span class="number">15</span> <span class="keyword">minus</span> <span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> age&gt;<span class="number">20</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> age&gt;<span class="number">15</span> <span class="keyword">and</span> age <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> age <span class="keyword">from</span> stu <span class="keyword">where</span> age&gt;<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># intersect交运算</span></span><br><span class="line"><span class="comment"># MySQL不支持，可用多表连接查询实现</span></span><br></pre></td></tr></table></figure>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图可以看成是一个依赖一个或多个表的只读表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> view_name</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">subquery</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span> <span class="comment">/* 指定不允许修改该视图的数据 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_name</span><br></pre></td></tr></table></figure></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul>
<li>原子性（<code>Atomicity</code>）：是应用的最小执行单位，不可再分。</li>
<li>一致性（<code>Consistency</code>）：事务执行结果使数据库从一个一致性状态变为另一个一致性状态，通过原子性实现。</li>
<li>隔离性（<code>Isolation</code>）：各个事务相互独立互不干扰。</li>
<li>持续性（<code>Durability</code>）：事务一旦提交，所有更改都记录到永久存储器中。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;                 <span class="comment"># 临时开启事务 </span></span><br><span class="line"><span class="comment"># start transaction;   # 临时开启事务 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(sname) <span class="keyword">values</span>(<span class="string">"stu1"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(sname) <span class="keyword">values</span>(<span class="string">"stu2"</span>);</span><br><span class="line"><span class="comment"># savepoint a;         # 设置事务中间点 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(sname) <span class="keyword">values</span>(<span class="string">"stu3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;   <span class="comment"># 三条插入数据显示</span></span><br><span class="line"><span class="keyword">rollback</span>;            <span class="comment"># 回滚事务 </span></span><br><span class="line"><span class="comment"># rollback to a;     # 回滚到之前声明的事务中间点a </span></span><br><span class="line"><span class="comment"># commit;            # 或者显式提交事务 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;   <span class="comment"># 三条插入数据没有插入，回滚事务</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="存储过程-开发不建议使用"><a href="#存储过程-开发不建议使用" class="headerlink" title="存储过程(开发不建议使用)"></a>存储过程(开发不建议使用)</h1><p>存储过程是SQL语句和控制语句的预编译集合，减少了语法分析和编译的过程，提高执行效率。<br>存储过程难以调试和扩展，更没有移植性。</p>
<p>参数类型：</p>
<ul>
<li><code>IN</code>：表示该参数的值必须在调用存储过程时指定</li>
<li><code>OUT</code>：表示该参数的值可以被存储过程改变，并且可以返回</li>
<li><code>INOUT</code>：表示该参数的调用时指定，并且可以被改变和返回</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除存储过程</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> <span class="keyword">if</span> <span class="keyword">exists</span> 存储过程名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建无参存储过程</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pd_get_version()</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建有参存储过程</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pd_adduser(<span class="keyword">IN</span> user_name <span class="built_in">varchar</span>(<span class="number">20</span>), <span class="keyword">OUT</span> all_nums <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(username) <span class="keyword">values</span>(user_name);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">into</span> all_nums;</span><br><span class="line"><span class="keyword">end</span>//</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment"># 使用存储过程</span></span><br><span class="line"><span class="keyword">call</span> 存储过程名(变量...);</span><br><span class="line"><span class="keyword">call</span> pd_adduser(<span class="string">'Tom'</span>, @nums);</span><br><span class="line"><span class="keyword">select</span> @nums;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP的Java Bean学习总结</title>
    <url>/posts/The_Java_Bean_of_JSP.html</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>预先创建<code>Person</code>类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//get方法、set方法、构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="普通方式使用"><a href="#普通方式使用" class="headerlink" title="普通方式使用"></a>普通方式使用</h2><p>并在<code>JSP</code>中使用，就像<code>Java</code>程序一样<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">@page</span> <span class="attr">import</span>=<span class="string">"包名.Person"</span>&gt;</span><span class="tag">&lt;<span class="name">%--先导包--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">%--省略--%</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Person</span> <span class="attr">p1</span> = <span class="string">new</span> <span class="attr">Person</span>("小明",<span class="attr">12</span>);</span></span><br><span class="line"><span class="tag">        <span class="attr">out.println</span>("姓名<span class="attr">:</span>"+<span class="attr">p1.getName</span>()+"，年龄<span class="attr">:</span>"+<span class="attr">p1.getAge</span>());</span></span><br><span class="line"><span class="tag">   %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="通过JSP动作标签使用"><a href="#通过JSP动作标签使用" class="headerlink" title="通过JSP动作标签使用"></a>通过JSP动作标签使用</h2><p>使用<code>&lt;jsp:useBean&gt;</code>声明，<code>&lt;jsp:setProperty&gt;</code>设置属性，使用<code>&lt;jsp:getProperty&gt;</code>获取属性<br>并且不用<code>&lt;@page import=&quot;&quot;&gt;</code>导包</p>
<p>首先新建个<code>submit.jsp</code>页面，写一个<code>form</code>表单<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">%--省略--%</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"submitForm"</span> <span class="attr">action</span>=<span class="string">"doSubmit.jsp"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在<code>doSubmit.jsp</code>页面中获取<code>form</code>中传递的数据<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">%--省略--%</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"p2"</span> <span class="attr">class</span>=<span class="string">"包名.Person"</span> <span class="attr">scope</span>=<span class="string">"作用范围"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于Person</span> <span class="attr">p2</span> = <span class="string">new</span> <span class="attr">Person</span>();<span class="attr">--</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%--scope默认值是page，可选page、request、session、application--%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"*"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--第一种方法--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%--通配符*会自动将form中的name和JavaBean中的属性自动配对--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getName()--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getAge()--%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--第二种方法--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--将form中的name和JavaBean中的属性自动配对--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getName()--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getAge()--%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小红"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--第三种方法--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--手动设置属性--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getName()--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getAge()--%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">param</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--第四种方法--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">param</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">%--通过request获取传递参数--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getName()--%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">%--相当于p2.getAge()--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="使用普通方式和Java程序一样。"><a href="#使用普通方式和Java程序一样。" class="headerlink" title="使用普通方式和Java程序一样。"></a>使用普通方式和Java程序一样。</h2><h2 id="使用jsp-setProperty标签"><a href="#使用jsp-setProperty标签" class="headerlink" title="使用jsp:setProperty标签"></a>使用jsp:setProperty标签</h2><ol>
<li>运用通配符<code>*</code>实现完全匹配，表单<code>form</code>的<code>name</code>属性名、<code>JavaBean</code>的属性名要完全一致。</li>
<li>运用通配符<code>*</code>实现部分匹配，表单<code>form</code>的<code>name</code>属性名、<code>JavaBean</code>的属性名、<code>jsp:setProperty</code>的<code>property</code>属性值要完全一致。</li>
<li>手动设置，和表单<code>form</code>无关，和普通方式使用情景一样。</li>
<li>从<code>request</code>中获取，param的属性值只要和<code>request</code>的属性值一致即可，不用和<code>JavaBean</code>的属性值保持一致，无论<code>get</code>、<code>post</code>都可以。</li>
</ol>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/posts/KMP_Algorithm.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>KMP</code>是一种字符串匹配算法，并不算高效，晦涩难懂，比它简单易懂高效的算法是有，但不知为何，课本只讲了这种字符串匹配算法。<br>整个算法的精髓就在于<code>next</code>数组的计算，网上关于<code>KMP</code>的资料有很多。这里只讲<code>next</code>数组的计算。<br><a id="more"></a></p>
<h1 id="求P＝-ababbaaba-的next数组"><a href="#求P＝-ababbaaba-的next数组" class="headerlink" title="求P＝{ababbaaba}的next数组"></a>求P＝{ababbaaba}的next数组</h1><p>1、首先，给前两个赋值01<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ababbaaba</span><br><span class="line">01</span><br></pre></td></tr></table></figure></p>
<p>2、下标移到3号位，对应下标为a，<br>前缀为<code>a</code>，后缀为<code>b</code>，没有相同的，赋1<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ↓</span><br><span class="line">ababbaaba</span><br><span class="line">011</span><br></pre></td></tr></table></figure></p>
<p>3、下标移到4号位，对应下标为b，<br>前缀为<code>a</code>、<code>ab</code>，后缀为<code>ba</code>、<code>a</code><br>有相同的<code>a</code>，长度为1，赋2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   ↓</span><br><span class="line">ababbaaba</span><br><span class="line">0112</span><br></pre></td></tr></table></figure></p>
<p>4、下标移到5号位，对应下标为b，<br>前缀为<code>a</code>、<code>ab</code>、<code>aba</code>，后缀为<code>bab</code>、<code>ab</code>、<code>b</code><br>有相同的<code>ab</code>，长度为2，赋3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    ↓</span><br><span class="line">ababbaaba</span><br><span class="line">01123</span><br></pre></td></tr></table></figure></p>
<p>5、下标移到6号位，对应下标为a，<br>前缀为<code>a</code>、<code>ab</code>、<code>aba</code>、<code>abab</code>，后缀为<code>babb</code>、<code>abb</code>、<code>bb</code>、<code>b</code><br>没有相同的，赋1<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     ↓</span><br><span class="line">ababbaaba</span><br><span class="line">011231</span><br></pre></td></tr></table></figure></p>
<p>6、下标移到7号位，对应下标为a，<br>前缀为<code>a</code>、<code>ab</code>、<code>aba</code>、<code>abab</code>、<code>ababb</code>，后缀为<code>babba</code>、<code>abba</code>、<code>bba</code>、<code>ba</code>、<code>a</code><br>有相同的<code>a</code>，长度为1，赋2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      ↓</span><br><span class="line">ababbaaba</span><br><span class="line">0112312</span><br></pre></td></tr></table></figure></p>
<p>7、下标移到8号位，对应下标为b，<br>前缀为<code>a</code>、<code>ab</code>、<code>aba</code>、<code>abab</code>、<code>ababb</code>、<code>ababba</code>，后缀为<code>babbaa</code>、<code>abbaa</code>、<code>bbaa</code>、<code>baa</code>、<code>aa</code>、<code>a</code><br>有相同的<code>a</code>，长度为1，赋2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ↓</span><br><span class="line">ababbaaba</span><br><span class="line">01123122</span><br></pre></td></tr></table></figure></p>
<p>8、下标移到9号位，对应下标为a，<br>前缀为<code>a</code>、<code>ab</code>、<code>aba</code>、<code>abab</code>、<code>ababb</code>、<code>ababba</code>、<code>ababbaa</code>，后缀为<code>babbaab</code>、<code>abbaab</code>、<code>bbaab</code>、<code>baab</code>、<code>aab</code>、<code>ab</code>、<code>b</code><br>有相同的<code>ab</code>，长度为2，赋3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        ↓</span><br><span class="line">ababbaaba</span><br><span class="line">011231223</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/posts/Sorting_Algorithm.html</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><a id="more"></a>
<hr>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>分析</strong><br>比较从<code>0</code>到<code>arr.length</code>的<strong>每一对</strong>数字，如果前一个数字<strong>大于（或小于）</strong>后一个数字，则交换位置，这样外层<code>for</code>循环每执行一次就把数组中的最大（小）数，移动到数组的<strong>最后</strong>。所以在内层<code>for</code>循环中可以<strong>不用比较</strong>已经排好序的数字，即<code>arr.length-i</code>之后的数字。时间复杂度为O(n^2)</p>
<p><strong>代码</strong></p>
<ul>
<li><p>伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">bubble_sort</span> <span class="params">(array, length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i from <span class="number">0</span> to length-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j from <span class="number">0</span> to length-<span class="number">1</span>-i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>])</span><br><span class="line">                swap(array[j], array[j+<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 冒泡排序 </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">			arr[i] = in.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">					<span class="keyword">int</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">					arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">					arr[j] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">				System.out.print(arr[j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>打印结果</strong><br>输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">8 100 50 22 15 6 1 1000 999 0</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 50 22 15 6 1 100 999 0 1000 </span><br><span class="line">8 22 15 6 1 50 100 0 999 1000 </span><br><span class="line">8 15 6 1 22 50 0 100 999 1000 </span><br><span class="line">8 6 1 15 22 0 50 100 999 1000 </span><br><span class="line">6 1 8 15 0 22 50 100 999 1000 </span><br><span class="line">1 6 8 0 15 22 50 100 999 1000 </span><br><span class="line">1 6 0 8 15 22 50 100 999 1000 </span><br><span class="line">1 0 6 8 15 22 50 100 999 1000 </span><br><span class="line">0 1 6 8 15 22 50 100 999 1000</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p><strong>分析</strong><br>有一个数组<code>[89, 27, 35, 78, 41, 15]</code>，分为已经排好序的部分<code>[89]</code>和未进行排序的部分<code>[27, 35, 78, 41, 15]</code><br>然后取出<code>27</code>，与<strong>排好序的部分</strong>从后往前比较，找到适合<code>27</code>的位置<code>0</code><br>把排好序的数组的位置<code>0</code>之后的部分数组往后移一位，将<code>27</code>填入位置<code>0</code>中，完成一次插入排序。<br>其他依次类推</p>
<p><strong>代码</strong></p>
<ul>
<li><p>伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">bubble_sort</span> <span class="params">(array, length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i from <span class="number">0</span> to length-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j from length-<span class="number">1</span> to <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>(array[j] &lt;= array[j+<span class="number">1</span>])    <span class="keyword">break</span>;</span><br><span class="line">            swap(array[j], array[j+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 插入排序 </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">			arr[i] = in.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i-<span class="number">1</span>; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;arr[j+<span class="number">1</span>]; j--)&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">				arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">				System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>打印结果</strong><br>输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">89 27 35 78 41 15</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">27 89 35 78 41 15 </span><br><span class="line">27 35 89 78 41 15 </span><br><span class="line">27 35 78 89 41 15 </span><br><span class="line">27 35 41 78 89 15 </span><br><span class="line">15 27 35 41 78 89</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>分析</strong><br>从小到大排序，标记最左边的数为<code>key</code>,然后从<strong>右</strong>往左找比<code>key</code>小的数，再从<strong>左</strong>往右找比key大的数，交换位置，最后左右扫描到同一个位置时结束，二分，<br>对左子数组和右子数组进行下一轮排序。</p>
<p><strong>代码</strong></p>
<ul>
<li><p>伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">quick_sort</span> <span class="params">(array, left, right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l = left;</span><br><span class="line">    <span class="keyword">var</span> r = right;</span><br><span class="line">    <span class="keyword">var</span> key = array[left];</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; array[r]&gt;=key) r--;<span class="comment">//必须先从右开始</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; array[l]&lt;=key) l++;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r) swap(arr[l], arr[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    array[left] = array[l];<span class="comment">//交换终点值和key的位置</span></span><br><span class="line">    array[l] = key;</span><br><span class="line">    quick_sort(arr, l+<span class="number">1</span>, right);<span class="comment">//二分排序，顺序不重要</span></span><br><span class="line">    quick_sort(arr, left, l-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            arr[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        printf(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span>;	</span><br><span class="line">        <span class="keyword">int</span> l = left;</span><br><span class="line">        <span class="keyword">int</span> r = right;</span><br><span class="line">        <span class="keyword">int</span> key = arr[left];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[r]&gt;=key) r--;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[l]&lt;=key) l++;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[l];</span><br><span class="line">                arr[l] = arr[r];</span><br><span class="line">                arr[r] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(arr);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[l];</span><br><span class="line">        arr[l] = key;</span><br><span class="line">        quickSort(arr, l+<span class="number">1</span>, right);</span><br><span class="line">        quickSort(arr, left, l-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>打印结果</strong><br>输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">6 1 2 7 9 3 4 5 10 8</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 1 2 5 9 3 4 7 10 8 </span><br><span class="line">6 1 2 5 4 3 9 7 10 8 </span><br><span class="line">6 1 2 5 4 3 9 7 10 8 </span><br><span class="line">3 1 2 5 4 6 9 7 8 10 </span><br><span class="line">3 1 2 5 4 6 9 7 8 10 </span><br><span class="line">3 1 2 5 4 6 8 7 9 10 </span><br><span class="line">3 1 2 5 4 6 7 8 9 10 </span><br><span class="line">2 1 3 5 4 6 7 8 9 10 </span><br><span class="line">2 1 3 4 5 6 7 8 9 10 </span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p><a href="http://blog.csdn.net/morewindows/article/details/6665714" target="_blank" rel="noopener">白话经典算法系列之二 直接插入排序的三种实现</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java解析XML</title>
    <url>/posts/Java_parsing_XML.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<a href="/posts/XML_syntax.html" title="XML语法详解">XML语法详解</a>
</blockquote>
<p>定义一个<code>xml</code>文档<br><a id="more"></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">store</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"01"</span>&gt;</span>第一本书<span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"02"</span>&gt;</span>第二本书<span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">store</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="原生解析"><a href="#原生解析" class="headerlink" title="原生解析"></a>原生解析</h1><h2 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h2><ul>
<li>优点：容易实现增删改操作</li>
<li>缺点：<code>xml</code>过大时容易造成内存溢出</li>
</ul>
<p><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/org/w3c/dom/Document.html" target="_blank" rel="noopener">Document API文档</a> 和<code>js</code>中的类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String filePath = <span class="string">"./src/main/resources/1.xml"</span>;</span><br><span class="line"></span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">    Document doc = builder.parse(filePath);</span><br><span class="line">    NodeList books = doc.getElementsByTagName(<span class="string">"book"</span>); <span class="comment">// 根据标签名获取标签</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.getLength(); i++) &#123;</span><br><span class="line">        Node book = books.item(i);</span><br><span class="line">        NamedNodeMap attr= book.getAttributes();</span><br><span class="line">        System.out.println(i+<span class="string">"i:"</span>+book.getTextContent()); <span class="comment">// 输出book标签的文本内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; attr.getLength(); j++)&#123;</span><br><span class="line">            System.out.println(j+<span class="string">"j:"</span>+attr.item(j)); <span class="comment">// 输出book标签的所有属性值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加一个标签</span></span><br><span class="line">    Element newBook = doc.createElement(<span class="string">"book"</span>);</span><br><span class="line">    newBook.setAttribute(<span class="string">"id"</span>, books.getLength()+<span class="number">1</span>+<span class="string">""</span>); <span class="comment">// 设置属性</span></span><br><span class="line">    doc.getElementsByTagName(<span class="string">"store"</span>).item(<span class="number">0</span>).appendChild(newBook); <span class="comment">// 添加到内存document中，此时未写入磁盘</span></span><br><span class="line">    TransformerFactory tffactory = TransformerFactory.newInstance();</span><br><span class="line">    Transformer tf = tffactory.newTransformer(); </span><br><span class="line">    tf.transform(<span class="keyword">new</span> DOMSource(doc), <span class="keyword">new</span> StreamResult(filePath)); <span class="comment">// 将document通过流的形式写入磁盘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SAX解析"><a href="#SAX解析" class="headerlink" title="SAX解析"></a>SAX解析</h2><ul>
<li>优点：不会造成内存溢出，适合查询</li>
<li>缺点：不能进行增删改操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSAX</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">    SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">    SAXParser parser = factory.newSAXParser();</span><br><span class="line">    parser.parse(<span class="keyword">new</span> File(filePath), <span class="keyword">new</span> DefaultHandler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName,String qName,Attributes attributes)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">"&lt;"</span>+qName+<span class="string">"&gt;"</span>); <span class="comment">// 开始标签</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(ch, start, length)); <span class="comment">// 标签内容</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"&lt;/"</span>+qName+<span class="string">"&gt;"</span>); <span class="comment">// 结束标签</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="dom4j解析"><a href="#dom4j解析" class="headerlink" title="dom4j解析"></a>dom4j解析</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><a href="https://mvnrepository.com/artifact/dom4j/dom4j/1.6.1" target="_blank" rel="noopener">maven项目</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDOM4J</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException </span>&#123;</span><br><span class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">    Document doc = reader.read(<span class="keyword">new</span> File(filePath));</span><br><span class="line">    Element root = doc.getRootElement();</span><br><span class="line">    List&lt;Element&gt; books = root.elements(<span class="string">"book"</span>);</span><br><span class="line">    <span class="keyword">for</span>(Element book : books)&#123;</span><br><span class="line">        List&lt;Element&gt; names = book.elements(<span class="string">"name"</span>);</span><br><span class="line">        System.out.print(<span class="string">"bookID:"</span>+book.attributeValue(<span class="string">"id"</span>));</span><br><span class="line">        <span class="keyword">for</span>(Element name : names)&#123;</span><br><span class="line">            System.out.println(name.getText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入操作</span></span><br><span class="line">    Element newBook = root.addElement(<span class="string">"book"</span>);</span><br><span class="line">    newBook.addAttribute(<span class="string">"id"</span>, books.size()+<span class="number">1</span>+<span class="string">""</span>); <span class="comment">// 添加属性</span></span><br><span class="line">    newBook.addElement(<span class="string">"name"</span>).setText(<span class="string">"第"</span>+(books.size()+<span class="number">1</span>)+<span class="string">"本书"</span>); <span class="comment">// 添加元素</span></span><br><span class="line">    XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath)), <span class="comment">// 流</span></span><br><span class="line">            OutputFormat.createPrettyPrint()); <span class="comment">// 格式化写入</span></span><br><span class="line">    writer.write(doc);</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持xpath"><a href="#支持xpath" class="headerlink" title="支持xpath"></a>支持xpath</h2><p>导入<a href="https://mvnrepository.com/artifact/jaxen/jaxen/1.1.6" target="_blank" rel="noopener">maven项目</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//book 所有book标签</span></span><br><span class="line"><span class="comment">/store/book/name 所有store标签下的book标签下的name标签</span></span><br><span class="line"><span class="comment">/* 所有标签，通配符</span></span><br><span class="line"><span class="comment">/store/book[1]/name[last()] store标签下的第一个book标签下的最后一个name标签</span></span><br><span class="line"><span class="comment">//book[@id] 所有有id属性的book标签</span></span><br><span class="line"><span class="comment">//book[@id='01'] 所有id属性值为01的book标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXPath</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">    Document doc = reader.read(<span class="keyword">new</span> File(filePath));</span><br><span class="line">    XPath xPath = <span class="keyword">new</span> DefaultXPath(<span class="string">"//name"</span>);</span><br><span class="line">    List&lt;Element&gt; names = xPath.selectNodes(doc);</span><br><span class="line">    <span class="keyword">for</span> (Element name : names) &#123;</span><br><span class="line">        System.out.println(name.getTextTrim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>ListActivity源码详解</title>
    <url>/posts/ListActivity_source_code.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在研究<code>PreferenceActivity</code>发现是继承自ListActivity的，打开看了下<code>ListActivity</code>的源码，发现也不长，就详细阅读认识一下。<br><a id="more"></a></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><code>ListActivity</code>简单到只要在<code>onCreate()</code>中调用<code>setListAdapter()</code>方法就可以实现了。<br>支持空数据显示。</p>
<p>点进去我们看到前两个<code>field</code>很熟悉，就是一个<code>ListView</code>+<code>Adapter</code>。<br>很容易就知道这两个<code>field</code>就是<code>ListActivity</code>的核心，数据存储在<code>Adapter</code>中，展示在<code>ListView</code>中。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ListAdapter mAdapter;</span><br><span class="line"><span class="keyword">protected</span> ListView mList;</span><br><span class="line"><span class="comment">/** 省略部分代码 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListAdapter</span><span class="params">(ListAdapter adapter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加上锁，防止多个线程同时调用这个方法</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        ensureList();<span class="comment">//内含setContentView的方法</span></span><br><span class="line">        mAdapter = adapter;</span><br><span class="line">        mList.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在调用了<code>setListAdapter()</code>之后，对<code>Adapter</code>重新赋值，并重新设置<code>ListView</code>的<code>Adapter</code>，并且调用了<code>ensureList()</code>方法，重新创建布局。<br>点进<code>ensureList()</code>方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setContentView(com.android.internal.R.layout.list_content_simple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>哈！原来每次<code>setListAdapter()</code>都会把<code>Adapter</code>替换掉，并且重新<code>setContentView()</code>，怪不得<code>ListActivity</code>不用我们操心布局。<br>我们再来看看这个布局的内容<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@android:id/list"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawSelectorOnTop</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也就是说，你可以自己<code>setContentView()</code>，只要你的布局有一个<code>viewId</code>是<code>android:id=&quot;@android:id/list&quot;</code>的就行。<br>看到这你可能会无语，就一个简单的<code>ListView</code>就完事了？这么简单我也会啊！<br>别急，这只是完成了基本的功能而已，还要开放一些接口给子<code>Activity</code>调用。<br>有了<code>ListView</code>当然要实现各种事件啊。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelection</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">     mList.setSelection(position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSelectedItemPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mList.getSelectedItemPosition();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSelectedItemId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mList.getSelectedItemId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然还有点击事件，我们发现有一个点击的监听器<code>mOnClickListener</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AdapterView.OnItemClickListener mOnClickListener = <span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span>    </span>&#123;</span><br><span class="line">        onListItemClick((ListView)parent, v, position, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView l, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//空方法，交由子类实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>既然有监听器，那又是在哪里设置了这个监听器呢？我们发现有一个<code>onContentChanged()</code>方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onContentChanged();  <span class="comment">//Activity中是空方法</span></span><br><span class="line">    View emptyView = findViewById(com.android.internal.R.id.empty); <span class="comment">//空数据时显示</span></span><br><span class="line">    mList = (ListView)findViewById(com.android.internal.R.id.list); <span class="comment">//绑定ListView</span></span><br><span class="line">    <span class="keyword">if</span> (mList == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">"Your content must have a ListView whose id attribute is "</span></span><br><span class="line">                         + <span class="string">"'android.R.id.list'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (emptyView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mList.setEmptyView(emptyView);    <span class="comment">//多好啊，recyclerView就没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    mList.setOnItemClickListener(mOnClickListener); <span class="comment">//设置点击事件</span></span><br><span class="line">    <span class="keyword">if</span> (mFinishedStart) &#123;</span><br><span class="line">        <span class="comment">// 这个if不知道有什么用意</span></span><br><span class="line">        setListAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    mHandler.post(mRequestFocus); <span class="comment">//待会解释</span></span><br><span class="line">    mFinishedStart = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可是翻遍源代码也没发现哪里调用了<code>onContentChanged()</code>。<br>从字面上看，<code>onContentChanged()</code>是<code>Content</code>改变时的回调接口，等等，<code>Content</code>？<br>我们不是在<code>ensureList()</code>中调用了<code>setContentView()</code>方法吗？<br>答案是正确的，在调用了<code>setContentView()</code>，会调用<code>onContentChanged()</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity的setContentView()调用Window(具体子类是PhoneWindow)的setContentView()方法</span></span><br><span class="line"><span class="comment">// 以下代码出现在PhoneWindow中</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** 省略部分代码 */</span></span><br><span class="line">    mLayoutInflater.inflate(layoutResID, mContentParent);  </span><br><span class="line">    getCallback().onContentChanged();  <span class="comment">//注意这里!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再解释下，上面的<code>mHandler.post(mRequestFocus);</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable mRequestFocus = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用来使ListView获取焦点。</span></span><br><span class="line">        mList.focusableViewAvailable(mList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Activity销毁时移除</span></span><br><span class="line">    mHandler.removeCallbacks(mRequestFocus);</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，<code>ListActivity</code>已经认识的差不多了。有什么讲错了希望能有大牛来提点一下。<br>有兴趣的可以自己用<code>recyclerView</code>替换<code>listView</code>实现一个<code>RecyclerActivity</code>.</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>GreenDAO使用心得</title>
    <url>/posts/how_to_use_GreenDAO.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个程序员，基本的<code>SQL</code>语句是必须掌握的，但是如果单单使用原生的<code>SQL</code>语句，开发效率就太低了.<br>虽然<code>Android</code>有给我们提供一套封装好的<code>API</code>，但我觉得并没有提高多少便利，反而增加了学习成本。<br>我选择的是<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">greenDAO</a> .<br>虽然<code>github</code>上<a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">realm-java</a> 的星星比<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">greenDAO</a>高一点.<br>但是<a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">realm-java</a> 有一个弊端，就是<code>apk</code>的体积会大上5M左右。</p>
<a id="more"></a>
<p>下面一图说明<code>greenDAO</code>的好处<br><img src="/images/GreenDAO使用心得_01.png"></p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">greenDAO</a> 已经讲解的很清楚了。<br>但是还是要说一下<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码是放在根build.gradle而不是某个module的build.gradle里的</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.1.1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码是放在android的module的build.gradle里的</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.greenrobot.greendao'</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.greenrobot:greendao:3.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码是放在java library的module的build.gradle里的(下一小节会提到)</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    compile <span class="string">'org.greenrobot:greendao-generator:3.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建一个新的Module"><a href="#创建一个新的Module" class="headerlink" title="创建一个新的Module"></a>创建一个新的Module</h2><p>首先需要一个<code>Java Library</code>，通俗的讲，就是用来创建一系列的实体类（一个类对应一个表）和数据库工具类。<br>并且导入<code>compile &#39;org.greenrobot:greendao-generator:3.1.0&#39;</code>，上面有提到。<br><img src="/images/GreenDAO使用心得_02.png"><br><img src="/images/GreenDAO使用心得_03.png"></p>
<p>注意，我们创建的是<code>Java Library</code>，是<code>Java Library</code>，是<code>Java Library</code>。<br>所以要用<code>Java</code>的方式写代码，而不是<code>Android</code>的方式。<br>既然是<code>Java</code>的方式，就要写<code>main</code>函数。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION = <span class="number">1</span>;<span class="comment">//数据库的版本号，用来检测是否升级数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.ahao.demo.dao"</span>;<span class="comment">//自动生成代码的包名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OUT_DIR = <span class="string">"./app/src/main/java-gen"</span>;<span class="comment">//自动生成代码的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建了一个用于添加实体（Entity）的模式（Schema）对象。</span></span><br><span class="line">        Schema schema = <span class="keyword">new</span> Schema(VERSION, PACKAGE);</span><br><span class="line">        <span class="comment">// 添加一个实体(类),一个实体(类)对应一张表</span></span><br><span class="line">        addNote(schema);</span><br><span class="line">        <span class="comment">// 创建存放自动生成代码的目录</span></span><br><span class="line">        rebuild(OUT_DIR);</span><br><span class="line">        <span class="comment">// 自动生成代码</span></span><br><span class="line">        <span class="keyword">new</span> DaoGenerator().generateAll(schema, OUT_DIR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addNote</span><span class="params">(Schema schema)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）</span></span><br><span class="line">        Entity note = schema.addEntity(<span class="string">"Note"</span>);</span><br><span class="line">        <span class="comment">// 你也可以重新给表命名</span></span><br><span class="line">        <span class="comment">// note.setTableName("NODE");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值</span></span><br><span class="line">        <span class="comment">// 接下来你便可以设置表中的字段：</span></span><br><span class="line">        note.addIdProperty();<span class="comment">//添加一个id主键字段</span></span><br><span class="line">        note.addStringProperty(<span class="string">"text"</span>).notNull();<span class="comment">//添加一个名为TEXT的String字段</span></span><br><span class="line">        <span class="comment">// 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。</span></span><br><span class="line">        <span class="comment">// 例如,一个名为creationDate的属性,在表中的字段名为CREATION_DATE</span></span><br><span class="line">        note.addStringProperty(<span class="string">"comment"</span>);</span><br><span class="line">        note.addDateProperty(<span class="string">"date"</span>);<span class="comment">//添加一个Data字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保outdir文件夹存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(String file)</span> </span>&#123;</span><br><span class="line">        File outDir = <span class="keyword">new</span> File(OUT_DIR);</span><br><span class="line">        outDir.delete();</span><br><span class="line">        outDir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么问题来了，生成的代码到哪里去了呢？要如何使用呢？</p>
<h2 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h2><p>运行代码<br><img src="/images/GreenDAO使用心得_04.png"></p>
<p>如果出现以下信息就是创建成功<br><img src="/images/GreenDAO使用心得_05.png"></p>
<p> 切换到<code>Project Files</code>视图，可以看到代码已经自动生成了<br><img src="/images/GreenDAO使用心得_06.png"><br><img src="/images/GreenDAO使用心得_07.png"></p>
<p>这里<a href="http://my.oschina.net/cheneywangc/blog/196354" target="_blank" rel="noopener">引用</a> 一下</p>
<ul>
<li>DaoMaster：一看名字就知道它是Dao中的最大的官了。它保存了sqlitedatebase对象以及操作DAO classes（注意：不是对象）。其提供了一些创建和删除table的静态方法，其内部类OpenHelper和DevOpenHelper实现了SQLiteOpenHelper并创建数据库的框架。</li>
<li>DaoSession：会话层。操作具体的DAO对象（注意：是对象），比如各种getter方法。</li>
<li>XXXDao：实际生成的某某DAO类，通常对应具体的java类，比如NoteDao等。其有更多的权限和方法来操作数据库元素。</li>
<li>XXXEntity：持久的实体对象。通常代表了一个数据库row的标准java properties。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Android沉浸式状态栏</title>
    <url>/posts/Android_Using_Immersive_Full-Screen_Mode.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>沉浸式状态栏的实现方式在以前是五花八门。<br>在这里主要是给出一个我觉得比较完美的实现沉浸式状态栏的方案（兼容最低android4.4）。<br><a id="more"></a></p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>android 5.0 以上<br><img src="/images/Android沉浸式状态栏_01.gif"></p>
<p>android 4.4 API 19<br><img src="/images/Android沉浸式状态栏_02.gif"></p>
<p>以上都是原生安卓系统的效果，具体到国内的各种各样改过的系统可能会有细微差别，我测试小米和华为的机器效果基本一样。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="修改主题属性"><a href="#修改主题属性" class="headerlink" title="修改主题属性"></a>修改主题属性</h2><p>在values-v19之后的主题属性中添加一条即可,如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="设置fitsSystemWindows属性"><a href="#设置fitsSystemWindows属性" class="headerlink" title="设置fitsSystemWindows属性"></a>设置fitsSystemWindows属性</h2><p>如果你想让一个View的图像显示在状态栏下，那么就在View的XML布局文件中添加如下属性<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:fitsSystemWindows="true"</span><br></pre></td></tr></table></figure></p>
<p>例子：<br>这里我设置了ToolBar<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.mjj.statusbar.MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意：如果你在同一个布局中添加了多个这个属性，那么一般只有最外层View的这个属性生效</p>
<h2 id="调整View高度"><a href="#调整View高度" class="headerlink" title="调整View高度"></a>调整View高度</h2><p>上面两步都是统一的，这一步就比较有针对性了，对不同布局和API版本都会有所微调，主要是顶部View的高度。<br>如果你像我一样基本使用原生控件，那么一般情况下是调整ToolBar(ActionBar)的高度。你需要给Toolbar加上系统状态栏的高度，因为如果你设置了前面两步，那么ToolBar会上移到状态栏下面,如图<br><img src="/images/Android沉浸式状态栏_03.png"></p>
<p>我比较喜欢的处理方式是在java代码中改变高度,注意需要判断安卓版本，样例如下：<br>（具体获取状态栏高度的代码可以到后面的参考资料中看，也可以在我的Demo中看源码）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mToolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)</span><br><span class="line">&#123;</span><br><span class="line">    mToolbar.getLayoutParams().height = getAppBarHeight();</span><br><span class="line">    mToolbar.setPadding(mToolbar.getPaddingLeft(),</span><br><span class="line">            getStatusBarHeight(),</span><br><span class="line">            mToolbar.getPaddingRight(),</span><br><span class="line">            mToolbar.getPaddingBottom());</span><br><span class="line">&#125;</span><br><span class="line">setSupportActionBar(mToolbar);</span><br></pre></td></tr></table></figure></p>
<p>当然了，也有一些同学喜欢在XML中定义，那么就需要写一些分离区分版本的XML文件。目前的话安卓手机端除6.0的系统状态栏是24dp,其它都是25dp。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.mosil.biz/2014/01/android-transparent-kitkat/" target="_blank" rel="noopener">API 19 设置状态栏</a></li>
<li><a href="http://stackoverflow.com/questions/3407256/height-of-status-bar-in-android" target="_blank" rel="noopener">获取状态栏的高度</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Toolbar</tag>
      </tags>
  </entry>
  <entry>
    <title>改变support中AlertDialog的样式</title>
    <url>/posts/change_the_style_of_AlertDialog.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>原文:<a href="http://blog.isming.me/2015/08/31/modify-alert-style/" target="_blank" rel="noopener">http://blog.isming.me/2015/08/31/modify-alert-style/</a></p>
</blockquote>
<p><code>android</code>最近的<code>support</code>库提供了<code>AlertDialog</code>，可以让我们在低于<code>5.0</code>的系统使用到跟<code>5.0</code>系统一样的<code>Material Design</code>风格的对话框。<br><a id="more"></a><br><img src="/images/改变support中AlertDialog的样式_01.jpg"></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="自定义一个Style"><a href="#自定义一个Style" class="headerlink" title="自定义一个Style"></a>自定义一个Style</h2><p>在<code>values/styles.xml</code>中创建一个<code>Style</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyAlertDialogStyle"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Used for the buttons --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Used for the title and text --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Used for the background --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>#4CAF50<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="在创建对话框时使用"><a href="#在创建对话框时使用" class="headerlink" title="在创建对话框时使用"></a>在创建对话框时使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>, R.style.MyAlertDialogStyle);</span><br><span class="line">builder.setTitle(<span class="string">"AppCompatDialog"</span>);</span><br><span class="line">builder.setMessage(<span class="string">"Lorem ipsum dolor..."</span>);</span><br><span class="line">builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">null</span>);</span><br><span class="line">builder.setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">null</span>);</span><br><span class="line">builder.show();</span><br></pre></td></tr></table></figure>
<h2 id="全局使用style（可选）"><a href="#全局使用style（可选）" class="headerlink" title="全局使用style（可选）"></a>全局使用style（可选）</h2><p>这样的方法是每个地方使用的时候，都要在构造函数传我们的这个<code>Dialog</code>的<code>Theme</code>，我们也可以全局的定义对话框的样式。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTheme"</span> <span class="attr">parent</span>=<span class="string">"Base.Theme.AppCompat.Light"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"alertDialogTheme"</span>&gt;</span>@style/MyAlertDialogStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/accent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在我们的<code>AndroidManifest.xml</code>文件中声明<code>application</code>或者<code>activity</code>的时候设置<code>theme</code>为<code>MyTheme</code>即可.<br>不过需要注意的一点是，我们的<code>Activity</code>需要继承自<code>AppCompatActivity</code>。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AlertDialog</tag>
      </tags>
  </entry>
  <entry>
    <title>group()和group(i)的区别</title>
    <url>/posts/The_difference_between_group()_and_group(i).html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做网络爬虫，需要用到正则表达式，所以学习一下。</p>
<h1 id="先看代码"><a href="#先看代码" class="headerlink" title="先看代码"></a>先看代码</h1><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">            String Line = <span class="string">"abcdefg"</span>;  </span><br><span class="line">            String regular = <span class="string">"(b)([\\s\\S]+?)(f)"</span>;  </span><br><span class="line">            System.out.println(getRegular(Line, regular).get(<span class="number">0</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getRegular</span><span class="params">(String line, String regular)</span> </span>&#123;  </span><br><span class="line">            List&lt;String&gt; code = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </span><br><span class="line"></span><br><span class="line">            Pattern pattern = Pattern.compile(regular);  </span><br><span class="line">            Matcher matcher = pattern.matcher(line);  </span><br><span class="line">            <span class="keyword">while</span>(matcher.find())&#123;  </span><br><span class="line">                    code.add(matcher.group(<span class="number">1</span>));<span class="comment">//看这里的group的参数  </span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> code;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的目的是获取字符串<code>Line</code>中的<code>cde</code>部分，也就是<code>ab</code>和<code>fg</code>之间的子字符串。<br>这里不详解<code>ab([\\s\\S]+?)fg</code>的含义，只要知道是满足上述要求的正则表达式即可。<br>在官方文档<code>jdk</code>中对<code>group()</code>的定义如下</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">String  group();</td>
<td style="text-align:left">返回由以前匹配操作所匹配的输入子序列。</td>
</tr>
<tr>
<td style="text-align:left">String  group(int group);</td>
<td style="text-align:left">返回在以前匹配操作期间由给定组捕获的输入子序列。</td>
</tr>
<tr>
<td style="text-align:left">int groupCount();</td>
<td style="text-align:left">返回此匹配器模式中的捕获组数。</td>
</tr>
</tbody>
</table>
<p>这里的捕获组数，简单来说就是，正则表达式中<strong>有多少个括号</strong>，通过<code>groupCount()</code>获取捕获组数</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">获取数据组</th>
<th style="text-align:left"><code>(b)([\\s\\S]+?)(f)</code>对<code>abcdefg</code>正则结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">group()</td>
<td style="text-align:left">所有组</td>
<td style="text-align:left"><code>bcdef</code></td>
</tr>
<tr>
<td style="text-align:left">group(0)</td>
<td style="text-align:left">所有组</td>
<td style="text-align:left"><code>bcdef</code></td>
</tr>
<tr>
<td style="text-align:left">group(1)</td>
<td style="text-align:left">第1组</td>
<td style="text-align:left"><code>b</code></td>
</tr>
<tr>
<td style="text-align:left">group(2)</td>
<td style="text-align:left">第2组</td>
<td style="text-align:left"><code>cde</code></td>
</tr>
<tr>
<td style="text-align:left">group(3)</td>
<td style="text-align:left">第3组</td>
<td style="text-align:left"><code>f</code></td>
</tr>
</tbody>
</table>
<p>那么问题来了，如果<code>String regular = &quot;b([\\s\\S]+?)f&quot;;</code><br>把<code>b</code>和<code>f</code>的括号去掉，结果使用<code>groupCount()</code>获取的组数为<code>1</code>，而不是之前的<code>3</code>。<br>也就是说，<code>group(1)</code>获取的是<code>cde</code>，而不是之前的<code>b</code>。</p>
<p>值得注意的是<code>group()</code>会出现越界问题，要注意。</p>
]]></content>
      <categories>
        <category>Java SE</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>在Markdown中嵌入UML文档</title>
    <url>/posts/insert_UML_to_Markdown.html</url>
    <content><![CDATA[<blockquote>
<p><a href="http://xiaocong.github.io/blog/2013/04/22/writing-development-documentation-with-markdown/" target="_blank" rel="noopener">原文</a></p>
</blockquote>
<p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> 是网络书写语言，特别适合程序员书写文档：</p>
<ul>
<li>全文本格式，方便进行<code>diff</code>，<code>patch</code>和版本的管理；</li>
<li>格式直观，简单易学，便于书写和阅读；</li>
<li>兼容 <code>HTML</code>，能方便地转换为 <code>pdf</code>，<code>doc</code>等格式；</li>
<li>支持 <code>Linux</code>，<code>Windows</code>，<code>Mac</code>；</li>
<li>支持内嵌代码和语法高亮；</li>
</ul>
<a id="more"></a>
<p>估计只是方便版本管理，就能吸引很多程序员的兴趣，特别是需要团队一起参与书写文档的时候。感兴趣的可以参考官方网站，或者以前写的一份使用 <a href="http://xiaocong.github.io/slides/writing-documentation-with-markdown" target="_blank" rel="noopener">Markdown 的 slides</a>。<br>但是毕竟<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>只是书写语言，不是程序设计语言，如果我们需要嵌入 <code>UML</code> 的时候，不可避免地需要其他专业软件的支持。这里介绍几种利用网络服务，可以直接在<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>文档中嵌入的 <code>UML</code> 建模图：</p>
<h1 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h1><h2 id="角色-Actor"><a href="#角色-Actor" class="headerlink" title="角色(Actor)"></a>角色(Actor)</h2><p>使用<code>[角色名]</code>表示角色。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/[Customer]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/scruffy/usecase/[Customer]"></p>
<h2 id="用例-Use-Case"><a href="#用例-Use-Case" class="headerlink" title="用例(Use Case)"></a>用例(Use Case)</h2><p>使用<code>(用例名)</code>表示用例，<code>-</code>表示角色和用例之间的关联。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login),[Customer]-(Logout)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login),[Customer]-(Logout)"></p>
<h2 id="备注-Notes"><a href="#备注-Notes" class="headerlink" title="备注(Notes)"></a>备注(Notes)</h2><p>如果用例名以<code>note:</code>开头，表明那是一个备注，可以用<code>{bg:颜色名}</code>定义备注的背景色。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login), [Customer]-(note: Cust can be registered or not&#123;bg:beige&#125;)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login), [Customer]-(note: Cust can be registered or not{bg:beige})"></p>
<h2 id="角色继承-Actor-Inheritance"><a href="#角色继承-Actor-Inheritance" class="headerlink" title="角色继承(Actor Inheritance)"></a>角色继承(Actor Inheritance)</h2><p>使用符号<code>^</code>表示角色之间的继承关系。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/[Cms Admin]^[User], [Customer]^[User], [Agent]^[User]"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/scruffy/usecase/[Cms Admin]^[User], [Customer]^[User], [Agent]^[User]"></p>
<h2 id="扩展和包含-Extends-and-Includes"><a href="#扩展和包含-Extends-and-Includes" class="headerlink" title="扩展和包含(Extends and Includes)"></a>扩展和包含(Extends and Includes)</h2><p>使用<code>&gt;</code>表示用例之间的包含关系，<code>&lt;</code>表示用例的扩展。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/(Login)&lt;(Register),(Login)&lt;(Request Password Reminder),(Register)&gt;(Confirm Registration)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/scruffy/usecase/(Login)<(Register),(Login)<(Request Password Reminder),(Register)>(Confirm Registration)"></p>
<h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/usecase/(note: figure 1.2&#123;bg:beige&#125;), [User]-(Login),[Site Maintainer]-(Add User),(Add User)&lt;(Add Company),[Site Maintainer]-(Upload Docs),(Upload Docs)&lt;(Manage Folders),[User]-(Upload Docs), [User]-(Full Text Search Docs), (Full Text Search Docs)&gt;(Preview Doc),(Full Text Search Docs)&gt;(Download Docs), [User]-(Browse Docs), (Browse Docs)&gt;(Preview Doc), (Download Docs), [Site Maintainer]-(Post New Event To The Web Site), [User]-(View Events)"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yuml.me/diagram/nofunky/usecase/(note: figure 1.2{bg:beige}), [User]-(Login),[Site Maintainer]-(Add User),(Add User)<(Add Company),[Site Maintainer]-(Upload Docs),(Upload Docs)<(Manage Folders),[User]-(Upload Docs), [User]-(Full Text Search Docs), (Full Text Search Docs)>(Preview Doc),(Full Text Search Docs)>(Download Docs), [User]-(Browse Docs), (Browse Docs)>(Preview Doc), (Download Docs), [Site Maintainer]-(Post New Event To The Web Site), [User]-(View Events)"></p>
<h2 id="YUML支持3种图示风格"><a href="#YUML支持3种图示风格" class="headerlink" title="YUML支持3种图示风格"></a>YUML支持3种图示风格</h2><p>分别是：</p>
<ol>
<li>plain</li>
<li>scruffy</li>
<li>boring</li>
</ol>
<p>你可以对比下列图示的不同风格：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/plain/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/boring/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/plain/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"><br><img src="https://yuml.me/diagram/scruffy/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"><br><img src="https://yuml.me/diagram/boring/usecase/[Customer]-(Login),[Customer]-(Logout),(login)%3C(Register)"></p>
<h1 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h1><h2 id="动作-Action"><a href="#动作-Action" class="headerlink" title="动作(Action)"></a>动作(Action)</h2><p>用<code>(状态名)</code>表示一个状态，其中<code>(start)</code>和<code>(end)</code>分别表示开始状态和结束状态，箭头<code>-&gt;</code>表示状态的转换。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/activity/(start)-&gt;(Boil Kettle)-&gt;(end)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/activity/(start)->(Boil Kettle)->(end)"></p>
<h2 id="判断和限制-Decisions-and-Constraints"><a href="#判断和限制-Decisions-and-Constraints" class="headerlink" title="判断和限制(Decisions and Constraints)"></a>判断和限制(Decisions and Constraints)</h2><p>使用<code>&lt;判断名&gt;</code>表示一个条件判断，其后跟<code>[条件]-&gt;</code>表示满足条件后状态的转换；用不同的<code>判断名</code>来标识不同的判定位置。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/activity/(start)-&gt;&lt;a&gt;[kettle empty]-&gt;(Fill Kettle)-&gt;(Boil Kettle),&lt;a&gt;[kettle full]-&gt;(Boil Kettle)-&gt;(end)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/activity/(start)-><a>[kettle empty]->(Fill Kettle)->(Boil Kettle),<a>[kettle full]->(Boil Kettle)->(end)"></p>
<h2 id="分支合并-Fork-Join"><a href="#分支合并-Fork-Join" class="headerlink" title="分支合并(Fork/Join)"></a>分支合并(Fork/Join)</h2><p>使用<code>||</code>表示分支或者合并点。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/activity/(start)-&gt;&lt;a&gt;[kettle empty]-&gt;(Fill Kettle)-&gt;|b|,&lt;a&gt;[kettle full]-&gt;|b|-&gt;(Boil Kettle)-&gt;|c|,|b|-&gt;(Add Tea Bag)-&gt;(Add Milk)-&gt;|c|-&gt;(Pour Water)-&gt;(end),(Pour Water)-&gt;(end)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/activity/(start)-><a>[kettle empty]->(Fill Kettle)->|b|,<a>[kettle full]->|b|->(Boil Kettle)->|c|,|b|->(Add Tea Bag)->(Add Milk)->|c|->(Pour Water)->(end),(Pour Water)->(end)"></p>
<h2 id="对象-Objects"><a href="#对象-Objects" class="headerlink" title="对象(Objects)"></a>对象(Objects)</h2><p>符号<code>[]</code>表示一个对象。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/activity/(start)-&gt;[Water]-&gt;(Fill Kettle)-&gt;(end)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/activity/(start)->[Water]->(Fill Kettle)->(end)"></p>
<h2 id="连接器名称-Connector-Name"><a href="#连接器名称-Connector-Name" class="headerlink" title="连接器名称(Connector Name)"></a>连接器名称(Connector Name)</h2><p>在<code>-&gt;</code>中加入名称，<code>-名称&gt;</code>表示命名连接器。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/activity/(start)-fill&gt;(Fill Kettle)-&gt;(end)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/activity/(start)-fill>(Fill Kettle)->(end)"></p>
<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><h2 id="关联-Association"><a href="#关联-Association" class="headerlink" title="关联(Association)"></a>关联(Association)</h2><p>类名用<code>[]</code>表示，<code>-&gt;</code>表示定向关联，<code>-</code>表明关联。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Customer]-&gt;[Billing Address]"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Customer]->[Billing Address]"></p>
<h2 id="基数-Cardinality"><a href="#基数-Cardinality" class="headerlink" title="基数(Cardinality)"></a>基数(Cardinality)</h2><p><code>基数-基数&gt;</code>表明关联的基数，其中基数可以为<code>0</code>，<code>1</code>，<code>0..*</code>，<code>*</code>等任意定义的值。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Customer]1-0..*[Address]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Customer]1-0..*[Address]"></p>
<h2 id="定向关联-Directional-Association"><a href="#定向关联-Directional-Association" class="headerlink" title="定向关联(Directional Association)"></a>定向关联(Directional Association)</h2><p>定向关联<code>-&gt;</code>可以定义名称：<code>-名称&gt;</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Order]-billing/&gt;[Address], [Order]-shipping/&gt;[Address]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Order]-billing/>[Address], [Order]-shipping/>[Address]"></p>
<h2 id="颜色和UTF8字符-Splash-of-Colour-And-UTF-8"><a href="#颜色和UTF8字符-Splash-of-Colour-And-UTF-8" class="headerlink" title="颜色和UTF8字符(Splash of Colour And UTF-8)"></a>颜色和UTF8字符(Splash of Colour And UTF-8)</h2><p>类图可以用<code>{bg:颜色名}</code>定义显示的背景颜色。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[❝Customer❞&#123;bg:orange&#125;]❶- ☂&gt;[Order&#123;bg:green&#125;]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[❝Customer❞{bg:orange}]❶- ☂>[Order{bg:green}]"></p>
<h2 id="聚合-Aggregation"><a href="#聚合-Aggregation" class="headerlink" title="聚合(Aggregation)"></a>聚合(Aggregation)</h2><p>聚合表示比关联更强的关联关系，使用<code>&lt;&gt;-&gt;</code>或者<code>+-&gt;</code>来表示。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Company]&lt;&gt;-1&gt;[Location], [Location]+-&gt;[Point]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Company]<>-1>[Location], [Location]+->[Point]"></p>
<h2 id="组成-Composition"><a href="#组成-Composition" class="headerlink" title="组成(Composition)"></a>组成(Composition)</h2><p>组成表示比聚合更强的关联关系，使用<code>++-&gt;</code>来表示。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Company]++-1&gt;[Location]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Company]++-1>[Location]"></p>
<h2 id="备注-Notes-1"><a href="#备注-Notes-1" class="headerlink" title="备注(Notes)"></a>备注(Notes)</h2><p>使用<code>[note:注解内容]</code>表示备注，同样备注可以自定义颜色<code>{bg:颜色名}</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Customer]&lt;&gt;1-&gt;*[Order], [Customer]-[note: Aggregate Root&#123;bg:cornsilk&#125;]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Customer]<>1->*[Order], [Customer]-[note: Aggregate Root{bg:cornsilk}]"></p>
<h2 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h2><p>使用<code>^-</code>表示类的继承，右边的类是子类。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[Wages]^-[Salaried], [Wages]^-[Contractor]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[Wages]^-[Salaried], [Wages]^-[Contractor]"></p>
<h2 id="接口继承-Interface-Inheritance"><a href="#接口继承-Interface-Inheritance" class="headerlink" title="接口继承(Interface Inheritance)"></a>接口继承(Interface Inheritance)</h2><p>接口继承用<code>^-.-</code>来表示。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[&lt;&lt;ITask&gt;&gt;]^-.-[NightlyBillingTask]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[<<ITask>>]^-.-[NightlyBillingTask]"></p>
<h2 id="依赖-Dependencies"><a href="#依赖-Dependencies" class="headerlink" title="依赖(Dependencies)"></a>依赖(Dependencies)</h2><p>类的依赖用<code>-.-&gt;</code>来表示，依赖是最弱的关联关系，一般用来表示类方法的参数或者实现用到了依赖类。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[HttpContext]uses -.-&gt;[Response]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[HttpContext]uses -.->[Response]"></p>
<h2 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h2><p>和类名相比，接口的名称一般包含在<code>&lt;&lt;&gt;&gt;</code>中。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[&lt;&lt;IDisposable&gt;&gt;;Session]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[<<IDisposable>>;Session]"></p>
<h2 id="类定义-Class-with-Details"><a href="#类定义-Class-with-Details" class="headerlink" title="类定义(Class with Details)"></a>类定义(Class with Details)</h2><p>可以在类符号<code>[]</code>中定义类的所有成员。使用<code>|</code>表示类名与类成员变量和成员函数的分割符，不同的成员之间用<code>;</code>隔开，使用<code>+</code>，<code>-</code>分别表示公开和私有成员。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[User|+Forename+;Surname;+HashedPassword;-Salt|+Login();+Logout()]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://yuml.me/diagram/nofunky/class/[User|+Forename+;Surname;+HashedPassword;-Salt|+Login();+Logout()]"></p>
<h2 id="完整的示例"><a href="#完整的示例" class="headerlink" title="完整的示例"></a>完整的示例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://yuml.me/diagram/nofunky/class/[note: You can stick notes on diagrams too!&#123;bg:cornsilk&#125;],[Customer]&lt;&gt;1-orders 0..*&gt;[Order], [Order]++*-*&gt;[LineItem], [Order]-1&gt;[DeliveryMethod], [Order]*-*&gt;[Product], [Category]&lt;-&gt;[Product], [DeliveryMethod]^[National], [DeliveryMethod]^[International]"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://yuml.me/diagram/nofunky/class/[note: You can stick notes on diagrams too!{bg:cornsilk}],[Customer]<>1-orders 0..*>[Order], [Order]++*-*>[LineItem], [Order]-1>[DeliveryMethod], [Order]*-*>[Product], [Category]<->[Product], [DeliveryMethod]^[National], [DeliveryMethod]^[International]"></p>
<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><p>首先在文件头加入如下 <code>javascript</code> 文件：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.websequencediagrams.com/service.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="同步-异步-返回消息-Synchronous-Asynchronous-Return-Message"><a href="#同步-异步-返回消息-Synchronous-Asynchronous-Return-Message" class="headerlink" title="同步/异步/返回消息(Synchronous/Asynchronous/Return Message)"></a>同步/异步/返回消息(Synchronous/Asynchronous/Return Message)</h2><p>一般使用实心箭头<code>-&gt;</code>表示同步消息或调用，开箭头<code>-&gt;&gt;</code>表示异步消息或调用，虚箭头<code>--&gt;</code>或<code>--&gt;&gt;</code>表示返回消息。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  # This is a comment.            </span><br><span class="line">  Alice-&gt;Bob: Filled arrow</span><br><span class="line">  Alice-&gt;&gt;Bob: Open arrow</span><br><span class="line">  Bob--&gt;Alice: Dotted line</span><br><span class="line">  Bob--&gt;&gt;Alice: Dotted Line, open arrow</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_01.png">
<h2 id="定义参与者的顺序"><a href="#定义参与者的顺序" class="headerlink" title="定义参与者的顺序"></a>定义参与者的顺序</h2><p>通过<code>participant</code>可以定义<code>角色</code>在时序图中的显示顺序，而不是按照缺省的参与者被使用顺序来显示。并且可以定义参与者的别名。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  participant Bob</span><br><span class="line">  participant Alice</span><br><span class="line">  participant "I have a really\nlong name" as L</span><br><span class="line">  #</span><br><span class="line">  Alice-&gt;Bob: Authentication Request</span><br><span class="line">  Bob-&gt;Alice: Authentication Response</span><br><span class="line">  Bob-&gt;L: Log transaction</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_02.png">
<h2 id="自关联消息-Self-Message"><a href="#自关联消息-Self-Message" class="headerlink" title="自关联消息(Self-Message)"></a>自关联消息(Self-Message)</h2><p>参与者可以发送一个消息给自己。你可以用<code>\n</code>将文字切分成多行。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  Alice-&gt;Alice: This is a signal to self.\nIt also demonstrates \nmultiline \ntext.</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_03.png">
<h2 id="分组消息"><a href="#分组消息" class="headerlink" title="分组消息"></a>分组消息</h2><p>通过<code>alt/else</code>，<code>opt</code>和<code>loop</code>，将消息分组，组头显示分组定义的文本信息，<code>end</code>关键字用来结束一个分组。分组可以嵌套。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  Alice-&gt;Bob: Authentication Request</span><br><span class="line">  alt successful case</span><br><span class="line">      Bob-&gt;Alice: Authentication Accepted</span><br><span class="line">  else some kind of failure</span><br><span class="line">      Bob-&gt;Alice: Authentication Failure</span><br><span class="line">      opt</span><br><span class="line">          loop 1000 times</span><br><span class="line">              Alice-&gt;Bob: DNS Attack</span><br><span class="line">          end</span><br><span class="line">      end</span><br><span class="line">  else Another type of failure</span><br><span class="line">      Bob-&gt;Alice: Please repeat</span><br><span class="line">  end</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_04.png">
<h2 id="备注-Notes-2"><a href="#备注-Notes-2" class="headerlink" title="备注(Notes)"></a>备注(Notes)</h2><p>使用<code>note left of</code>，<code>note right of</code>和<code>note over</code>分别定义左/右/中显示的备注，可以包含多行，<code>end note</code>用来结束该段<code>note</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span> &gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  participant Alice</span><br><span class="line">  participant Bob</span><br><span class="line">  #</span><br><span class="line">  note left of Alice </span><br><span class="line">  This is displayed </span><br><span class="line">  left of Alice.</span><br><span class="line">  end note</span><br><span class="line">  note right of Alice: This is displayed right of Alice.</span><br><span class="line">  note over Alice: This is displayed over Alice.</span><br><span class="line">  note over Alice, Bob: This is displayed over Bob and Alice.</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_05.png">
<h2 id="生命线的激活和终止-Activation-Destruction"><a href="#生命线的激活和终止-Activation-Destruction" class="headerlink" title="生命线的激活和终止(Activation/Destruction)"></a>生命线的激活和终止(Activation/Destruction)</h2><p><code>+</code>来表示激活<strong>被发送者</strong>，<code>-</code>表示终止<strong>发送者</strong>。<code>destroy</code>关键字可以将销毁该参与者。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">wsd</span> <span class="attr">wsd_style</span>=<span class="string">"rose"</span>/&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  User-&gt;+A: DoWork</span><br><span class="line">  A-&gt;+B: &lt;&lt;createRequest&gt;&gt;</span><br><span class="line">  B-&gt;+C: DoWork</span><br><span class="line">  C--&gt;B: WorkDone</span><br><span class="line">  destroy C</span><br><span class="line">  B--&gt;-A: RequestCreated</span><br><span class="line">  A-&gt;User: Done</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<img src="/images/在Markdown中嵌入UML文档_06.png">
<h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><ol>
<li><a href="http://jumly.herokuapp.com/" target="_blank" rel="noopener">JUMLY</a> </li>
<li><a href="https://github.com/wandernauta/yuml" target="_blank" rel="noopener">yUML command line tool</a> </li>
<li><a href="https://github.com/aivarsk/scruffy" target="_blank" rel="noopener">Scruffy UML</a> </li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity、Fragment状态缓存和恢复</title>
    <url>/posts/Save_Restore_Activity%E2%80%99s_and_Fragment%E2%80%99s_state.html</url>
    <content><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><blockquote>
<p><a href="https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en" target="_blank" rel="noopener">Activity/Fragment状态缓存和恢复的最佳实践</a><br><a href="http://www.voidcn.com/blog/lwk520136/article/p-6138230.html" target="_blank" rel="noopener">译文</a></p>
</blockquote>
<a id="more"></a>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p><code>Activity</code>中已经自己实现了。<br>只要重写<code>onSaveInstanceState()</code>和<code>onRestoreInstanceState()</code>这两个方法即可<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    outState.putString(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</span><br><span class="line">    String value = savedInstanceState.getString(<span class="string">"key"</span>);</span><br><span class="line">    Log.i(TAG, <span class="string">"onRestoreInstanceState: "</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p><code>Fragment</code>分为两种：</p>
<ul>
<li>一种是<code>View</code>的<code>Save/Restore</code></li>
<li>另一种是<code>Fragment</code>自身数据的<code>Save/Restore</code></li>
</ul>
<h3 id="View的Save-Restore"><a href="#View的Save-Restore" class="headerlink" title="View的Save/Restore"></a>View的Save/Restore</h3><p>和<code>Activity</code>一样，在<code>View</code>内部实现<code>onSaveInstanceState()</code>和<code>onRestoreInstanceState()</code>即可。<br>如果是第三方的View，则写一个子类手动实现<code>Save/Restore</code>即可。</p>
<h3 id="Fragment的Save-Restore"><a href="#Fragment的Save-Restore" class="headerlink" title="Fragment的Save/Restore"></a>Fragment的Save/Restore</h3><p>在Fragment内部实现<code>onSaveInstanceState()</code>和<code>onActivityCreated()</code>即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    outState.putString(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    String value = savedInstanceState.getString(<span class="string">"key"</span>);</span><br><span class="line">    Log.i(TAG, <span class="string">"onRestoreInstanceState: "</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Activity</tag>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>PreferenceActivity实现Toolbar</title>
    <url>/posts/How_to_set_Toolbar_with_PreferenceActivity.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试使用<code>PreferenceActivity</code>时，发现从有<code>Toolbar</code>的上一个<code>Activity</code>进入了没有<code>Toolbar</code>的<code>Activity</code>，感觉太丑了。但是<code>google</code>居然没有推出<code>AppCompatPreferenceActivity</code>，没办法只好自己写。<br><a id="more"></a></p>
<h1 id="PreferenceActivity-ToolBar-限Android-5-0以上"><a href="#PreferenceActivity-ToolBar-限Android-5-0以上" class="headerlink" title="PreferenceActivity+ToolBar(限Android 5.0以上)"></a>PreferenceActivity+ToolBar(限Android 5.0以上)</h1><p><strong>思路</strong><br>模仿<code>AppCompatActivity</code>，对<code>PreferenceActivity</code>进行改造</p>
<p><strong>实现</strong><br>继承PreferenceActivity重写onCreate方法添加如下代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    getDelegate().installViewFactory();</span><br><span class="line">    getDelegate().onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">/** 初始化StatusBar,交由子类实现 */</span></span><br><span class="line">    setStatusBar();</span><br><span class="line">    <span class="comment">/** 获取DecorView下的ContentView*/</span></span><br><span class="line">    ViewGroup contentViews = (ViewGroup) findViewById(android.R.id.content);</span><br><span class="line">    <span class="comment">/** 获取ContentView的子View */</span></span><br><span class="line">    View content = contentView.getChildAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/** 加载自定义布局文件,获取id交由子类实现 */</span></span><br><span class="line">    LinearLayout toolbarLayout = (LinearLayout) LayoutInflater.from(<span class="keyword">this</span>).inflate(getActLayoutId(), <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/** 移除根布局所有子view */</span></span><br><span class="line">    contentView.removeAllViews();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 注意这里一要将前面移除的子View添加到我们自定义布局文件中，否则PreferenceActivity中的Header将不会显示 */</span></span><br><span class="line">    toolbarLayout.addView(content);</span><br><span class="line">    <span class="comment">/** 将包含Toolbar的自定义布局添加到根布局中 */</span></span><br><span class="line">    contentView.addView(toolbarLayout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 设置Toolbar,获取Toolbar的Id的方法交由子类实现 */</span></span><br><span class="line">    mToolbar = (Toolbar) toolbarLayout.findViewById(getActToolbarId());</span><br><span class="line">    <span class="comment">/** 初始化Toolbar,交由子类实现 */</span></span><br><span class="line">    initToolbar(getToolbar());  &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="AppCompatActivity-PreferenceFragment-ToolBar-适用于Android-5-0以下"><a href="#AppCompatActivity-PreferenceFragment-ToolBar-适用于Android-5-0以下" class="headerlink" title="AppCompatActivity+PreferenceFragment+ToolBar(适用于Android 5.0以下)"></a>AppCompatActivity+PreferenceFragment+ToolBar(适用于Android 5.0以下)</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在<code>Activity</code>中设置<code>Toolbar</code>，使用事务替换<code>Fragment</code>的方法。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>和普通的使用<code>Fragment</code>方法一样，这里不赘述。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Activity</tag>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Gradle发布Android开源项目到JCenter</title>
    <url>/posts/how_to_use_Gradle_to_publish_project_to_JCenter.html</url>
    <content><![CDATA[<h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><blockquote>
<p>使用bintray-release发布</p>
</blockquote>
<p>使用<code>github</code>帐号登录<a href="https://bintray.com/" target="_blank" rel="noopener">https://bintray.com/</a> ，<br>你可以点击<code>Your Profile</code>-&gt;<code>Edit</code>-&gt;<code>API Key</code>，复制。<br><a id="more"></a></p>
<h1 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h1><p>在最顶层的<code>gradle</code>中添加<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;...&#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.2'</span></span><br><span class="line">        classpath <span class="string">'com.novoda:bintray-release:0.3.4'</span><span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;...&#125;</span><br><span class="line">    tasks.withType(Javadoc) &#123;<span class="comment">//添加</span></span><br><span class="line">        options&#123; encoding <span class="string">"UTF-8"</span> charSet <span class="string">'UTF-8'</span> links <span class="string">"http://docs.oracle.com/javase/7/docs/api"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在想要上传的<code>module</code>添加<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.novoda.bintray-release'</span><span class="comment">//添加</span></span><br><span class="line">android &#123;...&#125;</span><br><span class="line">dependencies &#123;...&#125;</span><br><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'ahaochan'</span></span><br><span class="line">    groupId = <span class="string">'com.ahaochan'</span></span><br><span class="line">    artifactId = <span class="string">'TabLayout'</span><span class="comment">//项目名</span></span><br><span class="line">    publishVersion = <span class="string">'0.0.2'</span><span class="comment">//版本号</span></span><br><span class="line">    desc = <span class="string">'Imitate WeChat6.0 TabLayout'</span><span class="comment">//描述</span></span><br><span class="line">    website = <span class="string">'https://github.com/Ahaochan/TabLayout'</span><span class="comment">//github地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后在<code>AS</code>底下的<code>Terminal</code>中输入<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gradlew clean build bintrayUpload </span><br><span class="line">-PbintrayUser=ahaochan</span><br><span class="line">-PbintrayKey=之前复制的key</span><br><span class="line">-PdryRun=false</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>adb制作gif</title>
    <url>/posts/how_to_use_adb_to_create_gif.html</url>
    <content><![CDATA[<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>有时候我们需要录制Android手机的屏幕，比如写了一个Demo应用，需要发布到博客和微博上。<br>如下是我录制转GIF的效果图<br><a id="more"></a><br><img src="/images/adb制作gif_01.gif"></p>
<h1 id="正常录制"><a href="#正常录制" class="headerlink" title="正常录制"></a>正常录制</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb -s 驱动编号 shell screenrecord /sdcard/test.mp4</span><br><span class="line">adb -s 驱动编号 pull /sdcard/test.mp4 C:\Users\Avalon\Desktop</span><br></pre></td></tr></table></figure>
<p>视频保存目录可以自己指定，如上面的/sdcard/test.mp4，<br>命令执行后会一直录制180s，按下ctrl+c可以提前结束录制</p>
<h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb -s 驱动编号 shell /system/bin/screencap -p /sdcard/screenshot.png</span><br><span class="line">adb -s 驱动编号 pull /sdcard/screenshot.png C:\Users\Avalon\Desktop</span><br></pre></td></tr></table></figure>
<h1 id="转GIF文件"><a href="#转GIF文件" class="headerlink" title="转GIF文件"></a>转GIF文件</h1><p>在<code>Windows</code>下有个不错的软件<a href="http://www.video-gif-converter.com/index.html" target="_blank" rel="noopener">Free Video to GIF Converter</a> 可以把<code>mp4</code>转换成<code>GIF</code>。<br>转换时还可以删除不需要的帧，这点真得很不错。<br><code>Mac</code>上可以使用<a href="http://www.gifrocket.com/" target="_blank" rel="noopener">gifrocket</a> 进行转换。<br>还有一些在线的<a href="http://ezgif.com/video-to-gif" target="_blank" rel="noopener">转换工具</a> 可以使用，但是都会打上水印。</p>
<h1 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h1><ul>
<li>设定视频分辨率<br><code>adb shell screenrecord --size 848x480 /sdcard/test.mp4</code></li>
<li>设定视频比特率<br><code>adb shell screenrecord --bit-rate 2000000 /sdcard/test.mp4</code></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/posts/how_to_use_GitHub_with_git.html</url>
    <content><![CDATA[<h1 id="常用上传"><a href="#常用上传" class="headerlink" title="常用上传"></a>常用上传</h1><ol>
<li>初始化<code>git init</code></li>
<li>添加所有文件<code>git add .</code></li>
<li>提交到本地仓库<code>git commit -m &quot;描述&quot;</code></li>
<li>连接github分支<code>git pull origin master</code></li>
<li>连接到github仓库<code>git remote add origin git@github.com:Ahaochan/项目名.git</code></li>
<li>提交到远程仓库<code>git push -u origin master</code></li>
</ol>
<a id="more"></a>
<h1 id="常用下载"><a href="#常用下载" class="headerlink" title="常用下载"></a>常用下载</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/seven332/EhViewer</span><br><span class="line">cd EhViewer</span><br><span class="line">./gradlew app:assembleDebug</span><br></pre></td></tr></table></figure>
<h1 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h1><ul>
<li>新建分支：<code>git branch 分支名</code></li>
<li>切换分支：<code>git checkout 分支名</code></li>
<li>上传分支：<code>git push origin 分支名</code></li>
<li>删除本地分支：<code>git branch -d 分支名</code></li>
<li>删除<code>github</code>分支(分支名前的冒号代表删除)：<code>git push origin :分支名</code></li>
</ul>
<h1 id="Tag相关"><a href="#Tag相关" class="headerlink" title="Tag相关"></a>Tag相关</h1><ul>
<li><p>为过往<code>commit</code>添加<code>tag</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line">git tag -a v1.00 -m "描述" b6195be</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看tag：<code>git tag</code></p>
</li>
<li>删除tag：<code>git tag -d v1.00</code></li>
<li>删除github Tag：<code>git push origin :v1.00</code></li>
<li>提交github仓库：<code>git push origin v1.00</code></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/posts/Observer_Pattern.html</url>
    <content><![CDATA[<h1 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h1><p>观察者模式又叫做发布订阅模式，类似于微信公众号，一个发布端，多个接收端。<br>观察者模式定义了对象之间的一对多的依赖，这样一来，当一个对象改变时，它的所有的依赖者都会收到通知并自动更新。<br>通俗的讲，就是在被观察类中，持有一个观察类的集合，然后在数据改变的时候，遍历所有观察类，调用更新方法。<br><a id="more"></a></p>
<h1 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h1><p><strong>建立观察者模式的步骤</strong></p>
<ol>
<li>编写观察者接口和被观察者的接口</li>
<li>实现观察者和被观察者</li>
<li>注册观察者</li>
<li>通知观察者</li>
</ol>
<h2 id="编写观察者接口和被观察者的接口"><a href="#编写观察者接口和被观察者的接口" class="headerlink" title="编写观察者接口和被观察者的接口"></a>编写观察者接口和被观察者的接口</h2><p><code>java</code>中已经准备了这两个接口，观察者接口<code>Observer</code>和被观察者类<code>Observable</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;<span class="comment">//观察者的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object data)</span></span>;<span class="comment">//只有一个用于更新的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;<span class="comment">//被观察者类</span></span><br><span class="line">    List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();<span class="comment">//内部持有一个观察者的List集合</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;<span class="comment">//数据是否改变的标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;<span class="comment">//添加观察者</span></span><br><span class="line">        <span class="keyword">if</span> (observer == <span class="keyword">null</span>) &#123;<span class="comment">//防止空指针异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"observer == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;<span class="comment">//同步锁</span></span><br><span class="line">            <span class="keyword">if</span> (!observers.contains(observer))<span class="comment">//判断是否已经添加观察者</span></span><br><span class="line">                observers.add(observer);<span class="comment">//如果没有就添加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;<span class="comment">//清空数据是否改变的标志位</span></span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;<span class="comment">//返回观察者的数量</span></span><br><span class="line">        <span class="keyword">return</span> observers.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;<span class="comment">//移除某个观察者</span></span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;<span class="comment">//移除所有观察者</span></span><br><span class="line">        observers.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;<span class="comment">//获取数据是否改变的标志位</span></span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;<span class="comment">//拉模式更新数据</span></span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object data)</span> </span>&#123;<span class="comment">//推模式更新数据，推送data</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        Observer[] arrays = <span class="keyword">null</span>;<span class="comment">//临时存放当前观察者的状态，参见备忘录模式</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasChanged()) &#123;<span class="comment">//数据是否发生改变</span></span><br><span class="line">                clearChanged();<span class="comment">//清空标志位</span></span><br><span class="line">                size = observers.size();</span><br><span class="line">                arrays = <span class="keyword">new</span> Observer[size];</span><br><span class="line">                observers.toArray(arrays);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arrays != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Observer observer : arrays) &#123;</span><br><span class="line">                observer.update(<span class="keyword">this</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;<span class="comment">//设置数据发生改变</span></span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实现观察者和被观察者"><a href="#实现观察者和被观察者" class="headerlink" title="实现观察者和被观察者"></a>实现观察者和被观察者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;<span class="comment">//观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object data)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Observer1"</span>, <span class="string">"change"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;<span class="comment">//被观察者</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">		setChanged();<span class="comment">//必须调用这个方法确认修改数据</span></span><br><span class="line">		notifyObservers();通知所有观察者</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注册观察者"><a href="#注册观察者" class="headerlink" title="注册观察者"></a>注册观察者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subject s = <span class="keyword">new</span> Subject();<span class="comment">//new一个被观察者</span></span><br><span class="line">Observer1 o1 = <span class="keyword">new</span> Observer1();<span class="comment">//new一个观察者</span></span><br><span class="line">s.addObserver(o1);<span class="comment">//进行注册</span></span><br></pre></td></tr></table></figure>
<h2 id="通知观察者"><a href="#通知观察者" class="headerlink" title="通知观察者"></a>通知观察者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s.change();  <span class="comment">//调用被观察者的</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ListView 使用技巧</title>
    <url>/posts/ListView_skills.html</url>
    <content><![CDATA[<h1 id="ListView常用优化技巧"><a href="#ListView常用优化技巧" class="headerlink" title="ListView常用优化技巧"></a>ListView常用优化技巧</h1><h2 id="使用ViewHolder提高效率"><a href="#使用ViewHolder提高效率" class="headerlink" title="使用ViewHolder提高效率"></a>使用ViewHolder提高效率</h2><p>创建一个ViewHolder内部类<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    TextView titleView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>getView()</code>方法里面复用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LayoutInflater mInflater;</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">    ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)&#123;<span class="comment">//当前子View没有被初始化过</span></span><br><span class="line">        holder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">        convertView = mInflater.inflate(R.id.list_item, <span class="keyword">null</span>);<span class="comment">//通过LayoutInflater实例化布局</span></span><br><span class="line">        holder.titleView = (TextView) convertView.findViewById(R.id.title_view);</span><br><span class="line">        convertView.setTag(holder);<span class="comment">//缓存布局</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        holder = (ViewHolder) convertView.getTag();<span class="comment">//通过tag找到缓存的布局</span></span><br><span class="line">    &#125;</span><br><span class="line">    holder.titleView.setText(<span class="string">"title"</span>);</span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="设置item分割线"><a href="#设置item分割线" class="headerlink" title="设置item分割线"></a>设置item分割线</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:divider = "@android:color/darker_gray"<span class="comment">&lt;!--设置分割线资源--&gt;</span></span><br><span class="line">android:dividerHeight = "10dp"<span class="comment">&lt;!--设置分割线高度--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--android:divider = "null"--&gt;</span><span class="comment">&lt;!--分割线为空--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="隐藏ListVIew滚动条"><a href="#隐藏ListVIew滚动条" class="headerlink" title="隐藏ListVIew滚动条"></a>隐藏ListVIew滚动条</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:scrollbars="none"<span class="comment">&lt;!--隐藏ListVIew滚动条--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="取消item点击效果"><a href="#取消item点击效果" class="headerlink" title="取消item点击效果"></a>取消item点击效果</h2><p>在Android 5.X上是一个波纹效果，在Android 5.X之下版本是一个改变背景颜色的效果。<br>可以通过listSelector取消点击效果<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">andoird:listSelector="# 00000000"</span><br><span class="line">andoird:listSelector="@android:color/transparent"//设置选择时背景为透明色，也可使用自定义的颜色效果</span><br></pre></td></tr></table></figure></p>
<h2 id="设置显示到第几项"><a href="#设置显示到第几项" class="headerlink" title="设置显示到第几项"></a>设置显示到第几项</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listView.setSelection(n);<span class="comment">//设置Listview具体显示在第几项，默认是0</span></span><br><span class="line"> listView.smoothScrollByOffset(<span class="number">35</span>);<span class="comment">//偏移量</span></span><br><span class="line"> listView.smoothScrollToPosition(<span class="number">35</span>);<span class="comment">//位置</span></span><br><span class="line"> listView.smoothScrollBy(<span class="number">35</span>,<span class="number">1000</span>);<span class="comment">//距离，时间</span></span><br></pre></td></tr></table></figure>
<h2 id="动态修改ListView数据"><a href="#动态修改ListView数据" class="headerlink" title="动态修改ListView数据"></a>动态修改ListView数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">data.add(<span class="string">"new"</span>);</span><br><span class="line">adapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure>
<h2 id="遍历所有item"><a href="#遍历所有item" class="headerlink" title="遍历所有item"></a>遍历所有item</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listView.getChildCount(); i++)&#123;</span><br><span class="line">    View child = listView.getChildAt(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="处理空ListView"><a href="#处理空ListView" class="headerlink" title="处理空ListView"></a>处理空ListView</h2><p>当数据源为空时，提示无数据<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listView.setEmptyView(emptyView);</span><br></pre></td></tr></table></figure></p>
<h2 id="滑动监听"><a href="#滑动监听" class="headerlink" title="滑动监听"></a>滑动监听</h2><h3 id="使用OnTouchListener"><a href="#使用OnTouchListener" class="headerlink" title="使用OnTouchListener"></a>使用OnTouchListener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listView.setOnTouchListener(<span class="keyword">new</span> OnTouchListener()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent e)</span></span>&#123;</span><br><span class="line">        swicth(e.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:    <span class="comment">//按下时操作</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:    <span class="comment">//移动时操作</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP    :<span class="comment">//抬起时操作</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用OnScrollListener"><a href="#使用OnScrollListener" class="headerlink" title="使用OnScrollListener"></a>使用OnScrollListener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listView.setOnScrollListener(<span class="keyword">new</span> OnScrollListener()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span></span>&#123;    <span class="comment">//当滑动状态改变时回调</span></span><br><span class="line">        swicth(scrollState)&#123;</span><br><span class="line">            <span class="keyword">case</span> OnScrollListener.SCROLL_STATE_IDLE:    <span class="comment">//滑动停止时操作</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:    <span class="comment">//正在滚动</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OnScrollListener.SCROLL_STATE_FLING:    <span class="comment">//手指用力滑动时操作</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span></span>&#123;</span><br><span class="line">        <span class="comment">//滚动时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="ListView常用拓展"><a href="#ListView常用拓展" class="headerlink" title="ListView常用拓展"></a>ListView常用拓展</h1><h2 id="弹性ListView"><a href="#弹性ListView" class="headerlink" title="弹性ListView"></a>弹性ListView</h2><p>可以通过增加HeaderView或者使用ScrollView嵌套使用<br>这里通过修改源码实现。<br><code>overScrollBy()</code>是一个控制滑动到边缘的处理方法，只要修改maxOverScrollY值即可。<br>为了适配多分辨率，建议使用DisplayMetrics 获得屏幕尺寸进行计算<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">overScrollBy</span><span class="params">(<span class="keyword">int</span> deltaX, <span class="keyword">int</span> deltaY, <span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> scrollRangeX, <span class="keyword">int</span> scrollRangeY,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> maxOverScrollX, <span class="keyword">int</span> maxOverScrollY, <span class="keyword">boolean</span> isTouchEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.overScrollBy(deltaX, deltaY, scrollX, scrollY,</span><br><span class="line">                scrollRangeX, scrollRangeY,</span><br><span class="line">                maxOverScrollX, mMaxOverScrollY, isTouchEvent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ListView</tag>
      </tags>
  </entry>
  <entry>
    <title>OkHttp使用</title>
    <url>/posts/how_to_use_OKHttp.html</url>
    <content><![CDATA[<h1 id="导入gradle"><a href="#导入gradle" class="headerlink" title="导入gradle"></a>导入gradle</h1><p><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OkHttp地址</a><br><a id="more"></a><br>在gradle中加入<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    compile <span class="string">'com.squareup.okhttp3:okhttp:3.4.1'</span></span><br><span class="line">    compile <span class="string">'com.squareup.okio:okio:1.9.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="创建OkHttpClient"><a href="#创建OkHttpClient" class="headerlink" title="创建OkHttpClient"></a>创建OkHttpClient</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure>
<h1 id="创建Request"><a href="#创建Request" class="headerlink" title="创建Request"></a>创建Request</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request mRequest = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>
<h1 id="创建回调Call并异步执行"><a href="#创建回调Call并异步执行" class="headerlink" title="创建回调Call并异步执行"></a>创建回调Call并异步执行</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call call = mOkHttpClient.newCall(mRequest);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"成功"</span>+response.body());</span><br><span class="line">        <span class="keyword">final</span> String html = response.body().string();</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;<span class="comment">//在子线程中更新ui</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                contentView.setText(html);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>OKHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio疑难解决</title>
    <url>/posts/Android_Studio_question.html</url>
    <content><![CDATA[<h1 id="导入第三方类库错误：Could-not-find-com-github-jitpack-release"><a href="#导入第三方类库错误：Could-not-find-com-github-jitpack-release" class="headerlink" title="导入第三方类库错误：Could not find com.github.* :{jitpack-release}"></a>导入第三方类库错误：Could not find com.github.* :{jitpack-release}</h1><p>在使用<a href="https://github.com/techery/progresshint" target="_blank" rel="noopener">progresshint</a> 的第三方库时，直接在gradle中添加<br><a id="more"></a><br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;  </span><br><span class="line">  jcenter()  </span><br><span class="line">  maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">dependencies &#123;  </span><br><span class="line">  compile <span class="string">'com.github.techery.progresshint:library-addition:&#123;jitpack-release&#125;'</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是爆出了错误<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error:Could not find com.github.techery.progresshint:library-addition:&#123;jitpack-release&#125;.  </span><br><span class="line">Required by:  </span><br><span class="line">    wnacg:app:unspecified  </span><br><span class="line">Search in build.gradle files</span><br></pre></td></tr></table></figure></p>
<p>把<strong>{jitpack-release}</strong>换成<strong>版本号</strong>就可以了<br>解决代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories &#123;  </span><br><span class="line">  jcenter()  </span><br><span class="line">  maven &#123; url &quot;https://jitpack.io&quot; &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">dependencies &#123;  </span><br><span class="line">  compile &apos;com.github.techery.progresshint:library-addition:0.2.3&apos;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="找不到v4、v7包"><a href="#找不到v4、v7包" class="headerlink" title="找不到v4、v7包"></a>找不到v4、v7包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> Rendering Problems Missing styles. Is the correct theme chosen for this layout?  Use the Theme combo box above the layout to choose a different layout, or fix the theme style references.  The following classes could not be found:  </span><br><span class="line">- android.support.v7.widget.AppCompatSeekBar (Fix Build Path, Create Class)  </span><br><span class="line">- android.support.v7.widget.RecyclerView (Fix Build Path, Create Class)  </span><br><span class="line"> Tip: Try to build the project.  Failed to find style 'textViewStyle' in current theme (62 similar errors not shown)</span><br></pre></td></tr></table></figure>
<p>检查了<code>gradle</code>中是否有导入<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">'com.android.support:support-v4:23.4.0'</span>  </span><br><span class="line">compile <span class="string">'com.android.support:appcompat-v7:23.4.0'</span>  </span><br><span class="line">compile <span class="string">'com.android.support:design:23.4.0'</span></span><br></pre></td></tr></table></figure></p>
<p>仍然找不到<code>v4</code>、<code>v7</code>包<br>最后在<code>SDK Manager</code>中发现<code>Android Support Library</code>的版本号才更新到<code>23.2.1</code><br>换成<code>23.2.1</code>就好了</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>模版方法模式</title>
    <url>/posts/Template_method.html</url>
    <content><![CDATA[<h1 id="什么是模版方法模式"><a href="#什么是模版方法模式" class="headerlink" title="什么是模版方法模式"></a>什么是模版方法模式</h1><p>把多个类公有的代码抽象出来成为一个父类，并开放接口将不同的代码交由子类来实现。<br> <a id="more"></a></p>
<img src="/images/模版方法模式_01.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;<span class="comment">//学生父类</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的名字是:"</span>+getName());<span class="comment">//把公有代码抽象出来，开放一个getName()方法交给子类实现</span></span><br><span class="line">        System.out.println(<span class="string">"我的学号是:"</span>+getNo());<span class="comment">//把公有代码抽象出来，开放一个getNo()方法交给子类实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getNo</span><span class="params">()</span></span>;<span class="comment">//交由子类实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//交由子类实现</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentA</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;<span class="comment">//学生A</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"001"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小A"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentB</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;<span class="comment">//学生B</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"002"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student sa = <span class="keyword">new</span> StudentA();</span><br><span class="line">        sa.show();</span><br><span class="line">        Student sb = <span class="keyword">new</span> StudentB();</span><br><span class="line">        sb.show();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/posts/Prototype_Pattern.html</url>
    <content><![CDATA[<h1 id="什么是原型模式"><a href="#什么是原型模式" class="headerlink" title="什么是原型模式"></a>什么是原型模式</h1><p>从一个对象再创建另外一个可定制对象，而且不需要知道创建的细节。<br>类似于僵尸母体，通过实现一个克隆的接口，将自身属性拷贝给其他僵尸，还可以进行基因突变。<br><a id="more"></a></p>
<img src="/images/原型模式_01.png">
<p><strong>拷贝方式分为</strong></p>
<ul>
<li>浅拷贝：仅仅复制所考虑的对象，而不复制它所引用的对象</li>
<li>深拷贝：将复制的对象引用的对象都复制一遍</li>
</ul>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote>
<p>仅仅复制所考虑的对象，而不复制它所引用的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zombie</span></span>&#123;<span class="comment">//一个僵尸类</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Zombie <span class="title">cloneZombie</span><span class="params">()</span> </span>&#123;<span class="comment">//实现克隆方法</span></span><br><span class="line">        Zombie z = <span class="keyword">new</span> Zombie();</span><br><span class="line">        z.id = <span class="keyword">this</span>.id;<span class="comment">//浅拷贝僵尸的id号</span></span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Zombie cz1 = <span class="keyword">new</span> Zombie();</span><br><span class="line">        cz1.id=<span class="string">"001"</span>;</span><br><span class="line">        Zombie cz2 = cz1.cloneZombie();</span><br><span class="line">        System.out.println((cz1==cz2)+<span class="string">":"</span>+cz1.id+<span class="string">","</span>+cz2.id);<span class="comment">//输出false:001,001</span></span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote>
<p>将复制的对象引用的对象都复制一遍</p>
</blockquote>
<h1 id="java中自带的java-lang-Object-clone-分析"><a href="#java中自带的java-lang-Object-clone-分析" class="headerlink" title="java中自带的java.lang.Object.clone()分析"></a>java中自带的java.lang.Object.clone()分析</h1><p>在研究原型模式的时候，我将接口中的拷贝方法命名为<code>clone()</code>，却发现<code>Java</code>内部已经有了一个<code>clone()</code>方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用<code>native</code>修饰，表示是有<code>JNI</code>实现，效率远高于非<code>native</code>方法<br>用<code>protected</code>修饰，表示要使用这个<code>clone()</code>必须要继承自<code>Object</code>类，<code>Java</code>中所有类都是继承自<code>Object</code>类。<br>返回<code>Object</code>对象，表示需要强制类型转换。</p>
<p><strong>Java对象中的<code>clone</code>步骤</strong></p>
<ol>
<li>原型类实现<code>Cloneable</code>接口</li>
<li>重写<code>clone</code>方法，并调用<code>super.clone()</code>方法</li>
<li>实现深拷贝</li>
</ol>
<h2 id="原型类实现Cloneable接口"><a href="#原型类实现Cloneable接口" class="headerlink" title="原型类实现Cloneable接口"></a>原型类实现Cloneable接口</h2><p><code>ctrl+左键</code>查看源码发现，这是一个空的接口。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是如果原型类没有实现<code>Cloneable</code>接口而去调用<code>Object.clone()</code>方法，会抛出<code>CloneNotSupportedException</code>异常</p>
<h2 id="重写clone方法，并调用super-clone-方法"><a href="#重写clone方法，并调用super-clone-方法" class="headerlink" title="重写clone方法，并调用super.clone()方法"></a>重写clone方法，并调用super.clone()方法</h2><p>继承自<code>java.lang.Object.clone()</code>方法是浅拷贝。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZombieMSG</span> </span>&#123;<span class="comment">//僵尸信息类</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZombieMSG</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(id:"</span>+id+<span class="string">",name:"</span>+name+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zombie</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">//僵尸类，实现Cloneable接口</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> ZombieMSG msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zombie</span><span class="params">(String id,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        msg = <span class="keyword">new</span> ZombieMSG(id, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;<span class="comment">//重写clone方法</span></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = <span class="keyword">super</span>.clone();<span class="comment">//调用Object中的clone()方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Zombie pz = <span class="keyword">new</span> Zombie(<span class="string">"000"</span>,<span class="string">"母体僵尸"</span>);</span><br><span class="line">        System.out.println(pz.id+<span class="string">":"</span>+pz.msg);<span class="comment">//输出000:(id:000,name:母体僵尸)</span></span><br><span class="line">        </span><br><span class="line">        Zombie cz1 = (Zombie) pz.clone();</span><br><span class="line">        cz1.id=<span class="string">"001"</span>;</span><br><span class="line">        cz1.msg.id=<span class="string">"001"</span>;</span><br><span class="line">        cz1.msg.name=<span class="string">"普通僵尸1号"</span>;</span><br><span class="line">        System.out.println((pz==cz1)+<span class="string">"-"</span>+pz.id+<span class="string">":"</span>+pz.msg+<span class="string">","</span>+cz1.id+<span class="string">":"</span>+cz1.msg);</span><br><span class="line">        <span class="comment">//输出false-000:(id:001,name:普通僵尸1号),,001:(id:001,name:普通僵尸1号)，说明是浅拷贝</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为什么我们在派生类中覆盖<code>Object的clone()</code>方法时，一定要调用<code>super.clone()</code>呢？<br>在运行时刻，<code>Object</code>中的<code>clone()</code>识别你要复制的是哪一个对象。<br>然后为此对象分配空间，并进行对象的复制，将原始对象的内容一一复制到新对象的存储空间中。</p>
<h2 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h2><p>克隆类和被克隆类之间不应该存在引用传递的。也就是说。<br>普通僵尸肯定不能影响母体僵尸的，那么就要实现深拷贝。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZombieMSG</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">//僵尸信息类，实现Cloneable接口</span></span><br><span class="line">    <span class="comment">//其他代码不变，新增clone方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ZombieMSG obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = (ZombieMSG) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zombie</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">//僵尸类，实现Cloneable接口</span></span><br><span class="line">    <span class="comment">//其他代码不变，修改clone()方法    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Zombie obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = (Zombie) <span class="keyword">super</span>.clone();</span><br><span class="line">            obj.msg = (ZombieMSG) <span class="keyword">this</span>.msg.clone();<span class="comment">//关键代码，将ZombieMSG也进行浅拷贝</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Zombie pz = <span class="keyword">new</span> Zombie(<span class="string">"000"</span>,<span class="string">"母体僵尸"</span>);</span><br><span class="line">        System.out.println(pz.id+<span class="string">":"</span>+pz.msg);<span class="comment">//输出000:(id:000,name:母体僵尸)</span></span><br><span class="line">        </span><br><span class="line">        Zombie cz1 = (Zombie) pz.clone();</span><br><span class="line">        cz1.id=<span class="string">"001"</span>;</span><br><span class="line">        cz1.msg.id=<span class="string">"001"</span>;</span><br><span class="line">        cz1.msg.name=<span class="string">"普通僵尸1号"</span>;</span><br><span class="line">        System.out.println((pz==cz1)+<span class="string">"-"</span>+pz.id+<span class="string">":"</span>+pz.msg+<span class="string">","</span>+cz1.id+<span class="string">":"</span>+cz1.msg);</span><br><span class="line">        <span class="comment">//输出false-000:(id:000,name:母体僵尸),001:(id:001,name:普通僵尸1号)，说明是深拷贝</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Genymotion疑难解决</title>
    <url>/posts/Genymotion_questionh.html</url>
    <content><![CDATA[<p><code>genymotion</code>安装及使用出现的问题<br>此处总结<code>genymotion</code>出现的问题。<br><a id="more"></a></p>
<h1 id="Unable-to-create-Virtual-Device"><a href="#Unable-to-create-Virtual-Device" class="headerlink" title="Unable to create Virtual Device"></a>Unable to create Virtual Device</h1><h2 id="Connection-timeout"><a href="#Connection-timeout" class="headerlink" title="Connection timeout."></a>Connection timeout.</h2><p>安装好<code>genymotion</code>后，新建一个模拟器。去下载的时候报错<br><code>Unable to create Virtual Device: Connection timeout.</code></p>
<p>在 <code>C:\Users\[你的名字]\AppData\Local\Genymobile</code>目录下找到 <code>genymotion.log</code>。</p>
<p>打开日志文件，在最后几行找到出错原因如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">四月 21 15:38:02 [Genymotion] [Debug] Remote file size: 182005760 ,current local file size: 0 </span><br><span class="line">四月 21 15:38:02 [Genymotion] [Debug] writting to local file with mode OpenMode( &quot;Append|WriteOnly&quot; ) </span><br><span class="line">四月 21 15:38:02 [Genymotion] [Debug] Downloading file  &quot;http://files2.genymotion.com/dists/4.3/ova/genymotion_vbox86p_4.3_140326_020620.ova&quot; </span><br><span class="line">四月 21 15:38:02 [Genymotion] [Debug] Start timer </span><br><span class="line">四月 21 15:38:02 [Genymotion] [Error] Connection Timeout </span><br><span class="line">四月 21 15:38:02 [Genymotion] [Debug] Received code: 2 : &quot;&quot;</span><br></pre></td></tr></table></figure></p>
<p>复制<code>http://files2.genymotion.com/dists/4.3/ova/genymotion_vbox86p_4.3_140326_020620.ova</code><br>到浏览器地址栏，通过浏览器下载这个ova</p>
<p>下载好后<code>copy</code> 到<code>C:\Users\[你的名字]\AppData\Local\Genymobile\Genymotion\ova</code> 里。<br>再次启动<code>genymotion</code>，下载这个版本的模拟器就不会报错了。</p>
<h1 id="Unable-to-start-the-Virtual-Device"><a href="#Unable-to-start-the-Virtual-Device" class="headerlink" title="Unable to start the Virtual Device"></a>Unable to start the Virtual Device</h1><h2 id="VitualBox-cannot-start-the-virtual-device"><a href="#VitualBox-cannot-start-the-virtual-device" class="headerlink" title="VitualBox cannot start the virtual device"></a>VitualBox cannot start the virtual device</h2><p><strong>问题描述</strong><br>打开genymotion，启动虚拟设备，出现如下报错<br><img src="/images/Genymotion疑难解决_01.png"></p>
<p>打开VirtualBox直接启动虚拟设备<br><img src="/images/Genymotion疑难解决_02.png"></p>
<p>发现是网络接口问题<br><img src="/images/Genymotion疑难解决_03.png"></p>
<p><strong>解决方案</strong><br>打开网络中心，右键<code>VirtualBox Host-Only Network #2</code>，属性，开启<code>VirtualBox NDIS6 Bridged Networking Driver</code>。</p>
<h1 id="使用Genymotion调试出现错误INSTALL-FAILED-CPU-ABI-INCOMPATIBLE解决办法"><a href="#使用Genymotion调试出现错误INSTALL-FAILED-CPU-ABI-INCOMPATIBLE解决办法" class="headerlink" title="使用Genymotion调试出现错误INSTALL_FAILED_CPU_ABI_INCOMPATIBLE解决办法"></a>使用Genymotion调试出现错误INSTALL_FAILED_CPU_ABI_INCOMPATIBLE解决办法</h1><p>转自：<a href="http://blog.csdn.net/wjr2012/article/details/16359113" target="_blank" rel="noopener">http://blog.csdn.net/wjr2012/article/details/16359113</a></p>
<p>点击下载Genymotion-ARM-Translation.zip</p>
<p>将你的虚拟器运行起来，将下载好的zip包用鼠标拖到虚拟机窗口中，出现确认对跨框点OK就行。然后重启你的虚拟机。</p>
<p>来源： <a href="http://www.cnblogs.com/wliangde/p/3678649.html" target="_blank" rel="noopener">http://www.cnblogs.com/wliangde/p/3678649.html</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/posts/Proxy_Pattern.html</url>
    <content><![CDATA[<h1 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h1><p>代理模式分为</p>
<ul>
<li>远程代理：为不同地理的对象提供局域网代表对象</li>
<li>虚拟代理：将资源消耗大的对象进行延迟，需要的时候才创建</li>
<li>保护代理：控制对一个对象的访问权限</li>
<li>智能引用代理：提供对目标对象额外服务</li>
</ul>
<a id="more"></a>
<h1 id="JDK静态代理"><a href="#JDK静态代理" class="headerlink" title="JDK静态代理"></a>JDK静态代理</h1><p>感觉就是装饰模式+模版方法模式，代理类(<code>Driver</code>)和被代理类(<code>Boss</code>)实现相同的接口(<code>Drivable</code>)，并把被代理类(<code>Boss</code>)注入到代理类(<code>Driver</code>)中。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drivable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">Drivable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老板想开车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">implements</span> <span class="title">Drivable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Drivable boss;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">(Drivable boss)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;<span class="comment">//注入被代理类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"司机来开车"</span>);</span><br><span class="line">        boss.drive();</span><br><span class="line">        System.out.println(<span class="string">"司机已停车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss();</span><br><span class="line">        Driver driver = <span class="keyword">new</span> Driver(boss);</span><br><span class="line">        driver.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><p>通过一个实现了<code>InvocationHandler</code>接口的类进行代理。在<code>invoke</code>方法中实现业务逻辑处理<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DriverHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"司机来开车"</span>);</span><br><span class="line">        method.invoke(target,args);</span><br><span class="line">        System.out.println(<span class="string">"司机已停车"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss();</span><br><span class="line">        DriverHandler handler = <span class="keyword">new</span> DriverHandler(boss);</span><br><span class="line">        Drivable drivable = (Drivable) Proxy.newProxyInstance(</span><br><span class="line">               boss.getClass().getClassLoader(), boss.getClass().getInterfaces(), handler);</span><br><span class="line">        drivable.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h1><p><code>CGLIB</code>是通过继承实现的动态代理<br>先导入<code>maven</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib-nodep --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib-nodep<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>编写代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老板想开车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"司机来开车"</span>);</span><br><span class="line">        proxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">"司机已停车"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CglibProxy proxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">        Boss boss = (Boss) proxy.getProxy(Boss<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        boss.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常见目录作用</title>
    <url>/posts/Linux_base_directory.html</url>
    <content><![CDATA[<h1 id="常见目录作用"><a href="#常见目录作用" class="headerlink" title="常见目录作用"></a>常见目录作用</h1><h2 id="命令目录-bin，-sbin，-usr-bin，-usr-sbin"><a href="#命令目录-bin，-sbin，-usr-bin，-usr-sbin" class="headerlink" title="命令目录/bin，/sbin，/usr/bin，/usr/sbin"></a>命令目录/bin，/sbin，/usr/bin，/usr/sbin</h2><p>用来保存系统命令<br><code>bin</code>中的命令普通用户就可以执行<br><code>sbin</code>中的命令只有root用户才可以执行<br><a id="more"></a></p>
<h2 id="启动目录-boot"><a href="#启动目录-boot" class="headerlink" title="启动目录/boot"></a>启动目录/boot</h2><p><code>/boot</code> 存放内核以及启动所需的文件等<br>保存用户的启动数据，不能写满</p>
<h2 id="设备文件保存目录-dev"><a href="#设备文件保存目录-dev" class="headerlink" title="设备文件保存目录/dev"></a>设备文件保存目录/dev</h2><p>存放硬件文件</p>
<h2 id="配置文件目录-etc"><a href="#配置文件目录-etc" class="headerlink" title="配置文件目录/etc"></a>配置文件目录/etc</h2><p>保存系统配置文件</p>
<h2 id="普通用户家目录-home"><a href="#普通用户家目录-home" class="headerlink" title="普通用户家目录/home"></a>普通用户家目录/home</h2><h2 id="root用户家目录-root"><a href="#root用户家目录-root" class="headerlink" title="root用户家目录/root"></a>root用户家目录/root</h2><h2 id="系统函数库保存目录-lib"><a href="#系统函数库保存目录-lib" class="headerlink" title="系统函数库保存目录/lib"></a>系统函数库保存目录/lib</h2><h2 id="外接存储目录-misc，-media，-mnt"><a href="#外接存储目录-misc，-media，-mnt" class="headerlink" title="外接存储目录/misc，/media，/mnt"></a>外接存储目录/misc，/media，/mnt</h2><p><code>/misc</code> 挂载外接磁带机<br><code>/media</code> 挂载光盘<br><code>/mnt</code> 挂载U盘等移动硬盘</p>
<h2 id="内存目录-proc，-sys"><a href="#内存目录-proc，-sys" class="headerlink" title="内存目录/proc，/sys"></a>内存目录/proc，/sys</h2><p>不能直接操作，保存内存的挂载点（内存的盘符）</p>
<h2 id="临时目录-tmp"><a href="#临时目录-tmp" class="headerlink" title="临时目录/tmp"></a>临时目录/tmp</h2><p>存放临时数据</p>
<h2 id="保存系统相关文档目录-var"><a href="#保存系统相关文档目录-var" class="headerlink" title="保存系统相关文档目录/var"></a>保存系统相关文档目录/var</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/posts/Factory_Pattern.html</url>
    <content><![CDATA[<h1 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h1><p>我们创建实例对象一般都是用<code>new</code>进行的，但是工厂模式将<code>new</code>的过程封装了起来，负责将大量实现了共同接口的类实例化。<br><a id="more"></a></p>
<p><strong>工厂模式又分为</strong></p>
<ol>
<li>简单工厂模式：在具体工厂类里面创建抽象的产品。</li>
<li>工厂方法模式：在抽象工厂类里面创建抽象的产品。</li>
<li>抽象工厂模式：在抽象工厂类里面创建某个族的抽象的产品。</li>
</ol>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><blockquote>
<p>违背了开闭原则，不利于扩展</p>
</blockquote>
<img src="/images/工厂模式_01.png">
<p>创建抽象产品<code>IUser</code>，以及两个具体产品<code>MySQLUser</code>、<code>SQLServerUser</code>。<br>通过<code>SQLFactory</code>工厂类创建具体产品。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 客户端  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IUser db = UserFactory.createUserDB(UserFactory.DB_MYSQL);</span><br><span class="line">        db.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 简单工厂  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_MYSQL=<span class="string">"MySQL"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_SQLSERVER=<span class="string">"SQLServer"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title">createUserDB</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        IUser db = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span>(key)&#123;<span class="comment">//通过key获取实例对象并返回</span></span><br><span class="line">            <span class="keyword">case</span> DB_MYSQL:db = <span class="keyword">new</span> MySQLUser();<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DB_SQLSERVER:db = <span class="keyword">new</span> SQLServerUser();<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果需要新增子类，比如<code>Oracle</code>的用户类，那么就继承<code>IUser</code>类写一个子类，并在工厂中添加一个<code>case</code>分支。<br>但是缺点也在这里，每写一个子类，都要去修改已有的<code>UserFactory</code>工厂类，去新增<code>case</code>分支，这不符合开闭原则。</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><blockquote>
<p>优化了简单工厂模式，但是大大增加了类的数量</p>
</blockquote>
<img src="/images/工厂模式_02.png">
<p>创建抽象产品<code>IUser</code>，以及两个具体产品<code>MySQLUser</code>、<code>SQLServerUser</code>。<br>创建抽象工厂<code>SQLFactory</code>，以及两个具体工厂<code>MySQLFactory</code>、<code>SQLServerFactory</code>。<br>使用多态的特性，创建具体工厂，用来生产具体产品。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123; <span class="comment">//客户端代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SQLfactory factory = <span class="keyword">new</span> MySQLFactory();</span><br><span class="line">        IUser userDB = factory.createUserDB();</span><br><span class="line">        userDB.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象的工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQLFactory</span> </span>&#123;<span class="comment">//一个抽象工厂的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span></span>;<span class="comment">//创建工厂的工厂</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLFactory</span> <span class="keyword">implements</span> <span class="title">SQLFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySQLUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerFactory</span> <span class="keyword">implements</span> <span class="title">SQLFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQLServerUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在简单工厂模式的基础上，把工厂抽象出来，给每一个数据库添加一个工厂。<br>当需要添加新的数据库功能的时候，只要添加工厂或操作类即可。不用再去关注工厂中的判断分支（实际上已经没有判断分支了）。<br>缺点也在这，每添加一个子类功能的时候，都要创建两个类，工厂和操作类，增加了代码量。</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote>
<p>代码冗余，过度设计</p>
</blockquote>
 <img src="/images/工厂模式_03.png">
<p>创建抽象产品<code>IUser</code>，以及两个具体产品<code>MySQLUser</code>、<code>SQLServerUser</code>。<br>创建抽象产品<code>IAuth</code>，以及两个具体产品<code>MySQLAuth</code>、<code>SQLServerAuth</code>。<br>创建抽象工厂<code>SQLFactory</code>，以及两个具体工厂<code>MySQLFactory</code>、<code>SQLServerFactory</code>。<br>使用多态的特性，创建具体工厂，用来生产具体产品。<br>和工厂方法模式类似，只是增加了不同的产品。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123; <span class="comment">//客户端代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SQLfactory factory = <span class="keyword">new</span> MySQLFactory();</span><br><span class="line">        IUser userDB = factory.createUserDB();</span><br><span class="line">        userDB.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">        IAuth authDB = factory.createAuthDB();</span><br><span class="line">        authDB.insertAuth(<span class="keyword">new</span> Auth());</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAuth</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLAuth</span> <span class="keyword">implements</span> <span class="title">IAuth</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条权限数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerAuth</span> <span class="keyword">implements</span> <span class="title">IAuth</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条权限数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象的工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQLFactory</span> </span>&#123;<span class="comment">//一个抽象工厂的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span></span>;<span class="comment">//创建工厂的工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAuth <span class="title">createAuthDB</span><span class="params">()</span></span>;<span class="comment">//创建工厂的工厂</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLFactory</span> <span class="keyword">implements</span> <span class="title">SQLFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span> </span>&#123;   <span class="keyword">return</span> <span class="keyword">new</span> MySQLUser(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAuth <span class="title">createAuthDB</span><span class="params">()</span> </span>&#123;   <span class="keyword">return</span> <span class="keyword">new</span> MySQLAuth(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerFactory</span> <span class="keyword">implements</span> <span class="title">SQLFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUserDB</span><span class="params">()</span> </span>&#123;   <span class="keyword">return</span> <span class="keyword">new</span> SQLServerUser(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAuth <span class="title">createAuthDB</span><span class="params">()</span> </span>&#123;   <span class="keyword">return</span> <span class="keyword">new</span> SQLServerAuth(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="用简单工厂-反射-配置文件优化抽象工厂"><a href="#用简单工厂-反射-配置文件优化抽象工厂" class="headerlink" title="用简单工厂+反射+配置文件优化抽象工厂"></a>用简单工厂+反射+配置文件优化抽象工厂</h2><img src="/images/工厂模式_04.png">
<p>删除<code>SQLFactory</code>、<code>MySQLFactory</code>、<code>SQLServerFactory</code>三个工厂。<br>融合成一个<code>SQLFactory类</code>，再通过<code>properties</code>配置文件加载类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123; <span class="comment">//客户端代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IUser userDB = SQLFactory.createUserDB();</span><br><span class="line">        userDB.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">        IAuth authDB = SQLFactory.createAuthDB();</span><br><span class="line">        authDB.insertAuth(<span class="keyword">new</span> Auth());</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerUser</span> <span class="keyword">implements</span> <span class="title">IUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/** 抽象的产品接口  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAuth</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** 具体的产品  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLAuth</span> <span class="keyword">implements</span> <span class="title">IAuth</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySQL插入一条权限数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerAuth</span> <span class="keyword">implements</span> <span class="title">IAuth</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAuth</span><span class="params">(Auth auth)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SQLServer插入一条权限数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽象的工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dbName;</span><br><span class="line">    <span class="comment">/** 从db.properties中获取数据库信息 */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        try(InputStream in = SQLFactory.class.getResourceAsStream("/db.properties");) &#123;</span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="keyword">for</span> (Object key : prop.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(key.equals(<span class="string">"dbName"</span>))&#123;</span><br><span class="line">                    dbName = prop.getProperty((String) key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 通过反射获取IUser产品 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUser <span class="title">createUserDB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(dbName+<span class="string">"User"</span>);</span><br><span class="line">            <span class="keyword">return</span> (IUser) clazz.getConstructor().newInstance();;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 通过反射获取IAuth产品 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAuth <span class="title">createAuthDB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(dbName+<span class="string">"Auth"</span>);</span><br><span class="line">            <span class="keyword">return</span> (IAuth) clazz.getConstructor().newInstance();;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令提示符</title>
    <url>/posts/Linux_command.html</url>
    <content><![CDATA[<h1 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h1><h2 id="用户及主机名-root-localhost"><a href="#用户及主机名-root-localhost" class="headerlink" title="用户及主机名:[root@localhost ~]"></a>用户及主机名:[root@localhost ~]</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>root</code>：当前登录用户<br><code>localhost</code>：主机名<br><code>~</code>：<code>/root</code><br><code>#</code>：超级用户<br><code>$</code>：普通用户</p>
<h2 id="查询目录中的内容：ls"><a href="#查询目录中的内容：ls" class="headerlink" title="查询目录中的内容：ls"></a>查询目录中的内容：ls</h2><p><code>list</code>的缩写<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a    //显示全部文件，包括隐藏文件</span><br><span class="line">ls -d    //查看目录属性</span><br><span class="line">ls -l    //查询详细信息，ls -l可缩写为ll</span><br><span class="line">ls -h    //显示为人们容易看的格式</span><br><span class="line">ls -i    //显示inode，节点号</span><br></pre></td></tr></table></figure></p>
<h2 id="建立目录：mkdir"><a href="#建立目录：mkdir" class="headerlink" title="建立目录：mkdir"></a>建立目录：mkdir</h2><p><code>make directories</code>的缩写<br><code>-p</code>：递归创建<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p dir1/dir2    //创建dir1目录，并在dir之下创建dir2目录</span><br></pre></td></tr></table></figure></p>
<h2 id="切换目录：cd"><a href="#切换目录：cd" class="headerlink" title="切换目录：cd"></a>切换目录：cd</h2><p><code>change directory</code>的缩写<br>按两次<code>tab</code>可以补全命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~   //进入当前用户的家目录</span><br><span class="line">cd      //进入当前用户的家目录</span><br><span class="line">cd -    //进入上次目录</span><br><span class="line">cd ..   //进入上一级目录(相对路径使用)</span><br><span class="line">cd .    //进入当前目录(相对路径使用)</span><br></pre></td></tr></table></figure></p>
<h2 id="查询所在目录位置：pwd"><a href="#查询所在目录位置：pwd" class="headerlink" title="查询所在目录位置：pwd"></a>查询所在目录位置：pwd</h2><p><code>print working directory</code>的缩写<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd    //显示当前所在位置</span><br></pre></td></tr></table></figure></p>
<h2 id="删除文件或目录：rmdir和rm"><a href="#删除文件或目录：rmdir和rm" class="headerlink" title="删除文件或目录：rmdir和rm"></a>删除文件或目录：rmdir和rm</h2><p><code>rm</code>是<code>remove</code>的缩写，常用<br><code>rmdir</code>是<code>remove empty directories</code>的缩写，比rm更严格，只能删除空目录。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf [文件]    //-r删除目录，-f强制删除</span><br></pre></td></tr></table></figure></p>
<h2 id="复制命令：cp"><a href="#复制命令：cp" class="headerlink" title="复制命令：cp"></a>复制命令：cp</h2><p><code>copy</code>的缩写<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -r [原文件][新文件]    //-r复制目录</span><br><span class="line">cp -p [原文件][新文件]    //-p连属性一起复制</span><br><span class="line">cp -d [原文件][新文件]    //-d若源文件是链接文件，则复制链接属性</span><br><span class="line">cp -a [原文件][新文件]    //-a上面三个一起选中，即-pdr</span><br></pre></td></tr></table></figure></p>
<h2 id="剪切或改名命令：mv"><a href="#剪切或改名命令：mv" class="headerlink" title="剪切或改名命令：mv"></a>剪切或改名命令：mv</h2><p><code>move</code>的缩写，在相同目录下为改名，不同目录为剪切<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv [原文件名] [新文件名]</span><br></pre></td></tr></table></figure></p>
<h2 id="链接命令：ln"><a href="#链接命令：ln" class="headerlink" title="链接命令：ln"></a>链接命令：ln</h2><p><code>link</code>的缩写，生成链接文件<br>硬链接可以看成复制，拥有相同的i节点和存储<code>block</code>块，不能跨分区，不能针对目录使用。删除原文件对硬链接文件没影响。<br>软链接可以看成快捷方式，拥有自己的<code>i</code>节点和存储<code>block</code>块，<code>block</code>块中存储原文件的<code>i</code>节点和文件名删除原文件对软链接文件有影响。<br>软链接文件权限固定为<code>lrwxrwxrwx</code>，真实权限要看原文件，创建软链接文件要写绝对路径。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">link -s [原文件][目标文件]    //-s创建软链接(soft)</span><br></pre></td></tr></table></figure></p>
<h2 id="搜索命令：locate，find，whereis，whoami，whatis，which，grep"><a href="#搜索命令：locate，find，whereis，whoami，whatis，which，grep" class="headerlink" title="搜索命令：locate，find，whereis，whoami，whatis，which，grep"></a>搜索命令：locate，find，whereis，whoami，whatis，which，grep</h2><p><code>locate</code>搜索速度快，在后台数据库<code>/var/lib/mlocate</code>中按文件名搜索，只能按照文件名搜索<br><code>find</code>进行精确查询，要模糊查询使用<code>*</code>通配符<br><code>whoami</code>搜索当前用户<br><code>whatis</code>搜索命令的作用<br><code>whereis</code>只能搜索系统命令的所在位置，搜索命令的所在位置和帮助文档<br><code>which</code>搜索命令所在位置和别名<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate[文件名]    //创建新文件后，必须要updatedb更新数据库，才能找到新文件</span><br><span class="line">find [位置] -name [文件名]</span><br><span class="line">find [位置] -iname [文件名]    //不区分大小写</span><br><span class="line">find [位置] -user [文件名]    //按照所有者搜索</span><br><span class="line">find [位置] -nouser [文件名]    //查找没有所有者的文件</span><br><span class="line">find [位置] -mtime +10    //查找10天前修改内容的文件，+10十天前，10十天当天，-10十天内</span><br><span class="line">find [位置] -ctime +10    //查找10天前修改属性的文件</span><br><span class="line">find [位置] -atime +10    //查找10天前访问过的文件</span><br><span class="line">find [位置] -size 25k    //查找大小为25KB的文件，+25大于25KB，25等于25KB，-25小于25KB，k小写，M大写</span><br><span class="line">find [位置] -size +25k -a -size -100k   //查找大于25k小于100k的文件，-a逻辑与，-o逻辑或</span><br><span class="line">find [位置] -size +25k -a -size -100k -exec [命令] &#123;&#125; \    //对满足条件的文件执行命令</span><br><span class="line">find [位置] -inum 123456    //查找i节点为123456的文件</span><br><span class="line">whoami</span><br><span class="line">whatis [命令]</span><br><span class="line">whereis -bm[命令]     -b只查找可执行文件，-m只查找帮助文档</span><br><span class="line">which [命令]</span><br><span class="line">grep -iv [字符串] [文件名]    //在文件当中匹配符合的字符串，匹配使用正则表达式，-i忽略大小写，-v排除指定字符串(取反)</span><br></pre></td></tr></table></figure></p>
<p>根据<code>/etc/updatedb.conf</code>配置文件进行搜索</p>
<table>
<thead>
<tr>
<th style="text-align:left">prune_bind_mounts=”yes”</th>
<th style="text-align:left">开启搜索限制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">prunefs</td>
<td style="text-align:left">搜索时，不搜索的文件系统</td>
</tr>
<tr>
<td style="text-align:left">prunenames</td>
<td style="text-align:left">搜索时，不搜索的文件类型（后缀）</td>
</tr>
<tr>
<td style="text-align:left">prunepaths</td>
<td style="text-align:left">搜索时，不搜索的文件路径</td>
</tr>
</tbody>
</table>
<h2 id="帮助命令：man，help，info"><a href="#帮助命令：man，help，info" class="headerlink" title="帮助命令：man，help，info"></a>帮助命令：man，help，info</h2><p><code>manul</code>的缩写<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man -f [命令]    //相当于whatis，查看命令的作用</span><br><span class="line">man -k [命令]    //相当于apropos，查看命令的所有帮助</span><br><span class="line">ls --help    //命令的帮助</span><br><span class="line">help [命令]    //help是专门获取shell内部命令的帮助命令</span><br><span class="line">info [命令]    //-回车进入子帮助页面，-u进入上层页面，-n进入下一个帮助小节，-p进入上一个帮助小节，-q退出</span><br></pre></td></tr></table></figure></p>
<h2 id="压缩命令：zip，unzip，gzip，gunzip，bzip2，bunzip2，tar"><a href="#压缩命令：zip，unzip，gzip，gunzip，bzip2，bunzip2，tar" class="headerlink" title="压缩命令：zip，unzip，gzip，gunzip，bzip2，bunzip2，tar"></a>压缩命令：zip，unzip，gzip，gunzip，bzip2，bunzip2，tar</h2><p>常见压缩格式：<code>.zip</code>，<code>.gz</code>，<code>.bz2</code>，<code>.tar.gz</code>，<code>.tar.bz2</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip [压缩文件名] [原文件]    //-r压缩目录</span><br><span class="line">unzip [压缩文件]    //解压缩</span><br><span class="line"></span><br><span class="line">gzip [原文件]    //自动压缩生成源文件.gz，并且删除原文件</span><br><span class="line">gzip -r [原文件]    //-r压缩目录下的所有子文件，但不压缩目录</span><br><span class="line">gzip -c [原文件] &gt; [压缩文件]    //压缩文件，但不删除原文件</span><br><span class="line">gzip -d [压缩文件]    //解压缩</span><br><span class="line">gunzip [压缩文件]    //解压缩</span><br><span class="line"></span><br><span class="line">bzip2 -k [原文件]   //-k保留原文件，不能压缩目录</span><br><span class="line">bzip2 -d [压缩文件]   //-k保留压缩文件，解压缩</span><br><span class="line">bunzip2 [压缩文件]   //解压缩</span><br><span class="line"></span><br><span class="line">tar -cvf [压缩文件] [原文件]    //-c打包，-v显示过程，-f指定打包后的文件名，解决不能压缩目录的问题</span><br><span class="line">tar -xvf [压缩文件]     //-x解打包，-v显示过程，-f指定打包后的文件名</span><br><span class="line">tar -zcvf [压缩文件] [原文件1] [原文件2]    //-z压缩gz格式，可以压缩多个文件</span><br><span class="line">tar -jcvf [压缩文件]  [原文件1] [原文件2]    //-j压缩bz2格式，可以压缩多个文件</span><br><span class="line">tar -zxvf [压缩文件]     //-x解压缩</span><br><span class="line">tar -jxvf [压缩文件] -c [新文件名]     //-x解压缩，并重命名</span><br><span class="line">tar -ztvf [压缩文件] -c [新文件名]     //-t查看压缩内容，不解压</span><br></pre></td></tr></table></figure></p>
<h2 id="关机和重启命令：shutdown，halt，poweroff，init-0"><a href="#关机和重启命令：shutdown，halt，poweroff，init-0" class="headerlink" title="关机和重启命令：shutdown，halt，poweroff，init 0"></a>关机和重启命令：shutdown，halt，poweroff，init 0</h2><p><code>halt</code>，<code>poweroff</code>，<code>init 0</code>关机不安全，不能保存数据<br><code>reboot</code>，<code>init 6</code>重启不安全<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -c    //-c取消前一个关机命令</span><br><span class="line">shutdown -h [时间]    </span><br><span class="line">shutdown -h now    //-h关机，现在关机</span><br><span class="line">shutdown -r 05:30 &amp;  //-r重启，&amp;放入后台，凌晨5点30分重启</span><br></pre></td></tr></table></figure></p>
<p><code>init</code>相关命令<br><img src="/images/命令提示符_01.png"></p>
<h2 id="退出登录命令：logout"><a href="#退出登录命令：logout" class="headerlink" title="退出登录命令：logout"></a>退出登录命令：logout</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logout</span><br></pre></td></tr></table></figure>
<h2 id="挂载与卸载命令：mount，umount"><a href="#挂载与卸载命令：mount，umount" class="headerlink" title="挂载与卸载命令：mount，umount"></a>挂载与卸载命令：mount，umount</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount    //查询挂载点</span><br><span class="line">mount -a    //根据/etc/fstab的内容，自动挂载</span><br><span class="line">mount -t [文件系统] -o [特殊选项] [设备文件名] [挂载点]    //进行挂载</span><br><span class="line"></span><br><span class="line">umount [设备文件名或挂载点]    //卸载命令</span><br></pre></td></tr></table></figure>
<p><code>-o</code>特殊选项<br><img src="/images/命令提示符_02.png"></p>
<h3 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/cdrom    //先建立挂载点</span><br><span class="line">mount -t iso9660 /dev/sr0 /mnt/cdrom    //然后进行挂载</span><br></pre></td></tr></table></figure>
<h3 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l    //查看U盘设备名</span><br><span class="line">mkdir /mnt/usb    //先建立挂载点</span><br><span class="line">mount -t vfat /dev/sdb1 /mnt/usb    //进行挂载</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>东方STG规划</title>
    <url>/posts/Touhou_project_game_plan.html</url>
    <content><![CDATA[<h1 id="东方风神录"><a href="#东方风神录" class="headerlink" title="东方风神录"></a>东方风神录</h1><p>混关攻略视频(未收卡): <a href="https://www.bilibili.com/video/av3769788" target="_blank" rel="noopener">https://www.bilibili.com/video/av3769788</a><br><strong>风神的神德 符卡收法</strong><br>蓝绿  中间往右<br>青红  中间往右<br>紫蓝  中间往左<br>蓝绿  左边往左上穿<br><a id="more"></a></p>
<h1 id="东方星莲船"><a href="#东方星莲船" class="headerlink" title="东方星莲船"></a>东方星莲船</h1><p>混关攻略视频: <a href="https://www.bilibili.com/video/av6570060" target="_blank" rel="noopener">https://www.bilibili.com/video/av6570060</a><br>开碟顺序</p>
<ol>
<li>红 彩（红蓝绿） 红 绿 2绿碎片</li>
<li>绿（2绿碎片）绿 绿 红（炸） 红 1红碎片</li>
<li>红（1红碎片）绿 绿 红（炸） 绿 1绿碎片</li>
<li>绿（1绿碎片）彩（绿红蓝）绿 红（蓝左红右） 蓝 绿（炸折返）红（炸）绿（炸）绿（炸）2绿碎片</li>
<li>绿（2绿碎片，炸）绿 绿（炸？）绿 绿 红 蓝 1绿碎片</li>
<li>绿（1绿碎片） （炸）绿 绿 红 蓝 绿</li>
</ol>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>东方project</tag>
      </tags>
  </entry>
  <entry>
    <title>数据单位</title>
    <url>/posts/data_unit.html</url>
    <content><![CDATA[<h1 id="数据单位"><a href="#数据单位" class="headerlink" title="数据单位"></a>数据单位</h1><h2 id="位（bit）"><a href="#位（bit）" class="headerlink" title="位（bit）"></a>位（bit）</h2><p>来自英文<code>bit</code>，音译为“比特”，表示二进制位。<br>位是计算机内部数据储存的最小单位，<code>11010100</code>是一个<code>8</code>位二进制数。一个二进制位只可以表示<code>0</code>和<code>1</code>两种状态。<br>两个二进制位可以表示<code>00</code>、<code>01</code>、<code>10</code>、<code>11</code>四种状态。<br><code>N</code>个二进制位可以表示$2^N$种状态<br><a id="more"></a></p>
<h2 id="字节（byte）"><a href="#字节（byte）" class="headerlink" title="字节（byte）"></a>字节（byte）</h2><p>字节来自英文<code>Byte</code>，音译为“拜特”，习惯上用大写的<code>B</code>表示。<br>字节是计算机中数据处理的基本单位。<br>计算机中以字节为单位存储和解释信息，规定一个字节由八个二进制位构成。<br><strong>即1个字节等于8个比特（1Byte=8bit）</strong>。<br>八位二进制数最小为<code>00000000</code>，最大为<code>11111111</code>。<br>通常<code>1</code>个字节可以存入一个<code>ASCII</code>码，<code>2</code>个字节可以存放一个汉字国标码。 </p>
<h2 id="字"><a href="#字" class="headerlink" title="字"></a>字</h2><p>计算机进行数据处理时，一次存取、加工和传送的数据长度称为字（<code>word</code>）。<br>一个字通常由一个或多个（一般是字节的整数位）字节构成。<br>例如<code>286</code>微机的字由<code>2</code>个字节组成，它的字长为<code>16</code>位机；<br><code>486</code>微机的字由<code>4</code>个字节组成，它的字长为<code>32</code>位机。<br>计算机的字长决定了其<code>CPU</code>一次操作处理实际位数的多少，由此可见计算机的字长越大，其性能越优越。 </p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法之如何使用LaTeX语法编写数学公式</title>
    <url>/posts/how_to_write_LaTeX_in_Markdown.html</url>
    <content><![CDATA[<ul>
<li><p><a href="http://blog.csdn.net/lanxuezaipiao/article/details/44341645" target="_blank" rel="noopener">教程</a></p>
</li>
<li><p>在线生成图片的网站: <a href="https://latex.codecogs.com/eqneditor/editor.php?lang=zh-cn" target="_blank" rel="noopener">latex.codecogs.com</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制的原码，反码，补码，移码之间的相互转换</title>
    <url>/posts/true_code,_ones-complement_code,_complemental_code,_shift_code.html</url>
    <content><![CDATA[<p>二进制最高位为符号位，<code>0</code>为正数，<code>1</code>为负数。<br>正数的原码和反码和补码一致。<br>负数的反码 = 原码除了最高位（符号位）全部取反。<br>负数的补码 = 反码+1。<br><a id="more"></a></p>
<p>移码 = 补码的最高位（符号位）取反。</p>
<p><code>-0</code>原码:<code>1000 0000</code><br><code>-0</code>反码:<code>1111 1111</code><br><code>-0</code>补码:<code>0000 0000</code><br><code>-0</code>移码:<code>1000 0000</code></p>
<p><code>+0</code>原码:<code>0000 0000</code><br><code>+0</code>反码:<code>0000 0000</code>(正数反码和原码相同)<br><code>+0</code>补码:<code>0000 0000</code>(正数补码和原码相同)<br><code>+0</code>移码:<code>1000 0000</code></p>
<p><code>-1</code>原码:<code>1000 0001</code><br><code>-1</code>反码:<code>1111 1110</code><br><code>-1</code>补码:<code>1111 1111</code><br><code>-1</code>移码:<code>0111 1111</code></p>
<p><code>+1</code>原码:<code>0000 0001</code><br><code>+1</code>反码:<code>0000 0001</code>(正数反码和原码相同)<br><code>+1</code>补码:<code>0000 0001</code>(正数补码和原码相同)<br><code>+1</code>移码:<code>1000 0001</code></p>
]]></content>
      <categories>
        <category>编程杂谈</category>
      </categories>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>getWidth()、getHeight()方法返回的值为0</title>
    <url>/posts/getWidth()%E3%80%81getHeight()_method_alway_return_zero.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在自定义<code>View</code>的构造方法中使用<code>getWidth()</code>和<code>getHeight()</code>返回值为0，<br>因为过早的使用了这些方法，也就是说在这个<code>view</code>被加入到<code>rootview</code>之前你就调用了这些方法，返回的值自然为0。<br><a id="more"></a></p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h2 id="自定义View实现OnGlobalLayoutListener接口，并重写onGlobalLayout方法"><a href="#自定义View实现OnGlobalLayoutListener接口，并重写onGlobalLayout方法" class="headerlink" title="自定义View实现OnGlobalLayoutListener接口，并重写onGlobalLayout方法"></a>自定义View实现OnGlobalLayoutListener接口，并重写onGlobalLayout方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttachedToWindow();</span><br><span class="line">    getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//在自定义View添加到窗体上时,添加onGlobalLayoutListener</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//在自定义View从窗体移除时,移除onGlobalLayoutListener</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写onGlobalLayoutListener中的onGlobalLayout方法</span></span><br><span class="line">    Log.i(TAG, <span class="string">"onGlobalLayout"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!mCreated)&#123;<span class="comment">//设置只执行一次</span></span><br><span class="line">        mCreated = <span class="keyword">true</span></span><br><span class="line">    <span class="comment">//这里getWidth(),getHeight()不为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义一个简单的TextView</title>
    <url>/posts/custom_a_simple_TextView.html</url>
    <content><![CDATA[<h1 id="定义、使用属性"><a href="#定义、使用属性" class="headerlink" title="定义、使用属性"></a>定义、使用属性</h1><p>首先在<code>res/values/attrs.xml</code>文件夹（没有的话自己创建一个）中设置好自定义的属性。<br>注意，因为<code>Toolbar</code>中已经有了<code>titleTextColor</code>的属性，如果我们进行声明，则会编译不通过。<br>所以这里进行了引用，也就是不写format。<br><a id="more"></a><br>属性有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">值</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left">字符串</td>
<td style="text-align:left">color</td>
<td style="text-align:left">颜色</td>
</tr>
<tr>
<td style="text-align:left">demension</td>
<td style="text-align:left">尺寸</td>
<td style="text-align:left">integer</td>
<td style="text-align:left">整型</td>
</tr>
<tr>
<td style="text-align:left">enum</td>
<td style="text-align:left">枚举</td>
<td style="text-align:left">reference</td>
<td style="text-align:left">引用</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">浮点</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">布尔</td>
</tr>
<tr>
<td style="text-align:left">fraction</td>
<td style="text-align:left">百分数</td>
<td style="text-align:left">flag</td>
<td style="text-align:left">位或运算</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CustomTitleView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleText"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在代码中获取属性值"><a href="#在代码中获取属性值" class="headerlink" title="在代码中获取属性值"></a>在代码中获取属性值</h2><p>自定义了属性之后，当然是在构造方法中获取属性值。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTitleView</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String titleText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> titleTextColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> titleTextSize;</span><br><span class="line">    <span class="keyword">private</span> Rect rect;</span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context)</span> </span>&#123;<span class="keyword">this</span>(context, <span class="keyword">null</span>);&#125;<span class="comment">//调用自身构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;<span class="keyword">this</span>(context, attrs, <span class="number">0</span>);&#125;<span class="comment">//调用自身构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        <span class="comment">//获取所有的属性</span></span><br><span class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n = ta.getIndexCount();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> attr = ta.getIndex(i);</span><br><span class="line">            <span class="keyword">switch</span>(attr)&#123;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.CustomTitleView_titleText:</span><br><span class="line">                    titleText = ta.getString(attr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextColor:</span><br><span class="line">                    titleTextColor = ta.getColor(attr, Color.BLACK);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextSize:</span><br><span class="line">                    <span class="comment">//这里将获取的数值单位转换为sp单位</span></span><br><span class="line">                    titleTextSize = ta.getDimensionPixelSize(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</span><br><span class="line">                            TypedValue.COMPLEX_UNIT_SP, <span class="number">15</span>, getResources().getDisplayMetrics()));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ta.recycle();</span><br><span class="line">        <span class="comment">//设置画笔</span></span><br><span class="line">        paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setTextSize(titleTextSize);</span><br><span class="line">        <span class="comment">//Rect是文字所在的矩形，用于测量View的大小</span></span><br><span class="line">        rect = <span class="keyword">new</span> Rect();</span><br><span class="line">        paint.getTextBounds(titleText, <span class="number">0</span>, titleText.length(), rect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="重写onMeasure方法"><a href="#重写onMeasure方法" class="headerlink" title="重写onMeasure方法"></a>重写onMeasure方法</h2><p>重写onMeasure方法，否则的话不支持wrap_content<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是必须的,当titleText改变时,rect也必须改变,否则不会对titleText适配</span></span><br><span class="line">    paint.setTextSize(titleTextSize);</span><br><span class="line">    paint.getTextBounds(titleText, <span class="number">0</span>, titleText.length(), rect);</span><br><span class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);<span class="comment">//获取测量模式</span></span><br><span class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);<span class="comment">//获取测量大小</span></span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">if</span>(widthMode == MeasureSpec.EXACTLY)&#123;<span class="comment">//如果是固定100dp或match_parent</span></span><br><span class="line">        width = widthSize;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;如果是warp_content</span><br><span class="line">        width = getPaddingLeft()+rect.width()+getPaddingRight();<span class="comment">//注意要加上padding</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//同width</span></span><br><span class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">if</span>(heightMode == MeasureSpec.EXACTLY)&#123;</span><br><span class="line">        height = heightSize;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        height = getPaddingTop()+rect.height()+getPaddingBottom();</span><br><span class="line">    &#125;</span><br><span class="line">    setMeasuredDimension(width, height);<span class="comment">//最后设置参数,super里面也是调用这个方法进行设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="进行绘制"><a href="#进行绘制" class="headerlink" title="进行绘制"></a>进行绘制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    paint.setColor(Color.YELLOW);</span><br><span class="line">    canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight(), paint);<span class="comment">//绘制背景</span></span><br><span class="line">    paint.setColor(titleTextColor);</span><br><span class="line">    canvas.drawText(titleText, getWidth()/<span class="number">2</span>-rect.width()/<span class="number">2</span>, getHeight()/<span class="number">2</span>+rect.height()/<span class="number">2</span>, paint);<span class="comment">//绘制文字</span></span><br><span class="line">    <span class="comment">//为什么width是减,height是加,要看API文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>View的onMeasure()</title>
    <url>/posts/onMeasure_method_of_View.html</url>
    <content><![CDATA[<h1 id="自定义View首先需要测量View的大小"><a href="#自定义View首先需要测量View的大小" class="headerlink" title="自定义View首先需要测量View的大小"></a>自定义View首先需要测量View的大小</h1><p>自定义<code>View</code>首先需要测量<code>View</code>的大小，在<code>View</code>的<code>onMeasure()</code>方法中进行。<br><code>View</code>的大小分为三种类型，测量模式也有三种</p>
<ul>
<li>自适应(<code>wrap_content</code>)，对应<code>at_most</code>(最大值模式)，代表的是最大可获得的空间</li>
<li>固定(100dp)，对应<code>Exactly</code>(精确值模式)，代表的是精确的尺寸； </li>
<li>填充父<code>View</code>(<code>match_parent</code>)，对应<code>Exactly</code>(精确值模式)，代表的是精确的尺寸； </li>
<li>还有个<code>UnSpecified</code>(未指定模式)，不指定<code>View</code>的大小，想多大就多大，用于<code>scrollView</code>等类。</li>
</ul>
<a id="more"></a>
<h1 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h1><p><code>onMeasure()</code>只支持<code>Exactly</code>模式，所以要重写<code>onMeasure</code>方法.<br><code>onMeasure</code>传入的<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>不是一般的尺寸数值，而是将模式和尺寸组合在一起的数值。<br><code>MeasureSpec</code>是一个32位的<code>int</code>值，高2位为测量模式，低30位为测量的大小。<br>查看<code>View</code>的<code>onMeasure()</code>源码发现，调用了<code>setMeasuredDimension(int measuredWidth, int measuredHeight)</code>方法。<br>那么我们只要将设置好的长宽参数穿进去即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">    Log.i(<span class="string">"onMeasure"</span>,<span class="string">"onMeasure"</span>);</span><br><span class="line">    setMeasuredDimension(measureWidth(widthMeasureSpec),</span><br><span class="line">                         measureHeight(heightMeasureSpec));</span><br><span class="line"><span class="comment">//    measureWidth()和measureHeight()源码基本一致</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureWidth</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);<span class="comment">//获取测量模式</span></span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);<span class="comment">//获取Size</span></span><br><span class="line"><span class="comment">//    Log.i("measureWidth","measureSpec:"+measureSpec);</span></span><br><span class="line">    Log.i(<span class="string">"measureWidth"</span>,<span class="string">"specSize:"</span>+specSize);</span><br><span class="line">    <span class="keyword">if</span>(specMode == MeasureSpec.EXACTLY)&#123;</span><br><span class="line">        Log.i(<span class="string">"measureWidth"</span>,<span class="string">"specMode:"</span>+<span class="string">"MeasureSpec.EXACTLY"</span>);</span><br><span class="line">        result = specSize;<span class="comment">//如果是Exactly模式,则直接设置</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="number">200</span>;<span class="comment">//如果不是Exactly模式,设置最小的Size</span></span><br><span class="line">        <span class="keyword">if</span>(specMode == MeasureSpec.AT_MOST)&#123;</span><br><span class="line">            Log.i(<span class="string">"measureWidth"</span>,<span class="string">"specMode:"</span>+<span class="string">"MeasureSpec.AT_MOST"</span>);</span><br><span class="line">            result = Math.min(result, specSize);</span><br><span class="line">            <span class="comment">//这里需要自定义,对子`View`的Size进行测量</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(specMode == MeasureSpec.UNSPECIFIED)&#123;</span><br><span class="line">            Log.i(<span class="string">"measureWidth"</span>,<span class="string">"specMode:"</span>+<span class="string">"MeasureSpec.UNSPECIFIED"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="onMeasure-触发了两次？"><a href="#onMeasure-触发了两次？" class="headerlink" title="onMeasure()触发了两次？"></a>onMeasure()触发了两次？</h1><p>打印log时出现这个问题，待解决</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android命名规范和编码规范</title>
    <url>/posts/Android_naming_conventions_and_coding_specifications.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文适用范围：已参加项目开发的人</p>
<p>写这篇文章的目的是为方便地对代码进行管理，让整个团队的代码规范化。这里的部分规定可能和你在其他地方看到的不一样，但还是请遵守这些规则。</p>
<blockquote>
<p>编码规范是泯灭程序猿个性的一项制度，但对于整个团队而言，却是一件利器<br>-《App 研发录》</p>
</blockquote>
<a id="more"></a>
<h1 id="统一代码格式"><a href="#统一代码格式" class="headerlink" title="统一代码格式"></a>统一代码格式</h1><p>首先请参照这篇文章设置 <code>Android Studio</code> 的 <code>Code Style</code>：<br><a href="http://blog.qiji.tech/archives/5153" target="_blank" rel="noopener">设置 Code Style</a><br>细心的同学可能会发现代码风格跟 <code>Google</code> 推荐的不一致，但请记住，我们是一个团队。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/Android命名规范和编码规范_01.jpg">
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="控件-Id-命名方式"><a href="#控件-Id-命名方式" class="headerlink" title="控件 Id 命名方式"></a>控件 Id 命名方式</h3><p>命名模式：<code>View</code> 缩写_逻辑名称<br>例如一个登陆按钮 <code>Button</code>：<code>id</code> 为 <code>btn_login</code>，私有成员变量 <code>mBtnLogin</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">View</th>
<th style="text-align:left">@Id</th>
<th style="text-align:left">ava variable（private）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Button</td>
<td style="text-align:left">btn_</td>
<td style="text-align:left">mBtnLogin</td>
</tr>
<tr>
<td style="text-align:left">TextView</td>
<td style="text-align:left">txt_</td>
<td style="text-align:left">mTxtLogin</td>
</tr>
<tr>
<td style="text-align:left">ImageView</td>
<td style="text-align:left">img_</td>
<td style="text-align:left">mImageLogin</td>
</tr>
<tr>
<td style="text-align:left">EditText</td>
<td style="text-align:left">edt_</td>
<td style="text-align:left">mEdtContent</td>
</tr>
<tr>
<td style="text-align:left">Spinner</td>
<td style="text-align:left">spinner_</td>
<td style="text-align:left">mSpinnerNation</td>
</tr>
<tr>
<td style="text-align:left">TabLayout</td>
<td style="text-align:left">tab_</td>
<td style="text-align:left">mTabLayout</td>
</tr>
<tr>
<td style="text-align:left">LinearLayout</td>
<td style="text-align:left">linear_</td>
<td style="text-align:left">mLinearLayout</td>
</tr>
</tbody>
</table>
<h3 id="Layout-相关"><a href="#Layout-相关" class="headerlink" title="Layout 相关"></a>Layout 相关</h3><table>
<thead>
<tr>
<th style="text-align:left">Component</th>
<th style="text-align:left">Class Name</th>
<th style="text-align:left">Layout Name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Activity</td>
<td style="text-align:left">UserProfileActivity</td>
<td style="text-align:left">activity_user_profile.xml</td>
</tr>
<tr>
<td style="text-align:left">Fragment</td>
<td style="text-align:left">SignUpFragment</td>
<td style="text-align:left">fragment_sign_up.xml</td>
</tr>
<tr>
<td style="text-align:left">Dialog</td>
<td style="text-align:left">ChangePasswordDialog</td>
<td style="text-align:left">dialog_change_password.xml</td>
</tr>
<tr>
<td style="text-align:left">AdapterView item</td>
<td style="text-align:left">-</td>
<td style="text-align:left">list_item_archive.xml</td>
</tr>
</tbody>
</table>
<h3 id="Color-相关"><a href="#Color-相关" class="headerlink" title="Color 相关"></a>Color 相关</h3><p>通常我们不直接使用数字来定义一些属性值，而是先将它定义在所对应的文件里，然后去引用它。</p>
<ul>
<li>推荐从 <code>Material Design</code> 中 <code>Color</code> 中选取颜色(后详)</li>
<li>尽量以 “颜色名称_程度” 来命名</li>
<li>必要时也可用颜色功能来命名</li>
</ul>
<p>在<a href="https://material.google.com/style/color.html#color-color-palette" target="_blank" rel="noopener">Material color palette</a> 的网页中，可以看到官方设计文档的调色板，尽量从文档中选取颜色，来命名和使用。<br>命名采用全小写，下划线分割的形式。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- color --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey_xlight"</span>&gt;</span># F5F5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey_light"</span>&gt;</span># E0E0E0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey"</span>&gt;</span># 9E9E9E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey_dark"</span>&gt;</span># 616161<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey_xdark"</span>&gt;</span># 424242<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"title_normal"</span>&gt;</span># FBE9E7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bg_pop&gt;# FF6D00&lt;/color&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!-- material color --&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string"> &lt;color name="</span><span class="attr">material_red_500</span>"&gt;</span># F44336<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"material_purple_100"</span>&gt;</span># E1BEE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"material_green_800"</span>&gt;</span># 2E7D32<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意 <code>Material color</code> 的命名方式</p>
<h3 id="Dimen-相关"><a href="#Dimen-相关" class="headerlink" title="Dimen 相关"></a>Dimen 相关</h3><ul>
<li>尽量以 “逻辑名称_程度” 来命名</li>
<li>必要时也可用 “逻辑名称_功能” 来命名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- text size --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_xxsmall"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_xsmall"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_small"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_medium"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_large"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_xlarge"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"text_size_title"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- typical spacing between two views, margin or padding --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tiny"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_small"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_medium"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- typical sizes of views --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_small"</span>&gt;</span>32dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_medium"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_large"</span>&gt;</span>60dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="String-相关"><a href="#String-相关" class="headerlink" title="String 相关"></a>String 相关</h3><p>String 命名的前缀应该能够清楚地表达它的功能职责，若是某个模块的字符串，可以以这个模块的名字为前缀然后再加上它的含义，如，<code>registratione_mail_hint</code>，<code>registration_name_hint</code>。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>app名<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"registration_email_hint"</span>&gt;</span>请输入邮箱地址<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"registration_name_hint"</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果一个Sting不属于任何模块，这也就意味着它是通用的，应该遵循以下规范：</p>
<table>
<thead>
<tr>
<th style="text-align:left">type</th>
<th style="text-align:left">detail</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">error_</td>
<td style="text-align:left">错误提示</td>
</tr>
<tr>
<td style="text-align:left">success_</td>
<td style="text-align:left">正确提示</td>
</tr>
<tr>
<td style="text-align:left">msg_</td>
<td style="text-align:left">一般信息提示</td>
</tr>
<tr>
<td style="text-align:left">title_</td>
<td style="text-align:left">标题提示，如，Dialog 标题</td>
</tr>
<tr>
<td style="text-align:left">action_</td>
<td style="text-align:left">动作提示，如，“保存”，“取消”，“创建”</td>
</tr>
<tr>
<td style="text-align:left">direct_</td>
<td style="text-align:left">页面跳转提示</td>
</tr>
</tbody>
</table>
<p>其他通用字符串尽量以：类别_功能 或 含义 来命名</p>
<h3 id="Drawable-相关"><a href="#Drawable-相关" class="headerlink" title="Drawable 相关"></a>Drawable 相关</h3><p>当没有多种类型的图片时，图片统一放在 drawable-xxhdpi 的文件夹下</p>
<table>
<thead>
<tr>
<th style="text-align:left">Asset Type</th>
<th style="text-align:left">Prefix</th>
<th style="text-align:left">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Action bar</td>
<td style="text-align:left">ab_</td>
<td style="text-align:left">ab_stacked.9.png</td>
</tr>
<tr>
<td style="text-align:left">Button</td>
<td style="text-align:left">btn_</td>
<td style="text-align:left">btn_send_pressed.9.png</td>
</tr>
<tr>
<td style="text-align:left">Dialog</td>
<td style="text-align:left">dialog_</td>
<td style="text-align:left">dialog_top.9.png</td>
</tr>
<tr>
<td style="text-align:left">Divider</td>
<td style="text-align:left">divider_</td>
<td style="text-align:left">divider_horizontal.9.png</td>
</tr>
<tr>
<td style="text-align:left">Icon</td>
<td style="text-align:left">ic_</td>
<td style="text-align:left">ic_star.png</td>
</tr>
<tr>
<td style="text-align:left">Menu</td>
<td style="text-align:left">menu_</td>
<td style="text-align:left">menu_submenu_bg.9.png</td>
</tr>
<tr>
<td style="text-align:left">Notification</td>
<td style="text-align:left">notification_</td>
<td style="text-align:left">notification_bg.9.png</td>
</tr>
<tr>
<td style="text-align:left">Tabs</td>
<td style="text-align:left">tab_</td>
<td style="text-align:left">tab_pressed.9.png</td>
</tr>
</tbody>
</table>
<h2 id="Android-编码规范"><a href="#Android-编码规范" class="headerlink" title="Android 编码规范"></a>Android 编码规范</h2><h3 id="XML-文件规范"><a href="#XML-文件规范" class="headerlink" title="XML 文件规范"></a>XML 文件规范</h3><p><strong>属性</strong><br>当你写好 layout 文件后，按 <code>Ctrl + alt + L</code> 格式化后，手动排版为下面这样的格式：</p>
<ul>
<li>每行两个属性</li>
<li><code>android:id</code> 作为第一个属性</li>
<li>如果存在 <code>style</code> 属性，则紧随作为第二行首个属性</li>
<li>如果不存在 <code>style</code> 属性，则 <code>android:layout_xxx</code> 紧随作为第二行首个属性</li>
<li><p>当布局中的一个元素不再包含子元素时，在最后一个属性右边使用自闭合标签<code>/&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/txt_name"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">style</span>=<span class="string">"@style/FancyText"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>使用 Tools</strong><br>布局预览应使用 <code>tools:</code>相关属性，避免 <code>android:text</code> 等硬编码的出现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span> <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">tools:text</span>=<span class="string">"Home Link"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Java-代码规范"><a href="#Java-代码规范" class="headerlink" title="Java 代码规范"></a>Java 代码规范</h2><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p>对Field的定义应该放在文件的首位，并且遵守以下规范：</p>
<ul>
<li>被 <code>private</code> 修饰的非静态变量，以 <code>m</code> 作为前缀</li>
<li>被 <code>private</code> 修饰的静态变量，以 <code>s</code> 作为前缀</li>
<li>被 <code>public</code> 修饰的非静态变量，以小写首字母做前缀</li>
<li>其他变量，以 <code>m</code> 作为前缀，采用驼峰命名</li>
<li>静态常量命名字母全部大写，单词之间用下划线分隔<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_CONSTANT = <span class="number">42</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Bind</span>(R.id.edit_collection_name) EditText mEdtName;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> publicField;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;</span><br><span class="line"> <span class="keyword">int</span> mPackagePrivate;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> mPrivate;</span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">int</span> mProtected;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>对于继承 <code>Entity</code> 的 <code>Model</code> 类型，按照下图进行编码：<br><img src="/images/Android命名规范和编码规范_02.png"><br>注意变量修饰符和大小写</p>
<h3 id="类成员排序"><a href="#类成员排序" class="headerlink" title="类成员排序"></a>类成员排序</h3><p>关于这个并没有硬性要求，不过好的排序方式，能够提高可读性和易学性。这里给出一些排序建议：</p>
<ol>
<li>常量</li>
<li>字段</li>
<li>构造函数</li>
<li>被重写的函数（不区分修饰符类型）</li>
<li>被private修饰的函数</li>
<li>被public修饰的函数</li>
<li>被定义的内部类或者接口<br><strong>如果继承了<code>Android</code>组件，比如<code>Activity</code>或者<code>Fragment</code>，重写生命周期函数时，应该按照组件的生命周期进行排序</strong><br>示例如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"> <span class="keyword">private</span> String mTitle;</span><br><span class="line"> <span class="keyword">private</span> TextView mTextViewTitle;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpView</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"> mTitle = title;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnInnerClass</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="字符串常量的命名"><a href="#字符串常量的命名" class="headerlink" title="字符串常量的命名"></a>字符串常量的命名</h3><p><code>Android SDK</code> 中诸如 <code>SharedPreferences</code>，<code>Bundle</code> 和 <code>Intent</code> 等，都采用 <code>key-value</code> 的方式进行赋值，当使用这些组件的时候，key 必须被 <code>static final</code> 所修饰，并且命名应该符合以下规范：</p>
<table>
<thead>
<tr>
<th style="text-align:left">ElementField</th>
<th style="text-align:left">Name Prefix</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SharedPreferences</td>
<td style="text-align:left">PREF_</td>
</tr>
<tr>
<td style="text-align:left">Bundle</td>
<td style="text-align:left">BUNDLE_</td>
</tr>
<tr>
<td style="text-align:left">Fragment Arguments</td>
<td style="text-align:left">ARGUMENT_</td>
</tr>
<tr>
<td style="text-align:left">Intent Extra</td>
<td style="text-align:left">EXTRA_</td>
</tr>
<tr>
<td style="text-align:left">Intent Action</td>
<td style="text-align:left">ACTION_</td>
</tr>
</tbody>
</table>
<p>示例如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREF_EMAIL = <span class="string">"PREF_EMAIL"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String BUNDLE_AGE = <span class="string">"BUNDLE_AGE"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ARGUMENT_USER_ID = <span class="string">"ARGUMENT_USER_ID"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_SURNAME = <span class="string">"com.myapp.extras.EXTRA_SURNAME"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ACTION_OPEN_USER = <span class="string">"com.myapp.action.ACTION_OPEN_USER"</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="Activity-与-Fragment-打开方式"><a href="#Activity-与-Fragment-打开方式" class="headerlink" title="Activity 与 Fragment 打开方式"></a>Activity 与 Fragment 打开方式</h3><p>当通过 <code>Intent</code> 或者<code>Bundle</code>向<code>Activity</code>与<code>Fragment</code>传值时，应该遵循上面提到的<code>key-value</code>规范，公开一个被 <code>public static</code> 修饰的方法，方法的参数应该包含所有打开这个 <code>Activity</code> 或者 <code>Fragment</code> 的信息，示例如下：</p>
<ul>
<li><p>通过 <code>.startActivity()</code> 函数，开启指定 <code>Activity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(AppCompatActivity startingActivity, User user)</span> </span>&#123;</span><br><span class="line"> Intent intent = <span class="keyword">new</span> Intent(startingActivity, ThisActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> intent.putParcelableExtra(EXTRA_USER, user);</span><br><span class="line"> startingActivity.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>.newInstance()</code> 函数，加载指定 <code>Fragment</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserFragment <span class="title">newInstance</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"> UserFragment fragment = <span class="keyword">new</span> UserFragment;</span><br><span class="line"> Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line"> args.putParcelable(ARGUMENT_USER, user);</span><br><span class="line"> fragment.setArguments(args)</span><br><span class="line"> <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果您所寻找的命名不在上述规范中，可以暂时使用自己的方式来命名，但也要有一定格式并在自己的程序中统一。<br>通常我们会把更大的类别放在前，更细致的放在后。<br>欢迎大家提出问题，互相探讨，共同维护出一份更好的更清晰的开发规范。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.qiji.tech/archives/10395" target="_blank" rel="noopener">[Android]命名规范和编码规范</a></li>
<li><a href="https://github.com/RxSmart/Link-Android-Guideline/blob/master/Android-Guideline.md" target="_blank" rel="noopener">Android编码规范</a></li>
<li><a href="https://github.com/nekocode/nekoblog/blob/master/AndroidDevGuideline.md#property-%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">Android Development Guideline</a></li>
<li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="noopener">Android 命名规范 （提高代码可以读性）</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>常用配置文件</title>
    <url>/posts/Android_common_xml.html</url>
    <content><![CDATA[<h1 id="dimens-xml"><a href="#dimens-xml" class="headerlink" title="dimens.xml"></a>dimens.xml</h1><p>经常需要使用到一些尺寸，这里就记录一下，方便拷贝。<br>直接在<code>values中</code>的<code>dimens.xml</code>文件中粘贴即可<br>使用方法，如：<code>Android:TextSize=&quot;@dimens/offset_2dp&quot;</code><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- text size --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_tiny"</span>&gt;</span>10sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_small"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_normal"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_normal_high"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_large_high"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_size_xlarge"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--边距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"offset_2dp"</span>&gt;</span>2dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"offset_4dp"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"offset_6dp"</span>&gt;</span>6dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="colors-xml"><a href="#colors-xml" class="headerlink" title="colors.xml"></a>colors.xml</h1><p>经常需要使用到一些颜色，这里就记录一下，方便拷贝。<br>直接在values中的colors.xml文件中粘贴即可<br>使用方法，如：<code>Android:background=&quot;@color/yellow&quot;</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--values中的colors.xml文件--&gt;</span>  </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--白色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"ivory"</span>&gt;</span>#FFFFF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--象牙色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightyellow"</span>&gt;</span>#FFFFE0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮黄色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"yellow"</span>&gt;</span>#FFFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"snow"</span>&gt;</span>#FFFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--雪白色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"floralwhite"</span>&gt;</span>#FFFAF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--花白色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lemonchiffon"</span>&gt;</span>#FFFACD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--柠檬绸色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"cornsilk"</span>&gt;</span>#FFF8DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--米绸色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"seashell"</span>&gt;</span>#FFF5EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--海贝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lavenderblush"</span>&gt;</span>#FFF0F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--淡紫红 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"papayawhip"</span>&gt;</span>#FFEFD5<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--番木色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blanchedalmond"</span>&gt;</span>#FFEBCD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--白杏色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mistyrose"</span>&gt;</span>#FFE4E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--浅玫瑰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"bisque"</span>&gt;</span>#FFE4C4<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--桔黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"moccasin"</span>&gt;</span>#FFE4B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--鹿皮色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"navajowhite"</span>&gt;</span>#FFDEAD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--纳瓦白 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"peachpuff"</span>&gt;</span>#FFDAB9<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--桃色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gold"</span>&gt;</span>#FFD700<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--金色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pink"</span>&gt;</span>#FFC0CB<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--粉红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightpink"</span>&gt;</span>#FFB6C1<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮粉红色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"orange"</span>&gt;</span>#FFA500<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--橙色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightsalmon"</span>&gt;</span>#FFA07A<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮肉色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkorange"</span>&gt;</span>#FF8C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗桔黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"coral"</span>&gt;</span>#FF7F50<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--珊瑚色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"hotpink"</span>&gt;</span>#FF69B4<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--热粉红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"tomato"</span>&gt;</span>#FF6347<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--西红柿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"orangered"</span>&gt;</span>#FF4500<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--红橙色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deeppink"</span>&gt;</span>#FF1493<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--深粉红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"fuchsia"</span>&gt;</span>#FF00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--紫红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"magenta"</span>&gt;</span>#FF00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--红紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red"</span>&gt;</span>#FF0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"oldlace"</span>&gt;</span>#FDF5E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--老花色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightgoldenrodyellow"</span>&gt;</span>#FAFAD2<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮金黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"linen"</span>&gt;</span>#FAF0E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亚麻色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"antiquewhite"</span>&gt;</span>#FAEBD7<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--古董白 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"salmon"</span>&gt;</span>#FA8072<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--鲜肉色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"ghostwhite"</span>&gt;</span>#F8F8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--幽灵白 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mintcream"</span>&gt;</span>#F5FFFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--薄荷色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"whitesmoke"</span>&gt;</span>#F5F5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--烟白色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"beige"</span>&gt;</span>#F5F5DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--米色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"wheat"</span>&gt;</span>#F5DEB3<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--浅黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"sandybrown"</span>&gt;</span>#F4A460<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--沙褐色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"azure"</span>&gt;</span>#F0FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--天蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"honeydew"</span>&gt;</span>#F0FFF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--蜜色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"aliceblue"</span>&gt;</span>#F0F8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--艾利斯兰 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"khaki"</span>&gt;</span>#F0E68C<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--黄褐色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightcoral"</span>&gt;</span>#F08080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮珊瑚色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"palegoldenrod"</span>&gt;</span>#EEE8AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--苍麒麟色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"violet"</span>&gt;</span>#EE82EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--紫罗兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darksalmon"</span>&gt;</span>#E9967A<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗肉色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lavender"</span>&gt;</span>#E6E6FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--淡紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightcyan"</span>&gt;</span>#E0FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮青色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"burlywood"</span>&gt;</span>#DEB887<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--实木色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"plum"</span>&gt;</span>#DDA0DD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--洋李色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gainsboro"</span>&gt;</span>#DCDCDC<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--淡灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"crimson"</span>&gt;</span>#DC143C<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗深红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"palevioletred"</span>&gt;</span>#DB7093<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--苍紫罗兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"goldenrod"</span>&gt;</span>#DAA520<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--金麒麟色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"orchid"</span>&gt;</span>#DA70D6<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--淡紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"thistle"</span>&gt;</span>#D8BFD8<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--蓟色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightgray"</span>&gt;</span>#D3D3D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightgrey"</span>&gt;</span>#D3D3D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"tan"</span>&gt;</span>#D2B48C<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--茶色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"chocolate"</span>&gt;</span>#D2691E<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--巧可力色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"peru"</span>&gt;</span>#CD853F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--秘鲁色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"indianred"</span>&gt;</span>#CD5C5C<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--印第安红 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumvioletred"</span>&gt;</span>#C71585<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中紫罗兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"silver"</span>&gt;</span>#C0C0C0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--银色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkkhaki"</span>&gt;</span>#BDB76B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗黄褐色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"rosybrown"</span>&gt;</span>#BC8F8F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--褐玫瑰红 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumorchid"</span>&gt;</span>#BA55D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中粉紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkgoldenrod"</span>&gt;</span>#B8860B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗金黄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"firebrick"</span>&gt;</span>#B22222<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--火砖色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"powderblue"</span>&gt;</span>#B0E0E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--粉蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightsteelblue"</span>&gt;</span>#B0C4DE<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮钢兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"paleturquoise"</span>&gt;</span>#AFEEEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--苍宝石绿 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"greenyellow"</span>&gt;</span>#ADFF2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--黄绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightblue"</span>&gt;</span>#ADD8E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkgray"</span>&gt;</span>#A9A9A9<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkgrey"</span>&gt;</span>#A9A9A9<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"brown"</span>&gt;</span>#A52A2A<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--褐色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"sienna"</span>&gt;</span>#A0522D<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--赭色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkorchid"</span>&gt;</span>#9932CC<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗紫色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"palegreen"</span>&gt;</span>#98FB98<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--苍绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkviolet"</span>&gt;</span>#9400D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗紫罗兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumpurple"</span>&gt;</span>#9370DB<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightgreen"</span>&gt;</span>#90EE90<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkseagreen"</span>&gt;</span>#8FBC8F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗海兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"saddlebrown"</span>&gt;</span>#8B4513<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--重褐色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkmagenta"</span>&gt;</span>#8B008B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗洋红 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkred"</span>&gt;</span>#8B0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗红色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blueviolet"</span>&gt;</span>#8A2BE2<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--紫罗兰蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightskyblue"</span>&gt;</span>#87CEFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮天蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"skyblue"</span>&gt;</span>#87CEEB<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--天蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray"</span>&gt;</span>#808080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"grey"</span>&gt;</span>#808080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"olive"</span>&gt;</span>#808000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--橄榄色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"purple"</span>&gt;</span>#800080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--紫色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"maroon"</span>&gt;</span>#800000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--粟色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"aquamarine"</span>&gt;</span>#7FFFD4<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--碧绿色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"chartreuse"</span>&gt;</span>#7FFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--黄绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lawngreen"</span>&gt;</span>#7CFC00<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--草绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumslateblue"</span>&gt;</span>#7B68EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中暗蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightslategray"</span>&gt;</span>#778899<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮蓝灰 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightslategrey"</span>&gt;</span>#778899<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮蓝灰 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"slategray"</span>&gt;</span>#708090<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--灰石色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"slategrey"</span>&gt;</span>#708090<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--灰石色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"olivedrab"</span>&gt;</span>#6B8E23<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--深绿褐色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"slateblue"</span>&gt;</span>#6A5ACD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--石蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"dimgray"</span>&gt;</span>#696969<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"dimgrey"</span>&gt;</span>#696969<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumaquamarine"</span>&gt;</span>#66CDAA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"cornflowerblue"</span>&gt;</span>#6495ED<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--菊兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"cadetblue"</span>&gt;</span>#5F9EA0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--军兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkolivegreen"</span>&gt;</span>#556B2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗橄榄绿  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"indigo"</span>&gt;</span>#4B0082<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--靛青色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumturquoise"</span>&gt;</span>#48D1CC<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中绿宝石 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkslateblue"</span>&gt;</span>#483D8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗灰蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"steelblue"</span>&gt;</span>#4682B4<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--钢兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"royalblue"</span>&gt;</span>#4169E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--皇家蓝 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"turquoise"</span>&gt;</span>#40E0D0<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--青绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumseagreen"</span>&gt;</span>#3CB371<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中海蓝 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"limegreen"</span>&gt;</span>#32CD32<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--橙绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkslategray"</span>&gt;</span>#2F4F4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗瓦灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkslategrey"</span>&gt;</span>#2F4F4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗瓦灰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"seagreen"</span>&gt;</span>#2E8B57<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--海绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"forestgreen"</span>&gt;</span>#228B22<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--森林绿 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lightseagreen"</span>&gt;</span>#20B2AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--亮海蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"dodgerblue"</span>&gt;</span>#1E90FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--闪兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"midnightblue"</span>&gt;</span>#191970<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中灰兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"aqua"</span>&gt;</span>#00FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--浅绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"cyan"</span>&gt;</span>#00FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--青色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"springgreen"</span>&gt;</span>#00FF7F<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--春绿色--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"lime"</span>&gt;</span>#00FF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--酸橙色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumspringgreen"</span>&gt;</span>#00FA9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中春绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkturquoise"</span>&gt;</span>#00CED1<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗宝石绿 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deepskyblue"</span>&gt;</span>#00BFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--深天蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkcyan"</span>&gt;</span>#008B8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗青色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"teal"</span>&gt;</span>#008080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--水鸭色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"green"</span>&gt;</span>#008000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkgreen"</span>&gt;</span>#006400<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗绿色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blue"</span>&gt;</span>#0000FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"mediumblue"</span>&gt;</span>#0000CD<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--中兰色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"darkblue"</span>&gt;</span>#00008B<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--暗蓝色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"navy"</span>&gt;</span>#000080<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--海军色 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span><span class="comment">&lt;!--黑色 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Canvas中rotate,translate,save和restore</title>
    <url>/posts/rotate,translate,save_and_restore_of_Canvas.html</url>
    <content><![CDATA[<h1 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h1><p>rotate()是对坐标系的旋转，而不是对屏幕的旋转。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvas.drawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">150</span>, mPrePaint);<span class="comment">//画出蓝色矩形</span></span><br><span class="line">    canvas.rotate(<span class="number">30</span>);<span class="comment">//顺时针旋转30度</span></span><br><span class="line">    canvas.drawRect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">250</span>, mLastPaint);<span class="comment">//画出黄色矩形</span></span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);<span class="comment">//画出文字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/images/Canvas中rotate,translate,save和restore_01.png"></p>
<p>很明显，在坐标系旋转前，画出的蓝色矩形并没有跟着坐标系的旋转而旋转，<br>而在坐标系旋转后，画出的黄色矩形和文字旋转了30度。<br><code>rotate()</code>有两个重载方法：</p>
<ul>
<li>rotate(float degrees);</li>
<li>rotate(float degrees, float px, float py);<br>明显第一个参数<code>degrees</code>是坐标系旋转的角度，正数为顺时针旋转，负数为逆时针旋转。<br><code>px</code>和<code>py</code>表示的是，以<code>(px,py)</code>为旋转中心，进行<code>degrees</code>度的旋转。<br>如果使用第一个重载方法，则旋转中心<code>(px,py)</code>为<code>(0,0)</code>。</li>
</ul>
<h1 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h1><p><code>translate()</code>是对坐标系的平移。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvas.drawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">150</span>, mPrePaint);<span class="comment">//画出蓝色矩形</span></span><br><span class="line">    canvas.rotate(<span class="number">30</span>);<span class="comment">//顺时针旋转30°</span></span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);<span class="comment">//画出文字</span></span><br><span class="line">    canvas.drawRect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">250</span>, mLastPaint);<span class="comment">//画出黄色矩形</span></span><br><span class="line">    canvas.translate(<span class="number">500</span>, <span class="number">0</span>);<span class="comment">//往x轴正方向平移500单位长度</span></span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);<span class="comment">//画出文字</span></span><br><span class="line">    canvas.drawRect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">250</span>, mLastPaint);<span class="comment">//画出黄色矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/images/Canvas中rotate,translate,save和restore_02.jpg"></p>
<p>从上述例子可以看出，<code>canvas</code>绘图，实际上是以坐标系为基准进行绘图的。<br>所有的图形都是由在坐标系原点的基础上进行计算并绘制。</p>
<p>那么，如果我们进行了很多次<code>rotate()</code>和<code>translate()</code>操作后，想回退到某一次操作后的坐标轴位置，应该怎么做呢？</p>
<p><code>Canvas</code>中有两个方法<code>save()</code>和<code>restore()</code>，一个是存储，一个是回退。</p>
<h2 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h2><p>无</p>
<h2 id="restore"><a href="#restore" class="headerlink" title="restore()"></a>restore()</h2><p>无</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>LayoutParams的addRule方法</title>
    <url>/posts/addRule_method_of_LayoutParams.html</url>
    <content><![CDATA[<p>自定义<code>ViewGroup</code>中，需要用<code>LayoutParams</code>对子<code>View</code>进行布局<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mLeftParams = <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);</span><br><span class="line">mLeftParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT, TRUE);</span><br><span class="line">mLeftParams.addRule(RelativeLayout.RIGHT_OF, R.id.leftView);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>等价于<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:layout_alignParentLeft="true"</span><br><span class="line">android:layout_toRightOf="@id/leftView"</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自定义View</tag>
      </tags>
  </entry>
</search>
