<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Japari Park</title>
    <link>https://blog.ahao.moe/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>你也是程序猿friends呢~</description>
    <pubDate>Tue, 05 Nov 2019 06:11:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>精通ES的单节点和集群安装</title>
      <link>https://blog.ahao.moe/posts/ES_single_and_cluster_installation.html</link>
      <guid>https://blog.ahao.moe/posts/ES_single_and_cluster_installation.html</guid>
      <pubDate>Mon, 02 Sep 2019 14:28:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前有用到搜索引擎&lt;code&gt;Solr&lt;/code&gt;, 当时我想上&lt;code&gt;ElasticSearch&lt;/code&gt;的, 然后趁机学习下, 可是&lt;code&gt;Leader&lt;/code&gt;要用&lt;code&gt;Solr&lt;/code&gt;没说原因.&lt;br&gt;现在想来, 应该机器资源不够.&lt;br&gt;结果&lt;code&gt;Solr&lt;/code&gt;的文章还没出来, 反而先出了&lt;code&gt;ElasticSearch&lt;/code&gt;的.&lt;br&gt;于是现在就开始学习如何精通&lt;code&gt;ElasticSearch&lt;/code&gt;, 工欲善其事必先利其器, 先来精通一下如何安装.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有用到搜索引擎<code>Solr</code>, 当时我想上<code>ElasticSearch</code>的, 然后趁机学习下, 可是<code>Leader</code>要用<code>Solr</code>没说原因.<br>现在想来, 应该机器资源不够.<br>结果<code>Solr</code>的文章还没出来, 反而先出了<code>ElasticSearch</code>的.<br>于是现在就开始学习如何精通<code>ElasticSearch</code>, 工欲善其事必先利其器, 先来精通一下如何安装.</p><a id="more"></a><h1 id="选择-ES-版本"><a href="#选择-ES-版本" class="headerlink" title="选择 ES 版本"></a>选择 ES 版本</h1><p><a href="https://www.elastic.co/cn/support/matrix" target="_blank" rel="noopener">https://www.elastic.co/cn/support/matrix</a></p><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center"><code>JDK8</code></th><th style="text-align:center"><code>JDK9</code></th><th style="text-align:center"><code>JDK10</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>5.6.x</code></td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:center"><code>6.0.x</code></td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:center"><code>6.1.x</code></td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:center"><code>6.2.x</code></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:center"><code>6.3.x</code></td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✔</td></tr></tbody></table><p>从官方提供的表格, 可以看到<code>6.x</code>开始, 官方将<code>JDK</code>打包到<code>ElasticSearch</code>里面了.<br>并且, <code>6.2.x</code>开始同时支持<code>JDK8</code>和<code>JDK9</code>, <code>6.3.x</code>同时支持<code>JDK8</code>和<code>JDK10</code>, 支持的版本号一路突飞猛进.<br>目前生产环境最新也才<code>JDK8</code>, 所以我这里选择了最新的<code>5.x</code>版本<code>5.6.3</code>.</p><h1 id="安装-ES-并在单节点启动"><a href="#安装-ES-并在单节点启动" class="headerlink" title="安装 ES 并在单节点启动"></a>安装 ES 并在单节点启动</h1><p>直接在<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">官网下载</a>就好了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.tar.gz</span><br><span class="line">tar zxvf elasticsearch-5.6.3.tar.gz</span><br><span class="line">mv elasticsearch-5.6.3 elasticsearch</span><br><span class="line"><span class="built_in">cd</span> elasticsearch/</span><br><span class="line">./bin/elasticsearch</span><br><span class="line"><span class="comment"># ./bin/elasticsearch -d # 后台启动</span></span><br></pre></td></tr></table></figure></p><p>然后访问<code>http://虚拟机IP:9200</code>.<br>一般这样就可以启动了, 但是我在虚拟机里面启动的, 所以出现了各种各样的问题.</p><h2 id="修改-jvm-内存"><a href="#修改-jvm-内存" class="headerlink" title="修改 jvm 内存"></a>修改 jvm 内存</h2><blockquote><p>OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=’Cannot allocate memory’ (errno=12)</p><p>There is insufficient memory for the Java Runtime Environment to continue.<br>Native memory allocation (mmap) failed to map 2060255232 bytes for committing reserved memory.<br>An error report file with more information is saved as:<br>/opt/elasticsearch/hs_err_pid3215.log</p></blockquote><p>可以看到, <code>JVM</code>内存不足了, 有两个建议</p><ol><li>给虚拟机加内存.</li><li>修改<code>-Xms</code>和<code>-Xmx</code>配置, 改小一点, 如<code>512m</code>.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim config/jvm.options</span><br><span class="line"></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure><p>如果改了<code>JVM</code>配置还是启动不了, 就直接加虚拟机内存吧. 我后来是加了内存.</p><h2 id="禁止-root-用户启动"><a href="#禁止-root-用户启动" class="headerlink" title="禁止 root 用户启动"></a>禁止 root 用户启动</h2><blockquote><p>Caused by: java.lang.RuntimeException: can not run elasticsearch as root<br>    at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:106) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:195) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:342) ~[elasticsearch-5.6.3.jar:5.6.3]<br>    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:132) ~[elasticsearch-5.6.3.jar:5.6.3]</p></blockquote><p>那就新建一个<code>es</code>用户就好了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个 es 用户组</span></span><br><span class="line">groupadd es</span><br><span class="line"><span class="comment"># 添加一个 es 用户</span></span><br><span class="line">useradd es -g es -p es -m</span><br><span class="line"><span class="comment"># 修改 elasticsearch 目录的权限</span></span><br><span class="line">chown -R es:es /opt/elasticsearch</span><br><span class="line"><span class="comment"># 切换到 es 用户, 并启动应用</span></span><br><span class="line">sudo su es</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p><h2 id="虚拟内存区域太低-vm-max-map-count"><a href="#虚拟内存区域太低-vm-max-map-count" class="headerlink" title="虚拟内存区域太低 vm.max_map_count"></a>虚拟内存区域太低 vm.max_map_count</h2><blockquote><p>ERROR: [1] bootstrap checks failed<br>[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p></blockquote><p><code>vm.max_map_count</code>是<code>linux</code>系统的一个配置, 限制一个进程拥有的<code>VMA</code>(虚拟内存区域)的数量.<br>不懂也没关系. 这是运维做的事, 咱们只要能跑起来就好了.<br>临时解决方案(重启失效)执行以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p><p>永久配置当然是写入文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"vm.max_map_count=262144"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><h2 id="绑定-IP-允许局域网访问"><a href="#绑定-IP-允许局域网访问" class="headerlink" title="绑定 IP 允许局域网访问"></a>绑定 IP 允许局域网访问</h2><p>启动起来后, 发现浏览器访问<code>http://虚拟机IP:9200</code>失败.<br>然后在虚拟机执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   "name" : "oYRDx50",</span></span><br><span class="line"><span class="comment">#   "cluster_name" : "elasticsearch",</span></span><br><span class="line"><span class="comment">#   "cluster_uuid" : "kXiVFPyvSdO-_s3zY06L3A",</span></span><br><span class="line"><span class="comment">#   "version" : &#123;</span></span><br><span class="line"><span class="comment">#     "number" : "5.6.3",</span></span><br><span class="line"><span class="comment">#     "build_hash" : "1a2f265",</span></span><br><span class="line"><span class="comment">#     "build_date" : "2017-10-06T20:33:39.012Z",</span></span><br><span class="line"><span class="comment">#     "build_snapshot" : false,</span></span><br><span class="line"><span class="comment">#     "lucene_version" : "6.6.1"</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   "tagline" : "You Know, for Search"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">curl http://虚拟机IP:9200</span><br><span class="line"><span class="comment"># curl: (7) Failed to connect to 虚拟机IP port 9200: 拒绝连接</span></span><br></pre></td></tr></table></figure></p><p>修改配置文件, 注意这里是危险操作, 生产环境不能绑定<code>0.0.0.0</code>, 绑定内网<code>IP</code>就好了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"network.host: 0.0.0.0"</span> &gt;&gt; config/elasticsearch.yml</span><br></pre></td></tr></table></figure></p><h1 id="安装可视化插件-elasticsearch-head"><a href="#安装可视化插件-elasticsearch-head" class="headerlink" title="安装可视化插件 elasticsearch-head"></a>安装可视化插件 elasticsearch-head</h1><p>在安装<code>ElasticSearch</code>集群前, 先来安装一下这个可视化插件.<br><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener"><code>elasticsearch-head</code></a>提供了一个可视化的操作页面.<br>不同<code>ElasticSearch</code>版本有不同的安装方法.<br>在<code>5.0.0</code>后, <code>ElasticSearch</code>不再支持直接安装<code>elasticsearch-head</code>插件, 所以只能单独启动<code>elasticsearch-head</code>服务器.</p><blockquote><p><a href="https://github.com/mobz/elasticsearch-head/issues/262#issuecomment-228927247" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head/issues/262#issuecomment-228927247</a></p></blockquote><p>因为要安装<code>npm</code>, 我就懒得弄了, 直接跑<code>docker</code>搞定.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9100:9100 -d mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure></p><p>然后修改<code>config/elasticsearch.yml</code>, 追加<code>CORS</code>跨域配置.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></p><p>然后访问<code>http://虚拟机IP:9100</code>打开控制台, 输入<code>http://虚拟机IP:9200</code>, 点击连接即可.</p><h1 id="安装-ES-集群"><a href="#安装-ES-集群" class="headerlink" title="安装 ES 集群"></a>安装 ES 集群</h1><p>要弄一个集群, 我们得先弄几个节点, 我们复制<code>/opt/elasticsearch</code>文件夹到<code>/opt/elasticsearch2</code>和<code>/opt/elasticsearch3</code>.<br>记得先删除里面的<code>data</code>目录, 否则会出现错误<code>failed to send join request to master</code>.</p><p>先设置个<code>master</code>节点, 修改<code>/opt/elasticsearch/config/elasticsearch.yml</code>.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 支持跨域访问, 供 head 使用</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">ahao-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置节点名, 以及确定主节点</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">ahao-master</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>然后设置两个<code>slave</code>节点, 同样修改<code>config/elasticsearch.yml</code>, 记得修改端口号, 避免端口冲突.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 支持跨域访问, 供 head 使用</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">8200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">ahao-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置节点名, 以及确定主节点地址</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">ahao-node1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["127.0.0.1"]</span></span><br></pre></td></tr></table></figure></p><p>然后都启动起来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/elasticsearch/bin/elasticsearch -d</span><br><span class="line">/opt/elasticsearch2/bin/elasticsearch -d</span><br><span class="line">/opt/elasticsearch3/bin/elasticsearch -d</span><br></pre></td></tr></table></figure></p><p>过一段时间, 启动完毕, 访问<code>http://虚拟机IP:9100</code>打开<code>head</code>控制台, 连接到任意一个节点, 就可以获取整个集群的信息.</p>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/ES_single_and_cluster_installation.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Feign之重复出现的FeignClientSpecification</title>
      <link>https://blog.ahao.moe/posts/Repeated_FeignClientSpecification_of_Feign.html</link>
      <guid>https://blog.ahao.moe/posts/Repeated_FeignClientSpecification_of_Feign.html</guid>
      <pubDate>Thu, 22 Aug 2019 03:47:18 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;场景复现&quot;&gt;&lt;a href=&quot;#场景复现&quot; class=&quot;headerlink&quot; title=&quot;场景复现&quot;&gt;&lt;/a&gt;场景复现&lt;/h1&gt;&lt;p&gt;依赖:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring Boot 2.1.6.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eureka Client 2.1.0.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenFeign 2.1.0.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们创建两个项目, &lt;code&gt;ahao-server&lt;/code&gt;服务提供方和&lt;code&gt;ahao-client&lt;/code&gt;服务调用方.&lt;br&gt;&lt;code&gt;Eureka&lt;/code&gt;可以使用我弄的一个&lt;a href=&quot;https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开箱即用&lt;code&gt;Eureka&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h1><p>依赖:</p><ol><li><code>Spring Boot 2.1.6.RELEASE</code></li><li><code>Eureka Client 2.1.0.RELEASE</code></li><li><code>OpenFeign 2.1.0.RELEASE</code></li></ol><p>我们创建两个项目, <code>ahao-server</code>服务提供方和<code>ahao-client</code>服务调用方.<br><code>Eureka</code>可以使用我弄的一个<a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka" target="_blank" rel="noopener">开箱即用<code>Eureka</code></a></p><a id="more"></a><p>在<code>ahao-server</code>创建一个显示当前时间的<code>controller</code>, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8080</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"现在日期是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>).format(<span class="keyword">new</span> Date()); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">time</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"现在时间是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"hh时mm分ss秒"</span>).format(<span class="keyword">new</span> Date()); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>ahao-client</code>创建一个<code>controller</code>和两个<code>feign</code>客户端, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8081</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> DateApi dateApi;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> dateApi.date(); &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">time</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> timeApi.time(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DateApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>) <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>) <span class="function">String <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<code>ahao-client</code>报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line">The bean &apos;AHAO-SERVER.FeignClientSpecification&apos;, defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line">Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure></p><p>这个叫做<code>AHAO-SERVER.FeignClientSpecification</code>的<code>Bean</code>是从哪来的???</p><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p><code>Spring</code>打印出了异常堆栈. 我们跟进去看一下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerClientConfiguration</span><span class="params">(BeanDefinitionRegistry registry, Object name, Object configuration)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        registry.registerBeanDefinition(name + <span class="string">"."</span> + FeignClientSpecification<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(), <span class="title">builder</span>.<span class="title">getBeanDefinition</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到, 这里注册了一个<code>Bean</code>, 名字就是<code>AHAO-SERVER.FeignClientSpecification</code>.<br>这个<code>name</code>是从外部传进来的.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerFeignClients</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        Map&lt;String, Object&gt; attributes = annotationMetadata.getAnnotationAttributes(FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>())</span>;</span><br><span class="line">        </span><br><span class="line">        String name = getClientName(attributes);</span><br><span class="line">        registerClientConfiguration(registry, name, attributes.get(<span class="string">"configuration"</span>));</span><br><span class="line"></span><br><span class="line">        registerFeignClient(registry, annotationMetadata, attributes);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到, <code>name</code>应该是从注解中的属性取值来的, 再看看<code>getClientName()</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        String value = (String) client.get(<span class="string">"contextId"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"value"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"name"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"serviceId"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Either 'name' or 'value' must be provided in @"</span> + FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一目了然了, 我们声明<code>@FeignClient</code>注解时, 只使用了<code>value</code>属性, 所以产生了冲突, 只要加上<code>contextId</code>就好了.</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>加上<code>contextId</code>属性即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>, contextId = <span class="string">"AHAO-SERVER-DATE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DateApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>) <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>, contextId = <span class="string">"AHAO-SERVER-TIME"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>) <span class="function">String <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Spring-Boot-Cloud-2-0-x-版本"><a href="#Spring-Boot-Cloud-2-0-x-版本" class="headerlink" title="Spring Boot/Cloud 2.0.x 版本"></a>Spring Boot/Cloud 2.0.x 版本</h1><p>我们切换到<code>Spring Boot/Cloud 2.0.x</code>版本, 发现没有<code>contextId</code>属性, 但是启动的时候可以正常启动, 不会报错<code>Bean</code>冲突.<br>看下<code>Spring Boot/Cloud 2.0.x</code>版本的源码.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.openfeign.FeignClientsRegistrar</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        String value = (String) client.get(<span class="string">"value"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"name"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(value)) &#123; value = (String) client.get(<span class="string">"serviceId"</span>); &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Either 'name' or 'value' must be provided in @"</span> + FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看下<code>getClientName()</code>方法, 里面也没有使用<code>contextId</code>. 也就是会创建两个同名<code>AHAO-SERVER.FeignClientSpecification</code>的<code>Bean</code>.<br>后来翻了下<code>issue</code>发现了答案.</p><blockquote><p>spring boot 2.0.x<br>spring.main.allow-bean-definition-overriding default value is “true”<br>spring boot 2.1.x default value changed to “false”</p></blockquote><p>原来是允许<code>Bean</code>重复定义所以才没有报错. 关键在<code>spring.main.allow-bean-definition-overriding</code>这个属性.</p><ul><li><code>Spring Boot 2.0.x</code> 默认是 <code>true</code>.</li><li><code>Spring Boot 2.1.x</code> 默认是 <code>false</code>.</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/90/commits/82fa5181fdd2e23e7414521f468ecea88e17d157" target="_blank" rel="noopener">Support Multiple Clients Using The Same Service</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/81#issuecomment-447188550" target="_blank" rel="noopener">BeanDefinitionOverrideException in FeignClientsRegistrar in tests with customized Spring context</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Repeated_FeignClientSpecification_of_Feign.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>FeignClient 出现 Ambiguous mapping 重复映射</title>
      <link>https://blog.ahao.moe/posts/FeignClient_and_Ambiguous_mapping.html</link>
      <guid>https://blog.ahao.moe/posts/FeignClient_and_Ambiguous_mapping.html</guid>
      <pubDate>Wed, 21 Aug 2019 11:06:18 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;场景复现&quot;&gt;&lt;a href=&quot;#场景复现&quot; class=&quot;headerlink&quot; title=&quot;场景复现&quot;&gt;&lt;/a&gt;场景复现&lt;/h1&gt;&lt;p&gt;依赖:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring Boot 2.1.6.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eureka Client 2.1.0.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenFeign 2.1.0.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们创建两个项目, &lt;code&gt;ahao-server&lt;/code&gt;服务提供方和&lt;code&gt;ahao-client&lt;/code&gt;服务调用方.&lt;br&gt;&lt;code&gt;Eureka&lt;/code&gt;可以使用我弄的一个&lt;a href=&quot;https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开箱即用&lt;code&gt;Eureka&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h1><p>依赖:</p><ol><li><code>Spring Boot 2.1.6.RELEASE</code></li><li><code>Eureka Client 2.1.0.RELEASE</code></li><li><code>OpenFeign 2.1.0.RELEASE</code></li></ol><p>我们创建两个项目, <code>ahao-server</code>服务提供方和<code>ahao-client</code>服务调用方.<br><code>Eureka</code>可以使用我弄的一个<a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-cloud-eureka" target="_blank" rel="noopener">开箱即用<code>Eureka</code></a></p><a id="more"></a><p>在<code>ahao-server</code>创建一个显示当前时间的<code>controller</code>, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8080</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nowTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"现在时间是:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>ahao-client</code>创建一个<code>controller</code>和一个<code>feign</code>客户端, 同时注册到<code>eureka</code>上.<br>假设端口为<code>http://localhost:8081</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeApi.nowTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<code>ahao-client</code>报错<code>java.lang.IllegalStateException: Ambiguous mapping.</code><br>我们改一下<code>ahao-client</code>的<code>controller</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeApi timeApi;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/my-now"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeApi.nowTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再运行<code>ahao-client</code>就可以了.<br>我们访问<code>http://localhost:8081/ahao/my-now</code>可以得到<code>ahao-server</code>提供的时间服务, 但是访问<code>http://localhost:8081/ahao/now</code>就是<code>404</code>了.<br>那为什么会出现<code>java.lang.IllegalStateException: Ambiguous mapping.</code>呢?</p><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>我们看下<code>RequestMappingHandlerMapping</code>映射注册器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingInfoHandlerMapping</span> <span class="keyword">implements</span> <span class="title">MatchableHandlerMapping</span>, <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller<span class="class">.<span class="keyword">class</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">AnnotatedElementUtils</span>.<span class="title">hasAnnotation</span>(<span class="title">beanType</span>, <span class="title">RequestMapping</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是, 只要<code>Bean</code>类上有<code>@Controller</code>注解<strong>或者</strong><code>@RequestMapping</code>注解, 那就会解析<code>url</code>映射.<br>我们的<code>TimeApi</code>上刚好有一个<code>@RequestMapping</code>注解. 所以<code>TimeApi</code>和<code>TimeController</code>才会出现<code>url</code>映射冲突.</p><p>我们改造成<code>my-now</code>后, 就会有两个映射关系</p><ol><li><code>/ahao/my-now</code>: 正常的访问<code>ahao-server</code>服务</li><li><code>/ahao/now</code>: 访问失败<code>404</code></li></ol><p>看到这里肯定有疑问了, 为什么<code>/ahao/now</code>有<code>url</code>映射关系, 访问却<code>404</code>?<br>我们再改造下<code>TimeApi</code>. 加个<code>@ResponseBody</code>注解, 看到这里应该就知道<code>Spring MVC</code>做了多大的一件蠢事.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ahao"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在两个<code>url</code>都可以正常访问了</p><ol><li><code>/ahao/my-now</code>: 正常的访问<code>ahao-server</code>服务</li><li><code>/ahao/now</code>: 正常的访问<code>ahao-server</code>服务</li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这是<code>Spring MVC</code>的锅, <code>Feign</code>是不可能改的了, 而且<code>Spring MVC</code>也不可能改, 因为要兼容以前版本的使用者.</p><h2 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h2><p>不要把<code>@RequestMapping</code>和<code>@FeignClient</code>一起用, 直接把链接拼接到方法级的<code>@RequestMapping</code>上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/ahao/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者用<code>@FeignClient</code>的<code>path</code>属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"AHAO-SERVER"</span>, path = <span class="string">"/ahao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/now"</span>)</span><br><span class="line">    <span class="function">String <span class="title">nowTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="装逼用方法"><a href="#装逼用方法" class="headerlink" title="装逼用方法"></a>装逼用方法</h2><p>来源: <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631</a><br>但是失去了自动装配的一些特性, 不推荐使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Feign<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FeignMappingDefaultConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcRegistrations <span class="title">feignWebRegistrations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcRegistrationsAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FeignFilterRequestMappingHandlerMapping();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignFilterRequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.isHandler(beanType) &amp;&amp; (AnnotationUtils.findAnnotation(beanType, FeignClient<span class="class">.<span class="keyword">class</span>) </span>== <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/466#issuecomment-257043631" target="_blank" rel="noopener">@FeignClient with top level @RequestMapping annotation is also registered as Spring MVC handler</a></li><li><a href="https://github.com/spring-projects/spring-framework/issues/22154" target="_blank" rel="noopener">@RequestMapping without @Controller registered as handler SPR-17622</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/FeignClient_and_Ambiguous_mapping.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>RabbitMQ延迟队列的两种实现方式</title>
      <link>https://blog.ahao.moe/posts/Two_implementations_of_the_RabbitMQ_delay_queue.html</link>
      <guid>https://blog.ahao.moe/posts/Two_implementations_of_the_RabbitMQ_delay_queue.html</guid>
      <pubDate>Mon, 19 Aug 2019 06:47:55 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RabbitMQ&lt;/code&gt;是没有延迟队列, 但是我们可以通过&lt;code&gt;TTL&lt;/code&gt;和死信队列间接来实现.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;Message&lt;/code&gt;指定&lt;code&gt;TTL&lt;/code&gt;后放入队列中.&lt;/li&gt;
&lt;li&gt;等超时后, &lt;code&gt;Message&lt;/code&gt;放入死信队列.&lt;/li&gt;
&lt;li&gt;死信队列将&lt;code&gt;Message&lt;/code&gt;转发到目标队列.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很麻烦.&lt;br&gt;幸运的是, &lt;code&gt;RabbitMQ&lt;/code&gt;官方提供了一个&lt;code&gt;rabbitmq-delayed-message-exchange&lt;/code&gt;延迟消息插件.&lt;br&gt;本文基于&lt;code&gt;Spring Boot AMQP&lt;/code&gt;来操作.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RabbitMQ</code>是没有延迟队列, 但是我们可以通过<code>TTL</code>和死信队列间接来实现.</p><ol><li>将<code>Message</code>指定<code>TTL</code>后放入队列中.</li><li>等超时后, <code>Message</code>放入死信队列.</li><li>死信队列将<code>Message</code>转发到目标队列.</li></ol><p>很麻烦.<br>幸运的是, <code>RabbitMQ</code>官方提供了一个<code>rabbitmq-delayed-message-exchange</code>延迟消息插件.<br>本文基于<code>Spring Boot AMQP</code>来操作.<br><a id="more"></a></p><h1 id="使用官方延迟插件-rabbitmq-delayed-message-exchange"><a href="#使用官方延迟插件-rabbitmq-delayed-message-exchange" class="headerlink" title="使用官方延迟插件 rabbitmq-delayed-message-exchange"></a>使用官方延迟插件 rabbitmq-delayed-message-exchange</h1><p>要求版本 <code>&gt;= 3.5.8</code>.<br><code>GitHub</code>地址: <a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a><br>下载地址: <a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a></p><p>我这里用的是<code>3.6.x</code>的版本.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载 plugin</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://dl.bintray.com/rabbitmq/community-plugins/3.6.x/rabbitmq_delayed_message_exchange/rabbitmq_delayed_message_exchange-20171215-3.6.x.zip</span><br><span class="line">unzip rabbitmq_delayed_message_exchange-20171215-3.6.x.zip </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 移动到 plugins 文件夹内, 不同操作系统 plugins 位置不同</span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.10/plugins/</span><br><span class="line">cp /opt/rabbitmq_delayed_message_exchange-20171215-3.6.x.ez ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 启动延时插件</span></span><br><span class="line">rabbitmq-plugins list | grep delayed</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure></p><p>然后再声明一个延迟交换机<code>Exchange</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_EXCHANGE_NAME = <span class="string">"ahao_delayed_exchange"</span>;</span><br><span class="line">    <span class="meta">@Bean</span>(DELAY_EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE_NAME, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们需要将<code>Queue</code>队列绑定到交换机上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"ahao_queue"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, CustomExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(QUEUE_NAME).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>绑定后, 就可以直接发送消息了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_EXCHANGE_NAME = <span class="string">"ahao_delayed_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSendDelay</span><span class="params">(String queueName, Object data, <span class="keyword">long</span> delayMilliSeconds)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delayMilliSeconds &gt; <span class="number">0xffffffffL</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"超时过长, 只支持 &lt; 4294967296 的延时值"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        rabbitTemplate.convertAndSend(DELAY_EXCHANGE_NAME, queueName, data, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.getHeaders().put(<span class="string">"x-delay"</span>, delayMilliSeconds);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;, correlationId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="坑点1-延时最长为-2-32-1-毫秒"><a href="#坑点1-延时最长为-2-32-1-毫秒" class="headerlink" title="坑点1 延时最长为 2^32-1 毫秒"></a>坑点1 延时最长为 2^32-1 毫秒</h2><p>根据<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange#performance-impact" target="_blank" rel="noopener">官方文档</a>来看, 本插件的延时时长最长为<code>2^32-1</code>毫秒, 也就是<code>0xffffffff</code>毫秒.<br>换算一下, 大约是<code>49</code>天.<br>如果超过<code>2^32-1</code>毫秒, 那么延时值就会溢出, 也就是会立即消费.</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/issues/122#issuecomment-486385307" target="_blank" rel="noopener"><code>Issue#122</code></a>也有提到.<br>这应该是<code>Erlang</code>本身的限制.</p><blockquote><p>In Erlang a timer can be set up to (2^32)-1 milliseconds in the future</p></blockquote><h2 id="坑点2-队列需要和延时-Exchange-绑定"><a href="#坑点2-队列需要和延时-Exchange-绑定" class="headerlink" title="坑点2 队列需要和延时 Exchange 绑定"></a>坑点2 队列需要和延时 Exchange 绑定</h2><p>之前以为指定了<code>x-delayed-type</code>为<code>direct</code>, 就可以不用绑定<code>Queue</code>到这个延时<code>Exchange</code>交换机上.<br>结果发的消息接收不到, 还是需要绑定一下.</p><h1 id="使用原生死信队列实现延时队列"><a href="#使用原生死信队列实现延时队列" class="headerlink" title="使用原生死信队列实现延时队列"></a>使用原生死信队列实现延时队列</h1><p>原生方法就是利用死信队列.</p><ol><li>将<code>Message</code>指定<code>TTL</code>后放入队列中.</li><li>等超时后, <code>Message</code>放入死信队列.</li><li>死信队列将<code>Message</code>转发到目标队列.</li></ol><p>我们先设计下消息流转流程图<br><img src="https://yuml.me/diagram/nofunky;dir:LR/activity/(start" alt="消息流转流程图">-Msg&gt;(delay_exchange)-fanout&gt;(delay_queue)-dead&gt;(biz_exchange)-&gt;<a>[key1]-&gt;(biz_queue1)-&gt;(consumer),<a>[key2]-&gt;(biz_queue2)-&gt;(consumer)-&gt;(end))</a></a></p><ol><li>用户发送带着<code>RoutingKey</code>为<code>biz_queue1</code>的一条消息到延时交换机<code>delay_exchange</code>上(注意, 这个延时交换机就是一个普通交换机).</li><li>延时交换机<code>delay_exchange</code>将消息<code>fanout</code>到队列<code>delay_queue</code>, 这个队列配置了一堆死信参数.</li><li>等待消息在<code>delay_queue</code>超时, 然后将消息转发到该队列的死信交换机<code>biz_exchange</code>上.</li><li>因为<code>delay_queue</code>没有指定<code>x-dead-letter-routing-key</code>, 所以使用的还是原来的<code>biz_queue1</code>. 路由到<code>biz_queue1</code>队列上.</li><li>延时消费成功.</li></ol><p>设计完毕开始编码实战. 我们需要初始化交换机<code>Exchange</code>和队列<code>Queue</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">"delay_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        args.put(<span class="string">"x-dead-letter-exchange"</span>, bizExchange().getName()); <span class="comment">// 声明死信交换机</span></span><br><span class="line"><span class="comment">//        args.put("x-dead-letter-routing-key", "");                 // 声明死信路由键</span></span><br><span class="line">        args.put(<span class="string">"x-message-ttl"</span>, <span class="number">10000</span>);                            <span class="comment">// 所有消息的默认超时时间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"delay_queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayQueue()).to(delayExchange()).with(delayQueue().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">bizExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"biz_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">bizQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"biz_queue1"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bizBinding1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(bizQueue1()).to(bizExchange()).with(bizQueue1().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">bizQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"biz_queue2"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bizBinding2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(bizQueue2()).to(bizExchange()).with(bizQueue2().getName()).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后写一个单元测试, 我用的<code>Junit5</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"biz_queue1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object value;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queuesToDeclare = <span class="meta">@Queue</span>(QUEUE_NAME))</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">directQueue</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息接收时间:"</span>+sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        System.out.println(<span class="string">"接收到的消息:"</span>+msg);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        value = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">webEnvironment</span> </span>= SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;RabbitMQConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RabbitAutoConfiguration</span>.<span class="title">class</span>, <span class="title">SpringContextHolder</span>.<span class="title">class</span>, <span class="title">DirectConsumer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DirectProducerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectConsumer consumer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertNotNull(rabbitTemplate);</span><br><span class="line">        Assert.assertNotNull(consumer);</span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息发送时间:"</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        String msg = <span class="string">"send()"</span>;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Assert.assertNull(DirectConsumer.value);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Assert.assertEquals(msg, DirectConsumer.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以给队列设置<code>x-message-ttl</code>, 也可以给每条消息设置<code>expiration</code>, <code>RabbitMQ</code>会取两者最小值作为消息过期时间.</p><p>用死信队列来实现延迟队列, 只要套多几个死信队列, 就可以绕过官方延时插件的只能延时<code>2^32-1</code>毫秒的<code>bug</code>.<br>但是和官方延时插件一样, 还是得每个队列都绑定到延时交换机上.</p><p>并且! 推荐给队列设置<code>x-message-ttl</code>, 而不是给消息设置<code>expiration</code>.</p><h2 id="坑点-同一队列的延时时长不一样导致消息阻塞"><a href="#坑点-同一队列的延时时长不一样导致消息阻塞" class="headerlink" title="坑点 同一队列的延时时长不一样导致消息阻塞"></a>坑点 同一队列的延时时长不一样导致消息阻塞</h2><p>我们先看下面这个单元测试, 比起上面那个单元测试, 就是连续发送了两条消息.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">webEnvironment</span> </span>= SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;RabbitMQConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RabbitAutoConfiguration</span>.<span class="title">class</span>, <span class="title">SpringContextHolder</span>.<span class="title">class</span>, <span class="title">DirectConsumer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DirectProducerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectConsumer consumer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFailure</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertNotNull(rabbitTemplate);</span><br><span class="line">        Assert.assertNotNull(consumer);</span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"消息发送时间:"</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        </span><br><span class="line">        String msg1 = <span class="string">"sendFailure(1)"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg1, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"1000000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">        String msg2 = <span class="string">"sendFailure(2)"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"delay_exchange"</span>, DirectConsumer.QUEUE_NAME, msg2, message -&gt; &#123;</span><br><span class="line">            MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">            messageProperties.setExpiration(<span class="string">"3000"</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Assert.assertNull(DirectConsumer.value);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Assert.assertNull(msg, DirectConsumer.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行后可以发现, <code>5000</code>毫秒后, 消费者仍然不能接受到<code>sendFailure(2)</code>这条消息.<br>因为消息队列是先进先出的, 当第一条消息没有被消费, 后面的消息也会阻塞不能消费.</p><p>所以推荐还是使用给队列设置<code>x-message-ttl</code>的形式来设置延时时长. 当然, 官方延时插件就没这个问题了.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用官方插件</p><ul><li>优点: <ol><li>使用简单</li><li>不会出现因为前一条消息没有消费, 导致后面的消息阻塞的情况</li></ol></li><li>缺点:<ol><li>延时时长不能超过<code>2^32-1</code>毫秒, 大约<code>49</code>天.</li></ol></li></ul><p>使用原生死信队列</p><ul><li>优点:<ol><li>使用死信队列套死信队列, 可以突破<code>2^32-1</code>毫秒的官方插件限制.</li></ol></li><li>缺点:<ol><li>实现复杂.</li><li>如果给每条消息设置<code>expiration</code>, 则前一条消息会阻塞后一条消息.</li></ol></li></ul><p>然后我写了个工具类<a href="https://github.com/Ahaochan/ahao-common-utils/blob/master/src/main/java/com/ahao/util/spring/mq/RabbitMQHelper.java" target="_blank" rel="noopener"><code>RabbitMQHelper</code></a>可以拿来用下.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://blog.lbanyan.com/rabbitmq_delay/" target="_blank" rel="noopener">RabbitMQ 延迟队列插件 x-delay Bug</a></li><li><a href="https://my.oschina.net/10000000000/blog/1626278" target="_blank" rel="noopener">springboot rabbitmq 之死信队列（延迟消费消息）</a></li><li><a href="https://blog.csdn.net/qq_15071263/article/details/89636161" target="_blank" rel="noopener">通过RabbitMQ 死信队列实现延迟MQ消息，消息延迟，MQ延迟队列</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Two_implementations_of_the_RabbitMQ_delay_queue.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用copy事件添加版权信息</title>
      <link>https://blog.ahao.moe/posts/Add_copyright_information_using_the_copy_event.html</link>
      <guid>https://blog.ahao.moe/posts/Add_copyright_information_using_the_copy_event.html</guid>
      <pubDate>Sun, 18 Aug 2019 06:41:09 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在慕课网遇到个比较降低用户体验的事情。其实在知乎、掘金也有碰到, 以及其他小网站也会碰到。&lt;br&gt;就是他们会拦截&lt;code&gt;copy&lt;/code&gt;事件, 然后加上自己的&lt;code&gt;copyright&lt;/code&gt;。&lt;br&gt;问题就在于, 我复制代码去执行, 还得手动去删除&lt;code&gt;copyright&lt;/code&gt;, 太麻烦了。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在慕课网遇到个比较降低用户体验的事情。其实在知乎、掘金也有碰到, 以及其他小网站也会碰到。<br>就是他们会拦截<code>copy</code>事件, 然后加上自己的<code>copyright</code>。<br>问题就在于, 我复制代码去执行, 还得手动去删除<code>copyright</code>, 太麻烦了。</p><a id="more"></a><h1 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h1><p>网上搜了下, 果然有代码, 遂复制一份。略微修改, 加了点注释<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addCopyright</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取 selection https://developer.mozilla.org/zh-CN/docs/Web/API/Selection</span></span><br><span class="line">        <span class="keyword">var</span> selection = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123; <span class="comment">// DOM,FF,Webkit,Chrome,IE10</span></span><br><span class="line">            selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getSelection) &#123; <span class="comment">// IE10</span></span><br><span class="line">            selection = <span class="built_in">document</span>.getSelection();</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123; <span class="comment">// IE6+10-</span></span><br><span class="line">            selection = <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">            <span class="comment">// alert("文字复制成功！若有文字残缺请用右键复制\n转载请注明出处：" + document.location.href);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            selection = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// alert("浏览器兼容问题导致复制失败！");</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 自定义版权信息</span></span><br><span class="line">        <span class="keyword">var</span> pagelink = <span class="string">"&lt;br /&gt;&lt;br /&gt; 转载请注明来源: &lt;a href='"</span> + <span class="built_in">document</span>.location.href + <span class="string">"'&gt;"</span> + <span class="built_in">document</span>.location.href + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 插入版权信息</span></span><br><span class="line">        <span class="keyword">var</span> copy_text = selection + pagelink;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 新建一个div, 插入 复制内容+版权信息</span></span><br><span class="line">        <span class="keyword">var</span> new_div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        new_div.style.left = <span class="string">'-99999px'</span>;</span><br><span class="line">        new_div.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">        body_element.appendChild(new_div);</span><br><span class="line">        new_div.innerHTML = copy_text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 选择新div中的内容</span></span><br><span class="line">        selection.selectAllChildren(new_div);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 删除div</span></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            body_element.removeChild(new_div);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 9. 浏览器复制选中的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获得所有元素</span></span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 为所有元素添加copy事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = all.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = all[i];</span><br><span class="line">        element[<span class="string">'oncopy'</span>] = addCopyright;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="Hack方案"><a href="#Hack方案" class="headerlink" title="Hack方案"></a>Hack方案</h1><p>明显这是可以通过<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreaseMonkey</a>解决的事情。<br>思路就是修改<code>copy</code>事件为空即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获得所有元素</span></span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 为所有元素添加copy事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = all.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = all[i];</span><br><span class="line">        element[<span class="string">'oncopy'</span>] = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>写完后才发现早有人实现了。<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified" target="_blank" rel="noopener">网页限制解除(改)</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://wangbaiyuan.cn/javascript-implementation-article-copy-plus-copyright-information.html" target="_blank" rel="noopener">JavaScript实现文章复制加版权信息</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Add_copyright_information_using_the_copy_event.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Shiro登录流程源码详解</title>
      <link>https://blog.ahao.moe/posts/Shiro_login_process_source_code_explain.html</link>
      <guid>https://blog.ahao.moe/posts/Shiro_login_process_source_code_explain.html</guid>
      <pubDate>Wed, 14 Aug 2019 09:09:07 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文假设读者能正常使用&lt;code&gt;Shiro&lt;/code&gt;, 并对知道相关类是做什么用的.&lt;br&gt;这里截取部分代码来追踪, 为了尽可能的简单, 这里没有使用&lt;code&gt;Spring&lt;/code&gt;等其他框架, 纯粹的&lt;code&gt;Shiro&lt;/code&gt;代码.&lt;br&gt;本文使用&lt;code&gt;ini&lt;/code&gt;配置, 但不解析&lt;code&gt;IniRealm&lt;/code&gt;内部逻辑.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文假设读者能正常使用<code>Shiro</code>, 并对知道相关类是做什么用的.<br>这里截取部分代码来追踪, 为了尽可能的简单, 这里没有使用<code>Spring</code>等其他框架, 纯粹的<code>Shiro</code>代码.<br>本文使用<code>ini</code>配置, 但不解析<code>IniRealm</code>内部逻辑.</p><a id="more"></a><h1 id="单元测试例子"><a href="#单元测试例子" class="headerlink" title="单元测试例子"></a>单元测试例子</h1><p>具体可以看<a href="https://github.com/Ahaochan/project/blob/master/ahao-spring-boot-shiro/src/test/java/com/ahao/spring/boot/shiro/IniRealmTest.java" target="_blank" rel="noopener"><code>IniRealmTest</code></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IniRealmTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 加载 ini 配置, 初始化 SecurityManager</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取 Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 使用帐号密码登录, 并创建 Session</span></span><br><span class="line">        UsernamePasswordToken trueToken = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(trueToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            Assertions.fail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 角色判断</span></span><br><span class="line">        Assertions.assertTrue(subject.hasRole(<span class="string">"role1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 权限判断</span></span><br><span class="line">        Assertions.assertTrue(subject.isPermitted(<span class="string">"permission1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 登出注销</span></span><br><span class="line">        subject.logout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">username</span> = password,role1,role2</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">role1</span>=permission1,permission2</span><br><span class="line"><span class="attr">role2</span>=permission3,permission4</span><br></pre></td></tr></table></figure><p>登录逻辑就分为上述的六个步骤, 接下来一个个拆解.</p><h1 id="获取安全管理器-SecurityManager"><a href="#获取安全管理器-SecurityManager" class="headerlink" title="获取安全管理器 SecurityManager"></a>获取安全管理器 SecurityManager</h1><p>首先我们看<code>SecurityManager</code>的获取方法<code>factory.getInstance();</code>.<br><img src="https://yuml.me/diagram/nofunky;dir:LR/class/[IniSecurityManagerFactory]-&gt;[IniFactorySupport],[IniFactorySupport]-&gt;[AbstractFactory],[AbstractFactory]-&gt;[&lt;&lt;Factory&gt;&gt;]" alt="IniSecurityManagerFactory继承树"></p><p>以下代码省略部分代码, 保留核心逻辑.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T singletonInstance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 交由子类实现代码</span></span><br><span class="line">        singletonInstance = createInstance();</span><br><span class="line">        <span class="keyword">return</span> singletonInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IniFactorySupport</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_INI_RESOURCE_PATH = <span class="string">"classpath:shiro.ini"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 从 classpath:shiro.ini 获取 ini 配置</span></span><br><span class="line">        Ini ini = resolveIni();</span><br><span class="line">        <span class="comment">// 2. 根据 ini 配置初始化 SecurityManager</span></span><br><span class="line">        T instance = createInstance(ini);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">(Ini ini)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IniSecurityManagerFactory</span> <span class="keyword">extends</span> <span class="title">IniFactorySupport</span>&lt;<span class="title">SecurityManager</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIN_SECTION_NAME = <span class="string">"main"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECURITY_MANAGER_NAME = <span class="string">"securityManager"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INI_REALM_NAME = <span class="string">"iniRealm"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SecurityManager <span class="title">createInstance</span><span class="params">(Ini ini)</span> </span>&#123;</span><br><span class="line">        SecurityManager securityManager = createSecurityManager(ini);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityManager <span class="title">createSecurityManager</span><span class="params">(Ini ini)</span> </span>&#123;</span><br><span class="line">        Ini.Section mainSection = ini.getSection(MAIN_SECTION_NAME);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(mainSection)) &#123;</span><br><span class="line">            mainSection = ini.getSection(Ini.DEFAULT_SECTION_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createSecurityManager(ini, mainSection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityManager <span class="title">createSecurityManager</span><span class="params">(Ini ini, Ini.Section mainSection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建默认的 DefaultSecurityManager 和 IniRealm, 保存到这个 Map 里</span></span><br><span class="line">        Map&lt;String, ?&gt; defaults = createDefaults(ini, mainSection);</span><br><span class="line">        <span class="comment">// 2. 初始化 ReflectionBuilder, 并往 Map 里塞了一个 DefaultEventBus</span></span><br><span class="line">        Map&lt;String, ?&gt; objects = buildInstances(mainSection, defaults);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 3. 获取上面创建的 DefaultSecurityManager</span></span><br><span class="line">        SecurityManager securityManager = getSecurityManagerBean();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 4. 获取上面的 IniRealm 注入到 DefaultSecurityManager 中</span></span><br><span class="line">        Collection&lt;Realm&gt; realms = getRealms(objects);</span><br><span class="line">        ((RealmSecurityManager) securityManager).setRealms(realms);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到, 创建<code>SecurityManager</code>的过程主要做了三件事</p><ol><li>创建默认的<code>DefaultSecurityManager</code></li><li>根据<code>shiro.ini</code>配置文件, 初始化<code>IniRealm</code></li><li>将<code>IniRealm</code>注入到<code>DefaultSecurityManager</code>中.</li></ol><h1 id="获取当前主体-Subject"><a href="#获取当前主体-Subject" class="headerlink" title="获取当前主体 Subject"></a>获取当前主体 Subject</h1><p>接下来获取<code>Subject</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SecurityManager securityManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Subject <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 从 ThreadLocal 获取 Subject, 第一次肯定获取不到, 需要去创建</span></span><br><span class="line">        Subject subject = ThreadContext.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 初始化 Subject</span></span><br><span class="line">            subject = (<span class="keyword">new</span> Subject.Builder()).buildSubject();</span><br><span class="line">            <span class="comment">// 3. 缓存到 ThreadLocal 中</span></span><br><span class="line">            ThreadContext.bind(subject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">         SubjectContext subjectContext = <span class="keyword">new</span> DefaultSubjectContext();</span><br><span class="line">         <span class="function"><span class="keyword">public</span> Subject <span class="title">buildSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> SecurityUtils.securityManager.createSubject(<span class="keyword">this</span>.subjectContext);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一次我们肯定获取不到<code>Subject</code>, 所以需要创建, 跟踪源码可以看到调用了安全管理器<code>SecurityManager</code>的<code>createSubject</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">createSubject</span><span class="params">(SubjectContext subjectContext)</span> </span>&#123;</span><br><span class="line">        SubjectContext context = <span class="keyword">new</span> DefaultSubjectContext(subjectContext);</span><br><span class="line">        Subject subject = subjectFactory.createSubject(context);</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSubjectFactory</span> <span class="keyword">implements</span> <span class="title">SubjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">createSubject</span><span class="params">(SubjectContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return new DelegatingSubject(principals, authenticated, host, session, sessionCreationEnabled, securityManager);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatingSubject(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">true</span>, securityManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>找到最后, 是调用了一个<code>DefaultSubjectFactory</code>工厂, 来创建<code>DelegatingSubject</code>.<br>因为我们什么高大上的配置都没填, 所以就直接<code>null</code>和<code>false</code>来填充所需字段了.</p><h1 id="重头戏身份认证-login"><a href="#重头戏身份认证-login" class="headerlink" title="重头戏身份认证 login"></a>重头戏身份认证 login</h1><p>全部准备就绪了, 就开始登录吧<code>subject.login(trueToken)</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 SecurityManager</span></span><br><span class="line">        Subject subject = securityManager.login(<span class="keyword">this</span>, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Authenticator authenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject <span class="title">login</span><span class="params">(Subject subject, AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        AuthenticationInfo info = authenticate(token);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">return</span> loggedIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">authenticate</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 ModularRealmAuthenticator 认证器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authenticator.authenticate(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到<code>login()</code>方法实际上是调用了<code>ModularRealmAuthenticator</code>类的<code>authenticate()</code>方法.<br><code>ModularRealmAuthenticator</code>认证器默认内置了<code>AtLeastOneSuccessfulStrategy</code>的认证策略.<br>看名字可以猜到, 只要有一个<code>Realm</code>验证通过, 那就验证通过了. 我们目前只有一个<code>IniRealm</code>, 所以不用管这个认证策略.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticator</span> <span class="keyword">implements</span> <span class="title">Authenticator</span>, <span class="title">LogoutAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AuthenticationInfo <span class="title">authenticate</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 交由 ModularRealmAuthenticator 实现</span></span><br><span class="line">        AuthenticationInfo info = doAuthenticate(token);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModularRealmAuthenticator</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doAuthenticate</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        Collection&lt;Realm&gt; realms = getRealms();</span><br><span class="line">        <span class="keyword">if</span> (realms.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 我们目前只有一个 IniRealm </span></span><br><span class="line">            <span class="keyword">return</span> doSingleRealmAuthentication(realms.iterator().next(), authenticationToken);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doMultiRealmAuthentication(realms, authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm, AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!realm.supports(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTokenException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// !!!! 注意这里 !!!!</span></span><br><span class="line">        AuthenticationInfo info = realm.getAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到我们调用了<code>Realm</code>的<code>getAuthenticationInfo()</code>方法, 但是这个方法和我们平常开发时重写的<code>doGetAuthenticationInfo()</code>方法不同.<br><code>getAuthenticationInfo()</code>内部肯定是调用了<code>doGetAuthenticationInfo()</code>方法. 我们继续往里面.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">extends</span> <span class="title">CachingRealm</span> <span class="keyword">implements</span> <span class="title">Initializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取缓存中的 Authentication, 第一次肯定获取不到</span></span><br><span class="line">        AuthenticationInfo info = getCachedAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 自定义 Realm 的实现</span></span><br><span class="line">            info = doGetAuthenticationInfo(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 用户输入的密码和数据库中的密码进行比较, 可以在这里做加盐加密</span></span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            assertCredentialsMatch(token, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">assertCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认实现类 SimpleCredentialsMatcher</span></span><br><span class="line">        CredentialsMatcher cm = getCredentialsMatcher();</span><br><span class="line">        <span class="keyword">if</span> (!cm.doCredentialsMatch(token, info)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>doGetAuthenticationInfo()</code>就是我们自定义<code>Realm</code>要实现的方法.<br>至此, 整个身份验证流程就走通了.<br><img src="https://yuml.me/diagram/nofunky;dir:LR/class/[DelegatingSubject.login]-&gt;[DefaultSecurityManager.login],[DefaultSecurityManager.login]-&gt;[ModularRealmAuthenticator.authenticate],[ModularRealmAuthenticator.doAuthenticate]-&gt;[AuthenticatingRealm.doGetAuthenticationInfo]" alt="Subject.Login()调用链"></p><h1 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h1><p>我们重写<code>Realm</code>除了<code>doGetAuthenticationInfo()</code>还要重写<code>doGetAuthorizationInfo()</code>.<br>但是我们上面身份认证只执行了<code>doGetAuthenticationInfo()</code>. 可以很容易猜到, <code>Shiro</code>使用了懒加载的方式去加载角色权限.<br>还是老办法看源码, 看<code>subject.hasRole()</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 又是调用 SecurityManager</span></span><br><span class="line">        <span class="keyword">return</span> hasPrincipals() &amp;&amp; securityManager.hasRole(getPrincipals(), roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingSecurityManager</span> <span class="keyword">extends</span> <span class="title">AuthenticatingSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principals, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 又是调用 ModularRealmAuthenticator, 然后调用 AuthorizingRealm</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorizer.hasRole(principals, roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">implements</span> <span class="title">Authorizer</span>, <span class="title">Initializable</span>, <span class="title">PermissionResolverAware</span>, <span class="title">RolePermissionResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principal, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// !!!! 注意这里 !!!!</span></span><br><span class="line">        AuthorizationInfo info = getAuthorizationInfo(principal);</span><br><span class="line">        <span class="keyword">return</span> hasRole(roleIdentifier, info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleIdentifier, AuthorizationInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取权限完毕后, 就判断有没有所需权限</span></span><br><span class="line">        <span class="keyword">return</span> info != <span class="keyword">null</span> &amp;&amp; info.getRoles() != <span class="keyword">null</span> &amp;&amp; info.getRoles().contains(roleIdentifier);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>鉴权就比较简单了, 我们直接一撸到底, 方法调来调去, 最后就是调用到<code>Realm</code>的<code>getAuthorizationInfo()</code>方法.<br>和之前一样, 内部肯定也是调用了<code>doGetAuthorizationInfo()</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizingRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> <span class="keyword">implements</span> <span class="title">Authorizer</span>, <span class="title">Initializable</span>, <span class="title">PermissionResolverAware</span>, <span class="title">RolePermissionResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">getAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        AuthorizationInfo info = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 从缓存中获取, 第一次肯定没有</span></span><br><span class="line">        Cache&lt;Object, AuthorizationInfo&gt; cache = getAvailableAuthorizationCache();</span><br><span class="line">        info = cache.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用 自定义 Realm 的 doGetAuthorizationInfo(), 然后缓存</span></span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            info = doGetAuthorizationInfo(principals);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="注销-logout"><a href="#注销-logout" class="headerlink" title="注销 logout"></a>注销 logout</h1><p>注销也很简单, 就是把之前初始化的数据都清空就好了. 调用<code>Subject.logout()</code>注销.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clearRunAsIdentitiesInternal();</span><br><span class="line">            <span class="keyword">this</span>.securityManager.logout(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.session = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.principals = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.authenticated = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//https://issues.apache.org/jira/browse/JSEC-22</span></span><br><span class="line">            <span class="comment">//this.securityManager = null;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSecurityManager</span> <span class="keyword">extends</span> <span class="title">SessionsSecurityManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 删除 remember me</span></span><br><span class="line">        beforeLogout(subject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 清除缓存</span></span><br><span class="line">        PrincipalCollection principals = subject.getPrincipals();</span><br><span class="line">        <span class="keyword">if</span> (principals != <span class="keyword">null</span> &amp;&amp; !principals.isEmpty()) &#123;</span><br><span class="line">            Authenticator authc = getAuthenticator();</span><br><span class="line">            <span class="keyword">if</span> (authc <span class="keyword">instanceof</span> LogoutAware) &#123;</span><br><span class="line">                ((LogoutAware) authc).onLogout(principals);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 从持久层删除 subject</span></span><br><span class="line">        delete(subject);</span><br><span class="line">        <span class="comment">// 4. 停止 session</span></span><br><span class="line">        stopSession(subject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还有一些高级特性, 比如多<code>Realm</code>登陆, 单点登录, <code>Redis</code>持久化<code>Session</code>. 这里就不说了.<br><code>Shrio</code>源码比起<code>Spring</code>的简单多了, 用久了其实都知道的七七八八, 阅读源码也就是个查缺补漏.</p>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Shiro_login_process_source_code_explain.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>上古卷轴5之寻找消失的Revus Sarvani</title>
      <link>https://blog.ahao.moe/posts/How_to_find_Revus_Sarvani.html</link>
      <guid>https://blog.ahao.moe/posts/How_to_find_Revus_Sarvani.html</guid>
      <pubDate>Sat, 06 Jul 2019 16:11:05 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在上古卷轴&lt;code&gt;5&lt;/code&gt;天际龙裔&lt;code&gt;DLC&lt;/code&gt;所在的索瑟海姆&lt;code&gt;Solstheim&lt;/code&gt;, 有&lt;code&gt;3&lt;/code&gt;个隐藏任务,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;召唤巨人卡斯塔&lt;code&gt;Karstaag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;偷取&lt;code&gt;Falas Selvayn&lt;/code&gt;的雄鹿王子之玻璃弓&lt;code&gt;Glass Bow of the Stag Prince&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;收集&lt;code&gt;5&lt;/code&gt;个卡古梅兹共振宝石&lt;code&gt;Kagrumez Resonance Gem&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们的重点就是怎么拿到沙瓦尼&lt;code&gt;Revus Sarvani&lt;/code&gt;的那颗卡古梅兹共振宝石&lt;code&gt;Kagrumez Resonance Gem&lt;/code&gt;.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上古卷轴<code>5</code>天际龙裔<code>DLC</code>所在的索瑟海姆<code>Solstheim</code>, 有<code>3</code>个隐藏任务,</p><ol><li>召唤巨人卡斯塔<code>Karstaag</code></li><li>偷取<code>Falas Selvayn</code>的雄鹿王子之玻璃弓<code>Glass Bow of the Stag Prince</code></li><li>收集<code>5</code>个卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code></li></ol><p>我们的重点就是怎么拿到沙瓦尼<code>Revus Sarvani</code>的那颗卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>.</p><a id="more"></a><h1 id="Revus-Sarvani-的位置"><a href="#Revus-Sarvani-的位置" class="headerlink" title="Revus Sarvani 的位置"></a>Revus Sarvani 的位置</h1><p>沙瓦尼<code>Revus Sarvani</code>就在泰尔密希临<code>Tel Mithryn</code>左上角不远处, 有一个很显眼的阔步沙蚤<code>Dusty</code>, 旁边有一个营地, 沙瓦尼<code>Revus Sarvani</code>就在这里.<br>找他购买一个卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>即可.</p><h1 id="找不到Revus-Sarvani"><a href="#找不到Revus-Sarvani" class="headerlink" title="找不到Revus Sarvani"></a>找不到Revus Sarvani</h1><p>最大的可能就是他被杀了, 葬身荒郊野岭.<br>为什么呢?<br>首先米拉克<code>Miraak</code>没被打倒前, 营地对岸会有一个潜伏者维护者<code>Lurker Vindicator</code>, 这个几乎是陆地最强近战兵种.<br>另外, 营地附近会刷出几只灰烬魔<code>Ash Spawn</code>.<br>还有, 泰尔密希临<code>Tel Mithryn</code>的管家任务, 管家会被几只灰烬魔<code>Ash Spawn</code>杀死, 这个地点也在营地附近.</p><p>综上, 沙瓦尼<code>Revus Sarvani</code>基本不可能存活太久.<br>所以对于老手, 上岛第一件事, 就应该是去买卡古梅兹共振宝石<code>Kagrumez Resonance Gem</code>.</p><h1 id="复活Revus-Sarvani"><a href="#复活Revus-Sarvani" class="headerlink" title="复活Revus Sarvani"></a>复活Revus Sarvani</h1><p>怎么确定他死了呢?<br>网上有说, 在控制台输入<code>coc wideadbodycleanupcell</code>, 进入一个墓地空间, 可以看到死去<code>NPC</code>的尸体, 但是我没找到沙瓦尼<code>Revus Sarvani</code>的尸体.</p><p>我们换个思路, 在控制台输入<code>player.moveto xx02C1EA</code>, 将自己移动到<code>NPC</code>旁边.<br>沙瓦尼<code>Revus Sarvani</code>的代码就是<code>xx02C1EA</code>.<br>这个<code>xx</code>一般是<code>00</code>、<code>01</code>、<code>02</code>、<code>03</code>、<code>04</code>. 我这边是<code>04</code>, 也就是<code>player.moveto 0402C1EA</code>.<br>不想猜的话, 可以进泰尔密希临<code>Tel Mithryn</code>, 打开控制台, 点击任意一个<code>NPC</code>, 就可以看到<code>ID</code>的前缀了.</p><p>如果前缀猜错, 就会报错<code>Invalid</code>.</p><p>按剧本走, 我们会移动到阔步沙蚤<code>Dusty</code>的营地旁边.<br>接下来我们在控制台输入以下两条指令, 锁定该人物, 复活.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prid xx02C1EA</span><br><span class="line">resurrect</span><br></pre></td></tr></table></figure></p><p>这样沙瓦尼<code>Revus Sarvani</code>就复活了.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://en.uesp.net/wiki/Dragonborn:Revus_Sarvani" target="_blank" rel="noopener">Dragonborn: Revus Sarvani</a></li><li><a href="https://www.reddit.com/r/skyrim/comments/18xju7/someone_i_cant_find_in_dragonborn/" target="_blank" rel="noopener">someone_i_cant_find_in_dragonborn</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/How_to_find_Revus_Sarvani.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>什么是Json Web Token</title>
      <link>https://blog.ahao.moe/posts/What_is_Json_Web_Token?.html</link>
      <guid>https://blog.ahao.moe/posts/What_is_Json_Web_Token?.html</guid>
      <pubDate>Wed, 03 Jul 2019 09:03:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Jwt&lt;/code&gt;全称&lt;code&gt;Json Web Token&lt;/code&gt;, 是一种防篡改的数据格式, 可以明文, 可以加密. 我们可以用来存储简单的鉴权信息在&lt;code&gt;Jwt&lt;/code&gt;之中.&lt;br&gt;现在主流的应用场景有单点登录, 替代&lt;code&gt;Session&lt;/code&gt;, 一次性鉴权.&lt;/p&gt;
&lt;p&gt;但是我发现了这篇文章&lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stop using JWT for sessions&lt;/a&gt;, 作者说不要用&lt;code&gt;Jwt&lt;/code&gt;来进行身份认证.&lt;br&gt;建议看完本文后, 再深入阅读这篇文章.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Jwt</code>全称<code>Json Web Token</code>, 是一种防篡改的数据格式, 可以明文, 可以加密. 我们可以用来存储简单的鉴权信息在<code>Jwt</code>之中.<br>现在主流的应用场景有单点登录, 替代<code>Session</code>, 一次性鉴权.</p><p>但是我发现了这篇文章<a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a>, 作者说不要用<code>Jwt</code>来进行身份认证.<br>建议看完本文后, 再深入阅读这篇文章.</p><a id="more"></a><p><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br><code>Jwt</code>只是一种数据格式, 就像<code>JSON</code>一样!<br>重要的话说<code>3</code>遍, 好了往下看.</p><h1 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</span><br></pre></td></tr></table></figure><p>上面是一个<code>JWT</code>, 分为<code>3</code>个部分, <code>header</code>和<code>claims</code>都是用<code>base64</code>编码, <code>3</code>个部分用<code>.</code>连接起来.</p><ol><li><code>header</code>: 头部, 最少包含了签名算法.</li><li><code>claims</code>: 内容, 包含了你想要放进去的数据.</li><li><code>signature</code>: 签名</li></ol><p>用<code>base64</code>解码<code>header</code>和<code>claims</code>可得<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9 ----&gt; &#123;&quot;alg&quot;:&quot;HS256&quot;&#125;</span><br><span class="line">eyJzdWIiOiJKb2UifQ   ----&gt; &#123;&quot;sub&quot;:&quot;Joe&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>后面的<code>gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</code>是签名, 是不可读的, 签名算法就是<code>header</code>的<code>alg</code>字段的值<code>HS256</code>.<br>可以在<a href="https://jwt.io/" target="_blank" rel="noopener"><code>Debugger</code>工具</a>测试.</p><p><code>Q1</code>: 为什么说<code>Jwt</code>是防篡改的?<br><code>A1</code>: 我们不知道签名的私钥, 不信你在<a href="https://jwt.io/" target="_blank" rel="noopener"><code>Debugger</code>工具</a>试试, 用上面的<code>header</code>和<code>claims</code>, 在不知道私钥的情况下, 你能得到<code>gG3FV1r3HgYYUd04sTUh2asQbk68SjmkivuaBHCRhLo</code>吗? 我就告诉你私钥是<code>123456</code>了, 你猜的到吗?</p><p><code>Q2</code>: <code>Jwt</code>能用来替换<code>Session</code>吗?<br><code>A2</code>: 它们应该是组合使用, 而不是对立的. <a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a></p><p><code>Q3</code>: 那我到底要在什么地方用<code>Jwt</code>?<br><code>A3</code>: 一般移动端用的比较多, 移动端不像浏览器有一套透明的<code>Cookie</code>方案.</p><h1 id="JJWT-应用"><a href="#JJWT-应用" class="headerlink" title="JJWT 应用"></a>JJWT 应用</h1><p>我们先来看一个例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 生成 jwt</span></span><br><span class="line">        String key = Base64.getEncoder().encodeToString(<span class="string">"signKey"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        JwtBuilder builder = Jwts.builder()</span><br><span class="line">            .setId(<span class="string">"id"</span>)                <span class="comment">// JWT_ID</span></span><br><span class="line">            .setAudience(<span class="string">"audience"</span>)    <span class="comment">// 接受者</span></span><br><span class="line">            .setSubject(<span class="string">"subject"</span>)      <span class="comment">// 主题</span></span><br><span class="line">            .setIssuer(<span class="string">"issuer"</span>)        <span class="comment">// 签发者</span></span><br><span class="line">            .addClaims(<span class="keyword">null</span>)            <span class="comment">// 自定义属性</span></span><br><span class="line">            .setIssuedAt(<span class="keyword">new</span> Date(now))        <span class="comment">// 签发时间</span></span><br><span class="line">            .setNotBefore(<span class="keyword">new</span> Date(now - <span class="number">1</span>))   <span class="comment">// 生效时间</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> Date(now + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>))  <span class="comment">// 过期时间</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, key); <span class="comment">// 签名算法以及密匙</span></span><br><span class="line">        String token = builder.compact();</span><br><span class="line">        System.out.println(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解析 jwt</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jws&lt;Claims&gt; jws = Jwts.parser()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .parseClaimsJws(token);</span><br><span class="line">            JwsHeader header = jws.getHeader();</span><br><span class="line">            Claims claims = jws.getBody();</span><br><span class="line"></span><br><span class="line">            Assertions.assertEquals(SignatureAlgorithm.HS256.getValue(), header.getAlgorithm());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"id"</span>, claims.getId());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"audience"</span>, claims.getAudience());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"subject"</span>, claims.getSubject());</span><br><span class="line">            Assertions.assertEquals(<span class="string">"issuer"</span>, claims.getIssuer());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>JwtBuilder</code>使用<code>Builder</code>模式, 构建<code>header</code>和<code>claims</code>, 最后再调用<code>signWith</code>方法添加<code>signature</code>签名.<br>之后我们使用<code>Jwts.parser()</code>来解析<code>token</code>, 在<code>parseClaimsJws(token)</code>会抛出一堆<code>RuntimeException</code>, 用来校验<code>token</code>是否有效.<br>得到的<code>Claims</code>其实就是一个<code>Map</code>, 我们从中获取需要的数据即可.</p><h1 id="整合-Spring-Boot"><a href="#整合-Spring-Boot" class="headerlink" title="整合 Spring Boot"></a>整合 Spring Boot</h1><p>查看我在<code>Github</code>上的一个示例工程.<br><a href="https://github.com/Ahaochan/project/tree/master/ahao-spring-boot-jwt" target="_blank" rel="noopener">https://github.com/Ahaochan/project/tree/master/ahao-spring-boot-jwt</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Token</a></li><li><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener">Stop using JWT for sessions</a></li><li><a href="http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/" target="_blank" rel="noopener">Stop using JWT for sessions, part 2: Why your solution doesn’t work</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/What_is_Json_Web_Token?.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用scan代替keys获取所有key</title>
      <link>https://blog.ahao.moe/posts/Use_scan_instead_of_keys_to_get_all_the_keys.html</link>
      <guid>https://blog.ahao.moe/posts/Use_scan_instead_of_keys_to_get_all_the_keys.html</guid>
      <pubDate>Sun, 30 Jun 2019 08:09:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;的&lt;code&gt;keys&lt;/code&gt;命令可以获取所有的&lt;code&gt;key&lt;/code&gt;, 时间复杂度是&lt;code&gt;O(n)&lt;/code&gt;, 一旦数据量大了, 因为&lt;code&gt;Redis&lt;/code&gt;是单线程的, 就会导致&lt;code&gt;Redis&lt;/code&gt;阻塞的情况.&lt;br&gt;为了解决阻塞问题, &lt;code&gt;Redis 2.8.0&lt;/code&gt;推出了&lt;code&gt;scan&lt;/code&gt;命令, &lt;code&gt;scan&lt;/code&gt;可以返回默认大小为&lt;code&gt;10&lt;/code&gt;的&lt;code&gt;key&lt;/code&gt;, 并返回一个游标, 作为下次调用&lt;code&gt;scan&lt;/code&gt;的参数.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Redis</code>的<code>keys</code>命令可以获取所有的<code>key</code>, 时间复杂度是<code>O(n)</code>, 一旦数据量大了, 因为<code>Redis</code>是单线程的, 就会导致<code>Redis</code>阻塞的情况.<br>为了解决阻塞问题, <code>Redis 2.8.0</code>推出了<code>scan</code>命令, <code>scan</code>可以返回默认大小为<code>10</code>的<code>key</code>, 并返回一个游标, 作为下次调用<code>scan</code>的参数.</p><a id="more"></a><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 k4 v4 k5 v5 k6 v6 k7 v7 k8 v8 k9 v9 k10 v10 k11 v11 k12 v12 k13 v13 k14 v14</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) <span class="string">"k14"</span></span><br><span class="line"> 2) <span class="string">"k1"</span></span><br><span class="line"> 3) <span class="string">"k13"</span></span><br><span class="line"> 4) <span class="string">"k5"</span></span><br><span class="line"> 5) <span class="string">"k2"</span></span><br><span class="line"> 6) <span class="string">"k12"</span></span><br><span class="line"> 7) <span class="string">"k11"</span></span><br><span class="line"> 8) <span class="string">"k10"</span></span><br><span class="line"> 9) <span class="string">"k4"</span></span><br><span class="line">10) <span class="string">"k8"</span></span><br><span class="line">11) <span class="string">"k9"</span></span><br><span class="line">12) <span class="string">"k3"</span></span><br><span class="line">13) <span class="string">"k6"</span></span><br><span class="line">14) <span class="string">"k7"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"11"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k12"</span></span><br><span class="line">    9) <span class="string">"k2"</span></span><br><span class="line">   10) <span class="string">"k13"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 11 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k10"</span></span><br><span class="line">   2) <span class="string">"k4"</span></span><br><span class="line">   3) <span class="string">"k8"</span></span><br><span class="line">   4) <span class="string">"k9"</span></span><br></pre></td></tr></table></figure><p>初始化一堆<code>key</code></p><ol><li>用<code>keys</code>命令获取到所有的<code>key</code></li><li>用<code>scan</code>命令<strong>两次</strong>获取到所有的<code>key</code></li></ol><h1 id="多线程下原子性问题思考"><a href="#多线程下原子性问题思考" class="headerlink" title="多线程下原子性问题思考"></a>多线程下原子性问题思考</h1><p>我们在上面使用了两次<code>scan</code>命令, 就说明在这两次<code>scan</code>中, 可能会发生<code>set</code>或者<code>del</code>操作, 不是一个原子性操作.</p><blockquote><p>Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.</p></blockquote><p>根据<a href="https://redis.io/commands/scan" target="_blank" rel="noopener">官方文档</a>, 也就是说, 如果在<code>scan</code>过程中<code>set</code>或<code>del</code>了某个<code>key</code>, 那么这个<code>key</code>就变成了玄学状态. 可能被返回, 也可能不被返回.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"11"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k12"</span></span><br><span class="line">    9) <span class="string">"k2"</span></span><br><span class="line">   10) <span class="string">"k13"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k15 v15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; scan 11 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k10"</span></span><br><span class="line">   2) <span class="string">"k4"</span></span><br><span class="line">   3) <span class="string">"k8"</span></span><br><span class="line">   4) <span class="string">"k9"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; scan 0 match * count 10</span><br><span class="line">1) <span class="string">"13"</span></span><br><span class="line">2)  1) <span class="string">"k5"</span></span><br><span class="line">    2) <span class="string">"k3"</span></span><br><span class="line">    3) <span class="string">"k6"</span></span><br><span class="line">    4) <span class="string">"k7"</span></span><br><span class="line">    5) <span class="string">"k1"</span></span><br><span class="line">    6) <span class="string">"k11"</span></span><br><span class="line">    7) <span class="string">"k14"</span></span><br><span class="line">    8) <span class="string">"k15"</span></span><br><span class="line">    9) <span class="string">"k12"</span></span><br><span class="line">   10) <span class="string">"k2"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 13 match * count 10</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"k13"</span></span><br><span class="line">   2) <span class="string">"k10"</span></span><br><span class="line">   3) <span class="string">"k4"</span></span><br><span class="line">   4) <span class="string">"k8"</span></span><br><span class="line">   5) <span class="string">"k9"</span></span><br></pre></td></tr></table></figure></p><p>可以看到, <code>k15</code>没有在第一次扫描时返回, 而在第二次扫描时返回.<br>所以这个玄学状态, 应该是取决于<code>set</code>或<code>del</code>的元素的位置.</p><h1 id="整合-Spring-Data-Redis"><a href="#整合-Spring-Data-Redis" class="headerlink" title="整合 Spring Data Redis"></a>整合 Spring Data Redis</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(String pattern, Consumer&lt;String&gt; consumer)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; keySerializer = (RedisSerializer&lt;String&gt;) stringRedisTemplate.getKeySerializer();</span><br><span class="line"></span><br><span class="line">        ScanOptions options = ScanOptions.scanOptions().match(pattern).count(<span class="number">10</span>).build();</span><br><span class="line">        <span class="keyword">try</span>(Cursor&lt;String&gt; cursor = getStringRedisTemplate().executeWithStickyConnection((RedisCallback&lt;Cursor&lt;String&gt;&gt;) connection -&gt;</span><br><span class="line">            <span class="keyword">new</span> ConvertingCursor&lt;&gt;(connection.scan(options), keySerializer::deserialize))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">                String key = cursor.next();</span><br><span class="line">                consumer.accept(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合到<code>Spring Data Redis</code>中就是这样, 奇怪的是, 最新的<code>Spring Data Redis 2.1.6</code>实现了<code>hscan</code>命令, 但是却没有实现<code>scan</code>, 只能自己写<code>execute</code>实现了.<br>可以参考我的工具类集合<a href="https://github.com/Ahaochan/ahao-common-utils/blob/master/src/main/java/com/ahao/util/spring/redis/RedisHelper.java" target="_blank" rel="noopener"><code>RedisHelper</code></a>.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://redis.io/commands/scan" target="_blank" rel="noopener">scan 官方文档</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Use_scan_instead_of_keys_to_get_all_the_keys.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>海关跨境申报流程165号和179号文档</title>
      <link>https://blog.ahao.moe/posts/Customs_Declaration_Documents_165_And_179.html</link>
      <guid>https://blog.ahao.moe/posts/Customs_Declaration_Documents_165_And_179.html</guid>
      <pubDate>Tue, 11 Jun 2019 15:25:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;苦啊, 弄了快两个月了.&lt;br&gt;整个业务流程复杂的很, 但是走通过一次, 就懂了.&lt;br&gt;我要吐槽的就两个&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;海关文档一言难尽.&lt;/li&gt;
&lt;li&gt;微信群办公, 每天看海关人员发文档, 都觉得心累. 还不如弄个QQ群上传群文件呢.&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>苦啊, 弄了快两个月了.<br>整个业务流程复杂的很, 但是走通过一次, 就懂了.<br>我要吐槽的就两个</p><ol><li>海关文档一言难尽.</li><li>微信群办公, 每天看海关人员发文档, 都觉得心累. 还不如弄个QQ群上传群文件呢.</li></ol><a id="more"></a><h1 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h1><p>说下我司背景, 我司是电商平台, 以前都是供应商进行海关申报的, 进行四单对碰, 订单、支付单、运单、清单.<br>现在由于海关出了两个文档</p><ol><li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a></li><li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2155884/index.html" target="_blank" rel="noopener">海关总署公告2018年第179号（关于实时获取跨境电子商务平台企业支付相关原始数据接入有关事宜的公告）</a></li></ol><p>所以必须由我司进行<strong>支付单</strong>的推送了.<br>我司使用的是微信支付, 所以调用微信支付的<a href="https://pay.weixin.qq.com/wiki/doc/api/external/declarecustom.php?chapter=18_1" target="_blank" rel="noopener">报关接口</a>来报支付单.</p><h1 id="开发前的准备"><a href="#开发前的准备" class="headerlink" title="开发前的准备"></a>开发前的准备</h1><ol><li>采购一台实体<code>Window Server 2012R2</code>主机, 并要求能访问外网.</li><li>阅读<a href="http://www.chinaport.gov.cn/kfzq/xyhdh/index.htm" target="_blank" rel="noopener">新用户导航</a>, 弄到一张<strong>法人卡</strong>和<strong>操作员卡</strong>, 实际上就是两个<code>U盘</code>.</li><li>获取海关技术人员<a href="http://www.chinaport.gov.cn/gg/zgdzkasjzx/18400.htm" target="_blank" rel="noopener">联系方式</a>, 要求加入微信联调群.</li><li>准备最长两个月的开发对接时间</li></ol><h1 id="改造支付接口"><a href="#改造支付接口" class="headerlink" title="改造支付接口"></a>改造支付接口</h1><p>根据<a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号.doc</a> 第<code>3.5</code>节, 我们需要保留微信支付的原始请求体<code>initalRequest</code>和原始响应体<code>initalResponse</code>.<br>微信支付的请求体和响应体是<code>xml</code>格式的, 那就直接塞进数据库保存起来就好了, 以后再根据订单号取出来.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id      订单id        请求体xml      响应体xml</span><br><span class="line">1       ORDER-1      &lt;xml&gt;&lt;/xml&gt;   &lt;xml&gt;&lt;/xml&gt;</span><br><span class="line">2       ORDER-2      &lt;xml&gt;&lt;/xml&gt;   &lt;xml&gt;&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><h1 id="注册测试环境"><a href="#注册测试环境" class="headerlink" title="注册测试环境"></a>注册测试环境</h1><p>假设现在你已经拿到了<strong>操作员卡</strong>.</p><p>跟着<a href="https://www.cnblogs.com/whtydn/p/10220209.html" target="_blank" rel="noopener">海关 实时数据 企业联调接口 开发步骤与概要 第四步</a>做, 这是为了拿到证书.<br>要注意的有几点</p><ol><li>安装海关控件, 必须先安装<code>.net framework 3.5</code>.</li><li>初始密码一般是<code>88888888</code>, 密码错误多次会锁卡.</li><li>证书一定是<strong>读取证书</strong>那个方框里的, 不要把<strong>证书序列号</strong>也复制进去.</li><li>证书保存完毕后, 双击打开, 可以看到证书信息, 确认公司名和法人名没错后, 就可以了.</li></ol><p>得到证书和证书序列号后, 联系海关微信联调群里的陈书宾, 注册测试环境, 将相关信息提供给他.<br>目前需要以下资料</p><ol><li>证书</li><li>证书序列号</li><li>电商平台代码</li><li>电商企业名称</li><li>联系人</li><li>联系人电话</li></ol><h1 id="在测试环境进行验签"><a href="#在测试环境进行验签" class="headerlink" title="在测试环境进行验签"></a>在测试环境进行验签</h1><p>请务必在完成<strong>注册测试环境</strong>步骤后, 保持<strong>操作员卡</strong>插在自己电脑的状态.<br>我们可以在微信联调群拿到一个<code>html+js加签工具.rar</code>, 海关文档只提供了<code>js</code>版的<code>websocket</code>加签客户端. 这个<code>html</code>的应该是其他热心企业提供的.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">Content-Type</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">./json2.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">"./client.js?d=2018-12-19_16:00:00"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://unpkg.com/axios/dist/axios.min.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">https://cdn.jsdelivr.net/npm/vue@2.6.8/dist/vue.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span>&gt;</span><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">SignDataAsPem</span>(<span class="params"></span>)</span>&#123;EportClient.isInstalledTest(EportClient.cusSpcSignDataAsPEM,<span class="built_in">document</span>.getElementById(<span class="string">"txt1"</span>).value,<span class="string">"88888888"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(t)),<span class="built_in">document</span>.getElementById(<span class="string">"txt2"</span>).value=<span class="built_in">JSON</span>.stringify(t)&#125;)&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">vue-app</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>轮询加签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">startReq()</span>&gt;</span>开始轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">stopReq()</span>&gt;</span>停止轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"list.length &gt; 0"</span>&gt;</span>数据加签中...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>空闲...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">index</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>加签记录:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in responseList"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>手动加签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">30</span> <span class="attr">cols</span>=<span class="string">60</span> <span class="attr">id</span>=<span class="string">txt1</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">30</span> <span class="attr">cols</span>=<span class="string">60</span> <span class="attr">id</span>=<span class="string">txt2</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">SignDataAsPem()</span>&gt;</span>加签<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=e.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">o,a</span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">var</span> s=t[o](a),u=s.value&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="keyword">void</span> n(e)&#125;<span class="keyword">if</span>(!s.done)<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(u).then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;r(<span class="string">"next"</span>,e)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;r(<span class="string">"throw"</span>,e)&#125;);e(u)&#125;<span class="keyword">return</span> r(<span class="string">"next"</span>)&#125;)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">SignDataToAsPem</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">console</span>.log(e),<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">n,r</span>)</span>&#123;EportClient.isInstalledTest(EportClient.cusSpcSignDataAsPEM,t,<span class="string">"88888888"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t,o</span>)</span>&#123;<span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="keyword">void</span> r(<span class="string">"error"</span>);doResponse(&#123;<span class="attr">asin</span>:t.Data[<span class="number">0</span>],<span class="attr">orderNo</span>:e&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;va.responseList.push(<span class="string">"订单"</span>+e+<span class="string">": "</span>+t.data),n()&#125;)&#125;)&#125;)&#125;<span class="keyword">var</span> timeout=<span class="number">4e3</span>,status=<span class="number">1</span>,doRequest=<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="keyword">this</span>;<span class="keyword">return</span> axios.post(<span class="string">"http://xxxxxxxx/oms/custom/lunxun"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=_asyncToGenerator(regeneratorRuntime.mark(<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r</span>)</span>&#123;<span class="keyword">var</span> o,a,s,u,i,c,f,p=r.data;<span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">for</span>(;;)<span class="keyword">switch</span>(t.prev=t.next)&#123;<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">if</span>(o=<span class="built_in">Object</span>.keys(p),!(o.length&gt;<span class="number">0</span>&amp;&amp;<span class="string">"error"</span>!==o[<span class="number">0</span>]))&#123;t.next=<span class="number">29</span>;<span class="keyword">break</span>&#125;o.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;va.list.push(&#123;<span class="attr">key</span>:e,<span class="attr">text</span>:p[e]&#125;)&#125;),a=!<span class="number">0</span>,s=!<span class="number">1</span>,u=<span class="keyword">void</span> <span class="number">0</span>,t.prev=<span class="number">6</span>,i=va.list[<span class="built_in">Symbol</span>.iterator]();<span class="keyword">case</span> <span class="number">8</span>:<span class="keyword">if</span>(a=(c=i.next()).done)&#123;t.next=<span class="number">15</span>;<span class="keyword">break</span>&#125;<span class="keyword">return</span> f=c.value,t.next=<span class="number">12</span>,SignDataToAsPem(f.key,f.text);<span class="keyword">case</span> <span class="number">12</span>:a=!<span class="number">0</span>,t.next=<span class="number">8</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">15</span>:t.next=<span class="number">21</span>;<span class="keyword">break</span>;<span class="keyword">case</span> <span class="number">17</span>:t.prev=<span class="number">17</span>,t.t0=t.catch(<span class="number">6</span>),s=!<span class="number">0</span>,u=t.t0;<span class="keyword">case</span> <span class="number">21</span>:t.prev=<span class="number">21</span>,t.prev=<span class="number">22</span>,!a&amp;&amp;i.return&amp;&amp;i.return();<span class="keyword">case</span> <span class="number">24</span>:<span class="keyword">if</span>(t.prev=<span class="number">24</span>,!s)&#123;t.next=<span class="number">27</span>;<span class="keyword">break</span>&#125;<span class="keyword">throw</span> u;<span class="keyword">case</span> <span class="number">27</span>:<span class="keyword">return</span> t.finish(<span class="number">24</span>);<span class="keyword">case</span> <span class="number">28</span>:<span class="keyword">return</span> t.finish(<span class="number">21</span>);<span class="keyword">case</span> <span class="number">29</span>:va.list=[],status&amp;&amp;setTimeout(e,timeout);<span class="keyword">case</span> <span class="number">31</span>:<span class="keyword">case</span><span class="string">"end"</span>:<span class="keyword">return</span> t.stop()&#125;&#125;,n,t,[[<span class="number">6</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">29</span>],[<span class="number">22</span>,,<span class="number">24</span>,<span class="number">28</span>]])&#125;));<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> n.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)&#125;&#125;())&#125;,doResponse=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> axios(&#123;<span class="attr">method</span>:<span class="string">"post"</span>,<span class="attr">url</span>:<span class="string">"http://xxxxxxx/oms/custom/callback"</span>,<span class="attr">data</span>:e,<span class="attr">transformRequest</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">""</span>;<span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> e)t+=<span class="built_in">encodeURIComponent</span>(n)+<span class="string">"="</span>+<span class="built_in">encodeURIComponent</span>(e[n])+<span class="string">"&amp;"</span>;<span class="keyword">return</span> t&#125;],<span class="attr">headers</span>:&#123;<span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;&#125;)&#125;,stopReq=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;status=<span class="number">0</span>&#125;,startReq=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;status=<span class="number">1</span>,doRequest()&#125;,va=<span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>:<span class="string">"#vue-app"</span>,<span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>&#123;<span class="attr">list</span>:[],<span class="attr">responseList</span>:[]&#125;&#125;&#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document,navigator</span>)</span>&#123;<span class="keyword">var</span> installlerUrl;<span class="keyword">var</span> swVersionScript=<span class="string">"https://app.singlewindow.cn/sat/swVersion.js"</span>;<span class="keyword">if</span>(!<span class="built_in">window</span>.SwVersion)&#123;<span class="keyword">var</span> onloadFunc=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> jsDom=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>);jsDom.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);jsDom.setAttribute(<span class="string">"src"</span>,swVersionScript+<span class="string">"?d="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());<span class="built_in">document</span>.body.appendChild(jsDom);installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(!installlerUrl)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c installlerUrl地址为:"</span>+installlerUrl,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;&#125;,<span class="number">3000</span>)&#125;&#125;;<span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;<span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>,onloadFunc,<span class="literal">false</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;<span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>,onloadFunc)&#125;<span class="keyword">else</span>&#123;<span class="built_in">window</span>.onload=onloadFunc&#125;&#125;&#125;<span class="keyword">if</span>(!installlerUrl)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;installlerUrl=<span class="built_in">window</span>.SwVersion&amp;&amp;<span class="built_in">window</span>.SwVersion.getIkeyDownloadUrl();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c installlerUrl地址为:"</span>+installlerUrl,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;&#125;,<span class="number">3000</span>)&#125;<span class="keyword">var</span> DefaultType=<span class="string">"iKey"</span>;<span class="keyword">var</span> toJson=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;<span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(obj)&#125;<span class="keyword">else</span>&#123;alert(<span class="string">"JSON转换错误!"</span>);<span class="keyword">return</span> <span class="literal">null</span>&#125;&#125;;<span class="keyword">var</span> jsonToObj=<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(text)&#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"("</span>+text+<span class="string">")"</span>)&#125;&#125;;<span class="keyword">var</span> getGuid=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> s4=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>(((<span class="number">1</span>+<span class="built_in">Math</span>.random())*<span class="number">65536</span>)|<span class="number">0</span>).toString(<span class="number">16</span>).substring(<span class="number">1</span>)&#125;;<span class="keyword">return</span>(s4()+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+<span class="string">"-"</span>+s4()+s4()+s4())&#125;;<span class="keyword">var</span> splitStrData=<span class="function"><span class="keyword">function</span>(<span class="params">dataStr</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> dataStr!==<span class="string">"string"</span>)&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"数据类型错误"</span>)&#125;<span class="keyword">var</span> MaxLength=<span class="number">120</span>*<span class="number">1024</span>;<span class="keyword">var</span> byteCount=<span class="number">0</span>,p=<span class="number">0</span>;<span class="keyword">var</span> rst=[];<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;dataStr.length;i++)&#123;<span class="keyword">var</span> _escape=<span class="built_in">escape</span>(dataStr.charAt(i));byteCount=byteCount+((_escape.length&gt;=<span class="number">4</span>&amp;&amp;_escape.charAt(<span class="number">0</span>)===<span class="string">"%"</span>&amp;&amp;_escape.charAt(<span class="number">1</span>)===<span class="string">"u"</span>)?<span class="number">3</span>:<span class="number">1</span>);<span class="keyword">if</span>(byteCount&gt;MaxLength<span class="number">-3</span>)&#123;rst.push(dataStr.substring(p,i+<span class="number">1</span>));p=i+<span class="number">1</span>;byteCount=<span class="number">0</span>&#125;&#125;<span class="keyword">if</span>(p!==dataStr.length)&#123;rst.push(dataStr.substring(p))&#125;<span class="keyword">return</span> rst&#125;;<span class="keyword">var</span> getDataHeader=<span class="function"><span class="keyword">function</span>(<span class="params">checkCode,blockCheckCode,size,currsize,blockCount,blockGuid,blockNum</span>)</span>&#123;<span class="keyword">var</span> rst=<span class="string">"BLOCKTXT"</span>;rst+=equilongString(checkCode,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(blockCheckCode,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(size,<span class="number">16</span>,<span class="string">"0"</span>);rst+=equilongString(currsize,<span class="number">8</span>,<span class="string">"0"</span>);rst+=equilongString(blockCount,<span class="number">4</span>,<span class="string">"0"</span>);rst+=equilongString(blockGuid,<span class="number">36</span>,<span class="string">"0"</span>);rst+=equilongString(blockNum,<span class="number">4</span>,<span class="string">"0"</span>);rst+=<span class="string">"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</span>;<span class="keyword">return</span> rst.substring(<span class="number">0</span>,<span class="number">128</span>)&#125;;<span class="keyword">var</span> equilongString=<span class="function"><span class="keyword">function</span>(<span class="params">str,length,prefix</span>)</span>&#123;<span class="keyword">if</span>(!str)&#123;str=<span class="string">""</span>&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> str!==<span class="string">"string"</span>)&#123;str=str+<span class="string">""</span>&#125;<span class="keyword">if</span>(!prefix)&#123;prefix=<span class="string">"0"</span>&#125;<span class="keyword">var</span> diff=length-str.length;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;diff;i++)&#123;str=prefix+str&#125;<span class="keyword">return</span> str&#125;;<span class="keyword">var</span> isIE6789=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> version=(!!navigator.appVersion)?navigator.appVersion.split(<span class="string">";"</span>):[];<span class="keyword">var</span> trim_Version=(version.length&gt;<span class="number">1</span>)?version[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>):<span class="string">""</span>;<span class="keyword">return</span> navigator.appName===<span class="string">"Microsoft Internet Explorer"</span>&amp;&amp;(trim_Version===<span class="string">"MSIE6.0"</span>||trim_Version===<span class="string">"MSIE7.0"</span>||trim_Version===<span class="string">"MSIE8.0"</span>||trim_Version===<span class="string">"MSIE9.0"</span>)&#125;;<span class="keyword">if</span>(!<span class="built_in">window</span>.WebSocket&amp;&amp;isIE6789())&#123;WebSocket=<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;<span class="keyword">this</span>.activeXObject=<span class="keyword">new</span> ActiveXObject(<span class="string">"snsoft.WebSocket"</span>);<span class="keyword">var</span> _self=<span class="keyword">this</span>,ax=<span class="keyword">this</span>.activeXObject;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ax.websocketOpen(_self,url)&#125;,<span class="number">0</span>)&#125;;WebSocket.prototype=&#123;<span class="attr">_callback</span>:<span class="function"><span class="keyword">function</span>(<span class="params">call,ev</span>)</span>&#123;<span class="keyword">var</span> f;<span class="keyword">if</span>(<span class="keyword">typeof</span>(f=<span class="keyword">this</span>[call])===<span class="string">"function"</span>)&#123;f.call(<span class="keyword">this</span>,ev)&#125;&#125;,<span class="attr">getReadyState</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.activeXObject.getReadyState((type||DefaultType))&#125;,<span class="attr">send</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="keyword">this</span>.activeXObject.websocketSendText(data)&#125;,<span class="attr">close</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.activeXObject.websocketClose()&#125;&#125;&#125;<span class="keyword">var</span> ws;<span class="keyword">var</span> conn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(!ws||getWebSocketReadyState(ws)===<span class="number">2</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;<span class="keyword">try</span>&#123;<span class="keyword">var</span> websocketurl=((!!<span class="built_in">window</span>.location)&amp;&amp;<span class="built_in">window</span>.location.protocol===<span class="string">"http:"</span>)?<span class="string">"ws://127.0.0.1:61232"</span>:<span class="string">"wss://wss.singlewindow.cn:61231"</span>;<span class="keyword">var</span> websocketurl=<span class="literal">true</span>?<span class="string">"ws://127.0.0.1:61232"</span>:<span class="string">"wss://wss.singlewindow.cn:61231"</span>;<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 使用"</span>+websocketurl+<span class="string">"连接控件服务"</span>,<span class="string">"color:#1941EC;font-size:12px"</span>)&#125;ws=<span class="keyword">new</span> WebSocket(websocketurl);ws.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">if</span>(e.data.charAt(<span class="number">0</span>)===<span class="string">"&#123;"</span>)&#123;<span class="keyword">var</span> msg=jsonToObj(e.data);<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="keyword">var</span> errMsg=<span class="string">"调用"</span>+msg[<span class="string">"_method"</span>]+<span class="string">"方法已返回, Result="</span>+(msg[<span class="string">"_args"</span>]&amp;&amp;msg[<span class="string">"_args"</span>].Result);<span class="keyword">var</span> errStyle=<span class="string">"color:#1941EC;font-size:12px"</span>;<span class="keyword">if</span>(!(msg[<span class="string">"_args"</span>]&amp;&amp;msg[<span class="string">"_args"</span>].Result))&#123;errMsg+=<span class="string">", CallbackInfos="</span>+e.data;errStyle=<span class="string">"color:#D94E34;font-size:14px"</span>&#125;<span class="built_in">window</span>.console.log(<span class="string">"%c "</span>+errMsg,errStyle)&#125;<span class="keyword">if</span>(callbacks[msg[<span class="string">"_method"</span>]])&#123;callbacks[msg[<span class="string">"_method"</span>]](msg[<span class="string">"_args"</span>],e.data)&#125;&#125;<span class="keyword">else</span>&#123;alert(<span class="string">"数据格式非法:"</span>+e.data)&#125;&#125;&#125;<span class="keyword">catch</span>(ex)&#123;<span class="keyword">if</span>(<span class="built_in">console</span>&amp;&amp;<span class="built_in">console</span>.log)&#123;<span class="built_in">console</span>.log(ex)&#125;&#125;&#125;<span class="keyword">return</span> ws&#125;;ws=conn();<span class="keyword">var</span> callbacks=&#123;&#125;;<span class="keyword">var</span> blockData=&#123;&#125;;<span class="keyword">var</span> sendMessage=<span class="function"><span class="keyword">function</span>(<span class="params">msg,callback</span>)</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">1</span>)&#123;ws.send(msg)&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> times=<span class="number">0</span>;<span class="keyword">var</span> waitForWebSocketConn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(times&gt;<span class="number">9</span>)&#123;callback(&#123;<span class="attr">Result</span>:<span class="literal">false</span>,<span class="attr">Data</span>:[],<span class="attr">Error</span>:[<span class="string">"连接客户端控件服务失败,请重试."</span>,<span class="string">"Err:Base60408"</span>]&#125;);</span><br><span class="line">conn()&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">1</span>)&#123;ws.send(msg)&#125;<span class="keyword">else</span>&#123;times++;waitForWebSocketConn()&#125;&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">2</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;times++;conn()&#125;&#125;&#125;&#125;;waitForWebSocketConn()&#125;&#125;;callbacks._nextBlock=<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;<span class="keyword">var</span> guid=args.Data[<span class="number">0</span>][<span class="string">"guid"</span>];<span class="keyword">if</span>(args.Data[<span class="number">0</span>][<span class="string">"finish"</span>])&#123;<span class="keyword">if</span>(blockData[guid])&#123;<span class="keyword">delete</span> blockData[guid]&#125;&#125;<span class="keyword">else</span>&#123;conn();<span class="keyword">var</span> next=args.Data[<span class="number">0</span>][<span class="string">"next"</span>];<span class="keyword">var</span> blockObj=blockData[guid];<span class="keyword">if</span>(!args.Result)&#123;<span class="keyword">var</span> retry=blockObj[<span class="string">"retry"</span>]||<span class="number">0</span>;retry=retry+<span class="number">1</span>;blockObj[<span class="string">"retry"</span>]=retry;<span class="keyword">if</span>(retry&gt;blockObj.block.length*<span class="number">3</span>)&#123;alert(<span class="string">"数据接收错误!"</span>)&#125;&#125;<span class="keyword">var</span> currData=blockObj.block[next];<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(currData);<span class="keyword">var</span> pakHeaser=getDataHeader(blockObj[<span class="string">"checkcode"</span>],blockCheckCode,blockObj[<span class="string">"totalLength"</span>],currData.length,blockObj.block.length,guid,next);<span class="keyword">var</span> msg=pakHeaser+currData;sendMessage(msg)&#125;&#125;;<span class="keyword">var</span> DIGEST=&#123;&#125;;DIGEST._auchCRCHi=[<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">65</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">129</span>,<span class="number">64</span>];DIGEST._auchCRCLo=[<span class="number">0</span>,<span class="number">192</span>,<span class="number">193</span>,<span class="number">1</span>,<span class="number">195</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">194</span>,<span class="number">198</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">199</span>,<span class="number">5</span>,<span class="number">197</span>,<span class="number">196</span>,<span class="number">4</span>,<span class="number">204</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">205</span>,<span class="number">15</span>,<span class="number">207</span>,<span class="number">206</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">202</span>,<span class="number">203</span>,<span class="number">11</span>,<span class="number">201</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">200</span>,<span class="number">216</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">217</span>,<span class="number">27</span>,<span class="number">219</span>,<span class="number">218</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">222</span>,<span class="number">223</span>,<span class="number">31</span>,<span class="number">221</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">220</span>,<span class="number">20</span>,<span class="number">212</span>,<span class="number">213</span>,<span class="number">21</span>,<span class="number">215</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">214</span>,<span class="number">210</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">211</span>,<span class="number">17</span>,<span class="number">209</span>,<span class="number">208</span>,<span class="number">16</span>,<span class="number">240</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">241</span>,<span class="number">51</span>,<span class="number">243</span>,<span class="number">242</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">246</span>,<span class="number">247</span>,<span class="number">55</span>,<span class="number">245</span>,<span class="number">53</span>,<span class="number">52</span>,<span class="number">244</span>,<span class="number">60</span>,<span class="number">252</span>,<span class="number">253</span>,<span class="number">61</span>,<span class="number">255</span>,<span class="number">63</span>,<span class="number">62</span>,<span class="number">254</span>,<span class="number">250</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">251</span>,<span class="number">57</span>,<span class="number">249</span>,<span class="number">248</span>,<span class="number">56</span>,<span class="number">40</span>,<span class="number">232</span>,<span class="number">233</span>,<span class="number">41</span>,<span class="number">235</span>,<span class="number">43</span>,<span class="number">42</span>,<span class="number">234</span>,<span class="number">238</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">239</span>,<span class="number">45</span>,<span class="number">237</span>,<span class="number">236</span>,<span class="number">44</span>,<span class="number">228</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">229</span>,<span class="number">39</span>,<span class="number">231</span>,<span class="number">230</span>,<span class="number">38</span>,<span class="number">34</span>,<span class="number">226</span>,<span class="number">227</span>,<span class="number">35</span>,<span class="number">225</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">224</span>,<span class="number">160</span>,<span class="number">96</span>,<span class="number">97</span>,<span class="number">161</span>,<span class="number">99</span>,<span class="number">163</span>,<span class="number">162</span>,<span class="number">98</span>,<span class="number">102</span>,<span class="number">166</span>,<span class="number">167</span>,<span class="number">103</span>,<span class="number">165</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">164</span>,<span class="number">108</span>,<span class="number">172</span>,<span class="number">173</span>,<span class="number">109</span>,<span class="number">175</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">174</span>,<span class="number">170</span>,<span class="number">106</span>,<span class="number">107</span>,<span class="number">171</span>,<span class="number">105</span>,<span class="number">169</span>,<span class="number">168</span>,<span class="number">104</span>,<span class="number">120</span>,<span class="number">184</span>,<span class="number">185</span>,<span class="number">121</span>,<span class="number">187</span>,<span class="number">123</span>,<span class="number">122</span>,<span class="number">186</span>,<span class="number">190</span>,<span class="number">126</span>,<span class="number">127</span>,<span class="number">191</span>,<span class="number">125</span>,<span class="number">189</span>,<span class="number">188</span>,<span class="number">124</span>,<span class="number">180</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">181</span>,<span class="number">119</span>,<span class="number">183</span>,<span class="number">182</span>,<span class="number">118</span>,<span class="number">114</span>,<span class="number">178</span>,<span class="number">179</span>,<span class="number">115</span>,<span class="number">177</span>,<span class="number">113</span>,<span class="number">112</span>,<span class="number">176</span>,<span class="number">80</span>,<span class="number">144</span>,<span class="number">145</span>,<span class="number">81</span>,<span class="number">147</span>,<span class="number">83</span>,<span class="number">82</span>,<span class="number">146</span>,<span class="number">150</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">151</span>,<span class="number">85</span>,<span class="number">149</span>,<span class="number">148</span>,<span class="number">84</span>,<span class="number">156</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">157</span>,<span class="number">95</span>,<span class="number">159</span>,<span class="number">158</span>,<span class="number">94</span>,<span class="number">90</span>,<span class="number">154</span>,<span class="number">155</span>,<span class="number">91</span>,<span class="number">153</span>,<span class="number">89</span>,<span class="number">88</span>,<span class="number">152</span>,<span class="number">136</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">137</span>,<span class="number">75</span>,<span class="number">139</span>,<span class="number">138</span>,<span class="number">74</span>,<span class="number">78</span>,<span class="number">142</span>,<span class="number">143</span>,<span class="number">79</span>,<span class="number">141</span>,<span class="number">77</span>,<span class="number">76</span>,<span class="number">140</span>,<span class="number">68</span>,<span class="number">132</span>,<span class="number">133</span>,<span class="number">69</span>,<span class="number">135</span>,<span class="number">71</span>,<span class="number">70</span>,<span class="number">134</span>,<span class="number">130</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">131</span>,<span class="number">65</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">64</span>];DIGEST.CheckCode=<span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>)</span>&#123;<span class="keyword">var</span> hi=<span class="number">255</span>;<span class="keyword">var</span> lo=<span class="number">255</span>;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;buffer.length;i++)&#123;<span class="keyword">var</span> idx=<span class="number">255</span>&amp;(hi^buffer.charCodeAt(i));hi=(lo^DIGEST._auchCRCHi[idx]);lo=DIGEST._auchCRCLo[idx]&#125;<span class="keyword">return</span> DIGEST.padLeft((hi&lt;&lt;<span class="number">8</span>|lo).toString(<span class="number">16</span>).toUpperCase(),<span class="number">4</span>,<span class="string">"0"</span>)&#125;;DIGEST.padLeft=<span class="function"><span class="keyword">function</span>(<span class="params">s,w,pc</span>)</span>&#123;<span class="keyword">if</span>(pc===<span class="literal">undefined</span>)&#123;pc=<span class="string">"0"</span>&#125;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,c=w-s.length;i&lt;c;i++)&#123;s=pc+s&#125;<span class="keyword">return</span> s&#125;;<span class="keyword">var</span> id=<span class="number">0</span>;<span class="keyword">var</span> baseInvoke=<span class="function"><span class="keyword">function</span>(<span class="params">method,args,callback</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> args===<span class="string">"function"</span>)&#123;callback=args;args=&#123;&#125;&#125;conn();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 调用方法"</span>+method,<span class="string">"color:#95F065;font-size:12px"</span>)&#125;callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;args=args||&#123;&#125;;_data[<span class="string">"args"</span>]=args;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;sendMessage(s,callback)&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;sendMessage(s,callback)&#125;&#125;;<span class="keyword">var</span> baseInvokeByFrames=<span class="function"><span class="keyword">function</span>(<span class="params">method,args,callback</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> args===<span class="string">"function"</span>)&#123;callback=args;args=&#123;&#125;&#125;conn();<span class="keyword">if</span>(<span class="built_in">window</span>.console&amp;&amp;<span class="built_in">window</span>.console.log)&#123;<span class="built_in">window</span>.console.log(<span class="string">"%c 调用方法"</span>+method,<span class="string">"color:#95F065;font-size:12px"</span>)&#125;callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;args=args||&#123;&#125;;_data[<span class="string">"args"</span>]=args;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">if</span>(getWebSocketReadyState(ws)===<span class="number">0</span>||getWebSocketReadyState(ws)===<span class="number">3</span>)&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;sendFrames(s,callback)&#125;,<span class="number">500</span>)&#125;<span class="keyword">else</span>&#123;sendFrames(s,callback)&#125;&#125;;<span class="keyword">var</span> sendFrames=<span class="function"><span class="keyword">function</span>(<span class="params">s,callback</span>)</span>&#123;<span class="keyword">var</span> checkCode=DIGEST.CheckCode(s);<span class="keyword">var</span> guid=getGuid();<span class="keyword">while</span>(blockData[guid])&#123;guid=getGuid()&#125;<span class="keyword">var</span> splitData=splitStrData(s);blockData[guid]=&#123;<span class="attr">checkcode</span>:checkCode,<span class="attr">totalLength</span>:s.length,<span class="attr">retry</span>:<span class="number">0</span>,<span class="attr">block</span>:splitData&#125;;<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(splitData[<span class="number">0</span>]);<span class="keyword">var</span> pakHeaser=getDataHeader(checkCode,blockCheckCode,s.length,splitData[<span class="number">0</span>].length,splitData.length,guid,<span class="number">0</span>);<span class="keyword">var</span> msg=pakHeaser+splitData[<span class="number">0</span>];sendMessage(msg,callback)&#125;;<span class="keyword">var</span> getWebSocketReadyState=<span class="function"><span class="keyword">function</span>(<span class="params">thisWs</span>)</span>&#123;<span class="keyword">var</span> currWs=thisWs||conn();<span class="keyword">if</span>(!currWs)&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;<span class="keyword">if</span>(currWs.readyState!==<span class="literal">undefined</span>)&#123;<span class="keyword">return</span> currWs.readyState&#125;<span class="keyword">if</span>(currWs.getReadyState)&#123;<span class="keyword">return</span> currWs.getReadyState()&#125;<span class="keyword">return</span> <span class="number">0</span>&#125;;<span class="built_in">window</span>.EportClient=&#123;<span class="attr">isInstalled</span>:<span class="function"><span class="keyword">function</span>(<span class="params">type,callback,currInstalllerUrl</span>)</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> type===<span class="string">"function"</span>)&#123;<span class="keyword">if</span>(callback)&#123;currInstalllerUrl=callback&#125;callback=type;type=DefaultType&#125;ws=conn();<span class="keyword">var</span> bInstalled=getWebSocketReadyState(ws)===<span class="number">1</span>;<span class="keyword">var</span> retryConut=<span class="number">0</span>;<span class="function"><span class="keyword">function</span> <span class="title">retry</span>(<span class="params"></span>)</span>&#123;retryConut++;ws=conn();bInstalled=getWebSocketReadyState(ws)===<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!bInstalled)&#123;<span class="keyword">if</span>(retryConut&lt;<span class="number">3</span>)&#123;setTimeout(retry,<span class="number">1500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(retryConut===<span class="number">3</span>)&#123;<span class="keyword">var</span> iframeDom=<span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);iframeDom.style.cssText=<span class="string">"width:1px;height:1px;position:fixed;top:0;left:0;display:none;"</span>;iframeDom.src=<span class="string">"singlewindow://Restart"</span>;<span class="built_in">document</span>.body.appendChild(iframeDom);setTimeout(retry,<span class="number">2500</span>)&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> errMsg=<span class="string">"检测到您未安装"</span>+type+<span class="string">"客户端! "</span>+type+<span class="string">"下载地址为:"</span>+currInstalllerUrl||installlerUrl||<span class="built_in">window</span>.installlerUrl;<span class="keyword">if</span>(callback)&#123;callback(&#123;<span class="string">"Result"</span>:<span class="literal">false</span>,<span class="string">"Data"</span>:[],<span class="string">"Error"</span>:[errMsg]&#125;)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.console)&#123;<span class="built_in">window</span>.console.log(errMsg)&#125;&#125;&#125;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">var</span> okMsg=<span class="string">"已经安装了"</span>+type+<span class="string">"客户端."</span>;<span class="keyword">if</span>(callback)&#123;callback(&#123;<span class="string">"Result"</span>:<span class="literal">true</span>,<span class="string">"Data"</span>:[okMsg],<span class="string">"Error"</span>:[]&#125;)&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="built_in">window</span>.console)&#123;<span class="built_in">window</span>.console.log(okMsg)&#125;&#125;&#125;&#125;retry()&#125;,<span class="attr">isInstalledTest</span>:<span class="function"><span class="keyword">function</span>(<span class="params">func,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10</span>)</span>&#123;<span class="keyword">if</span>(!func)&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"未知的JS的function,请检查调用isInstalledTest传入的第一个参数是否存在该函数."</span>)&#125;EportClient.isInstalled(DefaultType,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;<span class="keyword">if</span>(msg.Result)&#123;<span class="keyword">if</span>(func&amp;&amp;(<span class="keyword">typeof</span> func)===<span class="string">"function"</span>)&#123;func.call(<span class="literal">null</span>,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)&#125;<span class="keyword">else</span>&#123;alert(msg.Data[<span class="number">0</span>])&#125;&#125;<span class="keyword">else</span>&#123;alertErrMsg(msg)&#125;&#125;,installlerUrl||<span class="built_in">window</span>.installlerUrl)&#125;,<span class="attr">cusSpcSignDataAsPEM</span>:<span class="function"><span class="keyword">function</span>(<span class="params">inData,passwd,callback</span>)</span>&#123;baseInvoke(<span class="string">"cus-sec_SpcSignDataAsPEM"</span>,(!!passwd)?&#123;<span class="string">"inData"</span>:inData,<span class="string">"passwd"</span>:passwd&#125;:&#123;<span class="string">"inData"</span>:inData&#125;,callback)&#125;,<span class="attr">swcLogin</span>:<span class="function"><span class="keyword">function</span>(<span class="params">passwd,callback</span>)</span>&#123;baseInvoke(<span class="string">"swc_security_login"</span>,&#123;<span class="string">"passwd"</span>:passwd&#125;,callback)&#125;,<span class="attr">swcPostData</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data,callback,method</span>)</span>&#123;conn();method=(method||<span class="string">"swc_postdata"</span>);callbacks[method]=callback;<span class="keyword">var</span> _data=&#123;<span class="string">"_method"</span>:method&#125;;_data[<span class="string">"_id"</span>]=id++;<span class="keyword">if</span>(<span class="keyword">typeof</span> data===<span class="string">"object"</span>)&#123;_data[<span class="string">"args"</span>]=toJson(data)&#125;<span class="keyword">else</span>&#123;_data[<span class="string">"args"</span>]=data&#125;<span class="keyword">var</span> s=toJson(_data);<span class="keyword">var</span> checkCode=DIGEST.CheckCode(s);<span class="keyword">var</span> guid=getGuid();<span class="keyword">while</span>(blockData[guid])&#123;guid=getGuid()&#125;<span class="keyword">var</span> splitData=splitStrData(s);<span class="keyword">if</span>(splitData.length&gt;<span class="number">1</span>)&#123;blockData[guid]=&#123;<span class="attr">checkcode</span>:checkCode,<span class="attr">totalLength</span>:s.length,<span class="attr">retry</span>:<span class="number">0</span>,<span class="attr">block</span>:splitData&#125;&#125;<span class="keyword">var</span> blockCheckCode=DIGEST.CheckCode(splitData[<span class="number">0</span>]);<span class="keyword">var</span> pakHeaser=getDataHeader(checkCode,blockCheckCode,s.length,splitData[<span class="number">0</span>].length,splitData.length,guid,<span class="number">0</span>);<span class="keyword">var</span> msg=pakHeaser+splitData[<span class="number">0</span>];sendMessage(msg)&#125;,<span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;;EportClient.data.prototype=&#123;<span class="attr">Execute</span>:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;<span class="keyword">var</span> d=toJson(<span class="keyword">this</span>);EportClient.swcPostData(d,callback)&#125;&#125;&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,navigator);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json2.js</span></span><br><span class="line"><span class="keyword">if</span>(navigator.appName==<span class="string">"Microsoft Internet Explorer"</span>&amp;&amp;(navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE6.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE7.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE8.0"</span>||navigator.appVersion.split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE9.0"</span>))&#123;<span class="built_in">JSON</span>=&#123;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>!==<span class="string">"object"</span>)&#123;<span class="built_in">JSON</span>=&#123;&#125;&#125;&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> rx_one=<span class="regexp">/^[\],:&#123;&#125;\s]*$/</span>;<span class="keyword">var</span> rx_two=<span class="regexp">/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)/g</span>;<span class="keyword">var</span> rx_three=<span class="regexp">/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span>;<span class="keyword">var</span> rx_four=<span class="regexp">/(?:^|:|,)(?:\s*\[)+/g</span>;<span class="keyword">var</span> rx_escapable=<span class="regexp">/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span>;<span class="keyword">var</span> rx_dangerous=<span class="regexp">/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span>;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span>(n&lt;<span class="number">10</span>)?<span class="string">"0"</span>+n:n&#125;<span class="function"><span class="keyword">function</span> <span class="title">this_value</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.valueOf()&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Date</span>.prototype.toJSON!==<span class="string">"function"</span>)&#123;<span class="built_in">Date</span>.prototype.toJSON=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">isFinite</span>(<span class="keyword">this</span>.valueOf())?(<span class="keyword">this</span>.getUTCFullYear()+<span class="string">"-"</span>+f(<span class="keyword">this</span>.getUTCMonth()+<span class="number">1</span>)+<span class="string">"-"</span>+f(<span class="keyword">this</span>.getUTCDate())+<span class="string">"T"</span>+f(<span class="keyword">this</span>.getUTCHours())+<span class="string">":"</span>+f(<span class="keyword">this</span>.getUTCMinutes())+<span class="string">":"</span>+f(<span class="keyword">this</span>.getUTCSeconds())+<span class="string">"Z"</span>):<span class="literal">null</span>&#125;;<span class="built_in">Boolean</span>.prototype.toJSON=this_value;<span class="built_in">Number</span>.prototype.toJSON=this_value;<span class="built_in">String</span>.prototype.toJSON=this_value&#125;<span class="keyword">var</span> gap;<span class="keyword">var</span> indent;<span class="keyword">var</span> meta;<span class="keyword">var</span> rep;<span class="function"><span class="keyword">function</span> <span class="title">quote</span>(<span class="params">string</span>)</span>&#123;rx_escapable.lastIndex=<span class="number">0</span>;<span class="keyword">return</span> rx_escapable.test(string)?<span class="string">'"'</span>+string.replace(rx_escapable,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">var</span> c=meta[a];<span class="keyword">return</span> <span class="keyword">typeof</span> c===<span class="string">"string"</span>?c:<span class="string">"\\u"</span>+(<span class="string">"0000"</span>+a.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-4</span>)&#125;)+<span class="string">'"'</span>:<span class="string">'"'</span>+string+<span class="string">'"'</span>&#125;<span class="function"><span class="keyword">function</span> <span class="title">str</span>(<span class="params">key,holder</span>)</span>&#123;<span class="keyword">var</span> i;<span class="keyword">var</span> k;<span class="keyword">var</span> v;<span class="keyword">var</span> length;<span class="keyword">var</span> mind=gap;<span class="keyword">var</span> partial;<span class="keyword">var</span> value=holder[key];<span class="keyword">if</span>(value&amp;&amp;<span class="keyword">typeof</span> value===<span class="string">"object"</span>&amp;&amp;<span class="keyword">typeof</span> value.toJSON===<span class="string">"function"</span>)&#123;value=value.toJSON(key)&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> rep===<span class="string">"function"</span>)&#123;value=rep.call(holder,key,value)&#125;<span class="keyword">switch</span>(<span class="keyword">typeof</span> value)&#123;<span class="keyword">case</span><span class="string">"string"</span>:<span class="keyword">return</span> quote(value);<span class="keyword">case</span><span class="string">"number"</span>:<span class="keyword">return</span>(<span class="built_in">isFinite</span>(value))?<span class="built_in">String</span>(value):<span class="string">"null"</span>;<span class="keyword">case</span><span class="string">"boolean"</span>:<span class="keyword">case</span><span class="string">"null"</span>:<span class="keyword">return</span> <span class="built_in">String</span>(value);<span class="keyword">case</span><span class="string">"object"</span>:<span class="keyword">if</span>(!value)&#123;<span class="keyword">return</span><span class="string">"null"</span>&#125;gap+=indent;partial=[];<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(value)===<span class="string">"[object Array]"</span>)&#123;length=value.length;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i+=<span class="number">1</span>)&#123;partial[i]=str(i,value)||<span class="string">"null"</span>&#125;v=partial.length===<span class="number">0</span>?<span class="string">"[]"</span>:gap?(<span class="string">"[\n"</span>+gap+partial.join(<span class="string">",\n"</span>+gap)+<span class="string">"\n"</span>+mind+<span class="string">"]"</span>):<span class="string">"["</span>+partial.join(<span class="string">","</span>)+<span class="string">"]"</span>;gap=mind;<span class="keyword">return</span> v&#125;<span class="keyword">if</span>(rep&amp;&amp;<span class="keyword">typeof</span> rep===<span class="string">"object"</span>)&#123;length=rep.length;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i+=<span class="number">1</span>)&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> rep[i]===<span class="string">"string"</span>)&#123;k=rep[i];v=str(k,value);<span class="keyword">if</span>(v)&#123;partial.push(quote(k)+((gap)?<span class="string">": "</span>:<span class="string">":"</span>)+v)&#125;&#125;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">for</span>(k <span class="keyword">in</span> value)&#123;<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(value,k))&#123;v=str(k,value);<span class="keyword">if</span>(v)&#123;partial.push(quote(k)+((gap)?<span class="string">": "</span>:<span class="string">":"</span>)+v)&#125;&#125;&#125;&#125;v=partial.length===<span class="number">0</span>?<span class="string">"&#123;&#125;"</span>:gap?<span class="string">"&#123;\n"</span>+gap+partial.join(<span class="string">",\n"</span>+gap)+<span class="string">"\n"</span>+mind+<span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>+partial.join(<span class="string">","</span>)+<span class="string">"&#125;"</span>;gap=mind;<span class="keyword">return</span> v&#125;&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.stringify!==<span class="string">"function"</span>)&#123;meta=&#123;<span class="string">"\b"</span>:<span class="string">"\\b"</span>,<span class="string">"\t"</span>:<span class="string">"\\t"</span>,<span class="string">"\n"</span>:<span class="string">"\\n"</span>,<span class="string">"\f"</span>:<span class="string">"\\f"</span>,<span class="string">"\r"</span>:<span class="string">"\\r"</span>,<span class="string">'"'</span>:<span class="string">'\\"'</span>,<span class="string">"\\"</span>:<span class="string">"\\\\"</span>&#125;;<span class="built_in">JSON</span>.stringify=<span class="function"><span class="keyword">function</span>(<span class="params">value,replacer,space</span>)</span>&#123;<span class="keyword">var</span> i;gap=<span class="string">""</span>;indent=<span class="string">""</span>;<span class="keyword">if</span>(<span class="keyword">typeof</span> space===<span class="string">"number"</span>)&#123;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;space;i+=<span class="number">1</span>)&#123;indent+=<span class="string">" "</span>&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(<span class="keyword">typeof</span> space===<span class="string">"string"</span>)&#123;indent=space&#125;&#125;rep=replacer;<span class="keyword">if</span>(replacer&amp;&amp;<span class="keyword">typeof</span> replacer!==<span class="string">"function"</span>&amp;&amp;(<span class="keyword">typeof</span> replacer!==<span class="string">"object"</span>||<span class="keyword">typeof</span> replacer.length!==<span class="string">"number"</span>))&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"JSON.stringify"</span>)&#125;<span class="keyword">return</span> str(<span class="string">""</span>,&#123;<span class="string">""</span>:value&#125;)&#125;&#125;<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.parse!==<span class="string">"function"</span>)&#123;<span class="built_in">JSON</span>.parse=<span class="function"><span class="keyword">function</span>(<span class="params">text,reviver</span>)</span>&#123;<span class="keyword">var</span> j;<span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">holder,key</span>)</span>&#123;<span class="keyword">var</span> k;<span class="keyword">var</span> v;<span class="keyword">var</span> value=holder[key];<span class="keyword">if</span>(value&amp;&amp;<span class="keyword">typeof</span> value===<span class="string">"object"</span>)&#123;<span class="keyword">for</span>(k <span class="keyword">in</span> value)&#123;<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(value,k))&#123;v=walk(value,k);<span class="keyword">if</span>(v!==<span class="literal">undefined</span>)&#123;value[k]=v&#125;<span class="keyword">else</span>&#123;<span class="keyword">delete</span> value[k]&#125;&#125;&#125;&#125;<span class="keyword">return</span> reviver.call(holder,key,value)&#125;text=<span class="built_in">String</span>(text);rx_dangerous.lastIndex=<span class="number">0</span>;<span class="keyword">if</span>(rx_dangerous.test(text))&#123;text=text.replace(rx_dangerous,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span>(<span class="string">"\\u"</span>+(<span class="string">"0000"</span>+a.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-4</span>))&#125;)&#125;<span class="keyword">if</span>(rx_one.test(text.replace(rx_two,<span class="string">"@"</span>).replace(rx_three,<span class="string">"]"</span>).replace(rx_four,<span class="string">""</span>)))&#123;j=<span class="built_in">eval</span>(<span class="string">"("</span>+text+<span class="string">")"</span>);<span class="keyword">return</span>(<span class="keyword">typeof</span> reviver===<span class="string">"function"</span>)?walk(&#123;<span class="string">""</span>:j&#125;,<span class="string">""</span>):j&#125;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"JSON.parse"</span>)&#125;&#125;&#125;());</span><br></pre></td></tr></table></figure><p>复制下面的加签原文, 应该就是将几个<code>json</code>字符串, 用<code>||</code>连接起来.<br>这些字段在<a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a>文件中有详细说明, 但是我们做测试随便填数据就行了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sessionID&quot;:&quot;ad2254-8hewyf32-556162449&quot;||&quot;payExchangeInfoHead&quot;:&quot;&#123;&quot;guid&quot;:&quot;9D55BA71-22DE-41F4-8B50-C36C83B3B530&quot;,&quot;initalRequest&quot;:&quot;原始请求&quot;,&quot;initalResponse&quot;:&quot;原始响应&quot;,&quot;ebpCode&quot;:&quot;4403169BVN&quot;,&quot;payCode&quot;:&quot;4403169D3W&quot;,&quot;payTransactionId&quot;:&quot;2018121222001354081010726129&quot;,&quot;totalAmount&quot;:100,&quot;currency&quot;:&quot;CNY&quot;,&quot;verDept&quot;:&quot;3&quot;,&quot;payType&quot;:&quot;1&quot;,&quot;tradingTime&quot;:&quot;20181212041803&quot;,&quot;note&quot;:&quot;批量订单，测试订单优化,生成多个so订单&quot;&#125;&quot;||&quot;payExchangeInfoLists&quot;:&quot;[&#123;&quot;orderNo&quot;:&quot;SO1710301150602574003&quot;,&quot;goodsInfo&quot;:[&#123;&quot;gname&quot;:&quot;lhy-gnsku2&quot;,&quot;itemLink&quot;:&quot;http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453&quot;&#125;],&quot;recpAccount&quot;:&quot;1234567&quot;,&quot;recpCode&quot;:&quot;7654321&quot;,&quot;recpName&quot;:&quot;我的公司&quot;&#125;]&quot;||&quot;serviceTime&quot;:&quot;1544519952469&quot;</span><br></pre></td></tr></table></figure></p><p>修改部分字段.</p><ol><li><code>ebpCode</code>: 你司的电商平台代码</li><li><code>payCode</code>: 支付企业的海关注册码, 如<a href="https://pay.weixin.qq.com/wiki/doc/api/external/declarecustom.php?chapter=18_1" target="_blank" rel="noopener">微信支付</a>的<code>4403169D3W</code></li></ol><p>然后粘贴到上面<code>html</code>进行<strong>手动加签</strong>, 得到以下数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;Result&quot;:true,&quot;Data&quot;:[&quot;BsA3cCpwsaYrFlwgkjccUGpPBNGni7CiP6F5SmCY8OWxw4xd1kwLWKwR69tSQHSmHmT2O07KYvzj5/N0NkWvoTvyNolQ822/jDTAMcrBPmv5xtu3FHEDYgdkB4sfdeu7EdyVeDWyMEPkT1n/7h80kxKerJzjQAB6HrxPSgLJ+MQ=&quot;,&quot;01304235&quot;],&quot;Error&quot;:[]&#125;</span><br></pre></td></tr></table></figure></p><p><code>Data</code>字段里第一个就是签名, 第二个是证书编号<br>然后将签名和证书编号复制, 拼接成以下<code>JSON</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sessionID&quot;:&quot;ad2254-8hewyf32-556162449&quot;,&quot;payExchangeInfoHead&quot;:&#123;&quot;guid&quot;:&quot;9D55BA71-22DE-41F4-8B50-C36C83B3B530&quot;,&quot;initalRequest&quot;:&quot;原始请求&quot;,&quot;initalResponse&quot;:&quot;原始响应&quot;,&quot;ebpCode&quot;:&quot;4403169BVN&quot;,&quot;payCode&quot;:&quot;4403169D3W&quot;,&quot;payTransactionId&quot;:&quot;2018121222001354081010726129&quot;,&quot;totalAmount&quot;:100,&quot;currency&quot;:&quot;CNY&quot;,&quot;verDept&quot;:&quot;3&quot;,&quot;payType&quot;:&quot;1&quot;,&quot;tradingTime&quot;:&quot;20181212041803&quot;,&quot;note&quot;:&quot;批量订单，测试订单优化,生成多个so订单&quot;&#125;,&quot;payExchangeInfoLists&quot;:[&#123;&quot;orderNo&quot;:&quot;SO1710301150602574003&quot;,&quot;goodsInfo&quot;:[&#123;&quot;gname&quot;:&quot;lhy-gnsku2&quot;,&quot;itemLink&quot;:&quot;http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453&quot;&#125;],&quot;recpAccount&quot;:&quot;1234567&quot;,&quot;recpCode&quot;:&quot;7654321&quot;,&quot;recpName&quot;:&quot;我的公司&quot;&#125;],&quot;serviceTime&quot;:&quot;1544519952469&quot;,&quot;certNo&quot;:&quot;01304235&quot;,&quot;signValue&quot;:&quot;VRx4eIXfQWItQNiJEkINMWKXMrjVGDFP/HkzqzZ7r+7IJcFK+pcHqZf+IS0PiIz29I2IsXXhV1Tg+3Tlq0fz4UjfsyPE1vEgqA51q3S/fGv4B1MlzS5KG1ETyB+FZaZegUQchK4vl4QGuSJqyi4QJ8b/eCa75KOyyNRm+wUsQtg=&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>然后发送给海关测试接口, 这里使用<code>OKHttp</code>做客户端.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String json = <span class="string">"&#123;\"sessionID\":\"ad2254-8hewyf32-556162449\",\"payExchangeInfoHead\":&#123;\"guid\":\"9D55BA71-22DE-41F4-8B50-C36C83B3B530\",\"initalRequest\":\"原始请求\",\"initalResponse\":\"原始响应\",\"ebpCode\":\"4403169BVN\",\"payCode\":\"4403169D3W\",\"payTransactionId\":\"2018121222001354081010726129\",\"totalAmount\":100,\"currency\":\"CNY\",\"verDept\":\"3\",\"payType\":\"1\",\"tradingTime\":\"20181212041803\",\"note\":\"批量订单，测试订单优化,生成多个so订单\"&#125;,\"payExchangeInfoLists\":[&#123;\"orderNo\":\"SO1710301150602574003\",\"goodsInfo\":[&#123;\"gname\":\"lhy-gnsku2\",\"itemLink\":\"http://m.yunjiweidian.com/yunjibuyer/static/vue-buyer/idc/index.html#/detail?itemId=999760&amp;shopId=453\"&#125;],\"recpAccount\":\"1234567\",\"recpCode\":\"7654321\",\"recpName\":\"我的公司\"&#125;],\"serviceTime\":\"1544519952469\",\"certNo\":\"01304235\",\"signValue\":\"VRx4eIXfQWItQNiJEkINMWKXMrjVGDFP/HkzqzZ7r+7IJcFK+pcHqZf+IS0PiIz29I2IsXXhV1Tg+3Tlq0fz4UjfsyPE1vEgqA51q3S/fGv4B1MlzS5KG1ETyB+FZaZegUQchK4vl4QGuSJqyi4QJ8b/eCa75KOyyNRm+wUsQtg=\"&#125;\n"</span>;</span><br><span class="line">        String encode = URLEncoder.encode(json, <span class="string">"UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        </span><br><span class="line">        MediaType mediaType = MediaType.parse(<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        RequestBody body = RequestBody.create(mediaType, <span class="string">"payExInfoStr="</span>+encode);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">              .url(<span class="string">"https://swapptest.singlewindow.cn/ceb2grab/grab/realTimeDataUpload"</span>)</span><br><span class="line">              .post(body)</span><br><span class="line">              .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">              .build();</span><br><span class="line">        </span><br><span class="line">        Response response = client.newCall(request).execute();</span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果返回<strong>上传成功</strong>, 那就说明验签通过了.</p><h2 id="上传失败-入库失败-java-sql-SQLException-ORA-00001-违反唯一约束条件-sessionID重复"><a href="#上传失败-入库失败-java-sql-SQLException-ORA-00001-违反唯一约束条件-sessionID重复" class="headerlink" title="上传失败,入库失败 java.sql.SQLException: ORA-00001: 违反唯一约束条件 (sessionID重复)"></a>上传失败,入库失败 java.sql.SQLException: ORA-00001: 违反唯一约束条件 (sessionID重复)</h2><p>这个只需要把<code>sessionID</code>随便改一下, 比如改成<code>ad2254-8hewyf32-556162450</code>, 然后重新加签即可.<br>海关没做校验, 应该就是给数据库加了个唯一索引.</p><h2 id="企业实时数据获取验签证书未在服务系统注册"><a href="#企业实时数据获取验签证书未在服务系统注册" class="headerlink" title="企业实时数据获取验签证书未在服务系统注册"></a>企业实时数据获取验签证书未在服务系统注册</h2><p>修改上面提到的<code>ebpCode</code>和<code>payCode</code>以及<strong>证书编号</strong>.<br>并确保<strong>证书编号</strong>小写.<br>再不行, 在海关微信联调群问.</p><h2 id="验签失败"><a href="#验签失败" class="headerlink" title="验签失败"></a>验签失败</h2><p>海关的验签规则很严格, 每个字段顺序都有要求, 错一个字符, 多一个<code>\n</code>都会导致验签失败.<br>因为加签原文和上传<code>JSON</code>是两种不同的数据类型, 所以耐心一个字符一个字符地对比.<br>特别是换行符<code>\n</code>这种不可见字符, 卡了我几个钟.</p><p>这种问题就不用去海关微信联调群问了, 肯定是自己问题.</p><h1 id="注册线上环境"><a href="#注册线上环境" class="headerlink" title="注册线上环境"></a>注册线上环境</h1><p>插入<strong>操作员卡</strong>后, 注意, 一定要<strong>操作员卡</strong>.<br>打开<a href="https://swapp.singlewindow.cn/deskserver/sw/deskIndex?menu_id=swcebimp" target="_blank" rel="noopener">中国国际贸易单一窗口</a><br><img src="/images/海关跨境申报流程165号和179号文档_01.png"><br>需要确保电商平台代码和电商平台名称这两个灰色的框框是有值的, 没有则去找海关企管科注册电商平台权限, 具体打海关电话<code>010-65194114</code>咨询.</p><p>还记得我们之前提供给海关的证书吗? 点击选择证书, 上传了. 证书编号记得小写.<br>之后就是注册服务地址, 填入<code>http://你的域名/项目前缀/platDataOpen</code>, 点击注册地址, 然后肯定注册失败的. 这个之后处理.</p><p>值得注意的是, 这个服务注册地址可以注册多个, 审核通过多个, 但是最终<strong>启用</strong>的只能有一个. </p><h1 id="配置实体加签主机"><a href="#配置实体加签主机" class="headerlink" title="配置实体加签主机"></a>配置实体加签主机</h1><p>有的企业是全部云主机, 会问能不能不要这个实体主机, 不可以, 因为我司现在也是全部云主机, 还是妥协弄了个实体主机.<br>我司用的是<code>Windows Server 2012 R2</code>.</p><p>和注册测试环境的步骤一样<br>值得注意的是, 一定要先手动安装<code>.net framework 3.5</code>, 一定要先手动安装<code>.net framework 3.5</code>.<br>否则海关提供的客户端安装程序可能会出现打不开的情况.</p><p>主要步骤就是</p><ol><li>安装<code>.net framework 3.5</code></li><li>安装海关提供的客户端</li><li>开放实体加签主机的<code>61231</code>和<code>61232</code>端口.</li><li>修改上面提供的<code>client.js</code>中的<code>ws://127.0.0.1:61232</code>为实体加签主机的外网<code>IP</code>.</li><li>在外网使用<code>html</code>进行加签.</li></ol><h1 id="编写-platDataOpen-逻辑"><a href="#编写-platDataOpen-逻辑" class="headerlink" title="编写 /platDataOpen 逻辑"></a>编写 /platDataOpen 逻辑</h1><p>我们之前注册了<code>http://你的域名/项目前缀/platDataOpen</code>地址, 但是没有实现这个接口.<br>下面是一个简单的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value=<span class="string">"/platDataOpen"</span> , headers=<span class="string">"content-type=application/x-www-form-urlencoded"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">platDataOpen</span><span class="params">(@RequestParam String openReq)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        openReq = StringUtils.replace(openReq, <span class="string">"&amp;quot;"</span>, <span class="string">"\""</span>);</span><br><span class="line">        JSONObject json = JSONObject.parseObject(openReq);</span><br><span class="line">        String orderNo = json.getString(<span class="string">"orderNo"</span>);</span><br><span class="line">        String sessionID = json.getString(<span class="string">"sessionID"</span>);</span><br><span class="line">        Long serviceTime = json.getLong(<span class="string">"serviceTime"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 海关调用此接口, 返回特定格式的json数据</span></span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 上报海关, 这里是异步操作 @Async</span></span><br><span class="line">        String testUrl      = <span class="string">"https://swapptest.singlewindow.cn/ceb2grab/grab/realTimeDataUpload"</span>;</span><br><span class="line"><span class="comment">//        String onlineUrl    = "https://customs.chinaport.gov.cn/ceb2grab/grab/realTimeDataUpload";</span></span><br><span class="line">        String websocketUrl = <span class="string">"ws://127.0.0.1:61232"</span>;</span><br><span class="line">        myservice.uploadCustomsDeclare(testUrl, websocketUrl, orderNo, sessionID, serviceTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 返回数据</span></span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>, <span class="string">""</span>);</span><br><span class="line">        result.put(<span class="string">"serviceTime"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里是一个简单的例子, 具体的业务逻辑在<code>uploadCustomsDeclare</code>方法里, 不同公司的底层业务逻辑不同.<br>反正关键点就是</p><ol><li>异步, 用线程池或者队列都行, 但是必须要在<strong>两分钟</strong>内上传完毕.</li><li>根据海关传过来的订单, 查询海关需要的数据, 然后写个<code>WebSocket</code>客户端加签, 再上传数据到海关的接口.</li><li>海关加签<code>WebSocket</code>客户端的接收的数据和发送的数据的<strong>数据格式</strong>是固定的<code>JSON</code>格式.</li></ol><p>这里提供一个简单的依赖于<a href="https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket" target="_blank" rel="noopener"><code>Java-WebSocket</code></a>的<code>WebSocket</code>客户端.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务代码() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 WebSocket 客户端, 注意这里是异步回调</span></span><br><span class="line">        WebSocketClient client = getWebSocketClient(<span class="keyword">new</span> URI(<span class="string">"ws://127.0.0.1:61232"</span>), message -&gt; &#123;</span><br><span class="line">            <span class="comment">// 3. 异步回调, 解析响应体</span></span><br><span class="line">            <span class="comment">//    &#123;"_id":0,"_method":"cus-sec_SpcSignDataAsPEM","_status":"00","_args":&#123;"Result":true,"Data":["rgTtbpFAmxQ+3mMEaIcztj4zV3SMJ0Jo09HnAE8b+GwxuHYqgcfqEGj/DB+Vb6A8ETXtLMsHGEvsItSm+fDlwOXPPjvpoG5sDeiQXBV4qcGPnLUaDZmdSTJdhRHUn1xFMBCvzP77h2x8RRow8l2ZIyVujY/H0hxZ/flUVERsD8I=","01304235"],"Error":[]&#125;&#125;</span></span><br><span class="line">            JSONObject responseJSON = JSONObject.parseObject(message);</span><br><span class="line">            String method = responseJSON.getString(<span class="string">"_method"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"cus-sec_SpcSignDataAsPEM"</span>.equalsIgnoreCase(method)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 如果不是加签代码, 不处理</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONObject args = responseJSON.getJSONObject(<span class="string">"_args"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> result = args.getBooleanValue(<span class="string">"Result"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!result) &#123;</span><br><span class="line">                String error = args.getJSONArray(<span class="string">"Error"</span>).toJSONString();</span><br><span class="line">                logger.info(<span class="string">"==============WebSocket连接错误:&#123;&#125;=============="</span>, error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 获取签名和证书编号</span></span><br><span class="line">            JSONArray wsData = args.getJSONArray(<span class="string">"Data"</span>);</span><br><span class="line">            String signValue = wsData.getString(<span class="number">0</span>);</span><br><span class="line">            String certNo = wsData.getString(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 初始化请求体上报海关</span></span><br><span class="line">            <span class="comment">// doPost(...);</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(client == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Websocket客户端获取失败!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 连接上后, 发送 Websocket 请求</span></span><br><span class="line"><span class="comment">//            String json = "&#123;\"_method\":\"cus-sec_SpcSignDataAsPEM\",\"_id\":0,\"args\":&#123;\"inData\":\"123\",\"passwd\":\"88888888\"&#125;&#125;";</span></span><br><span class="line">        JSONObject websocketRequest = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        websocketRequest.put(<span class="string">"_method"</span>, <span class="string">"cus-sec_SpcSignDataAsPEM"</span>); <span class="comment">// 加签方法</span></span><br><span class="line">        websocketRequest.put(<span class="string">"_id"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        JSONObject websocketRequestArgs = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        String inData = <span class="string">"\"sessionID\":\""</span> + sessionID + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"payExchangeInfoHead\":\""</span> + JSONObject.toJSONString(payExchangeInfoHead) + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"payExchangeInfoLists\":\""</span> + JSONArray.toJSONString(payExchangeInfoList) + <span class="string">"\"||"</span> +</span><br><span class="line">                <span class="string">"\"serviceTime\":\""</span> + JSONObject.toJSONString(serviceTime) + <span class="string">"\""</span>;</span><br><span class="line">        websocketRequestArgs.put(<span class="string">"inData"</span>, inData);</span><br><span class="line">        websocketRequestArgs.put(<span class="string">"passwd"</span>, <span class="string">"88888888"</span>);</span><br><span class="line">        websocketRequest.put(<span class="string">"args"</span>, websocketRequestArgs);</span><br><span class="line"></span><br><span class="line">        client.send(websocketRequest.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Websocket 客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> websocketUrl Websocket 连接地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback     回调函数接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> WebSocketClient <span class="title">getWebSocketClient</span><span class="params">(URI websocketUrl, WebsocketCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 双重锁保证, 检查是否超时关闭</span></span><br><span class="line">        <span class="keyword">if</span>(webSocketClient == <span class="keyword">null</span> || webSocketClient.isClosed() || webSocketClient.isClosing()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CustomsDeclareServiceImpl<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(webSocketClient == <span class="keyword">null</span> || webSocketClient.isClosed() || webSocketClient.isClosing()) &#123;</span><br><span class="line">                    <span class="comment">// 2. 初始化 Websocket 客户端, 调用 callback</span></span><br><span class="line">                    webSocketClient = <span class="keyword">new</span> WebSocketClient(websocketUrl) &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(ServerHandshake handshakedata)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============打开WebSocket连接:&#123;&#125;=============="</span>, websocketUrl.toString());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                            callback.onMessage(message); <span class="comment">// 调用回调函数</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ByteBuffer bytes)</span> </span>&#123;</span><br><span class="line">                            String message = <span class="keyword">new</span> String(bytes.array(), StandardCharsets.UTF_8);</span><br><span class="line">                            onMessage(message);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="keyword">int</span> code, String reason, <span class="keyword">boolean</span> remote)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============关闭WebSocket连接:&#123;&#125;=============="</span>, reason);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"==============WebSocket连接错误:&#123;&#125;=============="</span>, ex.getMessage());</span><br><span class="line">                            logger.error(<span class="string">"==============WebSocket连接错误!=============="</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="comment">// 3. 阻塞等待连接</span></span><br><span class="line">                    webSocketClient.connect();</span><br><span class="line">                    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!Objects.equal(webSocketClient.getReadyState(), ReadyState.OPEN)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            count += <span class="number">10</span>;</span><br><span class="line">                            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                            <span class="keyword">if</span> (count &gt;= <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">                                logger.info(<span class="string">"WebSocket服务器连接超时或服务器已经关闭"</span>);</span><br><span class="line">                                webSocketClient.close();</span><br><span class="line">                                webSocketClient = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            logger.error(<span class="string">"发送信息异常"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> webSocketClient;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebsocketCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写完后, 我们可以用<a href="https://www.getpostman.com/" target="_blank" rel="noopener"><code>Postman</code></a>模拟海关调用我们写的接口, 看是否上传成功.</p><h1 id="审核服务注册地址"><a href="#审核服务注册地址" class="headerlink" title="审核服务注册地址"></a>审核服务注册地址</h1><p>既然接口写好了, 那就可以让海关人员审核了, 在海关微信联调群呼叫下海关人员审核即可.<br>在审核之前, 要确保几件事</p><ol><li>三天内有订单, 订单需要在<a href="https://swapp.singlewindow.cn/deskserver/sw/deskIndex?menu_id=swcebimp" target="_blank" rel="noopener">中国国际贸易单一窗口</a>的订单查询里可以查到.</li><li>返回正确格式, 状态值是否为<code>10000</code>, 返回的json数据格式是否正确.</li><li>审核接口和企业上传原始支付数据没有直接联系, 接口审核是测试接口的连通性和返回格式是否正确.</li><li>端口必须是<code>80</code>, 不过多解释.</li><li>是否配置白名单, 企业的防火墙是否把海关的请求拒绝了.</li></ol><p>注意, 我司是电商平台, 所以是不能提交订单的, 调用微信报关接口上报的是支付单.<br>要买了境外商品后, 联系供应商申报运单、清单、订单. 有一个订单, 然后才能审核服务注册地址.</p><p>还有就是, 海关这个订单查询系统, 必须填订单号, 才能查询到订单, 我之前没填订单号, 想查出所有订单, 结果一个订单都查不到.</p><h1 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h1><p>因为<strong>操作员卡</strong>现在在机房了, 但是我们有登录海关网站配置注册地址, 或者查看订单等需求.<br>这时候有两种方案</p><ol><li>给实体加签主机开远程, 但是这样会有安全风险</li><li>用<strong>法人卡</strong>登录</li></ol><p>我尝试使用账号密码登录, 登录成功了, 但是海关网站会隐藏掉一些菜单, 导致你不能配置注册地址, 查看订单.</p><h1 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h1><p>看完前面的步骤, 最后再来梳理下业务流程, 为什么最后放流程, 因为没走完流程, 看了也是一脸懵逼.<br>其中支付宝(微信)和海关的业务是我猜的, 估计应该八九不离十.</p><ol><li>我司: 用户下单, 支付, 后端保存和支付宝(微信)对接的支付请求体和支付响应体.</li><li>我司: 后端调用支付宝(微信)的报关接口进行报关.</li><li>支付宝(微信): 异步提交企业发送过来的报关信息给海关方.</li><li>海关: 接受到支付宝(微信)提交的报关信息, 海关不信任支付宝(微信)的报关信息, 将订单号发给电商平台(我司), 要求将必要数据交给海关进行对比校验.</li><li>我司: 接收到海关的订单号, 告诉海关接收到查询请求了, <strong>异步</strong>查询相关订单数据, 发送给加签主机.</li><li>加签主机: 将数据加签, 回传给我司.</li><li>我司: 接收到加签后的数据, 拼接<code>JSON</code>, 上传给海关.</li><li>海关: 接收到电商平台上传的数据, 和支付宝(微信)的数据做对比, 对比无误后, 告诉支付宝(微信)报关成功,</li><li>我司: 调用支付宝(微信)查询接口, 查询报关是否成功.</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/whtydn/p/10220209.html" target="_blank" rel="noopener">海关 实时数据 企业联调接口 开发步骤与概要</a></li><li><a href="https://blog.csdn.net/ccbox_net/article/details/89031736" target="_blank" rel="noopener">记录海关165号、179号实时数据联调接口中需要注意的细节</a></li><li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2134975/index.html" target="_blank" rel="noopener">海关总署公告2018年第165号（关于实时获取跨境电子商务平台企业支付相关原始数据有关事宜的公告）</a></li><li><a href="http://www.customs.gov.cn/customs/302249/302266/302267/2155884/index.html" target="_blank" rel="noopener">海关总署公告2018年第179号（关于实时获取跨境电子商务平台企业支付相关原始数据接入有关事宜的公告）</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Customs_Declaration_Documents_165_And_179.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>从i++到CAS操作</title>
      <link>https://blog.ahao.moe/posts/From_i++_to_CAS_operation.html</link>
      <guid>https://blog.ahao.moe/posts/From_i++_to_CAS_operation.html</guid>
      <pubDate>Wed, 17 Apr 2019 01:49:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;i++&lt;/code&gt;不是一个原子操作, 原子操作的意思是, 执行代码的时候, 不会发生线程的切换.&lt;br&gt;即使&lt;code&gt;i++&lt;/code&gt;只有一行代码, 但是也不是一个原子操作, 主要就是三件事情, 很惭愧, 就做了一点微小的工作(&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取值: 从内存中取值到寄存器.&lt;/li&gt;
&lt;li&gt;自增: 寄存器进行&lt;code&gt;i+1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;回写: 将自增后的值回写到内存中.&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>i++</code>不是一个原子操作, 原子操作的意思是, 执行代码的时候, 不会发生线程的切换.<br>即使<code>i++</code>只有一行代码, 但是也不是一个原子操作, 主要就是三件事情, 很惭愧, 就做了一点微小的工作(</p><ol><li>取值: 从内存中取值到寄存器.</li><li>自增: 寄存器进行<code>i+1</code>.</li><li>回写: 将自增后的值回写到内存中.</li></ol><a id="more"></a><h1 id="多线程下的问题"><a href="#多线程下的问题" class="headerlink" title="多线程下的问题"></a>多线程下的问题</h1><p><code>i++</code>不是一个原子操作, 那么就可能在多线程下出现问题.<br>比如发生以下操作.</p><ol><li><code>Thread 1</code>从内存中取值<code>i = 0</code>, 在寄存器中自增<code>i = 1</code>.</li><li><code>Thread 1</code>在回写到内存前, 时间片结束, 切换到<code>Thread 2</code>.</li><li><code>Thread 2</code>从内存中取值<code>i = 0</code>, 在寄存器中自增<code>i = 1</code>.</li><li><code>Thread 2</code>在回写到内存前, 时间片结束, 切换到<code>Thread 1</code>.</li><li><code>Thread 1</code>将寄存器中的<code>i = 1</code>回写到内存中, 内存中<code>i = 1</code>, 执行结束, 切换到<code>Thread 2</code>.</li><li><code>Thread 1</code>将寄存器中的<code>i = 1</code>回写到内存中, 内存中<code>i = 1</code>, 执行结束.</li></ol><p>最终结果, <code>i = 1</code>, 但是我们期望的是两个线程执行了<code>i++</code>, 最终结果应该是<code>i = 2</code>.<br>这时就轮到<code>java.util.concurrent</code>包出场了, 下面是一个简单的例子.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 加上 volatile 也没用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger j = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1_000_000</span>; i++) &#123;</span><br><span class="line">            threadPool.execute(() -&gt; Main.i++);</span><br><span class="line">            threadPool.execute(() -&gt; Main.j.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        threadPool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);</span><br><span class="line">        System.out.println(Main.i); <span class="comment">// 999063</span></span><br><span class="line">        System.out.println(Main.j); <span class="comment">// 1000000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到<code>AtomicInteger</code>类可以在多线程下, 输出我们预期的结果, 而普通的<code>i++</code>, 则与预期结果不符.</p><h1 id="Unsafe-类的存在"><a href="#Unsafe-类的存在" class="headerlink" title="Unsafe 类的存在"></a>Unsafe 类的存在</h1><p>主要的代码就是<code>incrementAndGet</code>这个方法. 我们可以进去看看.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Unsafe"</span>); <span class="comment">// 判断调用 Unsafe 的类是否是 BootstrapClassLoader 加载的类</span></span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/bpupadhyaya/openjdk-8/blob/master/jdk/src/share/classes/sun/misc/Unsafe.java#L87-L92" target="_blank" rel="noopener">源码<code>#L87-L92</code></a><br>可以看到, 里面借助了<code>sun.misc.Unsafe</code>这个类, 它是一个不安全的类, 可以绕过<code>JVM</code>直接操作本地内存.<br>所以为了不让人滥用, 调用<code>getUnsafe()</code>时会判断调用<code>Unsafe</code>的类是否是<code>BootstrapClassLoader</code>加载的类.<br>我们自己写的类是由<code>sun.misc.Launcher$AppClassLoader</code>加载的, 所以如果我们自己去调用<code>getUnsafe()</code>, 肯定会抛出<code>SecurityException</code>.<br>当然我们也可以通过反射获取.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[0];</span><br><span class="line">        unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="深入-getAndAddInt"><a href="#深入-getAndAddInt" class="headerlink" title="深入 getAndAddInt"></a>深入 getAndAddInt</h1><p><a href="https://github.com/bpupadhyaya/openjdk-8/blob/master/jdk/src/share/classes/sun/misc/Unsafe.java#L1028-L1034" target="_blank" rel="noopener">源码<code>#L1028-L1034</code></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="comment">// unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = getIntVolatile(o, offset);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntVolatile</span><span class="params">(Object o, <span class="keyword">long</span> offset)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> expected, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个核心就是<code>compareAndSwapInt</code>这个<code>CAS</code>操作. 整个方法的逻辑就是</p><ol><li>读取<code>Object</code>的<code>value</code>属性在内存中的偏移量地址<code>offset</code>, 写入变量<code>v</code>.</li><li><code>compareAndSwapInt</code>方法, 判断<code>Object</code>的地址<code>offset</code>的值, 是否为<code>v</code>, 是则将<code>v + delta</code>写入地址<code>offset</code>.</li><li>如果地址<code>offset</code>的值和变量<code>v</code>不相等, 说明有其他线程修改了, 那么就再循环一次, 回到步骤<code>1</code>.</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>再深入就是<code>c++</code>和汇编层次的代码了, 技术有限就不细说了<del>(太菜)</del>, 建议查看参考资料.<br>总的来说, <code>CAS</code>就是一个比较操作, 直接操作内存地址, 就不会发生寄存器的值来不及回写到内存中的问题.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://www.cnblogs.com/noKing/p/9094983.html" target="_blank" rel="noopener">Java原子类中CAS的底层实现</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/From_i++_to_CAS_operation.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java导出Excel出现emoji乱码</title>
      <link>https://blog.ahao.moe/posts/Java_export_Excel_appears_emoji_garbled.html</link>
      <guid>https://blog.ahao.moe/posts/Java_export_Excel_appears_emoji_garbled.html</guid>
      <pubDate>Tue, 02 Apr 2019 03:24:22 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;做后端开发经常需要导出&lt;code&gt;Excel&lt;/code&gt;, 一般有两种选择&lt;code&gt;POI&lt;/code&gt;、&lt;code&gt;JXLS&lt;/code&gt;和&lt;code&gt;easyexcel&lt;/code&gt;.&lt;br&gt;其实底层都是使用&lt;code&gt;POI&lt;/code&gt;来做的.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做后端开发经常需要导出<code>Excel</code>, 一般有两种选择<code>POI</code>、<code>JXLS</code>和<code>easyexcel</code>.<br>其实底层都是使用<code>POI</code>来做的.</p><a id="more"></a><h1 id="三种框架分析"><a href="#三种框架分析" class="headerlink" title="三种框架分析"></a>三种框架分析</h1><ol><li><code>Apache</code>名下的<code>POI</code><ul><li>优点: 微软全家桶基本都可以做, 什么<code>Word</code>、<code>Excel</code>、<code>PPT</code>.</li><li>缺点: 所有格式都要通过代码完成, 代码又长又臭.</li></ul></li><li><code>JXLS</code>专门用来操作<code>Excel</code>, 使用<code>JXLS</code>模板语法可以书写<code>Excel</code>模板, 底层使用<code>org.jxls.transform.poi.PoiTransformer</code>和<code>POI</code>做对接.<ul><li>优点: 使用<code>JXLS</code>模板语法, 可以将格式和代码解耦, 快速开发, 代码精简.</li><li>缺点: 需要额外的学习成本学习<code>JXLS</code>模板语法(学什么不是学</li></ul></li><li><code>easyexcel</code>是阿里基于<code>POI</code>开发的<code>Excel</code>解析工具.<ul><li>优点: 据<a href="https://github.com/alibaba/easyexcel/blob/master/README.md" target="_blank" rel="noopener"><code>README</code></a>说, 解决<code>POI</code>内存溢出问题.</li><li>缺点: 没用过不评价</li></ul></li></ol><h1 id="emoji乱码代码单元测试"><a href="#emoji乱码代码单元测试" class="headerlink" title="emoji乱码代码单元测试"></a>emoji乱码代码单元测试</h1><p>复现下测试环境, 依赖<code>pom.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- poi-ooxml 依赖 poi-ooxml-schemas, 依赖 xmlbeans 2.6.0 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.xmlbeans&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;xmlbeans&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.6.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>生成<code>Excel</code>的代码.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 𤆕🔝biu～better me人🌝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNICODE = <span class="string">"\uD850\uDD95\uD83D\uDD1Dbiu～\t\uE110better me\uE110人\uD83C\uDF1D"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        createXLSX(<span class="string">"C:/test.xlsx"</span>);</span><br><span class="line">        createXLS(<span class="string">"C:/test.xls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXLSX</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">            FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(filename)) &#123;</span><br><span class="line"></span><br><span class="line">            XSSFSheet sheet = workbook.createSheet(<span class="string">"TestSheet"</span>);</span><br><span class="line">            XSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            XSSFCell cell1 = row.createCell(<span class="number">0</span>);</span><br><span class="line">            cell1.setCellValue(UNICODE);</span><br><span class="line"></span><br><span class="line">            workbook.write(fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXLS</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(filename)) &#123;</span><br><span class="line"></span><br><span class="line">            HSSFSheet sheet = workbook.createSheet(<span class="string">"TestSheet"</span>);</span><br><span class="line">            HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            HSSFCell cell1 = row.createCell(<span class="number">0</span>);</span><br><span class="line">            cell1.setCellValue(UNICODE);</span><br><span class="line"></span><br><span class="line">            workbook.write(fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行完毕, 可以看到<code>xls</code>能正常输出<code>𤆕🔝biu～    better me人🌝</code>, 而<code>xlsx</code>只能输出<code>????biu～    better me人??</code>.<br><code>emoji</code>表情不能输出.</p><h1 id="解决方案-简单版"><a href="#解决方案-简单版" class="headerlink" title="解决方案(简单版)"></a>解决方案(简单版)</h1><p>解决方案有两种.</p><ol><li>升级<code>POI</code>为<code>4.0.0</code>以上.</li><li>替换<code>xmlbeans</code>为<code>3.0.0</code>以上.</li></ol><p>本质都是替换<code>xmlbeans</code>.</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>为什么<code>xls</code>没问题, <code>xlsx</code>有问题?<br>因为<code>xls</code>的<code>HSSFRichTextString</code>使用了<code>UnicodeString</code>进行编码, 内联字符串, 没有重用字符串.<br>而<code>xlsx</code>为了解决内存问题, 将相同字符串先写入<code>sharedStrings.xml</code>, 重用字符串. </p><p>我们可以将一个<code>xlsx</code>改为<code>zip</code>解压, 在里面可以找到一个<code>sharedStrings.xml</code>文件, 里面就存储着我们的字符串.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sst</span> <span class="attr">count</span>=<span class="string">"1"</span> <span class="attr">uniqueCount</span>=<span class="string">"1"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.openxmlformats.org/spreadsheetml/2006/main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">si</span>&gt;</span><span class="tag">&lt;<span class="name">t</span>&gt;</span>????biu～better me人??<span class="tag">&lt;/<span class="name">t</span>&gt;</span><span class="tag">&lt;/<span class="name">si</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sst</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那很明显就是写入<code>xml</code>的时候出了问题.</p><p><a href="https://stackoverflow.com/a/38039869" target="_blank" rel="noopener">Write 16 bits character to .xlsx file using Apache POI in Java</a>提到了<code>org.apache.xmlbeans.impl.store.Saver</code>的<code>isBadChar</code>方法.<br><a href="https://github.com/apache/xmlbeans/blob/2.6.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L1559-L1567" target="_blank" rel="noopener">点击查看源码<code>L1559</code></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBadChar</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! (</span><br><span class="line">            (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt;= <span class="number">0xD7FF</span> ) ||</span><br><span class="line">            (ch &gt;= <span class="number">0xE000</span> &amp;&amp; ch &lt;= <span class="number">0xFFFD</span>) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x10000</span> &amp;&amp; ch &lt;= <span class="number">0x10FFFF</span>) ||</span><br><span class="line">            (ch == <span class="number">0x9</span>) || (ch == <span class="number">0xA</span>) || (ch == <span class="number">0xD</span>)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以<code>🌝</code>这个字符为例, 它的<code>Unicode</code>编码为<code>\uD83C\uDF1D</code>, 一个<code>char</code>是存不下的, 要用两个<code>char</code>.<br>那么第一个<code>char</code>传入<code>isBadChar</code>, 得到<code>true</code>. 第二个<code>char</code>传入也得到<code>true</code>.<br>那么我们看下哪里有调用到这个<code>isBadChar</code>方法.<br><a href="https://github.com/apache/xmlbeans/blob/2.6.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L2310" target="_blank" rel="noopener">点击查看源码<code>L2310</code></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">entitizeAndWriteCommentText</span><span class="params">(<span class="keyword">int</span> bufLimit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufLimit; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = _buf[ i ];</span><br><span class="line">            <span class="keyword">if</span> (isBadChar(ch))</span><br><span class="line">                _buf[i] = <span class="string">'?'</span>;</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有很多地方都有调用, 但是基本都是一个逻辑, 如果是<code>true</code>, 则替换为<code>?</code>, 所以我们才在<code>sharedStrings.xml</code>看到一堆<code>??</code>.<br>那这就是<code>xmlbeans</code>这个库的问题了, 不是我们代码的锅(甩锅大成功!</p><h1 id="xmlbeans-3-0-0-解决方案"><a href="#xmlbeans-3-0-0-解决方案" class="headerlink" title="xmlbeans 3.0.0 解决方案"></a>xmlbeans 3.0.0 解决方案</h1><p>再看看<code>xmlbeans 3.0.0</code>怎么解决的.<br><a href="https://github.com/apache/xmlbeans/blob/3.0.0/src/store/org/apache/xmlbeans/impl/store/Saver.java#L286-L287" target="_blank" rel="noopener">点击查看源码<code>L286</code></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Saver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBadChar</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! (</span><br><span class="line">            Character.isHighSurrogate(ch) ||</span><br><span class="line">            Character.isLowSurrogate(ch) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x20</span> &amp;&amp; ch &lt;= <span class="number">0xD7FF</span> ) ||</span><br><span class="line">            (ch &gt;= <span class="number">0xE000</span> &amp;&amp; ch &lt;= <span class="number">0xFFFD</span>) ||</span><br><span class="line">            (ch &gt;= <span class="number">0x10000</span> &amp;&amp; ch &lt;= <span class="number">0x10FFFF</span>) ||</span><br><span class="line">            (ch == <span class="number">0x9</span>) || (ch == <span class="number">0xA</span>) || (ch == <span class="number">0xD</span>)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以<code>🌝</code>这个字符为例, 它的<code>Unicode</code>编码为<code>\uD83C\uDF1D</code>, 一个<code>char</code>是存不下的, 要用两个<code>char</code>.<br>那么第一个<code>char</code>传入<code>isBadChar</code>, 得到<code>false</code>. 第二个<code>char</code>传入也得到<code>false</code>.<br>所以也就不会被替换成<code>?</code>, <code>bug</code> 解决.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/a/51852614" target="_blank" rel="noopener">Writing Unicode plane 1 characters with Apache POI</a></li><li><a href="https://stackoverflow.com/a/38039869" target="_blank" rel="noopener">Write 16 bits character to .xlsx file using Apache POI in Java</a></li><li><a href="https://www.yanghuandy.cn/2018/08/15/Java%E5%AF%BC%E5%87%BAExcel/" target="_blank" rel="noopener">Java导出Excel</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Java_export_Excel_appears_emoji_garbled.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Shiro用户登陆后会话标识未更新漏洞</title>
      <link>https://blog.ahao.moe/posts/Shiro_not_update_session_id_after_login.html</link>
      <guid>https://blog.ahao.moe/posts/Shiro_not_update_session_id_after_login.html</guid>
      <pubDate>Thu, 28 Mar 2019 14:32:53 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是我在以前遇到的问题了, 当时做的是政府项目, 对&lt;code&gt;Web&lt;/code&gt;安全要求比较高.&lt;br&gt;使用&lt;code&gt;Shiro&lt;/code&gt;的项目被安全准入检测出&lt;strong&gt;用户登陆后会话标识未更新漏洞&lt;/strong&gt;.&lt;br&gt;意思是登录前的&lt;code&gt;Session&lt;/code&gt;和登录后的&lt;code&gt;Session&lt;/code&gt;一样。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是我在以前遇到的问题了, 当时做的是政府项目, 对<code>Web</code>安全要求比较高.<br>使用<code>Shiro</code>的项目被安全准入检测出<strong>用户登陆后会话标识未更新漏洞</strong>.<br>意思是登录前的<code>Session</code>和登录后的<code>Session</code>一样。</p><a id="more"></a><h1 id="官方修复无望-自己打补丁"><a href="#官方修复无望-自己打补丁" class="headerlink" title="官方修复无望, 自己打补丁"></a>官方修复无望, 自己打补丁</h1><p><code>2010-05-24</code>提出的<a href="https://issues.apache.org/jira/browse/SHIRO-170" target="_blank" rel="noopener">SHIRO-170</a>, 至今<code>2019-03-27</code>仍然未解决.<br>看来修复无望了, 但是勤劳的人民给出了临时性的解决方案.<br>那就是在登录时, 先销毁<code>session</code>, 再<code>login</code>.<br>主要步骤如下:</p><ol><li>获取<code>session</code>, 保存<code>session</code>中的属性<code>Map</code></li><li><code>session.stop()</code>销毁</li><li>进行登录<code>subject.login(token)</code></li><li>将之前保存的属性<code>Map</code>, 重新注入新的<code>session</code></li></ol><p>具体代码可以查看我的个人代码库<a href="https://github.com/Ahaochan/project/blob/master/ahao-web/src/main/java/com/ahao/rbac/shiro/LoginController.java#L91-L113" target="_blank" rel="noopener">LoginController.java#L91-L113</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://issues.apache.org/jira/browse/SHIRO-170" target="_blank" rel="noopener">Force New Session ID on Authentication</a></li><li><a href="https://blog.csdn.net/yycdaizi/article/details/45013397" target="_blank" rel="noopener">解决shiro会话标识未更新问题</a></li><li><a href="https://stackoverflow.com/a/30672822/6335926" target="_blank" rel="noopener">Shiro complaining “There is no session with id xxx” with DefaultSecurityManager</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Shiro_not_update_session_id_after_login.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>文件特殊权限SUID和SGID和SBIT</title>
      <link>https://blog.ahao.moe/posts/File_permissions_SUID_and_SGID_and_SBIT.html</link>
      <guid>https://blog.ahao.moe/posts/File_permissions_SUID_and_SGID_and_SBIT.html</guid>
      <pubDate>Wed, 27 Mar 2019 13:21:46 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;特殊权限尽量少修改! 不安全!&lt;br&gt;(很久以前写的一篇学习笔记, 一直没有整理&lt;/p&gt;
&lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;给执行该文件的用户临时赋予另一个用户(组)的权限。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>特殊权限尽量少修改! 不安全!<br>(很久以前写的一篇学习笔记, 一直没有整理</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>给执行该文件的用户临时赋予另一个用户(组)的权限。</p><a id="more"></a><p>比如<strong>设置密码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/shadow /usr/bin/passwd </span><br><span class="line">----------. 1 root root  1232 10月  6 05:47 /etc/shadow</span><br><span class="line">-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure></p><p><code>/etc/shadow</code>文件只能被<code>root</code>用户修改。<br>但是借助<code>passwd</code>命令, 普通用户可以临时变成<code>root</code>来执行这个<code>passwd</code>命令,<br>进而修改<code>/etc/shadow</code>文件。</p><h1 id="切换用户-SUID"><a href="#切换用户-SUID" class="headerlink" title="切换用户 SUID"></a>切换用户 SUID</h1><p>只有可以执行的二进制程序才能设定<code>SUID</code>权限。<br><code>SUID</code>可以看成是<code>Switch User ID</code><del>(一个瞎猜）</del>, 就是切换用户<code>ID</code>.</p><ol><li>创建两个文件<code>file1</code>和<code>file2</code></li><li>添加<code>SUID</code>权限, 或者<code>chmod u+s file</code></li><li>取消<code>SUID</code>权限, 或者<code>chmod u-s file</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建两个文件</span></span><br><span class="line">touch file1 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加SUID权限, 或者chmod u+s  file</span></span><br><span class="line">chmod 4755 file1 &amp;&amp; chmod 4655 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rwsr-xr-x. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rwSr-xr-x. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 取消SUID权限, 或者chmod u-s  file</span></span><br><span class="line">chmod 0755 file1 &amp;&amp; chmod 0655 file2 &amp;&amp; ll</span><br><span class="line"><span class="comment"># -rwxr-xr-x. 1 ahao ahao 0 11月 21 21:13 file1</span></span><br><span class="line"><span class="comment"># -rw-r-xr-x. 1 ahao ahao 0 11月 21 21:13 file2</span></span><br></pre></td></tr></table></figure><p>可以看到<code>x</code>执行权限的位置被<code>s</code>替换了。<br><code>4755</code>和<code>4655</code>的区别在于文件本身有没有<code>x</code>执行权限。<br>并且可以得知<code>s=S+x</code>, 并且注意!!! 大写<code>S</code>是没有意义的。<br>只有小写<code>s</code>才能被执行, 才能正确设定<code>SUID</code>权限。</p><h1 id="切换用户组-SGID"><a href="#切换用户组-SGID" class="headerlink" title="切换用户组 SGID"></a>切换用户组 SGID</h1><p>和<code>SUID</code>一样, 区别在于用户会临时赋予文件所属用户组<code>group</code>的身份, 而不是用户<code>user</code>身份。<del>Switch Group ID</del></p><p>比如<strong><code>locate</code>命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/locate /var/lib/mlocate/mlocate.db </span><br><span class="line"><span class="comment"># -rwx--s--x. 1 root slocate   40512 11月 21 23:21 /usr/bin/locate</span></span><br><span class="line"><span class="comment"># -rw-r-----. 1 root slocate 3678432 11月 21 23:21 /var/lib/mlocate/mlocate.db</span></span><br></pre></td></tr></table></figure></p><p><code>/var/lib/mlocate/mlocate.db</code>文件只能被<code>slocate</code>组查看。<br>但是借助<code>locate</code>命令, 普通用户可以临时变成<code>slocate</code>来执行这个<code>locate</code>命令,<br>进而查看<code>/var/lib/mlocate/mlocate.db</code>文件。</p><p>除了和<code>SUID</code>差不多的功能外。<br><code>SGID</code>对目录还有另一个功能。<br>就是<strong>进入该目录后</strong>, 用户的用户组会变成<strong>SGID对应的用户组</strong>。</p><ol><li><code>root</code>用户创建<code>test</code>目录并赋予<code>777</code>权限</li><li><code>ahao</code>用户在<code>test</code>目录下创建<code>file1</code></li><li><code>root</code>用户为<code>test</code>目录赋予<code>SGID</code>权限</li><li><code>ahao</code>用户在赋予<code>SGID</code>的<code>test</code>目录下创建<code>file2</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">mkdir ~ahao/<span class="built_in">test</span> &amp;&amp; chmod 777 ~ahao/<span class="built_in">test</span> &amp;&amp; ll -d ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># drwxrwxrwx. 2 root root 6 11月 21 23:39 /home/ahao/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ahao用户在test目录下创建file1</span></span><br><span class="line">su - ahao</span><br><span class="line">touch ~ahao/<span class="built_in">test</span>/file1 &amp;&amp; ll ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. root用户为test目录赋予SGID权限, 或者chmod g+s  file</span></span><br><span class="line">su -</span><br><span class="line">chmod 2777 ~ahao/<span class="built_in">test</span> &amp;&amp; ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># drwxrwsrwx. 2 root root 19 11月 21 23:43 /home/ahao/test/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. ahao用户在赋予SGID的test目录下创建file2</span></span><br><span class="line">su - ahao</span><br><span class="line">touch ~ahao/<span class="built_in">test</span>/file2 &amp;&amp; ll ~ahao/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao ahao 0 11月 21 23:43 file1</span></span><br><span class="line"><span class="comment"># -rw-rw-r--. 1 ahao root 0 11月 21 23:45 file2</span></span><br></pre></td></tr></table></figure><p>可以看到赋予<code>SGID</code>后, <code>ahao</code>用户创建的<code>file2</code>的所属组是<code>root</code>。</p><h1 id="防止被删除-sticky-bit-SBIT"><a href="#防止被删除-sticky-bit-SBIT" class="headerlink" title="防止被删除 sticky bit ( SBIT )"></a>防止被删除 sticky bit ( SBIT )</h1><p>除了<code>user</code>的<code>SUID</code>、<code>group</code>的<code>SGID</code>外, 还有<code>other</code>的<code>sticky bit</code>。</p><p><code>sticky bit</code>有两个要求</p><ol><li>只对目录有效。</li><li>文件权限为<code>rwxrwxrwx</code>, 也就是<code>777</code>的权限。<br>比如<code>/tmp</code>目录。</li></ol><p>那么任何用户都能对目录下的文件进行读写执行操作, 这是很不安全的。<br>比如一个目录, 允许用户(<code>other</code>)创建文件(写权限), 拥有了写权限的用户也同样拥有了删除权限。<br>也就是说在<code>777</code>权限的目录下, <code>A</code>用户创建的文件可能被<code>B</code>用户删除。<br><code>sticky bit</code>就是为了解决这个问题。<br>赋予目录<code>sticky bit</code>后。</p><ol><li>只有<code>root</code>有删除权限。</li><li>其他用户只能删除自己创建的文件。</li><li>其他用户拥有写权限。</li></ol><p>下面举个例子</p><ol><li><code>root</code>用户创建<code>test</code>目录并赋予<code>777</code>权限。</li><li><code>root</code>用户创建<code>file</code>文件。</li><li><code>ahao</code>用户删除<code>file</code>文件成功, 因为<code>ahao</code>用户对<code>test</code>目录有w写权限。</li><li><code>root</code>用户对<code>test</code>目录赋予<code>sticky bit</code>权限。</li><li><code>root</code>用户创建<code>file</code>文件。</li><li><code>ahao</code>用户删除<code>file</code>文件失败, 即使<code>ahao</code>用户对<code>test</code>目录有w写权限。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. root用户创建test目录并赋予777权限</span></span><br><span class="line">mkdir ~ahao/<span class="built_in">test</span> &amp;&amp; chmod 777 ~ahao/<span class="built_in">test</span>/ &amp;&amp; ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># drwxrwxrwx. 2 root root 6 11月 22 23:23 /home/ahao/test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. root用户创建file文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># -rw-r--r--. 1 root root 6 11月 22 23:26 file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ahao用户删除file文件成功, 因为ahao用户对test目录有w写权限</span></span><br><span class="line">su - ahao &amp;&amp; rm -rf ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. root用户对test目录赋予sticky bit权限</span></span><br><span class="line">su -</span><br><span class="line"><span class="comment"># chmod 0777 ~ahao/test/ # 取消sticky bit, 或chmod o-t ~ahao/test/</span></span><br><span class="line">chmod 1777 ~ahao/<span class="built_in">test</span>/ <span class="comment"># 赋予sticky bit, 或chmod o+t ~ahao/test/</span></span><br><span class="line">ll -d ~ahao/<span class="built_in">test</span>/</span><br><span class="line">drwxrwxrwt. 2 root root 6 11月 22 23:27 /home/ahao/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. root用户创建file文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; ~ahao/<span class="built_in">test</span>/file &amp;&amp; ll ~ahao/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># -rw-r--r--. 1 root root 6 11月 22 23:32 file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. ahao用户删除file文件失败, 即使ahao用户对test目录有w写权限</span></span><br><span class="line">su - ahao</span><br><span class="line">rm -rf ~ahao/<span class="built_in">test</span>/file</span><br><span class="line"><span class="comment"># rm: 无法删除"/home/ahao/test/file": 不允许的操作</span></span><br></pre></td></tr></table></figure><p>如果不能删除, 那我能不能覆盖掉呢? <code>echo &#39;&#39; &gt; file</code><br>我在<code>Ubuntu</code>尝试了不能, 但是以前在<code>CentOS</code>试过好像可以.</p><h1 id="检查系统新增的SUID和SGID文件"><a href="#检查系统新增的SUID和SGID文件" class="headerlink" title="检查系统新增的SUID和SGID文件"></a>检查系统新增的SUID和SGID文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 先查找所有拥有SUID(4)和SGID(2)的文件</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编写Shell脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 2.1 查找所有拥有SUID(4)或SGID(2)的文件, 并保存到临时文件suid.check中</span></span><br><span class="line">find / -perm -4000 -o -perm -2000 &gt; /tmp/suid.check</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> $(cat /tmp/suid.check)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 2.3 遍历临时文件suid.check中的记录, 和最初查找到的文件/tmp/suid.list进行比较。</span></span><br><span class="line">    grep <span class="variable">$line</span> /tmp/suid.list &gt; /dev/null</span><br><span class="line">    <span class="comment"># 2.4 不存在则写入log文件中</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"$?"</span> != <span class="string">"0"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span> isn't in listfile! "</span> &gt;&gt; /tmp/suid_log_$(date +%F)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rm -rf /tmp/suid.check</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/tmp/suid_log_<span class="variable">$(date +%F)</span>"</span></span><br><span class="line">cat /tmp/suid_log_$(date +%F)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/File_permissions_SUID_and_SGID_and_SBIT.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>为GitHub博客添加域名并允许百度收录</title>
      <link>https://blog.ahao.moe/posts/Add_domain_and_allow_Baidu.html</link>
      <guid>https://blog.ahao.moe/posts/Add_domain_and_allow_Baidu.html</guid>
      <pubDate>Thu, 07 Mar 2019 16:21:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前写了一篇文章, &lt;a href=&quot;https://ahao.moe/posts/TravisCI_encrypts_configuration_files_and_automatically_deploys_Hexo.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TravisCI 加密配置文件并自动部署 Hexo&lt;/a&gt;&lt;br&gt;迫于囊中羞涩, 没有域名, 于是也绕不过&lt;code&gt;GitHub&lt;/code&gt;对&lt;code&gt;Baidu&lt;/code&gt;的封锁.&lt;br&gt;现在买了个域名&lt;code&gt;ahao.moe&lt;/code&gt;, 终于让&lt;code&gt;Baidu&lt;/code&gt;访问到我的博客了.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前写了一篇文章, <a href="https://ahao.moe/posts/TravisCI_encrypts_configuration_files_and_automatically_deploys_Hexo.html" target="_blank" rel="noopener">TravisCI 加密配置文件并自动部署 Hexo</a><br>迫于囊中羞涩, 没有域名, 于是也绕不过<code>GitHub</code>对<code>Baidu</code>的封锁.<br>现在买了个域名<code>ahao.moe</code>, 终于让<code>Baidu</code>访问到我的博客了.</p><a id="more"></a><h1 id="GoDaddy-购买域名"><a href="#GoDaddy-购买域名" class="headerlink" title="GoDaddy 购买域名"></a>GoDaddy 购买域名</h1><p>注意, 有些域名是不能备案的, 比如<code>moe</code>域名.</p><h1 id="为-GitHub-博客添加-DNS-解析"><a href="#为-GitHub-博客添加-DNS-解析" class="headerlink" title="为 GitHub 博客添加 DNS 解析"></a>为 GitHub 博客添加 DNS 解析</h1><h2 id="更换-DNS-解析服务器"><a href="#更换-DNS-解析服务器" class="headerlink" title="更换 DNS 解析服务器"></a>更换 DNS 解析服务器</h2><p>因为阿里云提供了免费的<code>SSL</code>证书, 所以使用阿里云做域名解析.<br>在<code>GoDaddy</code>配置阿里云的<code>DNS</code>解析服务器.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ns1.alidns.com</span><br><span class="line">ns2.alidns.com</span><br></pre></td></tr></table></figure></p><h2 id="阿里云添加-A-记录"><a href="#阿里云添加-A-记录" class="headerlink" title="阿里云添加 A 记录"></a>阿里云添加 A 记录</h2><p>然后回到阿里云, 在<a href="https://dns.console.aliyun.com/#/dns/domainList" target="_blank" rel="noopener">管理界面</a>新增一个域名<code>ahao.moe</code>.<br>进入<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p><p>先去看下<a href="https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider" target="_blank" rel="noopener">GitHub文档</a><br>根据这几个<code>IP</code>地址, 设置<code>A记录</code>, 这里列举要修改的值, 其他没列出的默认即可.</p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">解析线路</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>185.199.108.153</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>185.199.109.153</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>185.199.110.153</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>185.199.111.153</code></td></tr></tbody></table><h2 id="阿里云添加-SSL-证书"><a href="#阿里云添加-SSL-证书" class="headerlink" title="阿里云添加 SSL 证书"></a>阿里云添加 SSL 证书</h2><p>进入<a href="https://common-buy.aliyun.com/?commodityCode=cas#/buy" target="_blank" rel="noopener">云盾证书服务</a>, 选择<code>免费型DV SSL</code>.<br>之后填上自己的域名<code>ahao.moe</code>即可, 注意此证书只能针对一个域名, 不包括子域名.</p><p>然后我们回到阿里云<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p><p>添加验证的记录</p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">解析线路</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center"><code>TXT</code></td><td style="text-align:center"><code>_dnsauth</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>123456789abcdefg</code></td></tr></tbody></table><h2 id="GitHub-博客项目配置"><a href="#GitHub-博客项目配置" class="headerlink" title="GitHub 博客项目配置"></a>GitHub 博客项目配置</h2><p>进入<code>GitHub</code>的<a href="https://github.com/Ahaochan/Ahaochan.github.io" target="_blank" rel="noopener">博客项目</a>.<br>在<code>Setting</code>里的<code>GitHub Pages</code>标签, 看到<code>Custom domain</code>, 在里面配置<code>ahao.moe</code>, 并勾选<code>Enforce HTTPS</code>.</p><p>同时, 我们还要在<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/source" target="_blank" rel="noopener"><code>source</code></a>添加一个<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/source/CNAME" target="_blank" rel="noopener"><code>CNAME</code></a>文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ahao.moe</span><br></pre></td></tr></table></figure></p><p>至此, 等待几分钟, 就可以在<code>ahao.moe</code>访问到自己的<code>GitHub</code>博客了.</p><h1 id="部署到-Coding-Pages"><a href="#部署到-Coding-Pages" class="headerlink" title="部署到 Coding Pages"></a>部署到 Coding Pages</h1><h2 id="腾讯云项目配置"><a href="#腾讯云项目配置" class="headerlink" title="腾讯云项目配置"></a>腾讯云项目配置</h2><p><code>Coding Pages</code>现在已经迁移到<a href="https://dev.tencent.com/u/Ahaochan" target="_blank" rel="noopener">腾讯云开发者平台</a>了<br>我们先<a href="https://dev.tencent.com/user/projects/create" target="_blank" rel="noopener">新建</a>一个<code>Ahaochan.coding.me</code>的项目.</p><p>和<code>GitHub</code>一样, 我们也要指定<code>ahao.moe</code>.<br>在<code>https://dev.tencent.com/u/Ahaochan/p/Ahaochan.coding.me/git/pages/settings</code>里绑定新域名<code>ahao.moe</code><br>然后在阿里云配置<code>A</code>记录即可, 注意<code>IP</code>地址我们需要自己手动查询, 还有解析线路要改为<strong>百度</strong>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. windows 查询 IP</span></span><br><span class="line">nslookup Ahaochan.coding.me</span><br><span class="line"><span class="comment"># 2. linux 查询 IP</span></span><br><span class="line">host -a Ahaochan.coding.me</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">解析线路</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">百度</td><td style="text-align:center"><code>128.1.133.223</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">百度</td><td style="text-align:center"><code>128.1.138.212</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">百度</td><td style="text-align:center"><code>128.1.138.154</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">百度</td><td style="text-align:center"><code>128.1.138.163</code></td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">百度</td><td style="text-align:center"><code>128.1.138.9</code></td></tr></tbody></table><h2 id="Travis-CI-配置"><a href="#Travis-CI-配置" class="headerlink" title="Travis CI 配置"></a>Travis CI 配置</h2><p>注意, 此时<code>Ahaochan.coding.me</code>仍然是一个空项目, 我们需要在<code>Travis CI</code>中配置<code>push</code>到腾讯云平台.</p><p>先在<code>https://dev.tencent.com/user/account/setting/tokens/new</code>新建一个<code>Token</code>令牌, 配置所需权限.<br>和<code>GitHub</code>一样, 在<code>Travis CI</code>的<code>Environment Variables</code>配置加密变量<code>CODING_TOKEN</code>.<br>之后的步骤就和<code>GitHub</code>一样了, 参考我开头的那篇文章.<br>这里放下<code>next.yml</code>和<code>.travis.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># next.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://REPO_TOKEN@github.com/Ahaochan/Ahaochan.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://Ahaochan:CODING_TOKEN@git.dev.tencent.com/Ahaochan/Ahaochan.coding.me.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="comment"># - 解密 next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/REPO_TOKEN/$&#123;REPO_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/CODING_TOKEN/$&#123;CODING_TOKEN&#125;/"</span> <span class="string">source/_data/next.yml</span></span><br></pre></td></tr></table></figure></p><h1 id="添加百度和谷歌收录"><a href="#添加百度和谷歌收录" class="headerlink" title="添加百度和谷歌收录"></a>添加百度和谷歌收录</h1><h2 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h2><p>进入谷歌站长工具, 点击左边的<strong>添加资源</strong>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.google.com/search-console?resource_id=sc-domain%3Aahao.moe</span><br></pre></td></tr></table></figure></p><p>选择<strong>添加网域</strong>, 输入<code>ahao.moe</code>.<br>谷歌会提示你将<code>google-site-verification=123456789</code>这段代码在<code>DNS</code>配置为<code>TXT</code>记录.<br>我们回到阿里云<a href="https://dns.console.aliyun.com/#/dns/setting/ahao.moe" target="_blank" rel="noopener"><code>ahao.moe</code>解析设置</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dns.console.aliyun.com/#/dns/setting/ahao.moe</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">解析线路</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center"><code>TXT</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>google-site-verification=123456789</code></td></tr></tbody></table><p>然后为<code>hexo</code>添加<code>hexo-generator-sitemap</code>插件(<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/.travis.yml#L30" target="_blank" rel="noopener">.travis.yml#L30</a>), 它会生成一个<code>sitemap.xml</code>.<br>回到谷歌站长工具, 添加一个<code>sitemap</code>地址<code>https://ahao.moe/sitemap.xml</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.google.com/search-console/sitemaps?resource_id=sc-domain%3Aahao.moe</span><br></pre></td></tr></table></figure></p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>进入<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站点管理</a>, 添加<code>https://ahao.moe</code>, 选择<code>CNAME</code>验证.</p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">解析线路</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center"><code>CNAME</code></td><td style="text-align:center"><code>abcdefg</code></td><td style="text-align:center">默认</td><td style="text-align:center"><code>ziyuan.baidu.com</code></td></tr></tbody></table><p>同理, 为<code>hexo</code>添加<code>hexo-generator-baidu-sitemap</code>插件(<a href="https://github.com/Ahaochan/Ahaochan.github.io/blob/source/.travis.yml#L31" target="_blank" rel="noopener">.travis.yml#L31</a>), 它会生成一个<code>baidusitemap.xml</code>.<br>回到百度站长工具, 添加一个<code>sitemap</code>地址<code>https://ahao.moe/baidusitemap.xml</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ziyuan.baidu.com/linksubmit/index?site=https%3A%2F%2Fahao.moe/</span><br></pre></td></tr></table></figure></p><p>因为之前在阿里云<code>DNS</code>解析将百度的爬虫指向了<code>Coding Me</code>, 所以绕开了<code>GitHub</code>的封锁.</p>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Add_domain_and_allow_Baidu.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Redis持久化RDB和AOF</title>
      <link>https://blog.ahao.moe/posts/Redis_RDB_and_AOF.html</link>
      <guid>https://blog.ahao.moe/posts/Redis_RDB_and_AOF.html</guid>
      <pubDate>Tue, 19 Feb 2019 14:47:55 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;的高速建立在数据存储在内存中, 但是断电的话, 就会导致数据丢失的问题.&lt;br&gt;为此我们需要对数据进行持久化到硬盘中.&lt;br&gt;&lt;code&gt;Redis&lt;/code&gt;提供了两种持久化存储方案, &lt;code&gt;Redis&lt;/code&gt;在启动时会优先加载&lt;code&gt;AOF&lt;/code&gt;文件恢复数据.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;AOF(Append Only File)&lt;/code&gt;: 记录每次执行的命令到日志中, 恢复数据时重新执行一次日志文件中的命令.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB(Redis Database Backup)&lt;/code&gt;: 将数据库的所有数据直接写入磁盘&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Redis</code>的高速建立在数据存储在内存中, 但是断电的话, 就会导致数据丢失的问题.<br>为此我们需要对数据进行持久化到硬盘中.<br><code>Redis</code>提供了两种持久化存储方案, <code>Redis</code>在启动时会优先加载<code>AOF</code>文件恢复数据.</p><ol><li><code>AOF(Append Only File)</code>: 记录每次执行的命令到日志中, 恢复数据时重新执行一次日志文件中的命令.</li><li><code>RDB(Redis Database Backup)</code>: 将数据库的所有数据直接写入磁盘</li></ol><a id="more"></a><h1 id="RDB-Redis-Database-Backup"><a href="#RDB-Redis-Database-Backup" class="headerlink" title="RDB ( Redis Database Backup )"></a>RDB ( Redis Database Backup )</h1><p><code>RDB</code>会将当前<code>Redis</code>中所有存储的数据持久化到<code>dump.rdb</code>文件中.</p><h2 id="save-持久化-阻塞"><a href="#save-持久化-阻塞" class="headerlink" title="save 持久化 ( 阻塞 )"></a>save 持久化 ( 阻塞 )</h2><p><code>Redis</code>是单线程的, 所以<code>save</code>命令一旦执行, 其时间复杂度是<code>O(n)</code>, 数据量一大, <code>Redis</code>就会阻塞后面的请求.<br>所以一般不直接使用<code>save</code>命令进行持久化.</p><h2 id="bgsave-持久化-fork子进程"><a href="#bgsave-持久化-fork子进程" class="headerlink" title="bgsave 持久化 ( fork子进程 )"></a>bgsave 持久化 ( fork子进程 )</h2><p><code>Redis</code>提供了<code>bgsave</code>命令, <code>fork</code>一个子进程来进行<code>save</code>. 这样就不会阻塞住原本的进程.<br><code>fork</code>后的子进程执行<code>save</code>命令, 会创建一个临时<code>RDB</code>文件, 待持久化完毕后, 覆盖之前的<code>RDB</code>文件.<br>但是<code>fork</code>这个操作, 仍然是阻塞的, </p><h2 id="save-seconds-changes-定时持久化"><a href="#save-seconds-changes-定时持久化" class="headerlink" title="save seconds changes ( 定时持久化 )"></a>save seconds changes ( 定时持久化 )</h2><p><code>Redis</code>的配置文件中, 还提供了另一种<code>RDB</code>持久化方式, 格式: <code>save &lt;seconds&gt; &lt;changes&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save "" # 关闭 RDB</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></p><p>表示<code>seconds</code>秒内改变了<code>changes</code>次数据, 则自动<code>bgsave</code>.<br>缺点也很明显, 无法控制生成RDB的频率</p><h2 id="最佳配置-开启-RDB-时"><a href="#最佳配置-开启-RDB-时" class="headerlink" title="最佳配置 ( 开启 RDB 时 )"></a>最佳配置 ( 开启 RDB 时 )</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 注释掉所有的 save 命令</span></span><br><span class="line"><span class="comment"># save 900 1</span></span><br><span class="line"><span class="comment"># save 300 10</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 指定 RDB 文件名</span></span><br><span class="line">dbfilename dump-6379.rdb</span><br><span class="line"><span class="comment"># 3. 指定存储文件夹, 放RDB文件、AOF文件、log文件</span></span><br><span class="line">dir /data</span><br><span class="line"><span class="comment"># 4. 指定 bgsave 发生错误时停止写入</span></span><br><span class="line">stop-writes-on-bgsave-error yes </span><br><span class="line"><span class="comment"># 5. 压缩 RDB 文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 6. 校验 RDB 文件</span></span><br><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure><p>值得注意的是, 即使在配置文件中关闭<code>RDB</code>自动持久化, 在以下情况, 仍会产生<code>RDB</code>文件.</p><ol><li>主从复制之全量复制时, 会生成RDB文件</li><li><code>debug reload</code>重启Redis, 会生成RDB文件</li><li><code>shutdown save</code>保存退出时, 会生成RDB文件</li></ol><h1 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h1><p><code>AOF</code>会将执行的命令<strong>优化(重写)</strong>后, 保存到内存中, 然后再从内存<code>fsync</code>到硬盘中.<br>待恢复时, 重新执行这些命令.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开 AOF 持久化</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 三种 fsync 方式</span></span><br><span class="line"><span class="comment"># appendfsync always # 每次执行命令都会 fsync</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行 fsync</span></span><br><span class="line"><span class="comment"># appendfsync no     # 取决于操作系统执行 fsync (不可控)</span></span><br></pre></td></tr></table></figure><h2 id="手动重写"><a href="#手动重写" class="headerlink" title="手动重写"></a>手动重写</h2><p>假设要执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> a a</span><br><span class="line"><span class="built_in">set</span> a b</span><br><span class="line"><span class="built_in">set</span> a c</span><br></pre></td></tr></table></figure></p><p>那么<code>AOF</code>肯定不会傻傻的将这<code>3</code>条命令写到<code>AOF</code>文件中, 因为只要保证<code>set a c</code>即可.<br>忽略中间态, 这就是<code>AOF</code>重写.<br>可以极大的减少<code>AOF</code>文件大小, 加快<code>AOF</code>恢复速度.</p><p>要手动重写, 只需要执行<code>bgrewriteaof</code>命令即可.<br>它会<code>fork</code>一个子进程来执行<code>AOF</code>重写操作.</p><h2 id="自动重写"><a href="#自动重写" class="headerlink" title="自动重写"></a>自动重写</h2><p><code>Redis</code>也在配置文件<code>/etc/redis.conf</code>中提供了满足一定条件就自动重写的配置.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 当 AOF 文件大于某个值时进行重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># 2. AOF 文件增长率, 下次就是到达 128mb、 256mb 就会重写.</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure></p><p>我们可以在<code>redis-cli</code>客户端查看<code>info</code>信息.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info persistence</span><br><span class="line"><span class="comment"># AOF开启, 才会追加以下信息</span></span><br><span class="line"><span class="comment"># aof_current_size  AOF 文件当前大小</span></span><br><span class="line"><span class="comment"># aof_base_size     上次AOF文件重写时的大小</span></span><br></pre></td></tr></table></figure></p><p>当满足以下条件时, <code>AOF</code>文件会自动重写.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size &gt; auto_aof_rewrite_min_size</span><br><span class="line">aof_current_size - aof_base_size / aof_base_size &gt; auto_aof_rewrite_percentage</span><br></pre></td></tr></table></figure></p><h2 id="最佳配置-开启-AOF-时"><a href="#最佳配置-开启-AOF-时" class="headerlink" title="最佳配置 ( 开启 AOF 时 )"></a>最佳配置 ( 开启 AOF 时 )</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 开启 AOF</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># 2. 指定 AOF 文件名</span></span><br><span class="line">appendfilename appendonly-6379.aof</span><br><span class="line"><span class="comment"># 3. 指定存储文件夹, 放RDB文件、AOF文件、log文件</span></span><br><span class="line">dir /data</span><br><span class="line"><span class="comment"># 4. AOF 每秒保存一次, 宕机最多丢失一秒数据</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 5. AOF 重写时是否正常执行 AOF</span></span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line"><span class="comment"># 6. 当 AOF 文件大于 64mb 时进行重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># 7. AOF 文件增长率, 下次就是到达 128mb、 256mb 就会重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">slowlog官方文档</a></li><li><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">Redis高级功能 - 慢查询日志</a></li><li><a href="https://segmentfault.com/a/1190000014091287" target="_blank" rel="noopener">docker 安装部署 redis（配置文件启动）</a></li><li><a href="http://redis.cn/topics/persistence.html" target="_blank" rel="noopener">Redis 持久化 官方文档</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Redis_RDB_and_AOF.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://blog.ahao.moe/posts/Singleton_Pattern.html</link>
      <guid>https://blog.ahao.moe/posts/Singleton_Pattern.html</guid>
      <pubDate>Thu, 14 Feb 2019 16:15:02 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;什么是单例模式？&quot;&gt;&lt;a href=&quot;#什么是单例模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是单例模式？&quot;&gt;&lt;/a&gt;什么是单例模式？&lt;/h1&gt;&lt;p&gt;单例模式算是设计模式入门的最简单的一个模式, 由于 &lt;code&gt;Java&lt;/code&gt; 语言的特性(指令重排序), 导致同时也是最难的一个模式。&lt;/p&gt;
&lt;p&gt;所幸, 先驱者&lt;code&gt;Joshua Bloch&lt;/code&gt;在&lt;code&gt;Google I/O 2008&lt;/code&gt;上的新书&lt;code&gt;Effective Java&lt;/code&gt;介绍了单例模式的最佳实践。这本神书我还没来的及看, 但在国外好像备受推崇, 所以有机会还是看看。&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h1><p>单例模式算是设计模式入门的最简单的一个模式, 由于 <code>Java</code> 语言的特性(指令重排序), 导致同时也是最难的一个模式。</p><p>所幸, 先驱者<code>Joshua Bloch</code>在<code>Google I/O 2008</code>上的新书<code>Effective Java</code>介绍了单例模式的最佳实践。这本神书我还没来的及看, 但在国外好像备受推崇, 所以有机会还是看看。<br><a id="more"></a></p><p>一个<code>android</code>应用程序的一个单例模式的类只能有且只有一个实例对象。<br>通俗的讲，就是构造方法私有化，并在类内创建唯一一个私有的类实例,提供一个用于获取唯一实例的公有方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;  <span class="comment">//创建唯一一个私有实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;              <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> A(); <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">return</span> instance;    <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>单例模式分为以下两种类型</strong></p><ol><li>饿汉模式：类<strong>加载</strong>的时候便进行创建（加载类时较慢，运行时获取对象较快，线程安全）</li><li>懒汉模式：要<strong>使用</strong>的时候才进行创建（加载类时较快，运行时获取对象较慢，线程不安全）</li></ol><h1 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h1><h2 id="在Java-5-之前的最佳实践"><a href="#在Java-5-之前的最佳实践" class="headerlink" title="在Java 5 之前的最佳实践"></a>在Java 5 之前的最佳实践</h2><p>直接在声明的时候初始化, 当类加载时, <code>instance = new A()</code>就会执行.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance = <span class="keyword">new</span> A(); <span class="comment">//注意这里初始化的时机</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;                       <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;                 <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Java-5-之后的最佳实践"><a href="#Java-5-之后的最佳实践" class="headerlink" title="Java 5 之后的最佳实践"></a>Java 5 之后的最佳实践</h2><p><code>enum</code> 作为枚举关键字, 很难想像到它和 <code>单例模式</code> 联系到一起。<br>但是换种思路, 枚举类只有一个元素, 不就是单例模式了吗?<br>枚举类还可以添加自定义的方法。完全可以当成一个类来使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> A &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h1><blockquote><p>要使用的时候才进行创建</p></blockquote><h2 id="静态内部类-在Java-5-之前的最佳实践"><a href="#静态内部类-在Java-5-之前的最佳实践" class="headerlink" title="静态内部类 (在Java 5 之前的最佳实践)"></a>静态内部类 (在Java 5 之前的最佳实践)</h2><p>因为<code>Holder</code>是静态内部类, 只有<code>getInstance()</code>方法访问到<code>Holder</code>, 才会初始化静态内部类的<code>static</code>的变量.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> A instance = <span class="keyword">new</span> A();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Holder.instance; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双重锁-volatile-在Java-5-之后的最佳实践"><a href="#双重锁-volatile-在Java-5-之后的最佳实践" class="headerlink" title="双重锁+volatile (在Java 5 之后的最佳实践)"></a>双重锁+volatile (在Java 5 之后的最佳实践)</h2><h3 id="双重锁的优化"><a href="#双重锁的优化" class="headerlink" title="双重锁的优化"></a>双重锁的优化</h3><p>上面提到，懒汉式是线程不安全的，对于多线程比较陌生的可能不太理解，先看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;<span class="comment">// 一</span></span><br><span class="line">            instance = <span class="keyword">new</span> A();<span class="comment">// 二</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;<span class="comment">// 三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们获取调用<code>getInstance()</code>方法获取<code>A</code>的实例对象时，如果有多个线程调用<code>getInstance()方法</code>，就会出现线程不安全，怎么解释呢？</p><p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p><ol><li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 此时线程1时间片结束, <code>CPU</code>切换到线程2.</li><li>此时线程2执行到<code>if(instance == null)</code>, 因为线程1还未来得及执行<code>instance = A()</code>, 所以<code>if</code>判断为<code>true</code>, 进入方法体, 此时线程2时间片结束, <code>CPU</code>切换到线程1.</li><li>此时线程1执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, 然后<code>return</code>, 执行结束, 切换回线程2.</li><li>此时线程2在<code>if</code>内, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>851</code>, 然后<code>return</code>.</li></ol><p>看到了吗? 这样就创建了两个<code>A</code>的实例. 说好的单例模式呢?</p><p>那么改一下, 加上<code>synchronized</code>同步一下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;          <span class="comment">// 一</span></span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;    <span class="comment">// 二</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;  <span class="comment">// 三</span></span><br><span class="line">                    instance = <span class="keyword">new</span> A(); <span class="comment">// 四</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance; <span class="comment">// 五</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p><ol><li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 此时线程1时间片结束, <code>CPU</code>切换到线程2.</li><li>此时线程2执行到<code>if(instance == null)</code>, 因为线程1还未来得及执行<code>instance = A()</code>, 所以<code>if</code>判断为<code>true</code>, 进入方法体, 此时线程2时间片结束, <code>CPU</code>切换到线程1.</li><li>线程1拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 此时就算切换回线程2, 线程2也会因为拿不到<code>A.class</code>锁对象, 阻塞在同步代码块外面.</li><li>线程1继续执行<code>if</code>, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, 然后<code>return</code>, 执行结束, 切换回线程2.</li><li>此时线程2拿到<code>A.class</code>锁, 进入<code>synchronized</code>, <code>if</code>判断为<code>false</code>, 直接<code>return</code>.</li></ol><blockquote><p>为什么不把第一个<code>if</code>去掉, 直接留个<code>synchronized + if</code>呢?<br>因为<code>synchronized</code>耗时长, 消耗性能, 双重锁只要保证第一次并发不产生多个对象即可.</p></blockquote><p>你以为这样就线程安全了吗! <code>Java</code>还有个<strong>指令重排序</strong>的大招等着你呢.</p><h3 id="volatile-优化"><a href="#volatile-优化" class="headerlink" title="volatile 优化"></a>volatile 优化</h3><p><code>volatile</code>关键字用来解决指令重排序在多线程下的问题, 它有两个功能.</p><ol><li>保证内存可见性</li><li>防止指令重排序</li></ol><p>我们先看内存可见性(其实这已经被<code>synchronized</code>解决了)<br><code>Java</code>内存模型规定, 变量存储在主存中, 每个线程拥有该变量的一个拷贝副本在自己的工作内存中, 线程修改变量是修改自己工作内存中的变量, 而修改完毕后, 会将自己工作内存中的修改后的值回写到主存中.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;          <span class="comment">// 一</span></span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;    <span class="comment">// 二</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;  <span class="comment">// 三</span></span><br><span class="line">                    instance = <span class="keyword">new</span> A(); <span class="comment">// 四</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance; <span class="comment">// 五</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设有两个线程同时调用了<code>getInstance()</code>方法.</p><ol><li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 继续执行<code>if</code>, 执行<code>instance = A()</code>, <code>instance</code>的<code>hashcode</code>为<code>850</code>, <strong>此时<code>instance</code>没有回写到主存</strong>, 切换回线程2.</li><li>线程2执行到第一个<code>if</code>, 因为线程1的值没有回写到主存, 所以还是会进入<code>if</code>内, 但是被<code>synchronized</code>阻塞了.</li><li>线程1将变量回写到主存, 并<code>return</code>.</li><li>此时线程2拿到<code>A.class</code>锁, 进入<code>synchronized</code>, <code>if</code>判断为<code>false</code>, 直接<code>return</code>.<br>所以就算没有使用<code>volatile</code>保证内存可见性, 也不会导致出错.<br>其实<code>synchronized</code>就有保证内存可见性的功能.<blockquote><p>在 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html" target="_blank" rel="noopener">java.util.concurrent.locks.Lock</a> 接口的Javadoc中有这样一段话：<br>All Lock implementations must enforce the <strong>same memory synchronization semantics as provided by the built-in monitor lock</strong></p></blockquote></li></ol><p>再来看指令重排序<br><code>instance = A();</code> 这条命令并不是原子性的, 它包含3个操作.</p><ol><li>在堆内存申请<code>A</code>实例的内存空间.</li><li>初始化<code>A</code>实例.</li><li>将<code>instance</code>变量指向内存中的<code>A</code>实例的内存空间(执行完这步 <code>instance</code> 就为非 <code>null</code> 了)<br>由于<code>JVM</code>的指令重排序, 步骤<code>123</code>可能会变成<code>132</code>, 多线程下会导致出错.</li></ol><p>假设有两个线程同时调用了<code>getInstance()</code>方法. 指令顺序为<code>132</code>.</p><ol><li>当线程1执行到<code>if(instance == null)</code>时, 判断为<code>true</code>, 进入<code>if</code>内, 拿到<code>A.class</code>锁, 进入<code>synchronized</code>, 继续执行<code>if</code>, 执行<code>instance = A()</code>.</li><li>先在堆内存申请<code>A</code>实例的内存空间, 由于指令重排序, 将<code>instance</code>变量指向没有初始化的, 但是已经申请了的内存空间. 此时线程1时间片结束, CPU切换到线程2.</li><li>线程2执行到第一个<code>if</code>, 因为<code>instance</code>已经指向没有初始化的内存空间, 所以直接<code>return</code>. 这时调用这个单例, 因为还未初始化, 所以会导致错误出现.</li></ol><p>而<code>volatile</code>可以防止指令重排序, 让指令严格按照<code>123</code>的顺序执行.<br><strong>但是, 在<code>Java 5</code>之前, 因为<code>Java</code>内存模型的缺陷, <code>volatile</code>不能解决指令重排序的问题.</strong><br>所以最佳实践就是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="破坏单例模式的攻击"><a href="#破坏单例模式的攻击" class="headerlink" title="破坏单例模式的攻击"></a>破坏单例模式的攻击</h1><h2 id="克隆-clone-攻击"><a href="#克隆-clone-攻击" class="headerlink" title="克隆 clone 攻击"></a>克隆 clone 攻击</h2><p>要用<code>clone</code>攻击单例模式只需要两步.</p><ol><li><code>A</code>类实现<code>Cloneable</code>接口, 虽然里面啥也没有, 主要时为了解决<code>CloneNotSupportedException</code>.</li><li>重写<code>Object</code>中的<code>protected native Object clone()</code>方法, 不然外部访问不了.<br>然后运行<code>main</code>方法, <code>a1==a2</code>得到<code>false</code>.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (A) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        A a2 = (A) a1.clone();</span><br><span class="line">        System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>要解决<code>clone</code>攻击也很简单, 既然是<code>clone</code>方法的问题, 那我们就直接在<code>clone</code>方法改动即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h2><p>用<code>constructor.setAccessible(true);</code>破解私有构造函数.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        A a2 = create(A<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;T&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们只能在构造函数体做文章了.<br>判断如果被初始化过了, 再次初始化则抛出异常即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A instance;  <span class="comment">//创建唯一一个私有实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;               <span class="comment">//私有化构造函数</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;  <span class="comment">//避免反射创建</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"单例模式不允许再创建"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> A(); <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">return</span> instance;    <span class="comment">//返回唯一实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="序列化攻击"><a href="#序列化攻击" class="headerlink" title="序列化攻击"></a>序列化攻击</h2><p>只要对<code>A</code>类实现<code>Serializable</code>接口, 即可进行对象序列化.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"serializable.txt"</span>);</span><br><span class="line">        A a1 = A.getInstance();</span><br><span class="line">        <span class="comment">// 1. 序列化</span></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);) &#123;</span><br><span class="line">            oos.writeObject(a1);</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 反序列化</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);) &#123;</span><br><span class="line">            A a2 = (A) ois.readObject();</span><br><span class="line">            System.out.println(a1 == a2); <span class="comment">// false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要化解序列化攻击, 很简单, 我们先看<code>ois.readObject()</code>这个方法.<br><img src="https://yuml.me/diagram/nofunky/class/[readObject]-&gt;[readObject0],[readObject0]-&gt;[readOrdinaryObject]" alt="readObject调用链"><br>最终调用的是<code>readOrdinaryObject</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">ObjectInput</span>, <span class="title">ObjectStreamConstants</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">        desc.checkDeserialize();</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// =============== !!注意这里!! ===============</span></span><br><span class="line">            obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// =============== !!注意这里!! ===============</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(desc.forClass().getName(), <span class="string">"unable to create instance"</span>).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            desc.hasReadResolveMethod()) &#123; <span class="comment">// 注意这里, false</span></span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到<code>desc.isInstantiable()</code>返回<code>true</code>之后, 反序列化会通过反射创建一个新的对象.<br>看下<code>isInstantiable()</code>的文档.</p><blockquote><p>Returns true if represented class is serializable/externalizable and can be instantiated by the serialization runtime–i.e., if it is externalizable and defines a public no-arg constructor, or if it is non-externalizable and its first non-serializable superclass defines an accessible no-arg constructor.  Otherwise, returns false.</p></blockquote><p>也就是说, 满足以下两种情况任意一种, 则返回<code>true</code></p><ol><li>类实现了<code>Externalizable</code>接口, 并定义了一个无参构造器</li><li>类没有实现<code>Externalizable</code>接口, 它的第一个非<code>Serializable</code>父类(如<code>Object</code>)定义了一个无参构造器.</li></ol><p>我们继续往下看, 根据方法名, 如果<code>A</code>类实现了<code>readResolve</code>方法, 就会调用<code>readResolve</code>方法, 并返回出去.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">ObjectInput</span>, <span class="title">ObjectStreamConstants</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            desc.hasReadResolveMethod()) &#123; <span class="comment">// 注意这里, true</span></span><br><span class="line">            Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">            <span class="comment">// 省略部分代码</span></span><br><span class="line">            <span class="keyword">if</span> (rep != obj) &#123;</span><br><span class="line">                <span class="comment">// 省略部分代码</span></span><br><span class="line">                obj = rep;</span><br><span class="line">                <span class="comment">// 省略部分代码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以, 要化解序列化攻击, 只需要写一个<code>readResolve</code>方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="究极无敌完全进化完美精华牛逼上天单例模式懒汉版"><a href="#究极无敌完全进化完美精华牛逼上天单例模式懒汉版" class="headerlink" title="究极无敌完全进化完美精华牛逼上天单例模式懒汉版"></a>究极无敌完全进化完美精华牛逼上天单例模式懒汉版</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;  <span class="comment">// 化解反射攻击</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"单例模式不允许再创建"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重锁保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> A();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 化解克隆攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 化解序列化攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/70689" target="_blank" rel="noopener">What is an efficient way to implement a singleton pattern in Java?</a></li><li><a href="http://kanlei.github.io/design%20pattern/2017/04/16/double-checked-locking-is-broken" target="_blank" rel="noopener">Double Checked Locking is Broken</a></li><li><a href="http://www.importnew.com/21141.html" target="_blank" rel="noopener">如何正确地写出单例模式</a></li><li><a href="http://ifeve.com/java%E9%94%81%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84/" target="_blank" rel="noopener">Java锁是如何保证数据可见性的</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Singleton_Pattern.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Redis慢查询日志</title>
      <link>https://blog.ahao.moe/posts/Redis_slow_log.html</link>
      <guid>https://blog.ahao.moe/posts/Redis_slow_log.html</guid>
      <pubDate>Sat, 09 Feb 2019 04:38:55 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;的命令有一个生命周期, 比如发送一个&lt;code&gt;set key value&lt;/code&gt;命令.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;客户端发送&lt;code&gt;set key value&lt;/code&gt;到&lt;code&gt;Redis&lt;/code&gt;服务端&lt;/li&gt;
&lt;li&gt;因为&lt;code&gt;Redis&lt;/code&gt;是单线程, 所以命令在队列中排队.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;服务端执行&lt;code&gt;set key value&lt;/code&gt;命令, 并产生结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;服务端将结果发送给&lt;code&gt;Redis&lt;/code&gt;客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而&lt;code&gt;Redis&lt;/code&gt;命令的慢查询命令就是&lt;code&gt;Redis&lt;/code&gt;服务端消耗时间较长的命令, 耗时过长是导致客户端超时的原因&lt;strong&gt;之一&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Redis</code>的命令有一个生命周期, 比如发送一个<code>set key value</code>命令.</p><ol><li><code>Redis</code>客户端发送<code>set key value</code>到<code>Redis</code>服务端</li><li>因为<code>Redis</code>是单线程, 所以命令在队列中排队.</li><li><code>Redis</code>服务端执行<code>set key value</code>命令, 并产生结果</li><li><code>Redis</code>服务端将结果发送给<code>Redis</code>客户端</li></ol><p>而<code>Redis</code>命令的慢查询命令就是<code>Redis</code>服务端消耗时间较长的命令, 耗时过长是导致客户端超时的原因<strong>之一</strong>.</p><a id="more"></a><h1 id="慢查询配置"><a href="#慢查询配置" class="headerlink" title="慢查询配置"></a>慢查询配置</h1><p>慢查询其实就是一个固定长度的<code>FIFO</code>队列, 它保存在内存中.<br>既然是<code>FIFO</code>, 那么肯定会存在旧的慢查询丢失问题, 所以需要定期进行持久化到硬盘.</p><h2 id="修改配置文件重启-不推荐"><a href="#修改配置文件重启-不推荐" class="headerlink" title="修改配置文件重启(不推荐)"></a>修改配置文件重启(不推荐)</h2><p><code>Redis</code>配置文件在<code>/etc/redis.conf</code>下, 里面有两个属性.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 超过 10000 微秒的命令会被记录下来, 为0则记录所有命令, 为负数则禁用慢查询日志</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"># 慢查询日志队列长度, slowlog reset 命令会清空队列回收内存</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure></p><p>实际我们不这样做, 因为<code>Redis</code>支持动态配置.</p><h2 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h2><p><code>Redis</code>可以通过命令, 将配置写入内存中, 再调用<code>config rewrite</code>回写到配置文件中.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">    <span class="comment"># 慢查询日志队列长度, slowlog reset 命令会清空队列回收内存</span></span><br><span class="line">    config <span class="built_in">set</span> slowlog-max-len 256</span><br><span class="line">    config get slowlog-max-len</span><br><span class="line">    <span class="comment"># 超过 20000 微秒的命令会被记录下来, 为0则记录所有命令, 为负数则禁用慢查询日志</span></span><br><span class="line">    config <span class="built_in">set</span> slowlog-log-slower-than 20000</span><br><span class="line">    config get slowlog-log-slower-than</span><br><span class="line">    config rewrite</span><br></pre></td></tr></table></figure></p><p><strong>注意! 如果<code>Redis Server</code>启动时没有指定配置文件, 则<code>config rewrite</code>会报错!</strong></p><p>所以需要指定配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></p><h2 id="Docker-配置"><a href="#Docker-配置" class="headerlink" title="Docker 配置"></a>Docker 配置</h2><p>如果是<code>Docker</code>启动的话, <code>Image</code>里是没有<code>redis.conf</code>的, 需要自己映射<code>volume</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 准备外部文件</span></span><br><span class="line">mkdir /opt/docker/redis/&#123;conf,data&#125; -p</span><br><span class="line">cp /etc/redis.conf /opt/docker/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/docker/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 映射到容器内</span></span><br><span class="line">docker run -p 6380:6379 -v <span class="variable">$PWD</span>/data:/data -v <span class="variable">$PWD</span>/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p><p>如果是<code>Docker-Compose</code>启动的话, 需要指定<code>volume</code>, 然后后台启动<code>docker-compose up -d</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/docker-library/redis/issues/125#issuecomment-363322332</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br></pre></td></tr></table></figure></p><h1 id="慢查询命令"><a href="#慢查询命令" class="headerlink" title="慢查询命令"></a>慢查询命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看慢查询里前100条命令, 注意这里是FIFO</span></span><br><span class="line">slowlog get 100;</span><br><span class="line"><span class="comment"># 2. 记录超过0毫秒的命令, 即所有命令记录下来</span></span><br><span class="line">config <span class="built_in">set</span> slowlog-log-slower-than 0</span><br><span class="line"><span class="comment"># 3. 执行命令</span></span><br><span class="line"><span class="built_in">set</span> k1 v1</span><br><span class="line"><span class="comment"># 4. 查看慢查询里前100条命令, 注意这里是FIFO</span></span><br><span class="line">slowlog get 100</span><br><span class="line"><span class="comment"># 1) 1) (integer) 1</span></span><br><span class="line"><span class="comment">#    2) (integer) 1549684719</span></span><br><span class="line"><span class="comment">#    3) (integer) 141</span></span><br><span class="line"><span class="comment">#    4) 1) "set"</span></span><br><span class="line"><span class="comment">#       2) "k1"</span></span><br><span class="line"><span class="comment">#       3) "v1;"</span></span><br><span class="line"><span class="comment">#    5) "172.17.0.1:56592"</span></span><br><span class="line"><span class="comment">#    6) ""</span></span><br><span class="line"><span class="comment"># 5. 清空慢查询队列</span></span><br><span class="line">slowlog reset</span><br></pre></td></tr></table></figure><p>可以看到慢查询日志由<code>6</code>个部分组成。<a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">官方文档</a></p><table><thead><tr><th style="text-align:center">条目</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>(integer) 1</code></td><td style="text-align:center">慢查询日志的<code>id</code>, 自增</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>(integer) 1549684719</code></td><td style="text-align:center">开始命令的<code>unix</code>时间戳</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>(integer) 141</code></td><td style="text-align:center">执行命令消耗的事件, 以微秒为单位</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><code>1) &quot;set&quot; 2) &quot;k1&quot; 3) &quot;v1;&quot;</code></td><td style="text-align:center">组成命令的参数, 以数组形式存放</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>&quot;172.17.0.1:56592&quot;</code></td><td style="text-align:center"><code>4.0+</code>新增, 客户端的<code>ip:port</code></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><code>&quot;&quot;</code></td><td style="text-align:center"><code>4.0+</code>新增, 客户端的名称</td></tr></tbody></table><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 不要设置过大, 默认10ms, 通常设置1ms</span><br><span class="line">config set slowlog-max-len 1</span><br><span class="line"># 不要设置过小, 通常设置1000左右</span><br><span class="line">config set slowlog-log-slower-than 1000</span><br></pre></td></tr></table></figure><p>慢查询日志是一个<code>FIFO</code>队列, 如果一段时间没有处理, 则旧的慢查询日志则会从队列移除, 所以我们需要定期持久化慢查询日志到硬盘, 通过定时任务插入<code>MySQL</code>等方式.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slowlog get 100</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://redis.io/commands/slowlog" target="_blank" rel="noopener">slowlog官方文档</a></li><li><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">Redis高级功能 - 慢查询日志</a></li><li><a href="https://segmentfault.com/a/1190000014091287" target="_blank" rel="noopener">docker 安装部署 redis（配置文件启动）</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Redis_slow_log.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker数据持久化</title>
      <link>https://blog.ahao.moe/posts/Docker_data_persistence.html</link>
      <guid>https://blog.ahao.moe/posts/Docker_data_persistence.html</guid>
      <pubDate>Sat, 02 Feb 2019 16:28:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当我们使用&lt;code&gt;Docker&lt;/code&gt;创建一个&lt;code&gt;mysql&lt;/code&gt;的&lt;code&gt;container&lt;/code&gt;, 数据是存储在&lt;code&gt;container&lt;/code&gt;内的.&lt;br&gt;如果有一天不小心执行了&lt;code&gt;docker rm $(docker ps -aq)&lt;/code&gt;删除所有&lt;code&gt;container&lt;/code&gt;. 那么&lt;code&gt;mysql&lt;/code&gt;里的数据也会被删掉, 这是不安全的.&lt;br&gt;我们需要将数据持久化, 存储在&lt;code&gt;container&lt;/code&gt;外部. 即使删除&lt;code&gt;container&lt;/code&gt;也不会删除原有的数据.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们使用<code>Docker</code>创建一个<code>mysql</code>的<code>container</code>, 数据是存储在<code>container</code>内的.<br>如果有一天不小心执行了<code>docker rm $(docker ps -aq)</code>删除所有<code>container</code>. 那么<code>mysql</code>里的数据也会被删掉, 这是不安全的.<br>我们需要将数据持久化, 存储在<code>container</code>外部. 即使删除<code>container</code>也不会删除原有的数据.</p><a id="more"></a><h1 id="Data-Volume-数据持久化"><a href="#Data-Volume-数据持久化" class="headerlink" title="Data Volume 数据持久化"></a>Data Volume 数据持久化</h1><p><code>Volume</code>可以将数据持久化到宿主机的某个目录下.<br>我们在官方的<code>mysql</code>的<a href="https://github.com/docker-library/mysql/blob/bb7ea52db4e12d3fb526450d22382d5cd8cd41ca/5.7/Dockerfile#L73" target="_blank" rel="noopener"><code>Dockerfile</code></a>里可以看到指定了<code>VOLUME</code>.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/lib/mysql</span></span><br></pre></td></tr></table></figure></p><p>说明这个<code>mysql</code>的数据存在这个文件夹下, <strong>但是, 不是直接存在这个文件夹下, 里面还有多层目录</strong>.</p><p>先看下下面的例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 运行一个mysql, -v 等价于 VOLUME 关键字, -e 指定环境变量</span></span><br><span class="line">docker run -d -v my-volume:/var/lib/mysql --name my-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># DRIVER   VOLUME NAME</span></span><br><span class="line"><span class="comment"># local    my-volume</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看 my-volume 的详细信息, 可以看到 Mountpoint 指定了具体存储位置</span></span><br><span class="line">docker volumn inspect my-volume</span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         "CreatedAt": "2019-02-03T10:25:00+08:00",</span></span><br><span class="line"><span class="comment">#         "Driver": "local",</span></span><br><span class="line"><span class="comment">#         "Labels": null,</span></span><br><span class="line"><span class="comment">#         "Mountpoint": "/var/lib/docker/volumes/my-volume/_data",</span></span><br><span class="line"><span class="comment">#         "Name": "my-volume",</span></span><br><span class="line"><span class="comment">#         "Options": null,</span></span><br><span class="line"><span class="comment">#         "Scope": "local"</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 删除 container 后, volume 仍然存在</span></span><br><span class="line">docker rm -f my-mysql</span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># DRIVER   VOLUME NAME</span></span><br><span class="line"><span class="comment"># local    my-volume</span></span><br></pre></td></tr></table></figure></p><p>既然数据是在<code>container</code>外部的, 那当然的, 我们可以创建另一个<code>mysql</code>连接到这个<code>Volume</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v my-volume:/var/lib/mysql --name my-mysql-new -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure></p><h1 id="Bing-Mounting-绑定挂载"><a href="#Bing-Mounting-绑定挂载" class="headerlink" title="Bing Mounting 绑定挂载"></a>Bing Mounting 绑定挂载</h1><p><code>Bing Mounting</code>可以将<code>container</code>里的目录和宿主机的目录做映射.<br>比如<code>nginx</code>, 想要改里面的<code>html</code>, 每次都要<code>docker exec -it my-nginx /bin/bash</code>进去容器内部改.<br>并且, <code>container</code>删掉后, 里面的<code>html</code>也不见了.</p><p>使用<code>Bing Mounting</code>解决这个问题.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个自己的 index.html</span></span><br><span class="line">mkdir /opt/nginx</span><br><span class="line"><span class="built_in">cd</span> /opt/nginx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"替换掉的html"</span> &gt; /opt/nginx/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将当前目录 /opt/nginx 和 container 内部的 html 目录做映射</span></span><br><span class="line">docker run -v $(<span class="built_in">pwd</span>):/usr/share/nginx/html -d -p 80:80 --name my-nginx nginx</span><br></pre></td></tr></table></figure></p><p>这样, 在外部访问<code>nginx</code>时, 就可以看到被替换的<code>html</code>.</p>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Docker_data_persistence.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker容器网络</title>
      <link>https://blog.ahao.moe/posts/Docker_network.html</link>
      <guid>https://blog.ahao.moe/posts/Docker_network.html</guid>
      <pubDate>Sat, 02 Feb 2019 15:36:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;有三种网络连接方式, &lt;code&gt;bridge&lt;/code&gt;、&lt;code&gt;host&lt;/code&gt;和&lt;code&gt;none&lt;/code&gt;.&lt;br&gt;&lt;code&gt;Docker&lt;/code&gt;会自动创建&lt;code&gt;3&lt;/code&gt;个网络, 每种&lt;code&gt;1&lt;/code&gt;个.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker network ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# NETWORK ID          NAME                DRIVER              SCOPE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 7b083adc391a        bridge              bridge              local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 5855c878dc68        host                host                local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 9895a4ab897d        none                null                local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Docker</code>有三种网络连接方式, <code>bridge</code>、<code>host</code>和<code>none</code>.<br><code>Docker</code>会自动创建<code>3</code>个网络, 每种<code>1</code>个.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># 7b083adc391a        bridge              bridge              local</span></span><br><span class="line"><span class="comment"># 5855c878dc68        host                host                local</span></span><br><span class="line"><span class="comment"># 9895a4ab897d        none                null                local</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="bridge-网络隔离"><a href="#bridge-网络隔离" class="headerlink" title="bridge 网络隔离"></a>bridge 网络隔离</h1><p>默认的<code>container</code>使用的是<code>bridge</code>连接, <code>container</code>使用<code>--link &lt;container&gt;</code>可以连接到其他的<code>container</code>.<br>做到网络隔离的效果.</p><p>比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个 bridge1 容器, 并查看ip地址</span></span><br><span class="line">docker run -d --name bridge1 busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 ip a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个 bridge2 容器, 并 ping bridge1 的 ip 地址</span></span><br><span class="line">docker run -d --name bridge2 --link bridge1 busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge2 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge2 /bin/ping bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 默认的 bridge 是单向的, bridge1 ping bridge2 失败</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge2</span><br></pre></td></tr></table></figure></p><p>发现<code>bridge2</code>可以直接<code>ping bridge1</code>, 不用输入<code>IP</code>地址.<br>因为<code>--link bridge1</code>相当于给<code>bridge2</code>添加了一条<code>DNS</code>解析.<br><strong>而且, 默认的 <code>bridge</code> 是单向的, 这句话先记着, 后面讲</strong></p><p>我们可以自己创建一个<code>bridge</code>, 做网络隔离.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建自己的 bridge</span></span><br><span class="line">docker network create -d bridge my-bridge</span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个新的 container 连接到 my-bridge</span></span><br><span class="line">docker run -d --name bridge3 --link bridge1 --network my-bridge busybox /bin/sh -c <span class="string">"ping 192.168.0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ping bridge1 失败</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1</span><br></pre></td></tr></table></figure></p><p>把 <code>bridge1</code> 连接到 <code>my-bridge</code>上, 注意, 此时 <code>bridge1</code> 仍然存在于默认的 <code>bridge</code> 上.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 把 bridge1 连接到 my-bridge</span></span><br><span class="line">docker network connect my-bridge bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. ping bridge1 成功</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge3 /bin/ping bridge1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ping bridge3 成功</span></span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge3的IP地址</span><br><span class="line">docker <span class="built_in">exec</span> -it bridge1 /bin/ping bridge3</span><br></pre></td></tr></table></figure></p><p>注意, 我们没有给<code>bridge1</code>添加<code>--link bridge3</code>, 只是连接到 <code>my-bridge</code>, 却可以<code>ping bridge3</code>.<br>因为和默认的<code>bridge</code>不同, <strong>自己创建的<code>bridge</code>默认是双向的</strong>.</p><h1 id="host-共享-network-namespace"><a href="#host-共享-network-namespace" class="headerlink" title="host 共享 network namespace"></a>host 共享 network namespace</h1><p>如果我们用<code>Docker</code>启动了一个<code>nginx</code>服务器.<br>此时, 只有宿主机可以访问<code>Docker</code>容器里的<code>nginx</code>服务器.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 运行本地服务器 nginx</span></span><br><span class="line">docker run -d --name web-local nginx</span><br><span class="line"><span class="comment"># 2. 查看container的容器地址, 默认连接到 bridge 上</span></span><br><span class="line"><span class="comment">#    看 Containers 下的 IPv4Address, 得知 IP 地址为 172.17.0.2</span></span><br><span class="line">docker network inspect bridge</span><br><span class="line"><span class="comment"># 3. 测试连接 nginx, 访问成功</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line">curl http://172.17.0.2</span><br></pre></td></tr></table></figure></p><p>在宿主机里可以访问这个<code>nginx</code>, 但是在局域网的其他机器上, 却不能访问<code>http://172.17.0.2</code>.<br>我们需要把宿主机里的<code>nginx</code>暴露到外部来, 使用端口映射达到这个目的.<br>将<code>container</code>的<code>80</code>端口, 映射到宿主机的<code>8080</code>端口, 这样, 我们直接访问宿主机的<code>8080</code>端口, 就可以间接的访问到<code>nginx</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name web-port-map nginx</span><br></pre></td></tr></table></figure></p><p>以上文字和<code>host</code>毫无关联, 只是为下文做铺垫.<br><code>host</code>可以共享宿主机的<code>network namespace</code>, 关于<code>Linux network namespace</code>可以看我的另一篇文章.<br>把它想象成一个网络沙箱即可.<br>还是用<code>nginx</code>做个简单例子, 我们从上面可以知道部署<code>nginx</code>需要做端口映射.<br>但是使用<code>host</code>共享宿主机的<code>network namespace</code>就可以<strong>不用做端口映射</strong>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name web-host --network host nginx</span><br></pre></td></tr></table></figure></p><p>注意, <strong>这里没有使用端口映射</strong>.<br>然而, 我们依旧能在外部, 使用宿主机的<code>IP</code>地址, 访问到<code>80</code>端口的<code>nginx</code>.</p><h1 id="none-断网操作"><a href="#none-断网操作" class="headerlink" title="none 断网操作"></a>none 断网操作</h1><p>一般用于安全性, 保密性较高的程序.<br>直接隔离网络, 断网.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name net-none --network none busybox /bin/sh -c <span class="string">"while true; do sleep 3600;done"</span></span><br><span class="line">docekr <span class="built_in">exec</span> -it net-none ip a</span><br><span class="line"><span class="comment"># 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span></span><br><span class="line"><span class="comment">#     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class="line"><span class="comment">#     inet 127.0.0.1/8 scope host lo</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://blog.ahao.moe/posts/Docker_network.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
