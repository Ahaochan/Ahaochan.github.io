<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Japari Park</title>
    <link>https://ahaochan.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Java</description>
    <pubDate>Wed, 18 Apr 2018 03:26:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>初探FFmpeg命令行</title>
      <link>https://ahaochan.github.io/posts/learn_FFmpeg_command_tool.html</link>
      <guid>https://ahaochan.github.io/posts/learn_FFmpeg_command_tool.html</guid>
      <pubDate>Wed, 18 Apr 2018 03:24:11 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;微博上很火的&lt;code&gt;sorry&lt;/code&gt;表情包程序, 看到有&lt;code&gt;Java&lt;/code&gt;程序, 于是扒了下来看&lt;a href=&quot;https://github.com/xtyxtyx/sorry&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码&lt;/a&gt;。&lt;br&gt;看是怎么实现的, 原来是生成&lt;code&gt;ass&lt;/code&gt;字幕文件, 然后用&lt;code&gt;FFmpeg&lt;/code&gt;命令加入视频。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微博上很火的<code>sorry</code>表情包程序, 看到有<code>Java</code>程序, 于是扒了下来看<a href="https://github.com/xtyxtyx/sorry" target="_blank" rel="noopener">源码</a>。<br>看是怎么实现的, 原来是生成<code>ass</code>字幕文件, 然后用<code>FFmpeg</code>命令加入视频。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>FFmpeg</code>是用于录制、转换和流化音频和视频的完整解决方案。<br><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">官网地址</a>、<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">GitHub地址</a></p><p><strong>安装教程</strong></p><ul><li><a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">官网安装教程</a></li><li><a href="https://www.vultr.com/docs/how-to-install-ffmpeg-on-centos" target="_blank" rel="noopener">如何在CentOS上安装FFmpeg</a></li></ul><h1 id="ffmpeg-h帮助"><a href="#ffmpeg-h帮助" class="headerlink" title="ffmpeg -h帮助"></a>ffmpeg -h帮助</h1><p>在命令行输入<code>ffmpeg -h</code>可以看到帮助命令。<br>这里只显示常用的帮助命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">用法: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class="line"></span><br><span class="line">获取帮助:</span><br><span class="line">    -h      -- 打印基本帮助命令</span><br><span class="line">    -h long -- 打印更多帮助命令</span><br><span class="line">    -h full -- 打印所有帮助命令 (包括所有格式和编解码器特定的选项, 很长)</span><br><span class="line">    有关选项的详细说明, 请参阅man ffmpeg.</span><br><span class="line"></span><br><span class="line">打印帮助 / 信息 / 功能:</span><br><span class="line">-L                  显示license许可证</span><br><span class="line">-version            显示版本</span><br><span class="line">-formats            显示可用的格式</span><br><span class="line">-codecs             显示可用的编码器、解码器</span><br><span class="line"></span><br><span class="line">全局选项（影响整个程序而不是仅仅一个文件:</span><br><span class="line">-v loglevel         设置日志输出等级</span><br><span class="line">-report             generate a report</span><br><span class="line">-y                  覆盖输出文件</span><br><span class="line">-n                  不覆盖输出文件</span><br><span class="line"></span><br><span class="line">每个文件的主要选项:</span><br><span class="line">-f fmt              指定输出格式</span><br><span class="line">-t duration         录制或转码音频/视频的“持续时间”, 以秒为单位</span><br><span class="line">-to time_stop       录制或转码音频/视频的“截止时间”, 以秒为单位</span><br><span class="line">-ss time_off        录制或转码音频/视频的“开始时间”, 以秒为单位, 也支持[-]hh:mm:ss[.xxx]的时间格式</span><br><span class="line"></span><br><span class="line">视频选项:</span><br><span class="line">-vframes number     设置要输出的视频帧的数量</span><br><span class="line">-r rate             设置帧率(Hz值，分数或缩写)</span><br><span class="line">-s size             设置帧分辨率(如1280x720)</span><br><span class="line">-aspect aspect      设置纵横比 (4:3, 16:9 或 1.3333, 1.7777)</span><br><span class="line">-vn                 禁用视频, 用于只输出音频文件</span><br><span class="line">-vf filter_graph    设置视频过滤器</span><br><span class="line">-ab bitrate         指定音频比特率(单位kbit/s), 如-b:a 320</span><br><span class="line">-b bitrate          指定视频比特率(单位kbit/s), 如-b:v 64</span><br><span class="line"></span><br><span class="line">音频选项:</span><br><span class="line">-ar rate            设置音频采样率(以Hz为单位)</span><br><span class="line">-an                 禁用音频, 用于只输出视频</span><br><span class="line"></span><br><span class="line">字幕选项:</span><br><span class="line">-sn                 禁用字幕</span><br></pre></td></tr></table></figure></p><h1 id="FFmpeg过滤器"><a href="#FFmpeg过滤器" class="headerlink" title="FFmpeg过滤器"></a>FFmpeg过滤器</h1><p><code>ffmpeg</code>目录下, 有个文件夹叫<code>libavfilter</code>, 它可以单独编译为一个库。用于音视频过滤。<br>相当于一个特效之类的东西。<br><a href="https://ffmpeg.org/ffmpeg-filters.html" target="_blank" rel="noopener">官方文档</a></p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><ol><li><p>显示媒体文件详细信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4</span><br></pre></td></tr></table></figure></li><li><p>将视频文件转换为不同的格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure></li><li><p>将视频文件转换为音频文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vn -ar 44100 -ac 2 -ab 320 -f mp3 output.mp3</span><br></pre></td></tr></table></figure></li><li><p>更改视频文件的分辨率</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -s 1280x720 -c:a copy output.mp4 </span><br><span class="line">ffmpeg -i input.mp4 -filter:v scale=640:480 -c:a copy output.mp4</span><br></pre></td></tr></table></figure></li><li><p>压缩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩视频文件</span></span><br><span class="line">ffmpeg -i input.mp4 -vf scale=1280:-1 -c:v libx264 -preset veryslow -crf 24 output.mp4 </span><br><span class="line"><span class="comment"># 压缩音频文件</span></span><br><span class="line">ffmpeg -i input.mp3 -ab 128 output.mp3</span><br></pre></td></tr></table></figure></li><li><p>删除音频、视频</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除视频</span></span><br><span class="line">ffmpeg -i input.mp4 -vn output.mp3</span><br><span class="line"><span class="comment"># 删除音频</span></span><br><span class="line">ffmpeg -i input.mp4 -an output.mp4</span><br></pre></td></tr></table></figure></li><li><p>截取图片</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 截取1帧图片保存为image-01.png的格式</span></span><br><span class="line">ffmpeg -i input.mp4 -r 1 -f image2 image-%2d.png</span><br></pre></td></tr></table></figure></li><li><p>裁剪视频</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从位置(10,20)开始裁剪300×400的部分</span></span><br><span class="line">ffmpeg -i input.mp4 -filter:v <span class="string">"crop=10:20:300:400"</span> output.mp4 </span><br><span class="line"><span class="comment"># 将第10秒开始的50秒视频转为avi格式, 可以用hh.mm.ss格式</span></span><br><span class="line">ffmpeg -i input.mp4 -ss 10 -t 50 output.avi </span><br><span class="line"><span class="comment"># 将纵横比改为16:9</span></span><br><span class="line">ffmpeg -i input.mp4 -aspect 16:9 output.mp4</span><br></pre></td></tr></table></figure></li><li><p>添加字幕到视频文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i subtitle.srt -map 0 -map 1 -c copy -c:v libx264 -crf 23 -preset veryfast output.mp4</span><br></pre></td></tr></table></figure></li><li><p>添加字幕并转为gif</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 6 -vf ass=videoAss.ass,scale=300:-1 -y output.gif</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/xtyxtyx/sorry" target="_blank" rel="noopener">在线制作sorry 为所欲为的gif</a></li><li><a href="https://www.ostechnix.com/20-ffmpeg-commands-beginners/" target="_blank" rel="noopener">20 FFmpeg初学者命令</a></li><li><a href="https://blog.csdn.net/axdc_qa_team/article/details/4204358" target="_blank" rel="noopener">FFMPEG使用参数详解</a></li><li><a href="https://blog.csdn.net/newchenxf/article/details/51364105" target="_blank" rel="noopener">ffmpeg filter过滤器 基础实例及全面解析</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/learn_FFmpeg_command_tool.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>初探Lombok并拒绝它</title>
      <link>https://ahaochan.github.io/posts/learn_Lombok_and_reject_it.html</link>
      <guid>https://ahaochan.github.io/posts/learn_Lombok_and_reject_it.html</guid>
      <pubDate>Wed, 18 Apr 2018 03:21:33 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在一个&lt;code&gt;GitHub&lt;/code&gt;项目发现它使用了&lt;code&gt;Lombok&lt;/code&gt;这个工具。没见过所以了解一下, 但是发现还是不太好用, 于是摒弃之。但好歹记录一下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一个<code>GitHub</code>项目发现它使用了<code>Lombok</code>这个工具。没见过所以了解一下, 但是发现还是不太好用, 于是摒弃之。但好歹记录一下。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok</a>是一个可以大量减少代码的工具, 通过<code>Pluggable Annotation Processing API</code>的方式解析注解, 在<strong>编译期</strong>为<code>class</code>文件注入<code>getter</code>或<code>setter</code>或<code>toString</code>等等诸如此类的代码。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>开发工具<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">IDEA</a></li><li>在IDEA中安装<a href="https://plugins.jetbrains.com/plugin/6317" target="_blank" rel="noopener">Lombok Plugin</a>插件</li><li>导入<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok" target="_blank" rel="noopener">org.projectlombok.lombok</a></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><code>Lombok</code>通过注解生效, <a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">官方注解列表</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(<span class="string">"自动生成的方法:"</span> + user.getId() + <span class="string">","</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="为什么摒弃它"><a href="#为什么摒弃它" class="headerlink" title="为什么摒弃它"></a>为什么摒弃它</h1><ol><li><code>Lombok</code>具有太强的侵入性</li><li>失去了封装的意义</li></ol><h2 id="具有太强的侵入性"><a href="#具有太强的侵入性" class="headerlink" title="具有太强的侵入性"></a>具有太强的侵入性</h2><p>我在第一次接触到到带有<code>Lombok</code>项目的时候, 编译报错, 虽然我导入了<code>Lombok</code>的<code>maven</code>地址, 但是仍然提示找不到<code>getter</code>方法。<br>点进去一看, 发现根本没有<code>getter</code>方法, 只有一个<code>@Getter</code>注解。</p><p>也就是说, 一旦你使用了<code>Lombok</code>, 所有编译你代码的人都必须使用<code>Lombok</code>编译, 传染性、侵入性太强</p><h1 id="失去了封装的意义"><a href="#失去了封装的意义" class="headerlink" title="失去了封装的意义"></a>失去了封装的意义</h1><p>更重要的是, <strong>面向对象</strong>。<br>如果我们只是不想写<code>getter</code>和<code>setter</code>方法, 不如就直接将<code>field</code>设置成<code>public</code>。<br>长久的写重复的<code>getter</code>和<code>setter</code>方法已经让人不知道为什么要这样写, 只知道大家都是这样写, 以前都是这样写, 所以这样写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(name) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"admin"</span>: <span class="keyword">this</span>.name = <span class="string">"I am admin:"</span>+name; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"user"</span> : <span class="keyword">this</span>.name = <span class="string">"I am user:"</span> +name; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二个<code>setter</code>方法, 封装了逻辑操作, 和第一个方法不同, 这就是<code>setter</code>方法的意义。</p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/learn_Lombok_and_reject_it.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>SQLServer的PARTITION_BY进行分区查询</title>
      <link>https://ahaochan.github.io/posts/use_PARTITION_BY_to_query.html</link>
      <guid>https://ahaochan.github.io/posts/use_PARTITION_BY_to_query.html</guid>
      <pubDate>Wed, 18 Apr 2018 03:19:10 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;假设有一个用户表&lt;code&gt;admin(id, name, sex)&lt;/code&gt;, 现在有个需求。&lt;br&gt;是按照性别&lt;code&gt;sex&lt;/code&gt;进行分区, 然后排序。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假设有一个用户表<code>admin(id, name, sex)</code>, 现在有个需求。<br>是按照性别<code>sex</code>进行分区, 然后排序。</p><a id="more"></a><p>比如有以下数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id          name       sex(1男2女)</span><br><span class="line">1          admin1          1</span><br><span class="line">2          admin2          1</span><br><span class="line">3          admin3          2</span><br><span class="line">4          admin4          2</span><br><span class="line">5          admin5          2</span><br></pre></td></tr></table></figure></p><p>要求查询性别<code>sex</code>进行分区, 然后排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            1</span><br><span class="line">4          admin4          2            2</span><br><span class="line">5          admin5          2            3</span><br></pre></td></tr></table></figure></p><h1 id="使用ROW-NUMBER进行排序"><a href="#使用ROW-NUMBER进行排序" class="headerlink" title="使用ROW_NUMBER进行排序"></a>使用ROW_NUMBER进行排序</h1><p>首先获取行数, <code>SQLServer</code>提供了<code>ROW_NUMBER</code>函数。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tmp.*, ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> tmp.id <span class="keyword">asc</span>) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">from</span> ( <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, sex <span class="keyword">from</span> <span class="keyword">admin</span> ) tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> row_num <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            3</span><br><span class="line">4          admin4          2            4</span><br><span class="line">5          admin5          2            5</span><br></pre></td></tr></table></figure><p>但是需求是, 根据<code>sex</code>分区排序, 所以添加一个<code>partition by</code>关键字。</p><h1 id="使用PARTITION-BY进行分区"><a href="#使用PARTITION-BY进行分区" class="headerlink" title="使用PARTITION  BY进行分区"></a>使用PARTITION  BY进行分区</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tmp.*, ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> sex <span class="keyword">order</span> <span class="keyword">by</span> tmp.id <span class="keyword">asc</span>) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">from</span> ( <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, sex <span class="keyword">from</span> <span class="keyword">admin</span> ) tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sex <span class="keyword">asc</span>, row_num <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id          name       sex(1男2女)   row_num</span><br><span class="line">1          admin1          1            1</span><br><span class="line">2          admin2          1            2</span><br><span class="line">3          admin3          2            1</span><br><span class="line">4          admin4          2            2</span><br><span class="line">5          admin5          2            3</span><br></pre></td></tr></table></figure><p>完成, 此外还可以用来做分区求和等功能。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/wawmg/article/details/40840093" target="_blank" rel="noopener">sum over partition by 的用法</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/use_PARTITION_BY_to_query.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>从Response读取XML字符串进行解析</title>
      <link>https://ahaochan.github.io/posts/read_XML_string_from_Response_for_parsing.html</link>
      <guid>https://ahaochan.github.io/posts/read_XML_string_from_Response_for_parsing.html</guid>
      <pubDate>Wed, 18 Apr 2018 03:06:13 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;调用&lt;code&gt;WebService&lt;/code&gt;接口返回了&lt;code&gt;XML&lt;/code&gt;的数据, 需要解析并封装为一个&lt;code&gt;AjaxDto(status, msg, obj)&lt;/code&gt;对象。&lt;br&gt;项目中已经依赖了&lt;code&gt;Apache&lt;/code&gt;的&lt;a href=&quot;https://mvnrepository.com/artifact/commons-configuration/commons-configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;commons-configuration&lt;/a&gt;, 所以就直接拿来用了。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调用<code>WebService</code>接口返回了<code>XML</code>的数据, 需要解析并封装为一个<code>AjaxDto(status, msg, obj)</code>对象。<br>项目中已经依赖了<code>Apache</code>的<a href="https://mvnrepository.com/artifact/commons-configuration/commons-configuration" target="_blank" rel="noopener">commons-configuration</a>, 所以就直接拿来用了。</p><a id="more"></a><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p>响应体<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="GBK" ?&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>integer<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span>&gt;</span>String<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>解析代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlParser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(XmlParser.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String xml = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"GBK\" ?&gt; \n"</span> +</span><br><span class="line">                <span class="string">"&lt;response&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;code&gt;integer&lt;/code&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;message&gt;String&lt;/message&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/response&gt;\n"</span>;</span><br><span class="line">        XmlParser parser = XmlParser.init(xml);</span><br><span class="line">        <span class="keyword">if</span>(parser == <span class="keyword">null</span>)&#123;</span><br><span class="line">            logger.error(<span class="string">"创建失败"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(parser.getString(<span class="string">"head.code"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XMLConfiguration config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> XmlParser <span class="title">init</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 字符串转为输入流</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> ByteArrayInputStream(xml.getBytes());) &#123;</span><br><span class="line">            XmlParser parser = <span class="keyword">new</span> XmlParser(in);</span><br><span class="line">            <span class="keyword">return</span> parser;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ConfigurationException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"加载xml错误"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">XmlParser</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> ConfigurationException </span>&#123;</span><br><span class="line">        <span class="comment">// 2. 读取输入流数据</span></span><br><span class="line">        config = <span class="keyword">new</span> XMLConfiguration();</span><br><span class="line">        config.load(in);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 获取节点数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String xpath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getString(xpath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>注意以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(parser.getString(<span class="string">"response.head.code"</span>));</span><br><span class="line">System.out.println(parser.getString(<span class="string">"head.code"</span>));</span><br></pre></td></tr></table></figure></p><p>我第一次使用的时候, 是使用第一行<code>response.head.code</code>代码的, 但是获取失败。<br>改成第二行<code>head.code</code>代码就行了。<br>后来想了下原因, <code>response</code>是根节点, 根节点<strong>有且只有</strong>一个。所以也就不需要特意去指定了。</p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/read_XML_string_from_Response_for_parsing.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>被忽视的初始化块</title>
      <link>https://ahaochan.github.io/posts/Ignored_initialization_block.html</link>
      <guid>https://ahaochan.github.io/posts/Ignored_initialization_block.html</guid>
      <pubDate>Tue, 27 Mar 2018 03:12:04 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;从学过初始化块之后, 就一直没用到, 今天学习&lt;code&gt;Mybatis&lt;/code&gt;, 居然有一处语法没看懂。特此记录一下。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrivilegeProvider&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;selectById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Long id)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SQL()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                SELECT(&lt;span class=&quot;string&quot;&gt;&quot;id, privilege_name, privilege_url&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从学过初始化块之后, 就一直没用到, 今天学习<code>Mybatis</code>, 居然有一处语法没看懂。特此记录一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectById</span><span class="params">(<span class="keyword">final</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                SELECT(<span class="string">"id, privilege_name, privilege_url"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h1><p>这可不是<code>Lambda</code>表达式, 因为环境是<code>JDK 1.7</code>。<br>而是<strong>初始化块</strong>。<br>我们自己创建个例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 链式编程, 返回this</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyList&lt;E&gt; <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        list.add(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyList&lt;String&gt; list = <span class="keyword">new</span> MyList&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">// 初始化块</span></span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"test1"</span>);</span><br><span class="line">                add(<span class="string">"test2"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    add(<span class="string">"test3"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Assert.assertEquals(<span class="number">4</span>, list.list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyList&lt;String&gt; list = <span class="keyword">new</span> MyList&lt;String&gt;()</span><br><span class="line">                .add(<span class="string">"test1"</span>)</span><br><span class="line">                .add(<span class="string">"test2"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">"test3"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.assertEquals(<span class="number">4</span>, list.list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看<code>test1</code>方法, 是不是和上面的很熟悉, 其实就是使用了初始化块, 进行初始化。和下面<code>test2</code>方法是等价的。</p><p>而且也不会产生匿名内部类, 对于某些需要参数进行初始化, 而不得不将其设计为抽象类的类, 是一种很好的代码优化手段。</p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Ignored_initialization_block.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>HttpOnly详解</title>
      <link>https://ahaochan.github.io/posts/What_is_HttpOnly.html</link>
      <guid>https://ahaochan.github.io/posts/What_is_HttpOnly.html</guid>
      <pubDate>Tue, 27 Mar 2018 03:10:04 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Http&lt;/code&gt;连接是无状态的, 也就是说, 即使你发送第一次&lt;code&gt;Http&lt;/code&gt;请求, 传了个&lt;code&gt;param&lt;/code&gt;参数给&lt;code&gt;Web&lt;/code&gt;服务器。第二次&lt;code&gt;Http&lt;/code&gt;请求想获取&lt;code&gt;param&lt;/code&gt;参数, 是获取不到的, 因为&lt;code&gt;Web&lt;/code&gt;服务器是不认识你的。&lt;br&gt;为了完成这个需求, 我们可以使用&lt;code&gt;Cookie&lt;/code&gt;和&lt;code&gt;Session&lt;/code&gt;进行存储数据, 在&lt;code&gt;Cookie&lt;/code&gt;中存入本次会话的&lt;code&gt;SessionID&lt;/code&gt;, 那&lt;code&gt;Web&lt;/code&gt;服务器从&lt;code&gt;Cookie&lt;/code&gt;中获取&lt;code&gt;SessionID&lt;/code&gt;就可以知道你是哪个用户, 知道你之前存了什么数据。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Http</code>连接是无状态的, 也就是说, 即使你发送第一次<code>Http</code>请求, 传了个<code>param</code>参数给<code>Web</code>服务器。第二次<code>Http</code>请求想获取<code>param</code>参数, 是获取不到的, 因为<code>Web</code>服务器是不认识你的。<br>为了完成这个需求, 我们可以使用<code>Cookie</code>和<code>Session</code>进行存储数据, 在<code>Cookie</code>中存入本次会话的<code>SessionID</code>, 那<code>Web</code>服务器从<code>Cookie</code>中获取<code>SessionID</code>就可以知道你是哪个用户, 知道你之前存了什么数据。</p><a id="more"></a><h1 id="危险"><a href="#危险" class="headerlink" title="危险"></a>危险</h1><p>我们知道<code>Cookie</code>是明文存储的, 甚至就算是小白用户, 也可以通过浏览器直接查看。那么如果小明知道了小红的<code>Cookie</code>里的用户凭证, 然后将自己的<code>Cookie</code>的用户凭证改为小红的用户凭证, 那不就可以看到小红的信息了? </p><h1 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h1><p>比如我自己搭建一个服务器<code>http://localhost:8080</code>, 然后在要窃取<code>Cookie</code>页面按下<code>F12</code>打开<code>Console</code>控制台执行下面代码(<code>XSS</code>攻击)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">'http://localhost:8080?c='</span>+<span class="built_in">document</span>.cookie);</span><br></pre></td></tr></table></figure><p>就可以将<code>Cookie</code>发送到我们自己的服务器。</p><p>那么, 只要不让<code>document</code>获取到敏感<code>Cookie</code>就好了。<br>为<code>Cookie</code>设置<code>HttpOnly</code>, 禁止<code>js</code>获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="keyword">true</span>); <span class="comment">// 设置HttpOnly</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test.jsp"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://segmentfault.com/q/1010000007347730" target="_blank" rel="noopener">关于cookie的安全性问题</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/What_is_HttpOnly.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mybatis回写主键的值</title>
      <link>https://ahaochan.github.io/posts/how_to_get_primary_key_in_Mybatis.html</link>
      <guid>https://ahaochan.github.io/posts/how_to_get_primary_key_in_Mybatis.html</guid>
      <pubDate>Tue, 27 Mar 2018 03:05:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;每种数据库都有自己的主键生成方式，比如&lt;code&gt;MySQL&lt;/code&gt;支持自增的主键, 在插入数据后自动生成主键, 比如&lt;code&gt;Oracle&lt;/code&gt;通过序列的方式, 在插入数据之前生成主键, 再写去表中。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每种数据库都有自己的主键生成方式，比如<code>MySQL</code>支持自增的主键, 在插入数据后自动生成主键, 比如<code>Oracle</code>通过序列的方式, 在插入数据之前生成主键, 再写去表中。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User User)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">// 省略构造函数和getter setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 初始化 SqlSession</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = factory.openSession())&#123;</span><br><span class="line">            <span class="comment">// 2.  获取Mapper</span></span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setName(<span class="string">"测试用户"</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">            Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">            <span class="comment">// 3. 判断主键回写成功</span></span><br><span class="line">            Assert.assertNotNull(user.getId());</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用JDBC的useGeneratedKeys获取主键值"><a href="#使用JDBC的useGeneratedKeys获取主键值" class="headerlink" title="使用JDBC的useGeneratedKeys获取主键值"></a>使用JDBC的useGeneratedKeys获取主键值</h1><p>只支持<strong>插入数据后</strong>生成主键的数据库。如<code>MySQL</code>和<code>SQLServer</code>。<br>底层是使用了<code>JDBC</code>的<code>statement.getGeneratedKeys()</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert sys_user(id, name) values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用selectKey获取主键值"><a href="#使用selectKey获取主键值" class="headerlink" title="使用selectKey获取主键值"></a>使用selectKey获取主键值</h1><p><code>useGeneratedKeys</code>局限于主键自增的数据库, 不支持<code>Oracle</code>这种先<strong>生成主键</strong>, 再把主键插入数据库中的形式。<br><code>selectKey</code>两者都支持, 缺点就是比较笨重, 需要写多一点<code>xml</code>代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"Long"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert sys_user(id, name) values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>keyProperty</code>指的是实体的<code>field</code>名称, <code>keyColumn</code>指的是数据表的<code>column</code>名称, <code>resultType</code>指定返回的<code>Java</code>类型。<br><code>order</code>分为<code>AFTER</code>和<code>BEFORE</code>, 因为<code>MySQL</code>中, 主键是在插入数据之后生成的, 所以选择<code>AFTER</code>。<code>Oracle</code>则要选<code>Before</code>。<br>需要注意的是, <code>selectKey</code>的位置不会影响结果, 最好是根据实际情况来选择放置位置, 比如<code>MySQL</code>就放在<code>SQL</code>之前, 表示先生成主键后插入数据。</p><h2 id="各数据库回写主键的SQL"><a href="#各数据库回写主键的SQL" class="headerlink" title="各数据库回写主键的SQL"></a>各数据库回写主键的SQL</h2><ul><li><a href="https://www.mysql.com/cn/" target="_blank" rel="noopener">MySQL</a>： <code>SELECT LAST_INSERT_ID()</code></li><li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-2017" target="_blank" rel="noopener">Sql Server</a>：<code>SELECT SCOPE_IDENTITY()</code></li><li><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">Oracle</a>：<code>SELECT SEQ_ID.nextval from dual</code></li><li><a href="https://www.ibm.com/analytics/us/en/db2/" target="_blank" rel="noopener">Db2</a>： <code>VALUES IDENTITY_VAL_LOCAL()</code></li><li><a href="http://hsqldb.org/" target="_blank" rel="noopener">HSQLDB</a>：<code>CALL IDENTITY()</code></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/how_to_get_primary_key_in_Mybatis.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mybatis文件位置引发的mappedStatements为空</title>
      <link>https://ahaochan.github.io/posts/Mybatis_mapper_xml_location_causes_mappedStatements_is_empty.html</link>
      <guid>https://ahaochan.github.io/posts/Mybatis_mapper_xml_location_causes_mappedStatements_is_empty.html</guid>
      <pubDate>Mon, 19 Mar 2018 14:11:21 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在不使用&lt;code&gt;Spring&lt;/code&gt;进行初始化&lt;code&gt;Bean&lt;/code&gt;, 单纯的使用&lt;code&gt;Mybatis&lt;/code&gt;的时候, 遇到&lt;code&gt;xml&lt;/code&gt;读取不到的问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在不使用<code>Spring</code>进行初始化<code>Bean</code>, 单纯的使用<code>Mybatis</code>的时候, 遇到<code>xml</code>读取不到的问题。</p><a id="more"></a><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><img src="http://op0kfrlb1.bkt.clouddn.com/static/images/Mybatis文件位置引发的mappedStatements为空_01.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==============================日志============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--==============================日志============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'A'</span>), (<span class="string">'B'</span>), (<span class="string">'C'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"SLF4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册mapper的三种方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ahao.demo.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="UserMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="com.ahao.demo.mapper.UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间,作用就是对sql进行分类化管理,理解sql隔离 注意:使用mapper代理方法开发,namespace有特殊重要的作用,namespace等于mapper接口地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ahao.demo.mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    List&lt;Map&lt;String, String&gt;&gt; selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ahao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ahao.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 从 mybatis-config.xml 初始化 sqlSessionFactory</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 2. 读取并显示</span></span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            System.out.println(userMapper);</span><br><span class="line">            List user = userMapper.selectAll();</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>运行过后抛出一个异常, <code>statement</code>没有找到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.ahao.demo.mapper.UserMapper.selectAll</span><br></pre></td></tr></table></figure></p><p>通过<code>debug</code>看到<code>sqlSessionFactory</code>对象中的<code>Configuration</code>内有两个属性，<code>mapperRegistry</code>和<code>mappedStatements</code>看起来是存储<code>mapper</code>类和对应的<code>Statements</code>的两个属性。<br><img src="http://op0kfrlb1.bkt.clouddn.com/static/images/Mybatis文件位置引发的mappedStatements为空_02.png"><br><img src="http://op0kfrlb1.bkt.clouddn.com/static/images/Mybatis文件位置引发的mappedStatements为空_03.png"><br><code>mapperRegistry</code>注册成功了, 但是<code>mappedStatements</code>为空, 也就是<code>Class</code>加载成功了, <code>xml</code>加载失败。</p><p><code>xml</code>自动扫描配置是包扫描, 那么切换成别的可行吗?<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Invalid bound statement (not found) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ahao.demo.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载成功 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Invalid bound statement (not found) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.ahao.demo.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到只有直接指定<code>xml</code>才能加载成功。<br><strong>那就是通过<code>Class</code>自动去寻找对应<code>xml</code>的时候发生了异常。</strong><br>翻阅了<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">官方文档</a>, 并没有相关资料。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>然后检查<code>target</code>文件夹的时候, 发现<code>UserMapper.xml</code>和<code>UserMapper.class</code>没有在同一个文件夹内, 于是将<code>target</code>下的<code>UserMapper.xml</code>拖到<code>UserMapper.class</code>同级目录<br>。调试发现<code>mappedStatements</code>有数据。成功了, 推测应该是通过包名转文件路径进行扫描的。<br><img src="http://op0kfrlb1.bkt.clouddn.com/static/images/Mybatis文件位置引发的mappedStatements为空_04.png"></p><p>经过测试, 有两种解决方案</p><ol><li>手动移动<code>target</code>文件夹内的<code>mapper.xml</code>到对应的<code>mapper.class</code><strong>相同文件夹</strong><code>/WEB-INF/class/com/ahao/demo/mapper</code>下。</li><li>将<code>mapper.xml</code>放在<code>resource</code>文件夹内, 对应的文件<strong>目录结构</strong><code>/resource/com/ahao/demo/mapper</code>下。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>Mybatis</code>太坑, 没有个<code>file not found</code>提示。在<code>IDEA</code>下, 就算一开始将<code>mapper.xml</code>文件放在<code>src/java</code>文件夹下, 编译后也不会将<code>xml</code>放到<code>target</code>的相同目录下。<br>不过有<code>Spring</code>就不用担心了, <code>Spring</code>可以指定扫描<code>xml</code>文件位置。实际开发一般都是和<code>Spring</code>整合的吧。</p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Mybatis_mapper_xml_location_causes_mappedStatements_is_empty.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux之sed流文本编辑器</title>
      <link>https://ahaochan.github.io/posts/sed_of_Linux.html</link>
      <guid>https://ahaochan.github.io/posts/sed_of_Linux.html</guid>
      <pubDate>Mon, 19 Mar 2018 13:57:01 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;stream editor&lt;/code&gt;是&lt;code&gt;Unix&lt;/code&gt;的行处理命令, 以&lt;strong&gt;行&lt;/strong&gt;为单位, 依次读入文本的每行进行处理。&lt;br&gt;&lt;code&gt;sed&lt;/code&gt;&lt;strong&gt;一般&lt;/strong&gt;不会对原文件进行操作, 当然, 有例外。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 复制测试文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# cp /etc/passwd /tmp/passwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>stream editor</code>是<code>Unix</code>的行处理命令, 以<strong>行</strong>为单位, 依次读入文本的每行进行处理。<br><code>sed</code><strong>一般</strong>不会对原文件进行操作, 当然, 有例外。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制测试文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/passwd /tmp/passwd</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h1><p><code>p</code>参数: 前面接数字或正则表达式, 打印匹配内容<br><code>-n</code>参数: 不自动打印内容, 如果不和<code>p</code>一起使用, 则会输出两次相同内容<br><code>!</code>参数: 对之前的参数进行取反<br><code>a~b</code>参数: 从<code>a</code>行开始, 每隔<code>b</code>行执行操作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打印所有行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n 'p'</span></span><br><span class="line"><span class="comment"># 2. 打印所有行, 不使用 -n 会打印两次</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 'p'</span></span><br><span class="line"><span class="comment"># 3. 打印第2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2p'</span></span><br><span class="line"><span class="comment"># 4. 打印匹配正则表达式为 root 的一行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '/root/p'</span></span><br><span class="line"><span class="comment"># 5. 打印第2-10行的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2,10p'</span></span><br><span class="line"><span class="comment"># 6. 打印匹配正则表达式为 root 和 ahao 之间的行的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '/root/,/ahao/p'</span></span><br><span class="line"><span class="comment"># 7. 打印除了第2-10行的所有行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2,10!p'</span></span><br><span class="line"><span class="comment"># 8. 打印第2行开始, 每3行的所有行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed -n '2~3p'</span></span><br></pre></td></tr></table></figure></p><h1 id="增删-不影响原文件"><a href="#增删-不影响原文件" class="headerlink" title="增删(不影响原文件)"></a>增删(不影响原文件)</h1><p><code>na string</code>参数: 表示在第<code>n</code>行后面追加(<code>append</code>)一行<code>string</code><br><code>ni string</code>参数: 表示在第<code>n</code>行前面插入(<code>insert</code>)一行<code>string</code><br><code>nd</code>参数: 将第<code>n</code>行或匹配正则表达式<code>n</code>的一行删除(<code>delete</code>)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在第5行后面追加(append)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5a HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 2. 在第2-5行每行后面追加(append)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5a HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 在第5行前面插入(insert)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5i HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 4. 在第2-5行每行前面插入(insert)一行内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5i HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 将第2-5行的内容删除(delete)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5d'</span></span><br><span class="line"><span class="comment"># 6. 将匹配正则表达式 root 的行内容删除(delete)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '/root/d'</span></span><br></pre></td></tr></table></figure></p><h1 id="替换-不影响原文件"><a href="#替换-不影响原文件" class="headerlink" title="替换(不影响原文件)"></a>替换(不影响原文件)</h1><p><code>nc string</code>参数: 将第<code>n</code>行替换(<code>replace</code>)为<code>string</code><br><code>s/regexp/replacement/</code>参数: 将每行第一个匹配<code>regexp</code>正则表达式的替换为<code>replacement</code><br><code>s/regexp/replacement/g</code>参数: 将每行所有匹配<code>regexp</code>正则表达式的替换为<code>replacement</code><br><code>s/regexp/str1 &amp; str2/g</code>参数: <code>&amp;</code>参数表示正则表达式匹配的值<br><code>s/regexp/\u&amp;/g</code>参数: <code>\u</code>首字母大写, <code>\U</code>所有字母大写<br><code>()</code>参数: 括号捕获多个值, 用<code>\1</code>、<code>\2</code>等表示捕获的第几个值<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 将第5行替换(replace)为指定字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '5c HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"><span class="comment"># 2. 将第2-5行替换(replace)为指定字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '2,5c HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将每行第1个匹配正则表达式 : 的内容替换为 %</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%/'</span></span><br><span class="line"><span class="comment"># 4. 将每行所有匹配正则表达式 : 的内容替换为 %, g 全局替换</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%/g'</span></span><br><span class="line"><span class="comment"># 5. 将每行所有匹配正则表达式 : 的内容替换为 %包裹的字符串, &amp;表示匹配的字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/:/%&amp;%/g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 将匹配到的单词首字母转为大写, \u转为大写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/[a-z]*/\u&amp;/g'</span></span><br><span class="line"><span class="comment"># 7. 将匹配到的单词所有字母转为大写, \U转为大写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed 's/[a-z]*/\U&amp;/g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 使用()获取用户名, UID, GID, -r 不用加转义符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp/passwd | sed 's/^\([a-z_-]\+\):x:\([0-9]\+\):\([0-9]\+\):.*$/USER:\1  UID:\2  GID:\3/'</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp/passwd | sed -r 's/^([a-z_-]+):x:([0-9]+):([0-9]+):.*$/USER:\1  UID:\2  GID:\3/'</span></span><br></pre></td></tr></table></figure></p><h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><p><code>q</code>参数: 退出<code>sed</code>命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 到第3行就退出(quit)sed</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '3q'</span></span><br><span class="line"><span class="comment"># 2. 找到匹配 root 正则就退出(quit)sed</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nl /tmp/passwd | sed '/root/q'</span></span><br></pre></td></tr></table></figure></p><h1 id="读写原文件-修改原文件"><a href="#读写原文件-修改原文件" class="headerlink" title="读写原文件(修改原文件)"></a>读写原文件(修改原文件)</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个文件</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  echo -e '123\n456\n789' &gt; hello.txt</span></span><br><span class="line"><span class="comment"># 2. 将/tmp/passwd插入 读入(read)的hello.txt文件的第1行后面打印输出, 不修改hello.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '1r /tmp/passwd' hello.txt</span></span><br><span class="line"><span class="comment"># 3. 将 hello.txt 写入(write)覆盖 /tmp/passwd, 修改/tmp/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed 'w /tmp/passwd' </span></span><br><span class="line"><span class="comment"># 4. 将 hello.txt 的第2行写入(write)覆盖 /tmp/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '2w /tmp/passwd' hello.txt</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/sed_of_Linux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux之awk流文本编辑器</title>
      <link>https://ahaochan.github.io/posts/awk_of_Linux.html</link>
      <guid>https://ahaochan.github.io/posts/awk_of_Linux.html</guid>
      <pubDate>Mon, 19 Mar 2018 13:54:59 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;是&lt;code&gt;Unix&lt;/code&gt;的行处理命令, 以&lt;strong&gt;行&lt;/strong&gt;为单位, 依次读入文本的每行进行切片处理。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 复制测试文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# cp /etc/passwd /tmp/passwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>awk</code>是<code>Unix</code>的行处理命令, 以<strong>行</strong>为单位, 依次读入文本的每行进行切片处理。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制测试文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /etc/passwd /tmp/passwd</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [option] &apos;[BEGIN&#123;awk 操作命令&#125;]pattern&#123;awk 操作命令&#125;[END&#123;awk 操作命令&#125;]&apos; file(s)</span><br></pre></td></tr></table></figure><p><code>BEGIN{awk 操作命令}</code>: 可选的, 前置操作, 在执行<code>pattern</code>循环之前执行。<br><code>END{awk 操作命令}</code>:   可选的, 后置操作, 在执行<code>pattern</code>循环之后执行。<br><code>pattern{awk 操作命令}</code>: 必选的, 对每行进行处理。<br><code>awk 操作命令</code>: 包括函数调用<code>printf()</code>, 控制指令<code>if else</code>等。</p><h1 id="切片处理"><a href="#切片处理" class="headerlink" title="切片处理"></a>切片处理</h1><p>所谓的<strong>切片处理</strong>, 举个例子就是<code>a:b:c</code>, 可以将<code>:</code>作为分隔符, 划分为<code>3</code>个片段。</p><p><code>-F separator</code>选项: 指定<code>separator</code>作为分隔符, 默认为空格<br><code>$n</code>变量: <code>$0</code>表示当前行的内容, <code>$n</code>表示当前行内, 以上面的<code>separator</code>分割的第<code>n</code>个片段<br><code>NR</code>变量: 每行的行号, <code>The total number of input records seen so far.</code><br><code>NF</code>变量: 分割的片段的数量, <code>The number of fields in the current input record.</code><br><code>FILENAME</code>变量: 正在处理的文件名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取以 : 作为分隔符, 第3个片段, 即UID</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 获取以 : 作为分隔符, 第1和3个片段, 即用户名和UID</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $1,$3&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $1" "$3&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print "USER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 输出每行的行号NR和片段数NF</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print NR"\t"NF"\tUSER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 4. 输出处理的文件名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print FILENAME"\tUSER:"$1"\tUID:"$3&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure><h1 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h1><p><code>pattern</code>是每行前的一个匹配表达式。分为两种。</p><ol><li><code>~</code>, <code>!~</code>: 匹配正则表达式</li><li><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>: 判断逻辑表达式</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打印出匹配root的每行行号和内容</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'/root/&#123;print NR"\t"$0&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 打印出UID为1开头的每行行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3~/^1.*/&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 打印出UID不为1开头的每行行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3!~/^1.*/&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 打印出UID大于100的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;if($3&gt;100) print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3&gt;100&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 2. 打印出UID等于0的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3==0&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line"><span class="comment"># 3. 打印出UID不等于0的行号和UID和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3!=0&#123;print NR"\t"$3"\t"$1&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打印出行号和用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print NR"\t"$1&#125;'</span> /tmp/passwd</span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;printf("%s\t%s\n", NR, $1)&#125;'</span> /tmp/passwd</span><br></pre></td></tr></table></figure><h1 id="逻辑计算"><a href="#逻辑计算" class="headerlink" title="逻辑计算"></a>逻辑计算</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [option] &apos;[BEGIN&#123;awk 操作命令&#125;]pattern&#123;awk 操作命令&#125;[END&#123;awk 操作命令&#125;]&apos; file(s)</span><br></pre></td></tr></table></figure><p>这里的<code>BEGIN</code>和<code>END</code>可以进行一些初始化操作和结尾操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 统计 / 文件夹下所有文件的大小总和, BEGIN可以声明变量</span></span><br><span class="line">ll / | awk <span class="string">'BEGIN&#123;size=0&#125;&#123;size+=$5&#125;END&#123;print "size:"size/1024/1024"M"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 统计 /etc/passwd 下有多少个用户, 用正则表达式 ^$ 排除空行</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;$1!~/^$/&#123;count++&#125;END&#123;print "count:"count&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 打印出UID大于100的行号和用户名, 加上表头和表尾</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;print "NR\tUsername"&#125;&#123;if($3&gt;100) print NR"\t"$1&#125;END&#123;print "-------"FILENAME"-------"&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 使用数组记录所有UID大于100的用户名</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;&#123;if($3&gt;100)name[count++]=$1&#125;END&#123;for(i=0;i&lt;count;i++) print i"\t"name[i]&#125;'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 分别统计LISTEN和CONNECTED的连接数量</span></span><br><span class="line">netstat -anp | awk <span class="string">'$6~/(LISTEN)|(CONNECTED)/&#123;sum[$6]++&#125;END&#123;for(i in sum) print i" : "sum[i]&#125;'</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/awk_of_Linux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>GitHub删除敏感commit</title>
      <link>https://ahaochan.github.io/posts/Delete_sensitive_submissions_in_Github.html</link>
      <guid>https://ahaochan.github.io/posts/Delete_sensitive_submissions_in_Github.html</guid>
      <pubDate>Mon, 19 Mar 2018 13:52:15 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;GitHub&lt;/code&gt;上提交项目时, 有时会把密钥等敏感信息不小心提交上去, 这时候需要删除&lt;code&gt;commit&lt;/code&gt;。而&lt;code&gt;GitHub&lt;/code&gt;自身是不支持删除&lt;code&gt;commit&lt;/code&gt;的, 需要借助&lt;code&gt;Git&lt;/code&gt;来删除。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>GitHub</code>上提交项目时, 有时会把密钥等敏感信息不小心提交上去, 这时候需要删除<code>commit</code>。而<code>GitHub</code>自身是不支持删除<code>commit</code>的, 需要借助<code>Git</code>来删除。</p><a id="more"></a><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>打开一个文件夹, 在里面打开<code>Git</code>命令行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. clone 整个项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> 项目路径</span><br><span class="line"><span class="comment"># 2. 查看最近4条commit记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -n 4</span><br><span class="line">commit abcdefg1234567 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Ahaochan &lt;844394093@qq.com&gt;</span><br><span class="line">Date:   Wed Jan 3 09:06:34 2018 +0800</span><br><span class="line"><span class="comment"># 3. 根据commit-id回滚</span></span><br><span class="line">git reset --hard abcdefg1234567 </span><br><span class="line"><span class="comment"># 4. 强制push到GitHub上</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.2 代码回滚：Reset、Checkout、Revert 的选择" target="_blank" rel="noopener">5.2 代码回滚：Reset、Checkout、Revert 的选择</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Delete_sensitive_submissions_in_Github.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>jQuery的clone陷阱</title>
      <link>https://ahaochan.github.io/posts/Cloning_trap_of_jQuery.html</link>
      <guid>https://ahaochan.github.io/posts/Cloning_trap_of_jQuery.html</guid>
      <pubDate>Mon, 19 Mar 2018 13:48:46 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;clone()&lt;/code&gt; 方法生成被选元素的副本，包含子节点、文本和属性。&lt;br&gt;这里的属性, 包括了 &lt;code&gt;id&lt;/code&gt;。当&lt;code&gt;clone&lt;/code&gt;了&lt;code&gt;id&lt;/code&gt;后, 获取&lt;code&gt;id&lt;/code&gt;将会获取第一个匹配&lt;code&gt;id&lt;/code&gt;的元素。造成不可预期的后果。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>clone()</code> 方法生成被选元素的副本，包含子节点、文本和属性。<br>这里的属性, 包括了 <code>id</code>。当<code>clone</code>了<code>id</code>后, 获取<code>id</code>将会获取第一个匹配<code>id</code>的元素。造成不可预期的后果。<br><a id="more"></a></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p><a href="https://jsfiddle.net/ju8npczb/8/" target="_blank" rel="noopener">Demo地址</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. 更新 div-source 中的时间</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $time = $(<span class="string">'#time'</span>);</span></span><br><span class="line"><span class="javascript">  $time.html(<span class="string">'时间:'</span>+<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2. clone 到 div-clone 中</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $clone = $time.clone();</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.div-clone'</span>).html($clone);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是一个简单的页面, 每点击一次<strong>按钮</strong>, 就会更新<code>div-source</code>的时间, 再复制到<code>div-clone</code>中。<br>当第一次点击时, 页面如下, <code>div-clone</code>复制成功。</p><ol><li>更新<code>id</code>为<code>time</code>的元素文本为 <strong>现在的时间</strong></li><li>复制<code>id</code>为<code>time</code>的元素文本</li><li>粘贴到<code>div-clone</code>里面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>问题出在第二次点击时, 只会更新第一个<code>div</code>, 不更新第二个<code>div</code></p><ol><li>更新<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素文本为 <strong>现在的时间</strong>, 因为现在<code>id</code>为<code>time</code>的元素有两个。会更新第一个元素，也就是<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素</li><li>复制<code>div-clone</code>下的<code>id</code>为<code>time</code>的元素文本</li><li>粘贴到<code>div-clone</code>里面</li><li><code>div-source</code>没被操作<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>复制时间到第一个div中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-clone"</span>&gt;</span></span><br><span class="line">     // 注意这里!!!有两个id为time的元素</span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 15:01:05 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-source"</span>&gt;</span> </span><br><span class="line">     // 注意这里!!!有两个id为time的元素</span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>时间:Wed Mar 14 2018 14:53:15 GMT+0800 (中国标准时间)<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 第二次点击, 预期是更新 div-source 的时间, 实际会更新 div-clone 中的时间</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $time = $(<span class="string">'#time'</span>);</span></span><br><span class="line"><span class="javascript">  $time.html(<span class="string">'时间:'</span>+<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $clone = $time.clone();</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.div-clone'</span>).html($clone);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>clone</code>最好不要复制带有<code>id</code>属性的元素, 否则会发生不可预期的错误。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://www.w3school.com.cn/jquery/manipulation_clone.asp" target="_blank" rel="noopener">jQuery 文档操作 - clone() 方法</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Cloning_trap_of_jQuery.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>call和apply的区别</title>
      <link>https://ahaochan.github.io/posts/The_difference_between_call_and_apply.html</link>
      <guid>https://ahaochan.github.io/posts/The_difference_between_call_and_apply.html</guid>
      <pubDate>Sat, 03 Feb 2018 10:05:47 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;两者的异同&quot;&gt;&lt;a href=&quot;#两者的异同&quot; class=&quot;headerlink&quot; title=&quot;两者的异同&quot;&gt;&lt;/a&gt;两者的异同&lt;/h1&gt;&lt;p&gt;&lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;apply&lt;/code&gt; 都是为了改变 &lt;code&gt;this&lt;/code&gt; 而存在的。&lt;br&gt;两者可以说是完全一致, 唯一的不同就在于接收的参数的&lt;strong&gt;形式&lt;/strong&gt;不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call: 接收&lt;strong&gt;多个&lt;/strong&gt;参数&lt;/li&gt;
&lt;li&gt;apply: 接收&lt;strong&gt;一个&lt;/strong&gt;数组参数&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="两者的异同"><a href="#两者的异同" class="headerlink" title="两者的异同"></a>两者的异同</h1><p><code>call</code> 和 <code>apply</code> 都是为了改变 <code>this</code> 而存在的。<br>两者可以说是完全一致, 唯一的不同就在于接收的参数的<strong>形式</strong>不同。</p><ul><li>call: 接收<strong>多个</strong>参数</li><li>apply: 接收<strong>一个</strong>数组参数</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数功能, 打印 this 和 所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this:"</span>+<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"arguments["</span>+i+<span class="string">"]="</span>+<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// this:[object Window]</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br><span class="line"></span><br><span class="line">f.call(<span class="string">'我是this'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 接收多个参数</span></span><br><span class="line"><span class="comment">// this:我是this</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">f.apply(<span class="string">'我是this'</span>, arr); <span class="comment">// 接收一个数组参数</span></span><br><span class="line"><span class="comment">// this:我是this</span></span><br><span class="line"><span class="comment">// arguments[0]=1</span></span><br><span class="line"><span class="comment">// arguments[1]=2</span></span><br><span class="line"><span class="comment">// arguments[2]=3</span></span><br></pre></td></tr></table></figure><p>可以粗略的理解为如下Java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(String... strs)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(String[] strs)</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/The_difference_between_call_and_apply.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>SQL Server分页</title>
      <link>https://ahaochan.github.io/posts/paging_query_of_SQL_Server.html</link>
      <guid>https://ahaochan.github.io/posts/paging_query_of_SQL_Server.html</guid>
      <pubDate>Sat, 03 Feb 2018 09:59:34 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;基于&lt;code&gt;Mybatis&lt;/code&gt;的&lt;a href=&quot;http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;动态SQL&lt;/a&gt;。&lt;br&gt;使用&lt;a href=&quot;https://github.com/alibaba/fastjson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fastjson&lt;/a&gt;格式化输出数据。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>基于<code>Mybatis</code>的<a href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">动态SQL</a>。<br>使用<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">fastjson</a>格式化输出数据。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; getStudent(<span class="meta">@Param</span>(<span class="string">"sex"</span>) String sex,</span><br><span class="line">                              <span class="meta">@Param</span>(<span class="string">"page"</span>) <span class="keyword">int</span> page, <span class="meta">@Param</span>(<span class="string">"pageSize"</span>) <span class="keyword">int</span> pageSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao dao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找性别为男, 分页大小为10, 的第2页数据</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data = dao.getStudent(<span class="string">"男"</span>, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SQL-Server-2005"><a href="#SQL-Server-2005" class="headerlink" title="SQL Server 2005"></a>SQL Server 2005</h1><p>在2005之后, 使用<code>ROW_NUMBER()</code>函数标记记录的<strong>行号</strong>, 然后再使用<code>where</code>进行筛选。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="getStudent" resultType="Map"&gt;</span><br><span class="line">    &lt;bind name="skip" value="(page-1)*pageSize"/&gt;</span><br><span class="line">    &lt;bind name="record" value="page*pageSize"/&gt;</span><br><span class="line">    <span class="keyword">SELECT</span>  *</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> TOP <span class="number">100</span> <span class="keyword">PERCENT</span> tmp.*, </span><br><span class="line">            ROW_NUMBER() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> tmp.birthday <span class="keyword">desc</span>) <span class="keyword">AS</span> row_num</span><br><span class="line">        <span class="keyword">FROM</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.id, s.name, <span class="keyword">CONVERT</span> (<span class="built_in">VARCHAR</span>(<span class="number">10</span>), s.birthday, <span class="number">120</span>) <span class="keyword">AS</span> birthday</span><br><span class="line">            <span class="keyword">FROM</span> student s</span><br><span class="line">            <span class="keyword">WHERE</span> s.sex = $&#123;sex&#125;</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> s.birthday</span><br><span class="line">        ) tmp</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> row_num</span><br><span class="line">    ) tmp</span><br><span class="line">    &lt;![CDATA[<span class="keyword">WHERE</span> row_num &gt; $&#123;<span class="keyword">skip</span>&#125; <span class="keyword">and</span> row_num &lt;= $&#123;<span class="built_in">record</span>&#125;]]&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></p><h1 id="SQL-Server-2012"><a href="#SQL-Server-2012" class="headerlink" title="SQL Server 2012"></a>SQL Server 2012</h1><p>在2012之后, 使用<a href="https://technet.microsoft.com/zh-cn/library/gg699618.aspx" target="_blank" rel="noopener">OFFSET FETCH 子句</a>进行分页处理。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="getStudent" resultType="Map"&gt;</span><br><span class="line">    &lt;bind name="skip" value="(page-1)*pageSize"/&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.id, s.name, <span class="keyword">CONVERT</span> (<span class="built_in">VARCHAR</span>(<span class="number">10</span>), s.birthday, <span class="number">120</span>) <span class="keyword">AS</span> birthday</span><br><span class="line">    <span class="keyword">FROM</span> student s</span><br><span class="line">    <span class="keyword">WHERE</span> s.sex = $&#123;sex&#125;</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> s.birthday</span><br><span class="line">    <span class="keyword">OFFSET</span> $&#123;<span class="keyword">skip</span>&#125; <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> $&#123;pageSize&#125; <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/paging_query_of_SQL_Server.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux下的定时任务</title>
      <link>https://ahaochan.github.io/posts/Timing_tasks_of_Linux.html</link>
      <guid>https://ahaochan.github.io/posts/Timing_tasks_of_Linux.html</guid>
      <pubDate>Sat, 03 Feb 2018 09:17:46 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;同步数据之类的工作需要定时去完成, 如果要人工去做, 那是费时费力的。&lt;br&gt;既然是定时, 有规律可循, 那就应该使用编程完成, 而不是依赖人力完成。&lt;br&gt;&lt;code&gt;Java&lt;/code&gt; 有 &lt;code&gt;Quartz&lt;/code&gt; 可以完成。&lt;code&gt;Linux&lt;/code&gt; 和 &lt;code&gt;Windows&lt;/code&gt; 也有相同的工具。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>同步数据之类的工作需要定时去完成, 如果要人工去做, 那是费时费力的。<br>既然是定时, 有规律可循, 那就应该使用编程完成, 而不是依赖人力完成。<br><code>Java</code> 有 <code>Quartz</code> 可以完成。<code>Linux</code> 和 <code>Windows</code> 也有相同的工具。</p><a id="more"></a><h1 id="一次执行和多次执行"><a href="#一次执行和多次执行" class="headerlink" title="一次执行和多次执行"></a>一次执行和多次执行</h1><p>一次执行: <code>at</code>命令, 需要<code>atd</code>服务的支持。<br>多次执行: <code>crontab</code>命令, 需要<code>crond</code>服务的支持。</p><h1 id="只执行一次的定时任务"><a href="#只执行一次的定时任务" class="headerlink" title="只执行一次的定时任务"></a>只执行一次的定时任务</h1><h2 id="打开atd服务"><a href="#打开atd服务" class="headerlink" title="打开atd服务"></a>打开atd服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保打开 atd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /etc/init.d/atd restart</span></span><br><span class="line">停止 atd：                                                 [确定]</span><br><span class="line">启动 atd：                                                 [确定]</span><br><span class="line"><span class="comment"># 将启动 atd 服务写入配置文件, 开机自动打开</span></span><br><span class="line">[root@localhost  ~]<span class="comment"># chkconfig atd on</span></span><br></pre></td></tr></table></figure><h2 id="指定允许使用at的用户"><a href="#指定允许使用at的用户" class="headerlink" title="指定允许使用at的用户"></a>指定允许使用at的用户</h2><p><code>at</code> 有两个重要的文件, 用来限制可以使用<code>at</code>定时任务的用户。<br>一个用户名占一行。<br><code>/etc/at.allow</code>白名单和<code>/etc/at.deny</code>黑名单。<br><code>at</code>根据文件是否存在判断使用白名单或者黑名单。</p><table><thead><tr><th style="text-align:center"><code>/etc/at.allow</code></th><th style="text-align:center"><code>/etc/at.deny</code></th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">√</td><td style="text-align:center">无论是否存在</td><td style="text-align:center">只允许<code>/etc/at.allow</code>的用户执行<code>at</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">禁止<code>/etc/at.deny</code>的用户执行<code>at</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">只有<code>root</code>能执行<code>at</code></td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一次性的5分钟后创建文件的定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># at -m now + 5 minutes </span></span><br><span class="line">at&gt; cat <span class="string">'now+5minutes file'</span> &gt; /tmp/now+5minutes.file</span><br><span class="line">at&gt; <span class="built_in">echo</span> <span class="string">'execute at task'</span> <span class="comment"># 使用 -m 选项可以将输出信息发送到email中</span></span><br><span class="line">at&gt; &lt;EOT&gt; <span class="comment"># 按Ctrl+D结束输入</span></span><br><span class="line">job 6 at 2017-10-19 04:31</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看at定时任务队列(queue), 或者 at -l</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atq</span></span><br><span class="line">62017-10-19 04:31 a root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查询定时任务的内容, -c 指定任务号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># at -c 6</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 省略一堆环境变量</span></span><br><span class="line"><span class="comment"># 进入创建定时任务时所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root || &#123;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'Execution directory inaccessible'</span> &gt;&amp;2</span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line">cat <span class="string">'now+5minutes file'</span> &gt; /tmp/now+5minutes.file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'execute at task'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 根据任务号6, 移除(remove)定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atrm 6</span></span><br><span class="line"><span class="comment"># 5. 再次查看任务列表, 没有定时任务, 已经被删除了</span></span><br><span class="line">[root@localhost ~]<span class="comment"># atq</span></span><br></pre></td></tr></table></figure><h2 id="其他的时间格式"><a href="#其他的时间格式" class="headerlink" title="其他的时间格式"></a>其他的时间格式</h2><p>除了用<code>now + 5 minutes</code>指定时间外, 还有其他的时间格式</p><table><thead><tr><th style="text-align:center">时间格式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">HH:MM</td><td style="text-align:center">在HH时MM分执行一次</td></tr><tr><td style="text-align:center">HH:MM YYYY-MM-DD</td><td style="text-align:center">在YYYY年MM月DD日HH时MM分执行一次</td></tr><tr><td style="text-align:center">HH:MM[am/pm] [Month] [Date]</td><td style="text-align:center">在Month月Date日早上/下午HH时MM分执行一次, 月份是<strong>英文</strong>表示</td></tr><tr><td style="text-align:center">HH:MM[am/pm] + number [minutes/hours/days/weeks]</td><td style="text-align:center">在早上/下午HH时MM分的number分钟/小时/天/周后执行一次</td></tr></tbody></table><h2 id="batch空闲时运行"><a href="#batch空闲时运行" class="headerlink" title="batch空闲时运行"></a>batch空闲时运行</h2><p><code>batch</code>可以控制在工作负载低于<code>0.8</code>的时候执行一次定时任务。<br>工作负载为1, 说明这个时间点有1个程序在运行。<br>工作负载为2, 说明这个时间点有2个程序在运行。<br>负载越高, 说明CPU单位时间内切换程序的次数越多。<br>当然, 程序不可能一直在运算, 所以也有低于1的情况产生。<br><code>batch</code>可以避免在程序繁忙的时候执行一些操作, 比如定时重启。让定时任务延后运行。<br>可以看到最后一行代码是执行了<code>at</code>命令, 只是附带了一些参数而已。<br>和<code>at</code>命令一样的用法。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nl /usr/bin/batch</span></span><br><span class="line">42  <span class="built_in">exec</span> /usr/bin/at <span class="variable">$OPT_f</span> <span class="variable">$OPT_m</span> <span class="variable">$OPT_q</span> <span class="variable">$OPT_v</span> <span class="variable">$OPT_V</span> <span class="variable">$time_date_arg</span></span><br></pre></td></tr></table></figure></p><h1 id="多次执行的定时任务"><a href="#多次执行的定时任务" class="headerlink" title="多次执行的定时任务"></a>多次执行的定时任务</h1><p><code>Java</code>下有<code>Quartz</code>这个定时任务框架, 也使用到了<code>corn</code>表达式。<br><code>Linux</code>下的多次执行的定时任务是通过<code>cron</code>服务实现的。<br>检查<code>crontab</code>工具是否安装: <code>crontab -l</code><br>检查<code>crond</code>服务是否启动: <code>service  crond status</code></p><h2 id="指定允许使用cron的用户"><a href="#指定允许使用cron的用户" class="headerlink" title="指定允许使用cron的用户"></a>指定允许使用cron的用户</h2><p>和<code>at</code>一样, <code>cron</code>也有两个文件用来限制可以使用<code>cron</code>定时任务的用户。<br>一个用户名占一行。<br><code>/etc/cron.allow</code>白名单和<code>/etc/cron.deny</code>黑名单。</p><table><thead><tr><th style="text-align:center"><code>/etc/cron.allow</code></th><th style="text-align:center"><code>/etc/cron.deny</code></th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">√</td><td style="text-align:center">无论是否存在</td><td style="text-align:center">只允许<code>/etc/cron.allow</code>的用户执行<code>cron</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">禁止<code>/etc/cron.deny</code>的用户执行<code>cron</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">只有<code>root</code>能执行<code>cron</code></td></tr></tbody></table><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>/etc/crontab</code>文件存储了<strong>系统</strong>的定时任务<br><code>/var/spool/cron/用户名</code>文件存储了各个<strong>用户</strong>的定时任务<br><code>/etc/cron.allow</code>文件指定了允许执行定时任务的<strong>白名单</strong><br><code>/etc/cron.deny</code>文件指定了允许执行定时任务的<strong>黑名单</strong></p><p>通过查看<code>/etc/crontab</code>可以看到看到<strong>系统</strong>的定时任务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/crontab </span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># run-parts 后面跟一个目录, 可以执行目录下所有可执行文件</span></span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure></p><h1 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h1><p>从上可以看出cron表达式的格式如下</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">分</th><th style="text-align:center">时</th><th style="text-align:center">日</th><th style="text-align:center">月</th><th style="text-align:center">星期几</th><th style="text-align:center">用户名</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">取值范围</td><td style="text-align:center">0~59</td><td style="text-align:center">0~23</td><td style="text-align:center">1~31</td><td style="text-align:center">1~12</td><td style="text-align:center">0~7(0或7都是星期天)</td><td style="text-align:center">可选</td><td style="text-align:center">命令</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># who</span></span><br><span class="line">ahao     pts/1        2017-10-19 06:40 (192.168.94.121)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 编辑任务, 每分钟输出一次hello到终端屏幕/dev/pts/1上</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e</span></span><br><span class="line">*/1 * * * * <span class="built_in">echo</span> <span class="string">'hello'</span> &gt; /dev/pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看定时任务列表</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -l</span></span><br><span class="line">*/1 * * * * <span class="built_in">echo</span> <span class="string">'hello'</span> &gt; /dev/pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 清空定时任务, 单项删除用 crontab -e 编辑</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -r</span></span><br></pre></td></tr></table></figure><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>具体的用法, 只要看懂下面几个例子就行了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天21:30重启apache</span></span><br><span class="line">30 21 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每月1、10、22日4:45重启apache, 逗号表示或</span></span><br><span class="line">45 4 1,10,22 * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每月的1-10日4:45重启apache, 横杠表示区间</span></span><br><span class="line">45 4 1-10 * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔2分钟重启apache, 斜杠表示每隔一段时间</span></span><br><span class="line">*/2 * * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天23点到7点每隔1小时重启apache</span></span><br><span class="line">0 23-7/1 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天18:00到23:00每隔30分钟重启apache</span></span><br><span class="line">*/30 18-23 * * * service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4月的1-7号或每个星期日早晨1时59分重启apache</span></span><br><span class="line">59 1 1-7 * 4 0 service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4月的第1个星期日早晨1时59分重启apache, 第三个时间位置和第五个时间位置是【或】的关系</span></span><br><span class="line">59 1 1-7 4 * <span class="built_in">test</span> $(date +%w) -eq 0 &amp;&amp; service httpd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每30秒重启apache, 通过sleep进行精确到秒级的操作, 注意要两个任务都存在</span></span><br><span class="line">*/1 * * * * service httpd restart</span><br><span class="line">*/1 * * * * sleep 30s; service httpd restart</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://man.linuxde.net/at" target="_blank" rel="noopener">at命令</a></li><li><a href="http://man.linuxde.net/crontab" target="_blank" rel="noopener">crontab命令</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Timing_tasks_of_Linux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux之sudo权限</title>
      <link>https://ahaochan.github.io/posts/sudo_permissions_of_Linux.html</link>
      <guid>https://ahaochan.github.io/posts/sudo_permissions_of_Linux.html</guid>
      <pubDate>Sat, 03 Feb 2018 09:17:05 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;sudo权限, 是可以临时把用户变成另一个用户(比如root)去执行某个命令。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>sudo权限, 是可以临时把用户变成另一个用户(比如root)去执行某个命令。</p><a id="more"></a><h1 id="添加sudo权限"><a href="#添加sudo权限" class="headerlink" title="添加sudo权限"></a>添加sudo权限</h1><p>使用<code>visudo</code>命令。即可修改<code>/etc/sudoers</code>文件。<br>切换到最后一行。输入命令即可。<br>格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名  允许sudo的远程ip=(可使用的身份) 授权命令(绝对路径)</span><br><span class="line">%组名   允许sudo的远程ip=(可使用的身份) 授权命令(绝对路径)</span><br></pre></td></tr></table></figure></p><p>比如<code>shutdown -r now</code>重启命令, 不能被普通用户执行。<br>现在要赋予<code>ahao</code>用户重启服务器的权限。<br>命令越详细, 权限越小。最好写绝对路劲。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ahao    ALL=(ALL)       /sbin/shutdown -r now</span><br></pre></td></tr></table></figure></p><p>这里的<code>ALL=(ALL)</code>的意思是</p><ol><li>左边的ALL, 表示被管理的主机的地址, 即是哪个<strong>远程主机</strong>或<strong>ip</strong>登录的这台服务器。</li><li>右边的ALL, 表示用户可使用的身份, <strong>省略的话会赋予root权限</strong>。</li></ol><p>下面是个简单的例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 临时切换为 root , 执行 visudo</span></span><br><span class="line">[ahao@localhost ~]$ su -c <span class="string">"/usr/sbin/visudo"</span> root</span><br><span class="line">    ahao    ALL=(ALL)       /sbin/shutdown -r now</span><br><span class="line"><span class="comment"># 2. 查看可用sudo命令</span></span><br><span class="line">[ahao@localhost ~]$ sudo -l </span><br><span class="line">用户 ahao 可以在该主机上运行以下命令：</span><br><span class="line">    (ALL) /sbin/shutdown -r now</span><br><span class="line"><span class="comment"># 3. 普通用户执行sudo赋予的命令</span></span><br><span class="line">[ahao@localhost ~]$ sudo /sbin/shutdown -r now </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. root用户可以随意切换用户, 随意执行sudo命令</span></span><br><span class="line"><span class="comment"># 下面root以user1的身份创建/tmp/hello文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo -u user1 touch /tmp/hello</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /tmp/hhh </span></span><br><span class="line">-rw-r--r-- 1 user1 user1 0 10-18 08:29 /tmp/hello</span><br></pre></td></tr></table></figure></p><h1 id="sudo支持正则、取反"><a href="#sudo支持正则、取反" class="headerlink" title="sudo支持正则、取反"></a>sudo支持正则、取反</h1><p>添加以下规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ahao    ALL=/usr/sbin/useradd # 赋予用户创建角色的权限</span><br><span class="line">ahao    ALL=/usr/bin/passwd   # 赋予用户修改密码的权限, 危险!!</span><br></pre></td></tr></table></figure></p><p>为<code>ahao</code>用户添加<strong>创建角色</strong>的权限, 还要添加<strong>修改密码</strong>的权限, 才能真正使用创建的用户。<br>但是如果使用上述规则, 则会允许<code>ahao</code>执行<code>/usr/bin/passwd root</code>修改<code>root</code>的密码, 这样很<strong>不安全</strong>。</p><p>修改为以下规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ahao    ALL=/usr/sbin/useradd</span><br><span class="line">ahao    ALL=/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd &quot;&quot;, !/usr/bin/passwd root</span><br><span class="line"># 使用正则表达式限定用户名为字母的用户, 使用 ! 取反, 不允许修改root的密码</span><br></pre></td></tr></table></figure></p><h1 id="sudo的别名"><a href="#sudo的别名" class="headerlink" title="sudo的别名"></a>sudo的别名</h1><p>调用<code>visudo</code>命令, 插入别名, 别名名称必须大写, 多个值用逗号分隔。</p><ul><li>用户别名: <code>User_Alias MYUSER = user1, user2, user3</code></li><li>主机别名: <code>Host_Alias MYHOST = 192.168.0.1, 192.168.0.2</code></li><li>命令别名: <code>Cmnd_Alias MYCMD = !/usr/bin/passwd, /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root</code></li></ul><h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><p><code>sudo</code>很容易造成不安全的行为, 如同上面的修改密码的权限。<br>所以在使用的时候一定要注意安全问题。</p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/sudo_permissions_of_Linux.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>在已搭建的SSM环境直接执行sql语句</title>
      <link>https://ahaochan.github.io/posts/execute_sql_statement_in_SSM_environment.html</link>
      <guid>https://ahaochan.github.io/posts/execute_sql_statement_in_SSM_environment.html</guid>
      <pubDate>Sat, 03 Feb 2018 06:47:32 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天遇到个需求, 需要用&lt;code&gt;Java&lt;/code&gt;代码对数据处理后批量执行一些&lt;code&gt;SQL&lt;/code&gt;语句, 这种是一次性的需求。&lt;br&gt;写一个&lt;code&gt;Mapper.xml&lt;/code&gt;又显得太繁琐。自己写&lt;code&gt;JDBC&lt;/code&gt;又要重新加载数据库驱动创建数据库连接，更累。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天遇到个需求, 需要用<code>Java</code>代码对数据处理后批量执行一些<code>SQL</code>语句, 这种是一次性的需求。<br>写一个<code>Mapper.xml</code>又显得太繁琐。自己写<code>JDBC</code>又要重新加载数据库驱动创建数据库连接，更累。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>编写<code>Class</code>代码不可取。缺点有二:</p><ol><li>修改<code>Class</code>需要重启<code>Tomcat</code>。</li><li>需要把<code>Class</code>设置为一个<code>Controller</code>。</li></ol><p>改为使用<code>JSP</code>。以上两个缺点都没了。</p><h1 id="使用JdbcTemplate"><a href="#使用JdbcTemplate" class="headerlink" title="使用JdbcTemplate"></a>使用JdbcTemplate</h1><p>因为是一次性的需求。写一个<code>Mapper.xml</code>又显得太繁琐。干脆就直接舍弃获取<code>Mybatis SqlSession</code>的方式。<br>使用<code>Spring Jdbc</code>自带的<code>JdbcTemplate</code>。</p><p>在<code>Spring</code>配置文件中添加<code>JdbcTemplate Bean</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>JSP</code>页面获取这个<code>Bean</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> language=<span class="string">"java"</span> contentType=<span class="string">"text/html;charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 1. 获取上下文</span></span><br><span class="line">    WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletConfig().getServletContext());</span><br><span class="line">    <span class="comment">// 2. 获取Bean</span></span><br><span class="line">    JdbcTemplate template = (JdbcTemplate) context.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    <span class="comment">// 3. 执行sql语句 ( 使用fastjson转化为json格式 ) </span></span><br><span class="line">    List list = template.queryForList(<span class="string">"select * from mytable"</span>);</span><br><span class="line">    out.print(<span class="string">"测试:"</span>+ JSONObject.toJSONString(list));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/execute_sql_statement_in_SSM_environment.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何优雅的使用GitHub的js脚本</title>
      <link>https://ahaochan.github.io/posts/The_Best_Practices_for_Using_GitHub&#39;s_JavaScript.html</link>
      <guid>https://ahaochan.github.io/posts/The_Best_Practices_for_Using_GitHub&#39;s_JavaScript.html</guid>
      <pubDate>Sat, 03 Feb 2018 06:27:28 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;GitHub&lt;/code&gt;上有很多优秀的开源脚本, 但是不能直接使用, 需要下载下来保存在自己的项目中。&lt;br&gt;如果是使用&lt;a href=&quot;https://jsfiddle.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JSFiddle&lt;/a&gt;进行演示的话, 只能通过&lt;code&gt;url&lt;/code&gt;引用(当然如果你不嫌累长篇大段的CV大法另当别论)。&lt;br&gt;即使是直接引用&lt;code&gt;raw&lt;/code&gt;也会抛出异常, &lt;code&gt;GitHub&lt;/code&gt;的&lt;code&gt;raw&lt;/code&gt;文件的&lt;code&gt;MIME type(Internet media type)&lt;/code&gt;为&lt;code&gt;text/plain&lt;/code&gt;。而&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;要求为&lt;code&gt;application/javascript&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Refused to execute script from &amp;apos;http://raw.githubusercontent.com/user/repo/branch/file.js&amp;apos; because its MIME type (&amp;apos;text/plain&amp;apos;) is not executable, and strict MIME type checking is enabled.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>GitHub</code>上有很多优秀的开源脚本, 但是不能直接使用, 需要下载下来保存在自己的项目中。<br>如果是使用<a href="https://jsfiddle.net/" target="_blank" rel="noopener">JSFiddle</a>进行演示的话, 只能通过<code>url</code>引用(当然如果你不嫌累长篇大段的CV大法另当别论)。<br>即使是直接引用<code>raw</code>也会抛出异常, <code>GitHub</code>的<code>raw</code>文件的<code>MIME type(Internet media type)</code>为<code>text/plain</code>。而<code>&lt;script&gt;</code>要求为<code>application/javascript</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Refused to execute script from &apos;http://raw.githubusercontent.com/user/repo/branch/file.js&apos; because its MIME type (&apos;text/plain&apos;) is not executable, and strict MIME type checking is enabled.</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>其实<code>GitHub</code>自己就提供了解决方案。<br>只要将<code>raw.githubusercontent.com</code>替换为<code>rawgit.com</code>(非生产环境)或<code>cdn.rawgit.com</code>即可。<br>项目生产环境最好使用<code>cdn</code>。</p><p>比如<code>http://raw.githubusercontent.com/user/repo/branch/file.js</code>替换为<code>http://cdn.rawgit.com/user/repo/tag/file.js</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/17341122/link-and-execute-external-javascript-file-hosted-on-github" target="_blank" rel="noopener">Link and execute external JavaScript file hosted on GitHub</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/The_Best_Practices_for_Using_GitHub&#39;s_JavaScript.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>检测F12控制台是否开启</title>
      <link>https://ahaochan.github.io/posts/Check_whether_the_F12_console_is_turned_on.html</link>
      <guid>https://ahaochan.github.io/posts/Check_whether_the_F12_console_is_turned_on.html</guid>
      <pubDate>Sat, 03 Feb 2018 06:25:56 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;吧友提到了拦截控制台的情况。&lt;a href=&quot;http://tieba.baidu.com/p/5507907516&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;别人页面中有个js文件,无法调试.有啥办法解除这个限制.&lt;/a&gt;&lt;br&gt;于是好奇找了下&lt;code&gt;stackoverflow&lt;/code&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Find out whether Chrome console is open&lt;/a&gt;, 但是代码不太懂。&lt;br&gt;后来dalao告诉我知乎有篇文章: &lt;a href=&quot;https://www.zhihu.com/question/24188524&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发中如何在JS文件中检测用户浏览器是否打开了调试面板（F12打开开发者工具）？&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>吧友提到了拦截控制台的情况。<a href="http://tieba.baidu.com/p/5507907516" target="_blank" rel="noopener">别人页面中有个js文件,无法调试.有啥办法解除这个限制.</a><br>于是好奇找了下<code>stackoverflow</code>, <a href="https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open" target="_blank" rel="noopener">Find out whether Chrome console is open</a>, 但是代码不太懂。<br>后来dalao告诉我知乎有篇文章: <a href="https://www.zhihu.com/question/24188524" target="_blank" rel="noopener">前端开发中如何在JS文件中检测用户浏览器是否打开了调试面板（F12打开开发者工具）？</a></p><a id="more"></a><h1 id="Chrome-适用-截止至63-0-3239-108"><a href="#Chrome-适用-截止至63-0-3239-108" class="headerlink" title="Chrome 适用(截止至63.0.3239.108)"></a>Chrome 适用(截止至63.0.3239.108)</h1><p>在控制台打开的时候, 打印<code>html</code>元素会去取<code>id</code>属性的值, 只要覆盖<code>id</code>属性的<code>get</code>方法, 就可以判断是否开启控制台。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">status: <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"devtool-status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> checkStatus;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 创建一个html元素, 不能使用普通Object, 两者日志处理方式不同</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> element = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript"><span class="comment">//var element = document.createElement('any');</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2. 重新定义该元素的get方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(element, <span class="string">'id'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    checkStatus=<span class="string">'on'</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 3. 定时检测控制台是否打开</span></span></span><br><span class="line"><span class="javascript">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    checkStatus = <span class="string">'off'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.1 不使用log, 使用debug, 避免污染控制台</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.debug(element);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#devtool-status'</span>).innerHTML = checkStatus;</span></span><br><span class="line"><span class="undefined">&#125;, 1000)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Firefox-适用-截止至57-0-4"><a href="#Firefox-适用-截止至57-0-4" class="headerlink" title="Firefox 适用(截止至57.0.4)"></a>Firefox 适用(截止至57.0.4)</h1><p>打印普通对象的日志会调用该对象的<code>toString</code>方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">status: <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"devtool-status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> checkStatus;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> devtools = <span class="regexp">/./</span>;</span></span><br><span class="line"><span class="javascript">devtools.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  checkStatus = <span class="string">'on'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    checkStatus = <span class="string">'off'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(devtools);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#devtool-status'</span>).innerHTML = checkStatus;</span></span><br><span class="line"><span class="undefined">&#125;, 1000)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open" target="_blank" rel="noopener">Find out whether Chrome console is open</a></li><li><a href="https://segmentfault.com/a/1190000012359015" target="_blank" rel="noopener">突破前端反调试–阻止页面不断debugger</a></li><li><a href="https://www.zhihu.com/question/24188524" target="_blank" rel="noopener">前端开发中如何在JS文件中检测用户浏览器是否打开了调试面板（F12打开开发者工具）？</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Check_whether_the_F12_console_is_turned_on.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用JavaScript判断浏览器类型</title>
      <link>https://ahaochan.github.io/posts/Use_JavaScript_to_determine_browser_type.html</link>
      <guid>https://ahaochan.github.io/posts/Use_JavaScript_to_determine_browser_type.html</guid>
      <pubDate>Sat, 03 Feb 2018 06:23:08 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;User-Agent&lt;/code&gt;判断浏览器是不可靠的。因为使用控制台可以随意的伪装&lt;code&gt;User-Agent&lt;/code&gt;。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>User-Agent</code>判断浏览器是不可靠的。因为使用控制台可以随意的伪装<code>User-Agent</code>。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>使用各浏览器特有的<strong>属性</strong>进行检测<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Opera 8.0+</span></span><br><span class="line"><span class="keyword">var</span> isOpera = (!!<span class="built_in">window</span>.opr &amp;&amp; !!opr.addons) || !!<span class="built_in">window</span>.opera || navigator.userAgent.indexOf(<span class="string">' OPR/'</span>) &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firefox 1.0+</span></span><br><span class="line"><span class="keyword">var</span> isFirefox = <span class="keyword">typeof</span> InstallTrigger !== <span class="string">'undefined'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Safari 3.0+ "[object HTMLElementConstructor]" </span></span><br><span class="line"><span class="keyword">var</span> isSafari = <span class="regexp">/constructor/i</span>.test(<span class="built_in">window</span>.HTMLElement) || (<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123; <span class="keyword">return</span> p.toString() === <span class="string">"[object SafariRemoteNotification]"</span>; &#125;)(!<span class="built_in">window</span>[<span class="string">'safari'</span>] || (<span class="keyword">typeof</span> safari !== <span class="string">'undefined'</span> &amp;&amp; safari.pushNotification));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Internet Explorer 6-11</span></span><br><span class="line"><span class="keyword">var</span> isIE = <span class="comment">/*@cc_on!@*/</span><span class="literal">false</span> || !!<span class="built_in">document</span>.documentMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edge 20+</span></span><br><span class="line"><span class="keyword">var</span> isEdge = !isIE &amp;&amp; !!<span class="built_in">window</span>.StyleMedia;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chrome 1+</span></span><br><span class="line"><span class="keyword">var</span> isChrome = !!<span class="built_in">window</span>.chrome &amp;&amp; !!<span class="built_in">window</span>.chrome.webstore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blink engine detection</span></span><br><span class="line"><span class="keyword">var</span> isBlink = (isChrome || isOpera) &amp;&amp; !!<span class="built_in">window</span>.CSS;</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent" target="_blank" rel="noopener">User-Agent MDN</a></li><li><a href="http://www.useragentstring.com/pages/useragentstring.php" target="_blank" rel="noopener">List of User Agent Strings</a></li><li><a href="https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser" target="_blank" rel="noopener">How to detect Safari, Chrome, IE, Firefox and Opera browser?</a></li></ul>]]></content:encoded>
      
      <comments>https://ahaochan.github.io/posts/Use_JavaScript_to_determine_browser_type.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
